/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/azure-devops-extension-api/Build/Build.js":
/*!****************************************************************!*\
  !*** ./node_modules/azure-devops-extension-api/Build/Build.js ***!
  \****************************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*
 * ---------------------------------------------------------
 * Copyright(C) Microsoft Corporation. All rights reserved.
 * ---------------------------------------------------------
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    var AgentStatus;
    (function (AgentStatus) {
        /**
         * Indicates that the build agent cannot be contacted.
         */
        AgentStatus[AgentStatus["Unavailable"] = 0] = "Unavailable";
        /**
         * Indicates that the build agent is currently available.
         */
        AgentStatus[AgentStatus["Available"] = 1] = "Available";
        /**
         * Indicates that the build agent has taken itself offline.
         */
        AgentStatus[AgentStatus["Offline"] = 2] = "Offline";
    })(AgentStatus = exports.AgentStatus || (exports.AgentStatus = {}));
    var AuditAction;
    (function (AuditAction) {
        AuditAction[AuditAction["Add"] = 1] = "Add";
        AuditAction[AuditAction["Update"] = 2] = "Update";
        AuditAction[AuditAction["Delete"] = 3] = "Delete";
    })(AuditAction = exports.AuditAction || (exports.AuditAction = {}));
    /**
     * Represents the desired scope of authorization for a build.
     */
    var BuildAuthorizationScope;
    (function (BuildAuthorizationScope) {
        /**
         * The identity used should have build service account permissions scoped to the project collection. This is useful when resources for a single build are spread across multiple projects.
         */
        BuildAuthorizationScope[BuildAuthorizationScope["ProjectCollection"] = 1] = "ProjectCollection";
        /**
         * The identity used should have build service account permissions scoped to the project in which the build definition resides. This is useful for isolation of build jobs to a particular team project to avoid any unintentional escalation of privilege attacks during a build.
         */
        BuildAuthorizationScope[BuildAuthorizationScope["Project"] = 2] = "Project";
    })(BuildAuthorizationScope = exports.BuildAuthorizationScope || (exports.BuildAuthorizationScope = {}));
    var BuildOptionInputType;
    (function (BuildOptionInputType) {
        BuildOptionInputType[BuildOptionInputType["String"] = 0] = "String";
        BuildOptionInputType[BuildOptionInputType["Boolean"] = 1] = "Boolean";
        BuildOptionInputType[BuildOptionInputType["StringList"] = 2] = "StringList";
        BuildOptionInputType[BuildOptionInputType["Radio"] = 3] = "Radio";
        BuildOptionInputType[BuildOptionInputType["PickList"] = 4] = "PickList";
        BuildOptionInputType[BuildOptionInputType["MultiLine"] = 5] = "MultiLine";
        BuildOptionInputType[BuildOptionInputType["BranchFilter"] = 6] = "BranchFilter";
    })(BuildOptionInputType = exports.BuildOptionInputType || (exports.BuildOptionInputType = {}));
    var BuildPhaseStatus;
    (function (BuildPhaseStatus) {
        /**
         * The state is not known.
         */
        BuildPhaseStatus[BuildPhaseStatus["Unknown"] = 0] = "Unknown";
        /**
         * The build phase completed unsuccessfully.
         */
        BuildPhaseStatus[BuildPhaseStatus["Failed"] = 1] = "Failed";
        /**
         * The build phase completed successfully.
         */
        BuildPhaseStatus[BuildPhaseStatus["Succeeded"] = 2] = "Succeeded";
    })(BuildPhaseStatus = exports.BuildPhaseStatus || (exports.BuildPhaseStatus = {}));
    /**
     * Specifies the desired ordering of builds.
     */
    var BuildQueryOrder;
    (function (BuildQueryOrder) {
        /**
         * Order by finish time ascending.
         */
        BuildQueryOrder[BuildQueryOrder["FinishTimeAscending"] = 2] = "FinishTimeAscending";
        /**
         * Order by finish time descending.
         */
        BuildQueryOrder[BuildQueryOrder["FinishTimeDescending"] = 3] = "FinishTimeDescending";
        /**
         * Order by queue time descending.
         */
        BuildQueryOrder[BuildQueryOrder["QueueTimeDescending"] = 4] = "QueueTimeDescending";
        /**
         * Order by queue time ascending.
         */
        BuildQueryOrder[BuildQueryOrder["QueueTimeAscending"] = 5] = "QueueTimeAscending";
        /**
         * Order by start time descending.
         */
        BuildQueryOrder[BuildQueryOrder["StartTimeDescending"] = 6] = "StartTimeDescending";
        /**
         * Order by start time ascending.
         */
        BuildQueryOrder[BuildQueryOrder["StartTimeAscending"] = 7] = "StartTimeAscending";
    })(BuildQueryOrder = exports.BuildQueryOrder || (exports.BuildQueryOrder = {}));
    var BuildReason;
    (function (BuildReason) {
        /**
         * No reason. This value should not be used.
         */
        BuildReason[BuildReason["None"] = 0] = "None";
        /**
         * The build was started manually.
         */
        BuildReason[BuildReason["Manual"] = 1] = "Manual";
        /**
         * The build was started for the trigger TriggerType.ContinuousIntegration.
         */
        BuildReason[BuildReason["IndividualCI"] = 2] = "IndividualCI";
        /**
         * The build was started for the trigger TriggerType.BatchedContinuousIntegration.
         */
        BuildReason[BuildReason["BatchedCI"] = 4] = "BatchedCI";
        /**
         * The build was started for the trigger TriggerType.Schedule.
         */
        BuildReason[BuildReason["Schedule"] = 8] = "Schedule";
        /**
         * The build was started for the trigger TriggerType.ScheduleForced.
         */
        BuildReason[BuildReason["ScheduleForced"] = 16] = "ScheduleForced";
        /**
         * The build was created by a user.
         */
        BuildReason[BuildReason["UserCreated"] = 32] = "UserCreated";
        /**
         * The build was started manually for private validation.
         */
        BuildReason[BuildReason["ValidateShelveset"] = 64] = "ValidateShelveset";
        /**
         * The build was started for the trigger ContinuousIntegrationType.Gated.
         */
        BuildReason[BuildReason["CheckInShelveset"] = 128] = "CheckInShelveset";
        /**
         * The build was started by a pull request. Added in resource version 3.
         */
        BuildReason[BuildReason["PullRequest"] = 256] = "PullRequest";
        /**
         * The build was started when another build completed.
         */
        BuildReason[BuildReason["BuildCompletion"] = 512] = "BuildCompletion";
        /**
         * The build was started when resources in pipeline triggered it
         */
        BuildReason[BuildReason["ResourceTrigger"] = 1024] = "ResourceTrigger";
        /**
         * The build was triggered for retention policy purposes.
         */
        BuildReason[BuildReason["Triggered"] = 1967] = "Triggered";
        /**
         * All reasons.
         */
        BuildReason[BuildReason["All"] = 2031] = "All";
    })(BuildReason = exports.BuildReason || (exports.BuildReason = {}));
    /**
     * This is not a Flags enum because we don't want to set multiple statuses on a build. However, when adding values, please stick to powers of 2 as if it were a Flags enum This will ensure that things that key off multiple result types (like labelling sources) continue to work
     */
    var BuildResult;
    (function (BuildResult) {
        /**
         * No result
         */
        BuildResult[BuildResult["None"] = 0] = "None";
        /**
         * The build completed successfully.
         */
        BuildResult[BuildResult["Succeeded"] = 2] = "Succeeded";
        /**
         * The build completed compilation successfully but had other errors.
         */
        BuildResult[BuildResult["PartiallySucceeded"] = 4] = "PartiallySucceeded";
        /**
         * The build completed unsuccessfully.
         */
        BuildResult[BuildResult["Failed"] = 8] = "Failed";
        /**
         * The build was canceled before starting.
         */
        BuildResult[BuildResult["Canceled"] = 32] = "Canceled";
    })(BuildResult = exports.BuildResult || (exports.BuildResult = {}));
    var BuildStatus;
    (function (BuildStatus) {
        /**
         * No status.
         */
        BuildStatus[BuildStatus["None"] = 0] = "None";
        /**
         * The build is currently in progress.
         */
        BuildStatus[BuildStatus["InProgress"] = 1] = "InProgress";
        /**
         * The build has completed.
         */
        BuildStatus[BuildStatus["Completed"] = 2] = "Completed";
        /**
         * The build is cancelling
         */
        BuildStatus[BuildStatus["Cancelling"] = 4] = "Cancelling";
        /**
         * The build is inactive in the queue.
         */
        BuildStatus[BuildStatus["Postponed"] = 8] = "Postponed";
        /**
         * The build has not yet started.
         */
        BuildStatus[BuildStatus["NotStarted"] = 32] = "NotStarted";
        /**
         * All status.
         */
        BuildStatus[BuildStatus["All"] = 47] = "All";
    })(BuildStatus = exports.BuildStatus || (exports.BuildStatus = {}));
    var ControllerStatus;
    (function (ControllerStatus) {
        /**
         * Indicates that the build controller cannot be contacted.
         */
        ControllerStatus[ControllerStatus["Unavailable"] = 0] = "Unavailable";
        /**
         * Indicates that the build controller is currently available.
         */
        ControllerStatus[ControllerStatus["Available"] = 1] = "Available";
        /**
         * Indicates that the build controller has taken itself offline.
         */
        ControllerStatus[ControllerStatus["Offline"] = 2] = "Offline";
    })(ControllerStatus = exports.ControllerStatus || (exports.ControllerStatus = {}));
    var DefinitionQuality;
    (function (DefinitionQuality) {
        DefinitionQuality[DefinitionQuality["Definition"] = 1] = "Definition";
        DefinitionQuality[DefinitionQuality["Draft"] = 2] = "Draft";
    })(DefinitionQuality = exports.DefinitionQuality || (exports.DefinitionQuality = {}));
    /**
     * Specifies the desired ordering of definitions.
     */
    var DefinitionQueryOrder;
    (function (DefinitionQueryOrder) {
        /**
         * No order
         */
        DefinitionQueryOrder[DefinitionQueryOrder["None"] = 0] = "None";
        /**
         * Order by created on/last modified time ascending.
         */
        DefinitionQueryOrder[DefinitionQueryOrder["LastModifiedAscending"] = 1] = "LastModifiedAscending";
        /**
         * Order by created on/last modified time descending.
         */
        DefinitionQueryOrder[DefinitionQueryOrder["LastModifiedDescending"] = 2] = "LastModifiedDescending";
        /**
         * Order by definition name ascending.
         */
        DefinitionQueryOrder[DefinitionQueryOrder["DefinitionNameAscending"] = 3] = "DefinitionNameAscending";
        /**
         * Order by definition name descending.
         */
        DefinitionQueryOrder[DefinitionQueryOrder["DefinitionNameDescending"] = 4] = "DefinitionNameDescending";
    })(DefinitionQueryOrder = exports.DefinitionQueryOrder || (exports.DefinitionQueryOrder = {}));
    var DefinitionQueueStatus;
    (function (DefinitionQueueStatus) {
        /**
         * When enabled the definition queue allows builds to be queued by users, the system will queue scheduled, gated and continuous integration builds, and the queued builds will be started by the system.
         */
        DefinitionQueueStatus[DefinitionQueueStatus["Enabled"] = 0] = "Enabled";
        /**
         * When paused the definition queue allows builds to be queued by users and the system will queue scheduled, gated and continuous integration builds. Builds in the queue will not be started by the system.
         */
        DefinitionQueueStatus[DefinitionQueueStatus["Paused"] = 1] = "Paused";
        /**
         * When disabled the definition queue will not allow builds to be queued by users and the system will not queue scheduled, gated or continuous integration builds. Builds already in the queue will not be started by the system.
         */
        DefinitionQueueStatus[DefinitionQueueStatus["Disabled"] = 2] = "Disabled";
    })(DefinitionQueueStatus = exports.DefinitionQueueStatus || (exports.DefinitionQueueStatus = {}));
    var DefinitionTriggerType;
    (function (DefinitionTriggerType) {
        /**
         * Manual builds only.
         */
        DefinitionTriggerType[DefinitionTriggerType["None"] = 1] = "None";
        /**
         * A build should be started for each changeset.
         */
        DefinitionTriggerType[DefinitionTriggerType["ContinuousIntegration"] = 2] = "ContinuousIntegration";
        /**
         * A build should be started for multiple changesets at a time at a specified interval.
         */
        DefinitionTriggerType[DefinitionTriggerType["BatchedContinuousIntegration"] = 4] = "BatchedContinuousIntegration";
        /**
         * A build should be started on a specified schedule whether or not changesets exist.
         */
        DefinitionTriggerType[DefinitionTriggerType["Schedule"] = 8] = "Schedule";
        /**
         * A validation build should be started for each check-in.
         */
        DefinitionTriggerType[DefinitionTriggerType["GatedCheckIn"] = 16] = "GatedCheckIn";
        /**
         * A validation build should be started for each batch of check-ins.
         */
        DefinitionTriggerType[DefinitionTriggerType["BatchedGatedCheckIn"] = 32] = "BatchedGatedCheckIn";
        /**
         * A build should be triggered when a GitHub pull request is created or updated. Added in resource version 3
         */
        DefinitionTriggerType[DefinitionTriggerType["PullRequest"] = 64] = "PullRequest";
        /**
         * A build should be triggered when another build completes.
         */
        DefinitionTriggerType[DefinitionTriggerType["BuildCompletion"] = 128] = "BuildCompletion";
        /**
         * All types.
         */
        DefinitionTriggerType[DefinitionTriggerType["All"] = 255] = "All";
    })(DefinitionTriggerType = exports.DefinitionTriggerType || (exports.DefinitionTriggerType = {}));
    var DefinitionType;
    (function (DefinitionType) {
        DefinitionType[DefinitionType["Xaml"] = 1] = "Xaml";
        DefinitionType[DefinitionType["Build"] = 2] = "Build";
    })(DefinitionType = exports.DefinitionType || (exports.DefinitionType = {}));
    var DeleteOptions;
    (function (DeleteOptions) {
        /**
         * No data should be deleted. This value should not be used.
         */
        DeleteOptions[DeleteOptions["None"] = 0] = "None";
        /**
         * The drop location should be deleted.
         */
        DeleteOptions[DeleteOptions["DropLocation"] = 1] = "DropLocation";
        /**
         * The test results should be deleted.
         */
        DeleteOptions[DeleteOptions["TestResults"] = 2] = "TestResults";
        /**
         * The version control label should be deleted.
         */
        DeleteOptions[DeleteOptions["Label"] = 4] = "Label";
        /**
         * The build should be deleted.
         */
        DeleteOptions[DeleteOptions["Details"] = 8] = "Details";
        /**
         * Published symbols should be deleted.
         */
        DeleteOptions[DeleteOptions["Symbols"] = 16] = "Symbols";
        /**
         * All data should be deleted.
         */
        DeleteOptions[DeleteOptions["All"] = 31] = "All";
    })(DeleteOptions = exports.DeleteOptions || (exports.DeleteOptions = {}));
    /**
     * Specifies the desired ordering of folders.
     */
    var FolderQueryOrder;
    (function (FolderQueryOrder) {
        /**
         * No order
         */
        FolderQueryOrder[FolderQueryOrder["None"] = 0] = "None";
        /**
         * Order by folder name and path ascending.
         */
        FolderQueryOrder[FolderQueryOrder["FolderAscending"] = 1] = "FolderAscending";
        /**
         * Order by folder name and path descending.
         */
        FolderQueryOrder[FolderQueryOrder["FolderDescending"] = 2] = "FolderDescending";
    })(FolderQueryOrder = exports.FolderQueryOrder || (exports.FolderQueryOrder = {}));
    var GetOption;
    (function (GetOption) {
        /**
         * Use the latest changeset at the time the build is queued.
         */
        GetOption[GetOption["LatestOnQueue"] = 0] = "LatestOnQueue";
        /**
         * Use the latest changeset at the time the build is started.
         */
        GetOption[GetOption["LatestOnBuild"] = 1] = "LatestOnBuild";
        /**
         * A user-specified version has been supplied.
         */
        GetOption[GetOption["Custom"] = 2] = "Custom";
    })(GetOption = exports.GetOption || (exports.GetOption = {}));
    var IssueType;
    (function (IssueType) {
        IssueType[IssueType["Error"] = 1] = "Error";
        IssueType[IssueType["Warning"] = 2] = "Warning";
    })(IssueType = exports.IssueType || (exports.IssueType = {}));
    var ProcessTemplateType;
    (function (ProcessTemplateType) {
        /**
         * Indicates a custom template.
         */
        ProcessTemplateType[ProcessTemplateType["Custom"] = 0] = "Custom";
        /**
         * Indicates a default template.
         */
        ProcessTemplateType[ProcessTemplateType["Default"] = 1] = "Default";
        /**
         * Indicates an upgrade template.
         */
        ProcessTemplateType[ProcessTemplateType["Upgrade"] = 2] = "Upgrade";
    })(ProcessTemplateType = exports.ProcessTemplateType || (exports.ProcessTemplateType = {}));
    var QueryDeletedOption;
    (function (QueryDeletedOption) {
        /**
         * Include only non-deleted builds.
         */
        QueryDeletedOption[QueryDeletedOption["ExcludeDeleted"] = 0] = "ExcludeDeleted";
        /**
         * Include deleted and non-deleted builds.
         */
        QueryDeletedOption[QueryDeletedOption["IncludeDeleted"] = 1] = "IncludeDeleted";
        /**
         * Include only deleted builds.
         */
        QueryDeletedOption[QueryDeletedOption["OnlyDeleted"] = 2] = "OnlyDeleted";
    })(QueryDeletedOption = exports.QueryDeletedOption || (exports.QueryDeletedOption = {}));
    var QueueOptions;
    (function (QueueOptions) {
        /**
         * No queue options
         */
        QueueOptions[QueueOptions["None"] = 0] = "None";
        /**
         * Create a plan Id for the build, do not run it
         */
        QueueOptions[QueueOptions["DoNotRun"] = 1] = "DoNotRun";
    })(QueueOptions = exports.QueueOptions || (exports.QueueOptions = {}));
    var QueuePriority;
    (function (QueuePriority) {
        /**
         * Low priority.
         */
        QueuePriority[QueuePriority["Low"] = 5] = "Low";
        /**
         * Below normal priority.
         */
        QueuePriority[QueuePriority["BelowNormal"] = 4] = "BelowNormal";
        /**
         * Normal priority.
         */
        QueuePriority[QueuePriority["Normal"] = 3] = "Normal";
        /**
         * Above normal priority.
         */
        QueuePriority[QueuePriority["AboveNormal"] = 2] = "AboveNormal";
        /**
         * High priority.
         */
        QueuePriority[QueuePriority["High"] = 1] = "High";
    })(QueuePriority = exports.QueuePriority || (exports.QueuePriority = {}));
    var RepositoryCleanOptions;
    (function (RepositoryCleanOptions) {
        /**
         * Run git clean -fdx && git reset --hard or Tf /scorch on $(build.sourcesDirectory)
         */
        RepositoryCleanOptions[RepositoryCleanOptions["Source"] = 0] = "Source";
        /**
         * Run git clean -fdx && git reset --hard or Tf /scorch on $(build.sourcesDirectory), also re-create $(build.binariesDirectory)
         */
        RepositoryCleanOptions[RepositoryCleanOptions["SourceAndOutputDir"] = 1] = "SourceAndOutputDir";
        /**
         * Re-create $(build.sourcesDirectory)
         */
        RepositoryCleanOptions[RepositoryCleanOptions["SourceDir"] = 2] = "SourceDir";
        /**
         * Re-create $(agnet.buildDirectory) which contains $(build.sourcesDirectory), $(build.binariesDirectory) and any folders that left from previous build.
         */
        RepositoryCleanOptions[RepositoryCleanOptions["AllBuildDir"] = 3] = "AllBuildDir";
    })(RepositoryCleanOptions = exports.RepositoryCleanOptions || (exports.RepositoryCleanOptions = {}));
    var ResultSet;
    (function (ResultSet) {
        /**
         * Include all repositories
         */
        ResultSet[ResultSet["All"] = 0] = "All";
        /**
         * Include most relevant repositories for user
         */
        ResultSet[ResultSet["Top"] = 1] = "Top";
    })(ResultSet = exports.ResultSet || (exports.ResultSet = {}));
    var ScheduleDays;
    (function (ScheduleDays) {
        /**
         * Do not run.
         */
        ScheduleDays[ScheduleDays["None"] = 0] = "None";
        /**
         * Run on Monday.
         */
        ScheduleDays[ScheduleDays["Monday"] = 1] = "Monday";
        /**
         * Run on Tuesday.
         */
        ScheduleDays[ScheduleDays["Tuesday"] = 2] = "Tuesday";
        /**
         * Run on Wednesday.
         */
        ScheduleDays[ScheduleDays["Wednesday"] = 4] = "Wednesday";
        /**
         * Run on Thursday.
         */
        ScheduleDays[ScheduleDays["Thursday"] = 8] = "Thursday";
        /**
         * Run on Friday.
         */
        ScheduleDays[ScheduleDays["Friday"] = 16] = "Friday";
        /**
         * Run on Saturday.
         */
        ScheduleDays[ScheduleDays["Saturday"] = 32] = "Saturday";
        /**
         * Run on Sunday.
         */
        ScheduleDays[ScheduleDays["Sunday"] = 64] = "Sunday";
        /**
         * Run on all days of the week.
         */
        ScheduleDays[ScheduleDays["All"] = 127] = "All";
    })(ScheduleDays = exports.ScheduleDays || (exports.ScheduleDays = {}));
    var ServiceHostStatus;
    (function (ServiceHostStatus) {
        /**
         * The service host is currently connected and accepting commands.
         */
        ServiceHostStatus[ServiceHostStatus["Online"] = 1] = "Online";
        /**
         * The service host is currently disconnected and not accepting commands.
         */
        ServiceHostStatus[ServiceHostStatus["Offline"] = 2] = "Offline";
    })(ServiceHostStatus = exports.ServiceHostStatus || (exports.ServiceHostStatus = {}));
    var SourceProviderAvailability;
    (function (SourceProviderAvailability) {
        /**
         * The source provider is available in the hosted environment.
         */
        SourceProviderAvailability[SourceProviderAvailability["Hosted"] = 1] = "Hosted";
        /**
         * The source provider is available in the on-premises environment.
         */
        SourceProviderAvailability[SourceProviderAvailability["OnPremises"] = 2] = "OnPremises";
        /**
         * The source provider is available in all environments.
         */
        SourceProviderAvailability[SourceProviderAvailability["All"] = 3] = "All";
    })(SourceProviderAvailability = exports.SourceProviderAvailability || (exports.SourceProviderAvailability = {}));
    var StageUpdateType;
    (function (StageUpdateType) {
        StageUpdateType[StageUpdateType["Cancel"] = 0] = "Cancel";
        StageUpdateType[StageUpdateType["Retry"] = 1] = "Retry";
        StageUpdateType[StageUpdateType["Run"] = 2] = "Run";
    })(StageUpdateType = exports.StageUpdateType || (exports.StageUpdateType = {}));
    var SupportLevel;
    (function (SupportLevel) {
        /**
         * The functionality is not supported.
         */
        SupportLevel[SupportLevel["Unsupported"] = 0] = "Unsupported";
        /**
         * The functionality is supported.
         */
        SupportLevel[SupportLevel["Supported"] = 1] = "Supported";
        /**
         * The functionality is required.
         */
        SupportLevel[SupportLevel["Required"] = 2] = "Required";
    })(SupportLevel = exports.SupportLevel || (exports.SupportLevel = {}));
    var TaskResult;
    (function (TaskResult) {
        TaskResult[TaskResult["Succeeded"] = 0] = "Succeeded";
        TaskResult[TaskResult["SucceededWithIssues"] = 1] = "SucceededWithIssues";
        TaskResult[TaskResult["Failed"] = 2] = "Failed";
        TaskResult[TaskResult["Canceled"] = 3] = "Canceled";
        TaskResult[TaskResult["Skipped"] = 4] = "Skipped";
        TaskResult[TaskResult["Abandoned"] = 5] = "Abandoned";
        TaskResult[TaskResult["ManuallyQueued"] = 6] = "ManuallyQueued";
        TaskResult[TaskResult["DependentOnManualQueue"] = 7] = "DependentOnManualQueue";
    })(TaskResult = exports.TaskResult || (exports.TaskResult = {}));
    var TimelineRecordState;
    (function (TimelineRecordState) {
        TimelineRecordState[TimelineRecordState["Pending"] = 0] = "Pending";
        TimelineRecordState[TimelineRecordState["InProgress"] = 1] = "InProgress";
        TimelineRecordState[TimelineRecordState["Completed"] = 2] = "Completed";
    })(TimelineRecordState = exports.TimelineRecordState || (exports.TimelineRecordState = {}));
    var ValidationResult;
    (function (ValidationResult) {
        ValidationResult[ValidationResult["OK"] = 0] = "OK";
        ValidationResult[ValidationResult["Warning"] = 1] = "Warning";
        ValidationResult[ValidationResult["Error"] = 2] = "Error";
    })(ValidationResult = exports.ValidationResult || (exports.ValidationResult = {}));
    var WorkspaceMappingType;
    (function (WorkspaceMappingType) {
        /**
         * The path is mapped in the workspace.
         */
        WorkspaceMappingType[WorkspaceMappingType["Map"] = 0] = "Map";
        /**
         * The path is cloaked in the workspace.
         */
        WorkspaceMappingType[WorkspaceMappingType["Cloak"] = 1] = "Cloak";
    })(WorkspaceMappingType = exports.WorkspaceMappingType || (exports.WorkspaceMappingType = {}));
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/azure-devops-extension-api/Build/BuildClient.js":
/*!**********************************************************************!*\
  !*** ./node_modules/azure-devops-extension-api/Build/BuildClient.js ***!
  \**********************************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*
 * ---------------------------------------------------------
 * Copyright(C) Microsoft Corporation. All rights reserved.
 * ---------------------------------------------------------
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ../Common/RestClientBase */ "./node_modules/azure-devops-extension-api/Common/RestClientBase.js"), __webpack_require__(/*! ../Common/Util/Serialization */ "./node_modules/azure-devops-extension-api/Common/Util/Serialization.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, RestClientBase_1, Serialization_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    var BuildRestClient = /** @class */ (function (_super) {
        __extends(BuildRestClient, _super);
        function BuildRestClient(options) {
            return _super.call(this, options) || this;
        }
        /**
         * Associates an artifact with a build.
         *
         * @param artifact - The artifact.
         * @param project - Project ID or project name
         * @param buildId - The ID of the build.
         */
        BuildRestClient.prototype.createArtifact = function (artifact, project, buildId) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, this.beginRequest({
                            apiVersion: "7.2-preview.5",
                            method: "POST",
                            routeTemplate: "{project}/_apis/build/builds/{buildId}/artifacts/{artifactName}",
                            routeValues: {
                                project: project,
                                buildId: buildId
                            },
                            body: artifact
                        })];
                });
            });
        };
        /**
         * Gets a specific artifact for a build.
         *
         * @param project - Project ID or project name
         * @param buildId - The ID of the build.
         * @param artifactName - The name of the artifact.
         */
        BuildRestClient.prototype.getArtifact = function (project, buildId, artifactName) {
            return __awaiter(this, void 0, void 0, function () {
                var queryValues;
                return __generator(this, function (_a) {
                    queryValues = {
                        artifactName: artifactName
                    };
                    return [2 /*return*/, this.beginRequest({
                            apiVersion: "7.2-preview.5",
                            routeTemplate: "{project}/_apis/build/builds/{buildId}/artifacts/{artifactName}",
                            routeValues: {
                                project: project,
                                buildId: buildId
                            },
                            queryParams: queryValues
                        })];
                });
            });
        };
        /**
         * Gets a specific artifact for a build.
         *
         * @param project - Project ID or project name
         * @param buildId - The ID of the build.
         * @param artifactName - The name of the artifact.
         */
        BuildRestClient.prototype.getArtifactContentZip = function (project, buildId, artifactName) {
            return __awaiter(this, void 0, void 0, function () {
                var queryValues;
                return __generator(this, function (_a) {
                    queryValues = {
                        artifactName: artifactName
                    };
                    return [2 /*return*/, this.beginRequest({
                            apiVersion: "7.2-preview.5",
                            httpResponseType: "application/zip",
                            routeTemplate: "{project}/_apis/build/builds/{buildId}/artifacts/{artifactName}",
                            routeValues: {
                                project: project,
                                buildId: buildId
                            },
                            queryParams: queryValues
                        })];
                });
            });
        };
        /**
         * Gets all artifacts for a build.
         *
         * @param project - Project ID or project name
         * @param buildId - The ID of the build.
         */
        BuildRestClient.prototype.getArtifacts = function (project, buildId) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, this.beginRequest({
                            apiVersion: "7.2-preview.5",
                            routeTemplate: "{project}/_apis/build/builds/{buildId}/artifacts/{artifactName}",
                            routeValues: {
                                project: project,
                                buildId: buildId
                            }
                        })];
                });
            });
        };
        /**
         * Gets a file from the build.
         *
         * @param project - Project ID or project name
         * @param buildId - The ID of the build.
         * @param artifactName - The name of the artifact.
         * @param fileId - The primary key for the file.
         * @param fileName - The name that the file will be set to.
         */
        BuildRestClient.prototype.getFile = function (project, buildId, artifactName, fileId, fileName) {
            return __awaiter(this, void 0, void 0, function () {
                var queryValues;
                return __generator(this, function (_a) {
                    queryValues = {
                        artifactName: artifactName,
                        fileId: fileId,
                        fileName: fileName
                    };
                    return [2 /*return*/, this.beginRequest({
                            apiVersion: "7.2-preview.5",
                            httpResponseType: "application/octet-stream",
                            routeTemplate: "{project}/_apis/build/builds/{buildId}/artifacts/{artifactName}",
                            routeValues: {
                                project: project,
                                buildId: buildId
                            },
                            queryParams: queryValues
                        })];
                });
            });
        };
        /**
         * Gets the list of attachments of a specific type that are associated with a build.
         *
         * @param project - Project ID or project name
         * @param buildId - The ID of the build.
         * @param type - The type of attachment.
         */
        BuildRestClient.prototype.getAttachments = function (project, buildId, type) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, this.beginRequest({
                            apiVersion: "7.2-preview.2",
                            routeTemplate: "{project}/_apis/build/builds/{buildId}/attachments/{type}",
                            routeValues: {
                                project: project,
                                buildId: buildId,
                                type: type
                            }
                        })];
                });
            });
        };
        /**
         * Gets a specific attachment.
         *
         * @param project - Project ID or project name
         * @param buildId - The ID of the build.
         * @param timelineId - The ID of the timeline.
         * @param recordId - The ID of the timeline record.
         * @param type - The type of the attachment.
         * @param name - The name of the attachment.
         */
        BuildRestClient.prototype.getAttachment = function (project, buildId, timelineId, recordId, type, name) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, this.beginRequest({
                            apiVersion: "7.2-preview.2",
                            httpResponseType: "application/octet-stream",
                            routeTemplate: "{project}/_apis/build/builds/{buildId}/{timelineId}/{recordId}/attachments/{type}/{name}",
                            routeValues: {
                                project: project,
                                buildId: buildId,
                                timelineId: timelineId,
                                recordId: recordId,
                                type: type,
                                name: name
                            }
                        })];
                });
            });
        };
        /**
         * @param resources -
         * @param project - Project ID or project name
         */
        BuildRestClient.prototype.authorizeProjectResources = function (resources, project) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, this.beginRequest({
                            apiVersion: "7.2-preview.1",
                            method: "PATCH",
                            routeTemplate: "{project}/_apis/build/authorizedresources",
                            routeValues: {
                                project: project
                            },
                            body: resources
                        })];
                });
            });
        };
        /**
         * @param project - Project ID or project name
         * @param type -
         * @param id -
         */
        BuildRestClient.prototype.getProjectResources = function (project, type, id) {
            return __awaiter(this, void 0, void 0, function () {
                var queryValues;
                return __generator(this, function (_a) {
                    queryValues = {
                        type: type,
                        id: id
                    };
                    return [2 /*return*/, this.beginRequest({
                            apiVersion: "7.2-preview.1",
                            routeTemplate: "{project}/_apis/build/authorizedresources",
                            routeValues: {
                                project: project
                            },
                            queryParams: queryValues
                        })];
                });
            });
        };
        /**
         * Gets a badge that indicates the status of the most recent build for a definition. Note that this API is deprecated. Prefer StatusBadgeController.GetStatusBadge.
         *
         * @param project - The project ID or name.
         * @param definitionId - The ID of the definition.
         * @param branchName - The name of the branch.
         */
        BuildRestClient.prototype.getBadge = function (project, definitionId, branchName) {
            return __awaiter(this, void 0, void 0, function () {
                var queryValues;
                return __generator(this, function (_a) {
                    queryValues = {
                        branchName: branchName
                    };
                    return [2 /*return*/, this.beginRequest({
                            apiVersion: "7.2-preview.2",
                            routeTemplate: "_apis/public/build/definitions/{project}/{definitionId}/badge",
                            routeValues: {
                                project: project,
                                definitionId: definitionId
                            },
                            queryParams: queryValues
                        })];
                });
            });
        };
        /**
         * Gets a list of branches for the given source code repository.
         *
         * @param project - Project ID or project name
         * @param providerName - The name of the source provider.
         * @param serviceEndpointId - If specified, the ID of the service endpoint to query. Can only be omitted for providers that do not use service endpoints, e.g. TFVC or TFGit.
         * @param repository - The vendor-specific identifier or the name of the repository to get branches. Can only be omitted for providers that do not support multiple repositories.
         * @param branchName - If supplied, the name of the branch to check for specifically.
         */
        BuildRestClient.prototype.listBranches = function (project, providerName, serviceEndpointId, repository, branchName) {
            return __awaiter(this, void 0, void 0, function () {
                var queryValues;
                return __generator(this, function (_a) {
                    queryValues = {
                        serviceEndpointId: serviceEndpointId,
                        repository: repository,
                        branchName: branchName
                    };
                    return [2 /*return*/, this.beginRequest({
                            apiVersion: "7.2-preview.1",
                            routeTemplate: "{project}/_apis/sourceProviders/{providerName}/branches",
                            routeValues: {
                                project: project,
                                providerName: providerName
                            },
                            queryParams: queryValues
                        })];
                });
            });
        };
        /**
         * Gets a badge that indicates the status of the most recent build for the specified branch.
         *
         * @param project - Project ID or project name
         * @param repoType - The repository type.
         * @param repoId - The repository ID.
         * @param branchName - The branch name.
         */
        BuildRestClient.prototype.getBuildBadge = function (project, repoType, repoId, branchName) {
            return __awaiter(this, void 0, void 0, function () {
                var queryValues;
                return __generator(this, function (_a) {
                    queryValues = {
                        repoId: repoId,
                        branchName: branchName
                    };
                    return [2 /*return*/, this.beginRequest({
                            apiVersion: "7.2-preview.2",
                            routeTemplate: "{project}/_apis/build/repos/{repoType}/badge",
                            routeValues: {
                                project: project,
                                repoType: repoType
                            },
                            queryParams: queryValues
                        })];
                });
            });
        };
        /**
         * Gets a badge that indicates the status of the most recent build for the specified branch.
         *
         * @param project - Project ID or project name
         * @param repoType - The repository type.
         * @param repoId - The repository ID.
         * @param branchName - The branch name.
         */
        BuildRestClient.prototype.getBuildBadgeData = function (project, repoType, repoId, branchName) {
            return __awaiter(this, void 0, void 0, function () {
                var queryValues;
                return __generator(this, function (_a) {
                    queryValues = {
                        repoId: repoId,
                        branchName: branchName
                    };
                    return [2 /*return*/, this.beginRequest({
                            apiVersion: "7.2-preview.2",
                            routeTemplate: "{project}/_apis/build/repos/{repoType}/badge",
                            routeValues: {
                                project: project,
                                repoType: repoType
                            },
                            queryParams: queryValues
                        })];
                });
            });
        };
        /**
         * Gets all retention leases that apply to a specific build.
         *
         * @param project - Project ID or project name
         * @param buildId - The ID of the build.
         */
        BuildRestClient.prototype.getRetentionLeasesForBuild = function (project, buildId) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, this.beginRequest({
                            apiVersion: "7.2-preview.1",
                            routeTemplate: "{project}/_apis/build/builds/{buildId}/leases",
                            routeValues: {
                                project: project,
                                buildId: buildId
                            }
                        })];
                });
            });
        };
        /**
         * Deletes a build.
         *
         * @param project - Project ID or project name
         * @param buildId - The ID of the build.
         */
        BuildRestClient.prototype.deleteBuild = function (project, buildId) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, this.beginRequest({
                            apiVersion: "7.2-preview.7",
                            method: "DELETE",
                            routeTemplate: "{project}/_apis/build/builds/{buildId}",
                            routeValues: {
                                project: project,
                                buildId: buildId
                            }
                        })];
                });
            });
        };
        /**
         * Gets a build
         *
         * @param project - Project ID or project name
         * @param buildId -
         * @param propertyFilters -
         */
        BuildRestClient.prototype.getBuild = function (project, buildId, propertyFilters) {
            return __awaiter(this, void 0, void 0, function () {
                var queryValues;
                return __generator(this, function (_a) {
                    queryValues = {
                        propertyFilters: propertyFilters
                    };
                    return [2 /*return*/, this.beginRequest({
                            apiVersion: "7.2-preview.7",
                            routeTemplate: "{project}/_apis/build/builds/{buildId}",
                            routeValues: {
                                project: project,
                                buildId: buildId
                            },
                            queryParams: queryValues
                        })];
                });
            });
        };
        /**
         * Gets a list of builds.
         *
         * @param project - Project ID or project name
         * @param definitions - A comma-delimited list of definition IDs. If specified, filters to builds for these definitions.
         * @param queues - A comma-delimited list of queue IDs. If specified, filters to builds that ran against these queues.
         * @param buildNumber - If specified, filters to builds that match this build number. Append * to do a prefix search.
         * @param minTime - If specified, filters to builds that finished/started/queued after this date based on the queryOrder specified.
         * @param maxTime - If specified, filters to builds that finished/started/queued before this date based on the queryOrder specified.
         * @param requestedFor - If specified, filters to builds requested for the specified user.
         * @param reasonFilter - If specified, filters to builds that match this reason.
         * @param statusFilter - If specified, filters to builds that match this status.
         * @param resultFilter - If specified, filters to builds that match this result.
         * @param tagFilters - A comma-delimited list of tags. If specified, filters to builds that have the specified tags.
         * @param properties - A comma-delimited list of properties to retrieve.
         * @param top - The maximum number of builds to return.
         * @param continuationToken - A continuation token, returned by a previous call to this method, that can be used to return the next set of builds.
         * @param maxBuildsPerDefinition - The maximum number of builds to return per definition.
         * @param deletedFilter - Indicates whether to exclude, include, or only return deleted builds.
         * @param queryOrder - The order in which builds should be returned.
         * @param branchName - If specified, filters to builds that built branches that built this branch.
         * @param buildIds - A comma-delimited list that specifies the IDs of builds to retrieve.
         * @param repositoryId - If specified, filters to builds that built from this repository.
         * @param repositoryType - If specified, filters to builds that built from repositories of this type.
         */
        BuildRestClient.prototype.getBuilds = function (project, definitions, queues, buildNumber, minTime, maxTime, requestedFor, reasonFilter, statusFilter, resultFilter, tagFilters, properties, top, continuationToken, maxBuildsPerDefinition, deletedFilter, queryOrder, branchName, buildIds, repositoryId, repositoryType) {
            return __awaiter(this, void 0, void 0, function () {
                var queryValues;
                var _this = this;
                return __generator(this, function (_a) {
                    queryValues = {
                        definitions: definitions && definitions.join(","),
                        queues: queues && queues.join(","),
                        buildNumber: buildNumber,
                        minTime: minTime,
                        maxTime: maxTime,
                        requestedFor: requestedFor,
                        reasonFilter: reasonFilter,
                        statusFilter: statusFilter,
                        resultFilter: resultFilter,
                        tagFilters: tagFilters && tagFilters.join(","),
                        properties: properties && properties.join(","),
                        '$top': top,
                        continuationToken: continuationToken,
                        maxBuildsPerDefinition: maxBuildsPerDefinition,
                        deletedFilter: deletedFilter,
                        queryOrder: queryOrder,
                        branchName: branchName,
                        buildIds: buildIds && buildIds.join(","),
                        repositoryId: repositoryId,
                        repositoryType: repositoryType
                    };
                    return [2 /*return*/, this.beginRequest({
                            apiVersion: "7.2-preview.7",
                            routeTemplate: "{project}/_apis/build/builds/{buildId}",
                            routeValues: {
                                project: project
                            },
                            queryParams: queryValues,
                            returnRawResponse: true
                        }).then(function (response) { return __awaiter(_this, void 0, void 0, function () {
                            var body;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0: return [4 /*yield*/, response.text().then(Serialization_1.deserializeVssJsonObject)];
                                    case 1:
                                        body = _a.sent();
                                        body.continuationToken = response.headers.get("x-ms-continuationtoken");
                                        return [2 /*return*/, body];
                                }
                            });
                        }); })];
                });
            });
        };
        /**
         * Queues a build
         *
         * @param build -
         * @param project - Project ID or project name
         * @param ignoreWarnings -
         * @param checkInTicket -
         * @param sourceBuildId -
         * @param definitionId - Optional definition id to queue a build without a body. Ignored if there's a valid body
         */
        BuildRestClient.prototype.queueBuild = function (build, project, ignoreWarnings, checkInTicket, sourceBuildId, definitionId) {
            return __awaiter(this, void 0, void 0, function () {
                var queryValues;
                return __generator(this, function (_a) {
                    queryValues = {
                        ignoreWarnings: ignoreWarnings,
                        checkInTicket: checkInTicket,
                        sourceBuildId: sourceBuildId,
                        definitionId: definitionId
                    };
                    return [2 /*return*/, this.beginRequest({
                            apiVersion: "7.2-preview.7",
                            method: "POST",
                            routeTemplate: "{project}/_apis/build/builds/{buildId}",
                            routeValues: {
                                project: project
                            },
                            queryParams: queryValues,
                            body: build
                        })];
                });
            });
        };
        /**
         * Updates a build.
         *
         * @param build - The build.
         * @param project - Project ID or project name
         * @param buildId - The ID of the build.
         * @param retry -
         */
        BuildRestClient.prototype.updateBuild = function (build, project, buildId, retry) {
            return __awaiter(this, void 0, void 0, function () {
                var queryValues;
                return __generator(this, function (_a) {
                    queryValues = {
                        retry: retry
                    };
                    return [2 /*return*/, this.beginRequest({
                            apiVersion: "7.2-preview.7",
                            method: "PATCH",
                            routeTemplate: "{project}/_apis/build/builds/{buildId}",
                            routeValues: {
                                project: project,
                                buildId: buildId
                            },
                            queryParams: queryValues,
                            body: build
                        })];
                });
            });
        };
        /**
         * Updates multiple builds.
         *
         * @param builds - The builds to update.
         * @param project - Project ID or project name
         */
        BuildRestClient.prototype.updateBuilds = function (builds, project) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, this.beginRequest({
                            apiVersion: "7.2-preview.7",
                            method: "PATCH",
                            routeTemplate: "{project}/_apis/build/builds/{buildId}",
                            routeValues: {
                                project: project
                            },
                            body: builds
                        })];
                });
            });
        };
        /**
         * Gets the changes associated with a build
         *
         * @param project - Project ID or project name
         * @param buildId -
         * @param continuationToken -
         * @param top - The maximum number of changes to return
         * @param includeSourceChange -
         */
        BuildRestClient.prototype.getBuildChanges = function (project, buildId, continuationToken, top, includeSourceChange) {
            return __awaiter(this, void 0, void 0, function () {
                var queryValues;
                var _this = this;
                return __generator(this, function (_a) {
                    queryValues = {
                        continuationToken: continuationToken,
                        '$top': top,
                        includeSourceChange: includeSourceChange
                    };
                    return [2 /*return*/, this.beginRequest({
                            apiVersion: "7.2-preview.2",
                            routeTemplate: "{project}/_apis/build/builds/{buildId}/changes",
                            routeValues: {
                                project: project,
                                buildId: buildId
                            },
                            queryParams: queryValues,
                            returnRawResponse: true
                        }).then(function (response) { return __awaiter(_this, void 0, void 0, function () {
                            var body;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0: return [4 /*yield*/, response.text().then(Serialization_1.deserializeVssJsonObject)];
                                    case 1:
                                        body = _a.sent();
                                        body.continuationToken = response.headers.get("x-ms-continuationtoken");
                                        return [2 /*return*/, body];
                                }
                            });
                        }); })];
                });
            });
        };
        /**
         * Gets the changes made to the repository between two given builds.
         *
         * @param project - Project ID or project name
         * @param fromBuildId - The ID of the first build.
         * @param toBuildId - The ID of the last build.
         * @param top - The maximum number of changes to return.
         */
        BuildRestClient.prototype.getChangesBetweenBuilds = function (project, fromBuildId, toBuildId, top) {
            return __awaiter(this, void 0, void 0, function () {
                var queryValues;
                return __generator(this, function (_a) {
                    queryValues = {
                        fromBuildId: fromBuildId,
                        toBuildId: toBuildId,
                        '$top': top
                    };
                    return [2 /*return*/, this.beginRequest({
                            apiVersion: "7.2-preview.2",
                            routeTemplate: "{project}/_apis/build/changes",
                            routeValues: {
                                project: project
                            },
                            queryParams: queryValues
                        })];
                });
            });
        };
        /**
         * Gets a controller
         *
         * @param controllerId -
         */
        BuildRestClient.prototype.getBuildController = function (controllerId) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, this.beginRequest({
                            apiVersion: "7.2-preview.2",
                            routeTemplate: "_apis/build/Controllers/{controllerId}",
                            routeValues: {
                                controllerId: controllerId
                            }
                        })];
                });
            });
        };
        /**
         * Gets controller, optionally filtered by name
         *
         * @param name -
         */
        BuildRestClient.prototype.getBuildControllers = function (name) {
            return __awaiter(this, void 0, void 0, function () {
                var queryValues;
                return __generator(this, function (_a) {
                    queryValues = {
                        name: name
                    };
                    return [2 /*return*/, this.beginRequest({
                            apiVersion: "7.2-preview.2",
                            routeTemplate: "_apis/build/Controllers/{controllerId}",
                            queryParams: queryValues
                        })];
                });
            });
        };
        /**
         * Creates a new definition.
         *
         * @param definition - The definition.
         * @param project - Project ID or project name
         * @param definitionToCloneId -
         * @param definitionToCloneRevision -
         */
        BuildRestClient.prototype.createDefinition = function (definition, project, definitionToCloneId, definitionToCloneRevision) {
            return __awaiter(this, void 0, void 0, function () {
                var queryValues;
                return __generator(this, function (_a) {
                    queryValues = {
                        definitionToCloneId: definitionToCloneId,
                        definitionToCloneRevision: definitionToCloneRevision
                    };
                    return [2 /*return*/, this.beginRequest({
                            apiVersion: "7.2-preview.7",
                            method: "POST",
                            routeTemplate: "{project}/_apis/build/definitions/{definitionId}",
                            routeValues: {
                                project: project
                            },
                            queryParams: queryValues,
                            body: definition
                        })];
                });
            });
        };
        /**
         * Deletes a definition and all associated builds.
         *
         * @param project - Project ID or project name
         * @param definitionId - The ID of the definition.
         */
        BuildRestClient.prototype.deleteDefinition = function (project, definitionId) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, this.beginRequest({
                            apiVersion: "7.2-preview.7",
                            method: "DELETE",
                            routeTemplate: "{project}/_apis/build/definitions/{definitionId}",
                            routeValues: {
                                project: project,
                                definitionId: definitionId
                            }
                        })];
                });
            });
        };
        /**
         * Gets a definition, optionally at a specific revision.
         *
         * @param project - Project ID or project name
         * @param definitionId - The ID of the definition.
         * @param revision - The revision number to retrieve. If this is not specified, the latest version will be returned.
         * @param minMetricsTime - If specified, indicates the date from which metrics should be included.
         * @param propertyFilters - A comma-delimited list of properties to include in the results.
         * @param includeLatestBuilds -
         */
        BuildRestClient.prototype.getDefinition = function (project, definitionId, revision, minMetricsTime, propertyFilters, includeLatestBuilds) {
            return __awaiter(this, void 0, void 0, function () {
                var queryValues;
                return __generator(this, function (_a) {
                    queryValues = {
                        revision: revision,
                        minMetricsTime: minMetricsTime,
                        propertyFilters: propertyFilters && propertyFilters.join(","),
                        includeLatestBuilds: includeLatestBuilds
                    };
                    return [2 /*return*/, this.beginRequest({
                            apiVersion: "7.2-preview.7",
                            routeTemplate: "{project}/_apis/build/definitions/{definitionId}",
                            routeValues: {
                                project: project,
                                definitionId: definitionId
                            },
                            queryParams: queryValues
                        })];
                });
            });
        };
        /**
         * Gets a list of definitions.
         *
         * @param project - Project ID or project name
         * @param name - If specified, filters to definitions whose names match this pattern.
         * @param repositoryId - A repository ID. If specified, filters to definitions that use this repository.
         * @param repositoryType - If specified, filters to definitions that have a repository of this type.
         * @param queryOrder - Indicates the order in which definitions should be returned.
         * @param top - The maximum number of definitions to return.
         * @param continuationToken - A continuation token, returned by a previous call to this method, that can be used to return the next set of definitions.
         * @param minMetricsTime - If specified, indicates the date from which metrics should be included.
         * @param definitionIds - A comma-delimited list that specifies the IDs of definitions to retrieve.
         * @param path - If specified, filters to definitions under this folder.
         * @param builtAfter - If specified, filters to definitions that have builds after this date.
         * @param notBuiltAfter - If specified, filters to definitions that do not have builds after this date.
         * @param includeAllProperties - Indicates whether the full definitions should be returned. By default, shallow representations of the definitions are returned.
         * @param includeLatestBuilds - Indicates whether to return the latest and latest completed builds for this definition.
         * @param taskIdFilter - If specified, filters to definitions that use the specified task.
         * @param processType - If specified, filters to definitions with the given process type.
         * @param yamlFilename - If specified, filters to YAML definitions that match the given filename. To use this filter includeAllProperties should be set to true
         */
        BuildRestClient.prototype.getDefinitions = function (project, name, repositoryId, repositoryType, queryOrder, top, continuationToken, minMetricsTime, definitionIds, path, builtAfter, notBuiltAfter, includeAllProperties, includeLatestBuilds, taskIdFilter, processType, yamlFilename) {
            return __awaiter(this, void 0, void 0, function () {
                var queryValues;
                var _this = this;
                return __generator(this, function (_a) {
                    queryValues = {
                        name: name,
                        repositoryId: repositoryId,
                        repositoryType: repositoryType,
                        queryOrder: queryOrder,
                        '$top': top,
                        continuationToken: continuationToken,
                        minMetricsTime: minMetricsTime,
                        definitionIds: definitionIds && definitionIds.join(","),
                        path: path,
                        builtAfter: builtAfter,
                        notBuiltAfter: notBuiltAfter,
                        includeAllProperties: includeAllProperties,
                        includeLatestBuilds: includeLatestBuilds,
                        taskIdFilter: taskIdFilter,
                        processType: processType,
                        yamlFilename: yamlFilename
                    };
                    return [2 /*return*/, this.beginRequest({
                            apiVersion: "7.2-preview.7",
                            routeTemplate: "{project}/_apis/build/definitions/{definitionId}",
                            routeValues: {
                                project: project
                            },
                            queryParams: queryValues,
                            returnRawResponse: true
                        }).then(function (response) { return __awaiter(_this, void 0, void 0, function () {
                            var body;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0: return [4 /*yield*/, response.text().then(Serialization_1.deserializeVssJsonObject)];
                                    case 1:
                                        body = _a.sent();
                                        body.continuationToken = response.headers.get("x-ms-continuationtoken");
                                        return [2 /*return*/, body];
                                }
                            });
                        }); })];
                });
            });
        };
        /**
         * Restores a deleted definition
         *
         * @param project - Project ID or project name
         * @param definitionId - The identifier of the definition to restore.
         * @param deleted - When false, restores a deleted definition.
         */
        BuildRestClient.prototype.restoreDefinition = function (project, definitionId, deleted) {
            return __awaiter(this, void 0, void 0, function () {
                var queryValues;
                return __generator(this, function (_a) {
                    queryValues = {
                        deleted: deleted
                    };
                    return [2 /*return*/, this.beginRequest({
                            apiVersion: "7.2-preview.7",
                            method: "PATCH",
                            routeTemplate: "{project}/_apis/build/definitions/{definitionId}",
                            routeValues: {
                                project: project,
                                definitionId: definitionId
                            },
                            queryParams: queryValues
                        })];
                });
            });
        };
        /**
         * Updates an existing build definition.  In order for this operation to succeed, the value of the "Revision" property of the request body must match the existing build definition's. It is recommended that you obtain the existing build definition by using GET, modify the build definition as necessary, and then submit the modified definition with PUT.
         *
         * @param definition - The new version of the definition. Its "Revision" property must match the existing definition for the update to be accepted.
         * @param project - Project ID or project name
         * @param definitionId - The ID of the definition.
         * @param secretsSourceDefinitionId -
         * @param secretsSourceDefinitionRevision -
         */
        BuildRestClient.prototype.updateDefinition = function (definition, project, definitionId, secretsSourceDefinitionId, secretsSourceDefinitionRevision) {
            return __awaiter(this, void 0, void 0, function () {
                var queryValues;
                return __generator(this, function (_a) {
                    queryValues = {
                        secretsSourceDefinitionId: secretsSourceDefinitionId,
                        secretsSourceDefinitionRevision: secretsSourceDefinitionRevision
                    };
                    return [2 /*return*/, this.beginRequest({
                            apiVersion: "7.2-preview.7",
                            method: "PUT",
                            routeTemplate: "{project}/_apis/build/definitions/{definitionId}",
                            routeValues: {
                                project: project,
                                definitionId: definitionId
                            },
                            queryParams: queryValues,
                            body: definition
                        })];
                });
            });
        };
        /**
         * Gets the contents of a file in the given source code repository.
         *
         * @param project - Project ID or project name
         * @param providerName - The name of the source provider.
         * @param serviceEndpointId - If specified, the ID of the service endpoint to query. Can only be omitted for providers that do not use service endpoints, e.g. TFVC or TFGit.
         * @param repository - If specified, the vendor-specific identifier or the name of the repository to get branches. Can only be omitted for providers that do not support multiple repositories.
         * @param commitOrBranch - The identifier of the commit or branch from which a file's contents are retrieved.
         * @param path - The path to the file to retrieve, relative to the root of the repository.
         */
        BuildRestClient.prototype.getFileContents = function (project, providerName, serviceEndpointId, repository, commitOrBranch, path) {
            return __awaiter(this, void 0, void 0, function () {
                var queryValues;
                return __generator(this, function (_a) {
                    queryValues = {
                        serviceEndpointId: serviceEndpointId,
                        repository: repository,
                        commitOrBranch: commitOrBranch,
                        path: path
                    };
                    return [2 /*return*/, this.beginRequest({
                            apiVersion: "7.2-preview.1",
                            httpResponseType: "text/plain",
                            routeTemplate: "{project}/_apis/sourceProviders/{providerName}/fileContents",
                            routeValues: {
                                project: project,
                                providerName: providerName
                            },
                            queryParams: queryValues
                        })];
                });
            });
        };
        /**
         * Creates a new folder.
         *
         * @param folder - The folder.
         * @param project - Project ID or project name
         * @param path - The full path of the folder.
         */
        BuildRestClient.prototype.createFolder = function (folder, project, path) {
            return __awaiter(this, void 0, void 0, function () {
                var queryValues;
                return __generator(this, function (_a) {
                    queryValues = {
                        path: path
                    };
                    return [2 /*return*/, this.beginRequest({
                            apiVersion: "7.2-preview.2",
                            method: "PUT",
                            routeTemplate: "{project}/_apis/build/folders/{*path}",
                            routeValues: {
                                project: project
                            },
                            queryParams: queryValues,
                            body: folder
                        })];
                });
            });
        };
        /**
         * Deletes a definition folder. Definitions and their corresponding builds will also be deleted.
         *
         * @param project - Project ID or project name
         * @param path - The full path to the folder.
         */
        BuildRestClient.prototype.deleteFolder = function (project, path) {
            return __awaiter(this, void 0, void 0, function () {
                var queryValues;
                return __generator(this, function (_a) {
                    queryValues = {
                        path: path
                    };
                    return [2 /*return*/, this.beginRequest({
                            apiVersion: "7.2-preview.2",
                            method: "DELETE",
                            routeTemplate: "{project}/_apis/build/folders/{*path}",
                            routeValues: {
                                project: project
                            },
                            queryParams: queryValues
                        })];
                });
            });
        };
        /**
         * Gets a list of build definition folders.
         *
         * @param project - Project ID or project name
         * @param path - The path to start with.
         * @param queryOrder - The order in which folders should be returned.
         */
        BuildRestClient.prototype.getFolders = function (project, path, queryOrder) {
            return __awaiter(this, void 0, void 0, function () {
                var queryValues;
                return __generator(this, function (_a) {
                    queryValues = {
                        queryOrder: queryOrder
                    };
                    return [2 /*return*/, this.beginRequest({
                            apiVersion: "7.2-preview.2",
                            routeTemplate: "{project}/_apis/build/folders/{*path}",
                            routeValues: {
                                project: project,
                                path: path
                            },
                            queryParams: queryValues
                        })];
                });
            });
        };
        /**
         * Updates an existing folder at given  existing path
         *
         * @param folder - The new version of the folder.
         * @param project - Project ID or project name
         * @param path - The full path to the folder.
         */
        BuildRestClient.prototype.updateFolder = function (folder, project, path) {
            return __awaiter(this, void 0, void 0, function () {
                var queryValues;
                return __generator(this, function (_a) {
                    queryValues = {
                        path: path
                    };
                    return [2 /*return*/, this.beginRequest({
                            apiVersion: "7.2-preview.2",
                            method: "POST",
                            routeTemplate: "{project}/_apis/build/folders/{*path}",
                            routeValues: {
                                project: project
                            },
                            queryParams: queryValues,
                            body: folder
                        })];
                });
            });
        };
        /**
         * Gets pipeline general settings.
         *
         * @param project - Project ID or project name
         */
        BuildRestClient.prototype.getBuildGeneralSettings = function (project) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, this.beginRequest({
                            apiVersion: "7.2-preview.1",
                            routeTemplate: "{project}/_apis/build/generalSettings",
                            routeValues: {
                                project: project
                            }
                        })];
                });
            });
        };
        /**
         * Updates pipeline general settings.
         *
         * @param newSettings -
         * @param project - Project ID or project name
         */
        BuildRestClient.prototype.updateBuildGeneralSettings = function (newSettings, project) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, this.beginRequest({
                            apiVersion: "7.2-preview.1",
                            method: "PATCH",
                            routeTemplate: "{project}/_apis/build/generalSettings",
                            routeValues: {
                                project: project
                            },
                            body: newSettings
                        })];
                });
            });
        };
        /**
         * Returns the retention history for the project collection. This includes pipelines that have custom retention rules that may prevent the retention job from cleaning them up, runs per pipeline with retention type, files associated with pipelines owned by the collection with retention type, and the number of files per pipeline.
         *
         * @param daysToLookback -
         */
        BuildRestClient.prototype.getRetentionHistory = function (daysToLookback) {
            return __awaiter(this, void 0, void 0, function () {
                var queryValues;
                return __generator(this, function (_a) {
                    queryValues = {
                        daysToLookback: daysToLookback
                    };
                    return [2 /*return*/, this.beginRequest({
                            apiVersion: "7.2-preview.1",
                            routeTemplate: "_apis/build/retention/history",
                            queryParams: queryValues
                        })];
                });
            });
        };
        /**
         * Gets the latest build for a definition, optionally scoped to a specific branch.
         *
         * @param project - Project ID or project name
         * @param definition - definition name with optional leading folder path, or the definition id
         * @param branchName - optional parameter that indicates the specific branch to use. If not specified, the default branch is used.
         */
        BuildRestClient.prototype.getLatestBuild = function (project, definition, branchName) {
            return __awaiter(this, void 0, void 0, function () {
                var queryValues;
                return __generator(this, function (_a) {
                    queryValues = {
                        branchName: branchName
                    };
                    return [2 /*return*/, this.beginRequest({
                            apiVersion: "7.2-preview.1",
                            routeTemplate: "{project}/_apis/build/latest/{*definition}",
                            routeValues: {
                                project: project,
                                definition: definition
                            },
                            queryParams: queryValues
                        })];
                });
            });
        };
        /**
         * Adds new leases for pipeline runs.
         *
         * @param newLeases -
         * @param project - Project ID or project name
         */
        BuildRestClient.prototype.addRetentionLeases = function (newLeases, project) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, this.beginRequest({
                            apiVersion: "7.2-preview.2",
                            method: "POST",
                            routeTemplate: "{project}/_apis/build/retention/leases/{*leaseId}",
                            routeValues: {
                                project: project
                            },
                            body: newLeases
                        })];
                });
            });
        };
        /**
         * Removes specific retention leases.
         *
         * @param project - Project ID or project name
         * @param ids -
         */
        BuildRestClient.prototype.deleteRetentionLeasesById = function (project, ids) {
            return __awaiter(this, void 0, void 0, function () {
                var queryValues;
                return __generator(this, function (_a) {
                    queryValues = {
                        ids: ids && ids.join(",")
                    };
                    return [2 /*return*/, this.beginRequest({
                            apiVersion: "7.2-preview.2",
                            method: "DELETE",
                            routeTemplate: "{project}/_apis/build/retention/leases/{*leaseId}",
                            routeValues: {
                                project: project
                            },
                            queryParams: queryValues
                        })];
                });
            });
        };
        /**
         * Returns the details of the retention lease given a lease id.
         *
         * @param project - Project ID or project name
         * @param leaseId -
         */
        BuildRestClient.prototype.getRetentionLease = function (project, leaseId) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, this.beginRequest({
                            apiVersion: "7.2-preview.2",
                            routeTemplate: "{project}/_apis/build/retention/leases/{*leaseId}",
                            routeValues: {
                                project: project,
                                leaseId: leaseId
                            }
                        })];
                });
            });
        };
        /**
         * Returns any leases matching the specified MinimalRetentionLeases
         *
         * @param project - Project ID or project name
         * @param leasesToFetch - List of JSON-serialized MinimalRetentionLeases separated by '|'
         */
        BuildRestClient.prototype.getRetentionLeasesByMinimalRetentionLeases = function (project, leasesToFetch) {
            return __awaiter(this, void 0, void 0, function () {
                var queryValues;
                return __generator(this, function (_a) {
                    queryValues = {
                        leasesToFetch: leasesToFetch && leasesToFetch.join("|")
                    };
                    return [2 /*return*/, this.beginRequest({
                            apiVersion: "7.2-preview.2",
                            routeTemplate: "{project}/_apis/build/retention/leases/{*leaseId}",
                            routeValues: {
                                project: project
                            },
                            queryParams: queryValues
                        })];
                });
            });
        };
        /**
         * Returns any leases owned by the specified entity, optionally scoped to a single pipeline definition and run.
         *
         * @param project - Project ID or project name
         * @param ownerId -
         * @param definitionId - An optional parameter to limit the search to a specific pipeline definition.
         * @param runId - An optional parameter to limit the search to a single pipeline run. Requires definitionId.
         */
        BuildRestClient.prototype.getRetentionLeasesByOwnerId = function (project, ownerId, definitionId, runId) {
            return __awaiter(this, void 0, void 0, function () {
                var queryValues;
                return __generator(this, function (_a) {
                    queryValues = {
                        ownerId: ownerId,
                        definitionId: definitionId,
                        runId: runId
                    };
                    return [2 /*return*/, this.beginRequest({
                            apiVersion: "7.2-preview.2",
                            routeTemplate: "{project}/_apis/build/retention/leases/{*leaseId}",
                            routeValues: {
                                project: project
                            },
                            queryParams: queryValues
                        })];
                });
            });
        };
        /**
         * Returns any leases owned by the specified user, optionally scoped to a single pipeline definition and run.
         *
         * @param project - Project ID or project name
         * @param userOwnerId - The user id to search for.
         * @param definitionId - An optional parameter to limit the search to a specific pipeline definition.
         * @param runId - An optional parameter to limit the search to a single pipeline run. Requires definitionId.
         */
        BuildRestClient.prototype.getRetentionLeasesByUserId = function (project, userOwnerId, definitionId, runId) {
            return __awaiter(this, void 0, void 0, function () {
                var queryValues;
                return __generator(this, function (_a) {
                    queryValues = {
                        userOwnerId: userOwnerId,
                        definitionId: definitionId,
                        runId: runId
                    };
                    return [2 /*return*/, this.beginRequest({
                            apiVersion: "7.2-preview.2",
                            routeTemplate: "{project}/_apis/build/retention/leases/{*leaseId}",
                            routeValues: {
                                project: project
                            },
                            queryParams: queryValues
                        })];
                });
            });
        };
        /**
         * Updates the duration or pipeline protection status of a retention lease.
         *
         * @param leaseUpdate - The new data for the retention lease.
         * @param project - Project ID or project name
         * @param leaseId - The ID of the lease to update.
         */
        BuildRestClient.prototype.updateRetentionLease = function (leaseUpdate, project, leaseId) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, this.beginRequest({
                            apiVersion: "7.2-preview.2",
                            method: "PATCH",
                            routeTemplate: "{project}/_apis/build/retention/leases/{*leaseId}",
                            routeValues: {
                                project: project,
                                leaseId: leaseId
                            },
                            body: leaseUpdate
                        })];
                });
            });
        };
        /**
         * Gets an individual log file for a build.
         *
         * @param project - Project ID or project name
         * @param buildId - The ID of the build.
         * @param logId - The ID of the log file.
         * @param startLine - The start line.
         * @param endLine - The end line.
         */
        BuildRestClient.prototype.getBuildLog = function (project, buildId, logId, startLine, endLine) {
            return __awaiter(this, void 0, void 0, function () {
                var queryValues;
                return __generator(this, function (_a) {
                    queryValues = {
                        startLine: startLine,
                        endLine: endLine
                    };
                    return [2 /*return*/, this.beginRequest({
                            apiVersion: "7.2-preview.2",
                            httpResponseType: "text/plain",
                            routeTemplate: "{project}/_apis/build/builds/{buildId}/logs/{logId}",
                            routeValues: {
                                project: project,
                                buildId: buildId,
                                logId: logId
                            },
                            queryParams: queryValues
                        })];
                });
            });
        };
        /**
         * Gets an individual log file for a build.
         *
         * @param project - Project ID or project name
         * @param buildId - The ID of the build.
         * @param logId - The ID of the log file.
         * @param startLine - The start line.
         * @param endLine - The end line.
         */
        BuildRestClient.prototype.getBuildLogLines = function (project, buildId, logId, startLine, endLine) {
            return __awaiter(this, void 0, void 0, function () {
                var queryValues;
                return __generator(this, function (_a) {
                    queryValues = {
                        startLine: startLine,
                        endLine: endLine
                    };
                    return [2 /*return*/, this.beginRequest({
                            apiVersion: "7.2-preview.2",
                            routeTemplate: "{project}/_apis/build/builds/{buildId}/logs/{logId}",
                            routeValues: {
                                project: project,
                                buildId: buildId,
                                logId: logId
                            },
                            queryParams: queryValues
                        })];
                });
            });
        };
        /**
         * Gets the logs for a build.
         *
         * @param project - Project ID or project name
         * @param buildId - The ID of the build.
         */
        BuildRestClient.prototype.getBuildLogs = function (project, buildId) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, this.beginRequest({
                            apiVersion: "7.2-preview.2",
                            routeTemplate: "{project}/_apis/build/builds/{buildId}/logs/{logId}",
                            routeValues: {
                                project: project,
                                buildId: buildId
                            }
                        })];
                });
            });
        };
        /**
         * Gets the logs for a build.
         *
         * @param project - Project ID or project name
         * @param buildId - The ID of the build.
         */
        BuildRestClient.prototype.getBuildLogsZip = function (project, buildId) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, this.beginRequest({
                            apiVersion: "7.2-preview.2",
                            httpResponseType: "application/zip",
                            routeTemplate: "{project}/_apis/build/builds/{buildId}/logs/{logId}",
                            routeValues: {
                                project: project,
                                buildId: buildId
                            }
                        })];
                });
            });
        };
        /**
         * Gets an individual log file for a build.
         *
         * @param project - Project ID or project name
         * @param buildId - The ID of the build.
         * @param logId - The ID of the log file.
         * @param startLine - The start line.
         * @param endLine - The end line.
         */
        BuildRestClient.prototype.getBuildLogZip = function (project, buildId, logId, startLine, endLine) {
            return __awaiter(this, void 0, void 0, function () {
                var queryValues;
                return __generator(this, function (_a) {
                    queryValues = {
                        startLine: startLine,
                        endLine: endLine
                    };
                    return [2 /*return*/, this.beginRequest({
                            apiVersion: "7.2-preview.2",
                            httpResponseType: "application/zip",
                            routeTemplate: "{project}/_apis/build/builds/{buildId}/logs/{logId}",
                            routeValues: {
                                project: project,
                                buildId: buildId,
                                logId: logId
                            },
                            queryParams: queryValues
                        })];
                });
            });
        };
        /**
         * Gets build metrics for a project.
         *
         * @param project - Project ID or project name
         * @param metricAggregationType - The aggregation type to use (hourly, daily).
         * @param minMetricsTime - The date from which to calculate metrics.
         */
        BuildRestClient.prototype.getProjectMetrics = function (project, metricAggregationType, minMetricsTime) {
            return __awaiter(this, void 0, void 0, function () {
                var queryValues;
                return __generator(this, function (_a) {
                    queryValues = {
                        minMetricsTime: minMetricsTime
                    };
                    return [2 /*return*/, this.beginRequest({
                            apiVersion: "7.2-preview.1",
                            routeTemplate: "{project}/_apis/build/Metrics/{metricAggregationType}",
                            routeValues: {
                                project: project,
                                metricAggregationType: metricAggregationType
                            },
                            queryParams: queryValues
                        })];
                });
            });
        };
        /**
         * Gets build metrics for a definition.
         *
         * @param project - Project ID or project name
         * @param definitionId - The ID of the definition.
         * @param minMetricsTime - The date from which to calculate metrics.
         */
        BuildRestClient.prototype.getDefinitionMetrics = function (project, definitionId, minMetricsTime) {
            return __awaiter(this, void 0, void 0, function () {
                var queryValues;
                return __generator(this, function (_a) {
                    queryValues = {
                        minMetricsTime: minMetricsTime
                    };
                    return [2 /*return*/, this.beginRequest({
                            apiVersion: "7.2-preview.1",
                            routeTemplate: "{project}/_apis/build/definitions/{definitionId}/Metrics",
                            routeValues: {
                                project: project,
                                definitionId: definitionId
                            },
                            queryParams: queryValues
                        })];
                });
            });
        };
        /**
         * Gets all build definition options supported by the system.
         *
         * @param project - Project ID or project name
         */
        BuildRestClient.prototype.getBuildOptionDefinitions = function (project) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, this.beginRequest({
                            apiVersion: "7.2-preview.2",
                            routeTemplate: "{project}/_apis/build/options",
                            routeValues: {
                                project: project
                            }
                        })];
                });
            });
        };
        /**
         * Gets the contents of a directory in the given source code repository.
         *
         * @param project - Project ID or project name
         * @param providerName - The name of the source provider.
         * @param serviceEndpointId - If specified, the ID of the service endpoint to query. Can only be omitted for providers that do not use service endpoints, e.g. TFVC or TFGit.
         * @param repository - If specified, the vendor-specific identifier or the name of the repository to get branches. Can only be omitted for providers that do not support multiple repositories.
         * @param commitOrBranch - The identifier of the commit or branch from which a file's contents are retrieved.
         * @param path - The path contents to list, relative to the root of the repository.
         */
        BuildRestClient.prototype.getPathContents = function (project, providerName, serviceEndpointId, repository, commitOrBranch, path) {
            return __awaiter(this, void 0, void 0, function () {
                var queryValues;
                return __generator(this, function (_a) {
                    queryValues = {
                        serviceEndpointId: serviceEndpointId,
                        repository: repository,
                        commitOrBranch: commitOrBranch,
                        path: path
                    };
                    return [2 /*return*/, this.beginRequest({
                            apiVersion: "7.2-preview.1",
                            routeTemplate: "{project}/_apis/sourceProviders/{providerName}/pathContents",
                            routeValues: {
                                project: project,
                                providerName: providerName
                            },
                            queryParams: queryValues
                        })];
                });
            });
        };
        /**
         * Gets properties for a build.
         *
         * @param project - Project ID or project name
         * @param buildId - The ID of the build.
         * @param filter - A comma-delimited list of properties. If specified, filters to these specific properties.
         */
        BuildRestClient.prototype.getBuildProperties = function (project, buildId, filter) {
            return __awaiter(this, void 0, void 0, function () {
                var queryValues;
                return __generator(this, function (_a) {
                    queryValues = {
                        filter: filter && filter.join(",")
                    };
                    return [2 /*return*/, this.beginRequest({
                            apiVersion: "7.2-preview.1",
                            routeTemplate: "{project}/_apis/build/builds/{buildId}/properties",
                            routeValues: {
                                project: project,
                                buildId: buildId
                            },
                            queryParams: queryValues
                        })];
                });
            });
        };
        /**
         * Updates properties for a build.
         *
         * @param document - A json-patch document describing the properties to update.
         * @param project - Project ID or project name
         * @param buildId - The ID of the build.
         */
        BuildRestClient.prototype.updateBuildProperties = function (document, project, buildId) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, this.beginRequest({
                            apiVersion: "7.2-preview.1",
                            method: "PATCH",
                            routeTemplate: "{project}/_apis/build/builds/{buildId}/properties",
                            routeValues: {
                                project: project,
                                buildId: buildId
                            },
                            customHeaders: {
                                "Content-Type": "application/json-patch+json",
                            },
                            body: document
                        })];
                });
            });
        };
        /**
         * Gets properties for a definition.
         *
         * @param project - Project ID or project name
         * @param definitionId - The ID of the definition.
         * @param filter - A comma-delimited list of properties. If specified, filters to these specific properties.
         */
        BuildRestClient.prototype.getDefinitionProperties = function (project, definitionId, filter) {
            return __awaiter(this, void 0, void 0, function () {
                var queryValues;
                return __generator(this, function (_a) {
                    queryValues = {
                        filter: filter && filter.join(",")
                    };
                    return [2 /*return*/, this.beginRequest({
                            apiVersion: "7.2-preview.1",
                            routeTemplate: "{project}/_apis/build/definitions/{definitionId}/properties",
                            routeValues: {
                                project: project,
                                definitionId: definitionId
                            },
                            queryParams: queryValues
                        })];
                });
            });
        };
        /**
         * Updates properties for a definition.
         *
         * @param document - A json-patch document describing the properties to update.
         * @param project - Project ID or project name
         * @param definitionId - The ID of the definition.
         */
        BuildRestClient.prototype.updateDefinitionProperties = function (document, project, definitionId) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, this.beginRequest({
                            apiVersion: "7.2-preview.1",
                            method: "PATCH",
                            routeTemplate: "{project}/_apis/build/definitions/{definitionId}/properties",
                            routeValues: {
                                project: project,
                                definitionId: definitionId
                            },
                            customHeaders: {
                                "Content-Type": "application/json-patch+json",
                            },
                            body: document
                        })];
                });
            });
        };
        /**
         * Gets a pull request object from source provider.
         *
         * @param project - Project ID or project name
         * @param providerName - The name of the source provider.
         * @param pullRequestId - Vendor-specific id of the pull request.
         * @param repositoryId - Vendor-specific identifier or the name of the repository that contains the pull request.
         * @param serviceEndpointId - If specified, the ID of the service endpoint to query. Can only be omitted for providers that do not use service endpoints, e.g. TFVC or TFGit.
         */
        BuildRestClient.prototype.getPullRequest = function (project, providerName, pullRequestId, repositoryId, serviceEndpointId) {
            return __awaiter(this, void 0, void 0, function () {
                var queryValues;
                return __generator(this, function (_a) {
                    queryValues = {
                        repositoryId: repositoryId,
                        serviceEndpointId: serviceEndpointId
                    };
                    return [2 /*return*/, this.beginRequest({
                            apiVersion: "7.2-preview.1",
                            routeTemplate: "{project}/_apis/sourceProviders/{providerName}/pullRequests/{pullRequestId}",
                            routeValues: {
                                project: project,
                                providerName: providerName,
                                pullRequestId: pullRequestId
                            },
                            queryParams: queryValues
                        })];
                });
            });
        };
        /**
         * Gets a build report.
         *
         * @param project - Project ID or project name
         * @param buildId - The ID of the build.
         * @param type -
         */
        BuildRestClient.prototype.getBuildReport = function (project, buildId, type) {
            return __awaiter(this, void 0, void 0, function () {
                var queryValues;
                return __generator(this, function (_a) {
                    queryValues = {
                        type: type
                    };
                    return [2 /*return*/, this.beginRequest({
                            apiVersion: "7.2-preview.2",
                            routeTemplate: "{project}/_apis/build/builds/{buildId}/report",
                            routeValues: {
                                project: project,
                                buildId: buildId
                            },
                            queryParams: queryValues
                        })];
                });
            });
        };
        /**
         * Gets a build report.
         *
         * @param project - Project ID or project name
         * @param buildId - The ID of the build.
         * @param type -
         */
        BuildRestClient.prototype.getBuildReportHtmlContent = function (project, buildId, type) {
            return __awaiter(this, void 0, void 0, function () {
                var queryValues;
                return __generator(this, function (_a) {
                    queryValues = {
                        type: type
                    };
                    return [2 /*return*/, this.beginRequest({
                            apiVersion: "7.2-preview.2",
                            httpResponseType: "text/html",
                            routeTemplate: "{project}/_apis/build/builds/{buildId}/report",
                            routeValues: {
                                project: project,
                                buildId: buildId
                            },
                            queryParams: queryValues
                        })];
                });
            });
        };
        /**
         * Gets a list of source code repositories.
         *
         * @param project - Project ID or project name
         * @param providerName - The name of the source provider.
         * @param serviceEndpointId - If specified, the ID of the service endpoint to query. Can only be omitted for providers that do not use service endpoints, e.g. TFVC or TFGit.
         * @param repository - If specified, the vendor-specific identifier or the name of a single repository to get.
         * @param resultSet - 'top' for the repositories most relevant for the endpoint. If not set, all repositories are returned. Ignored if 'repository' is set.
         * @param pageResults - If set to true, this will limit the set of results and will return a continuation token to continue the query.
         * @param continuationToken - When paging results, this is a continuation token, returned by a previous call to this method, that can be used to return the next set of repositories.
         */
        BuildRestClient.prototype.listRepositories = function (project, providerName, serviceEndpointId, repository, resultSet, pageResults, continuationToken) {
            return __awaiter(this, void 0, void 0, function () {
                var queryValues;
                return __generator(this, function (_a) {
                    queryValues = {
                        serviceEndpointId: serviceEndpointId,
                        repository: repository,
                        resultSet: resultSet,
                        pageResults: pageResults,
                        continuationToken: continuationToken
                    };
                    return [2 /*return*/, this.beginRequest({
                            apiVersion: "7.2-preview.1",
                            routeTemplate: "{project}/_apis/sourceProviders/{providerName}/repositories",
                            routeValues: {
                                project: project,
                                providerName: providerName
                            },
                            queryParams: queryValues
                        })];
                });
            });
        };
        /**
         * @param resources -
         * @param project - Project ID or project name
         * @param definitionId -
         */
        BuildRestClient.prototype.authorizeDefinitionResources = function (resources, project, definitionId) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, this.beginRequest({
                            apiVersion: "7.2-preview.1",
                            method: "PATCH",
                            routeTemplate: "{project}/_apis/build/definitions/{definitionId}/resources",
                            routeValues: {
                                project: project,
                                definitionId: definitionId
                            },
                            body: resources
                        })];
                });
            });
        };
        /**
         * @param project - Project ID or project name
         * @param definitionId -
         */
        BuildRestClient.prototype.getDefinitionResources = function (project, definitionId) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, this.beginRequest({
                            apiVersion: "7.2-preview.1",
                            routeTemplate: "{project}/_apis/build/definitions/{definitionId}/resources",
                            routeValues: {
                                project: project,
                                definitionId: definitionId
                            }
                        })];
                });
            });
        };
        /**
         * Gets information about build resources in the system.
         *
         */
        BuildRestClient.prototype.getResourceUsage = function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, this.beginRequest({
                            apiVersion: "7.2-preview.2",
                            routeTemplate: "_apis/build/ResourceUsage"
                        })];
                });
            });
        };
        /**
         * Gets the project's retention settings.
         *
         * @param project - Project ID or project name
         */
        BuildRestClient.prototype.getRetentionSettings = function (project) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, this.beginRequest({
                            apiVersion: "7.2-preview.1",
                            routeTemplate: "{project}/_apis/build/retention",
                            routeValues: {
                                project: project
                            }
                        })];
                });
            });
        };
        /**
         * Updates the project's retention settings.
         *
         * @param updateModel -
         * @param project - Project ID or project name
         */
        BuildRestClient.prototype.updateRetentionSettings = function (updateModel, project) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, this.beginRequest({
                            apiVersion: "7.2-preview.1",
                            method: "PATCH",
                            routeTemplate: "{project}/_apis/build/retention",
                            routeValues: {
                                project: project
                            },
                            body: updateModel
                        })];
                });
            });
        };
        /**
         * Gets all revisions of a definition.
         *
         * @param project - Project ID or project name
         * @param definitionId - The ID of the definition.
         */
        BuildRestClient.prototype.getDefinitionRevisions = function (project, definitionId) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, this.beginRequest({
                            apiVersion: "7.2-preview.3",
                            routeTemplate: "{project}/_apis/build/definitions/{definitionId}/revisions",
                            routeValues: {
                                project: project,
                                definitionId: definitionId
                            }
                        })];
                });
            });
        };
        /**
         * Gets the build settings.
         *
         * @param project - Project ID or project name
         */
        BuildRestClient.prototype.getBuildSettings = function (project) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, this.beginRequest({
                            apiVersion: "7.2-preview.1",
                            routeTemplate: "{project}/_apis/build/settings",
                            routeValues: {
                                project: project
                            }
                        })];
                });
            });
        };
        /**
         * Updates the build settings.
         *
         * @param settings - The new settings.
         * @param project - Project ID or project name
         */
        BuildRestClient.prototype.updateBuildSettings = function (settings, project) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, this.beginRequest({
                            apiVersion: "7.2-preview.1",
                            method: "PATCH",
                            routeTemplate: "{project}/_apis/build/settings",
                            routeValues: {
                                project: project
                            },
                            body: settings
                        })];
                });
            });
        };
        /**
         * Get a list of source providers and their capabilities.
         *
         * @param project - Project ID or project name
         */
        BuildRestClient.prototype.listSourceProviders = function (project) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, this.beginRequest({
                            apiVersion: "7.2-preview.1",
                            routeTemplate: "{project}/_apis/sourceProviders",
                            routeValues: {
                                project: project
                            }
                        })];
                });
            });
        };
        /**
         * Update a build stage
         *
         * @param updateParameters -
         * @param buildId -
         * @param stageRefName -
         * @param project - Project ID or project name
         */
        BuildRestClient.prototype.updateStage = function (updateParameters, buildId, stageRefName, project) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, this.beginRequest({
                            apiVersion: "7.2-preview.1",
                            method: "PATCH",
                            routeTemplate: "{project}/_apis/build/builds/{buildId}/stages/{stageRefName}",
                            routeValues: {
                                project: project,
                                buildId: buildId,
                                stageRefName: stageRefName
                            },
                            body: updateParameters
                        })];
                });
            });
        };
        /**
         * \<p\>Gets the build status for a definition, optionally scoped to a specific branch, stage, job, and configuration.\</p\> \<p\>If there are more than one, then it is required to pass in a stageName value when specifying a jobName, and the same rule then applies for both if passing a configuration parameter.\</p\>
         *
         * @param project - Project ID or project name
         * @param definition - Either the definition name with optional leading folder path, or the definition id.
         * @param branchName - Only consider the most recent build for this branch. If not specified, the default branch is used.
         * @param stageName - Use this stage within the pipeline to render the status.
         * @param jobName - Use this job within a stage of the pipeline to render the status.
         * @param configuration - Use this job configuration to render the status
         * @param label - Replaces the default text on the left side of the badge.
         */
        BuildRestClient.prototype.getStatusBadge = function (project, definition, branchName, stageName, jobName, configuration, label) {
            return __awaiter(this, void 0, void 0, function () {
                var queryValues;
                return __generator(this, function (_a) {
                    queryValues = {
                        branchName: branchName,
                        stageName: stageName,
                        jobName: jobName,
                        configuration: configuration,
                        label: label
                    };
                    return [2 /*return*/, this.beginRequest({
                            apiVersion: "7.2-preview.1",
                            routeTemplate: "{project}/_apis/build/status/{*definition}",
                            routeValues: {
                                project: project,
                                definition: definition
                            },
                            queryParams: queryValues
                        })];
                });
            });
        };
        /**
         * Adds a tag to a build.
         *
         * @param project - Project ID or project name
         * @param buildId - The ID of the build.
         * @param tag - The tag to add.
         */
        BuildRestClient.prototype.addBuildTag = function (project, buildId, tag) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, this.beginRequest({
                            apiVersion: "7.2-preview.3",
                            method: "PUT",
                            routeTemplate: "{project}/_apis/build/builds/{buildId}/tags/{*tag}",
                            routeValues: {
                                project: project,
                                buildId: buildId,
                                tag: tag
                            }
                        })];
                });
            });
        };
        /**
         * Adds tags to a build.
         *
         * @param tags - The tags to add. Request body is composed directly from listed tags.
         * @param project - Project ID or project name
         * @param buildId - The ID of the build.
         */
        BuildRestClient.prototype.addBuildTags = function (tags, project, buildId) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, this.beginRequest({
                            apiVersion: "7.2-preview.3",
                            method: "POST",
                            routeTemplate: "{project}/_apis/build/builds/{buildId}/tags/{*tag}",
                            routeValues: {
                                project: project,
                                buildId: buildId
                            },
                            body: tags
                        })];
                });
            });
        };
        /**
         * Removes a tag from a build. NOTE: This API will not work for tags with special characters. To remove tags with special characters, use the PATCH method instead (in 6.0+)
         *
         * @param project - Project ID or project name
         * @param buildId - The ID of the build.
         * @param tag - The tag to remove.
         */
        BuildRestClient.prototype.deleteBuildTag = function (project, buildId, tag) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, this.beginRequest({
                            apiVersion: "7.2-preview.3",
                            method: "DELETE",
                            routeTemplate: "{project}/_apis/build/builds/{buildId}/tags/{*tag}",
                            routeValues: {
                                project: project,
                                buildId: buildId,
                                tag: tag
                            }
                        })];
                });
            });
        };
        /**
         * Gets the tags for a build.
         *
         * @param project - Project ID or project name
         * @param buildId - The ID of the build.
         */
        BuildRestClient.prototype.getBuildTags = function (project, buildId) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, this.beginRequest({
                            apiVersion: "7.2-preview.3",
                            routeTemplate: "{project}/_apis/build/builds/{buildId}/tags/{*tag}",
                            routeValues: {
                                project: project,
                                buildId: buildId
                            }
                        })];
                });
            });
        };
        /**
         * Adds/Removes tags from a build.
         *
         * @param updateParameters - The tags to add/remove.
         * @param project - Project ID or project name
         * @param buildId - The ID of the build.
         */
        BuildRestClient.prototype.updateBuildTags = function (updateParameters, project, buildId) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, this.beginRequest({
                            apiVersion: "7.2-preview.3",
                            method: "PATCH",
                            routeTemplate: "{project}/_apis/build/builds/{buildId}/tags/{*tag}",
                            routeValues: {
                                project: project,
                                buildId: buildId
                            },
                            body: updateParameters
                        })];
                });
            });
        };
        /**
         * Adds a tag to a definition
         *
         * @param project - Project ID or project name
         * @param definitionId - The ID of the definition.
         * @param tag - The tag to add.
         */
        BuildRestClient.prototype.addDefinitionTag = function (project, definitionId, tag) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, this.beginRequest({
                            apiVersion: "7.2-preview.3",
                            method: "PUT",
                            routeTemplate: "{project}/_apis/build/definitions/{DefinitionId}/tags/{*tag}",
                            routeValues: {
                                project: project,
                                definitionId: definitionId,
                                tag: tag
                            }
                        })];
                });
            });
        };
        /**
         * Adds multiple tags to a definition.
         *
         * @param tags - The tags to add.
         * @param project - Project ID or project name
         * @param definitionId - The ID of the definition.
         */
        BuildRestClient.prototype.addDefinitionTags = function (tags, project, definitionId) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, this.beginRequest({
                            apiVersion: "7.2-preview.3",
                            method: "POST",
                            routeTemplate: "{project}/_apis/build/definitions/{DefinitionId}/tags/{*tag}",
                            routeValues: {
                                project: project,
                                definitionId: definitionId
                            },
                            body: tags
                        })];
                });
            });
        };
        /**
         * Removes a tag from a definition. NOTE: This API will not work for tags with special characters. To remove tags with special characters, use the PATCH method instead (in 6.0+)
         *
         * @param project - Project ID or project name
         * @param definitionId - The ID of the definition.
         * @param tag - The tag to remove.
         */
        BuildRestClient.prototype.deleteDefinitionTag = function (project, definitionId, tag) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, this.beginRequest({
                            apiVersion: "7.2-preview.3",
                            method: "DELETE",
                            routeTemplate: "{project}/_apis/build/definitions/{DefinitionId}/tags/{*tag}",
                            routeValues: {
                                project: project,
                                definitionId: definitionId,
                                tag: tag
                            }
                        })];
                });
            });
        };
        /**
         * Gets the tags for a definition.
         *
         * @param project - Project ID or project name
         * @param definitionId - The ID of the definition.
         * @param revision - The definition revision number. If not specified, uses the latest revision of the definition.
         */
        BuildRestClient.prototype.getDefinitionTags = function (project, definitionId, revision) {
            return __awaiter(this, void 0, void 0, function () {
                var queryValues;
                return __generator(this, function (_a) {
                    queryValues = {
                        revision: revision
                    };
                    return [2 /*return*/, this.beginRequest({
                            apiVersion: "7.2-preview.3",
                            routeTemplate: "{project}/_apis/build/definitions/{DefinitionId}/tags/{*tag}",
                            routeValues: {
                                project: project,
                                definitionId: definitionId
                            },
                            queryParams: queryValues
                        })];
                });
            });
        };
        /**
         * Adds/Removes tags from a definition.
         *
         * @param updateParameters - The tags to add/remove.
         * @param project - Project ID or project name
         * @param definitionId - The ID of the definition.
         */
        BuildRestClient.prototype.updateDefinitionTags = function (updateParameters, project, definitionId) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, this.beginRequest({
                            apiVersion: "7.2-preview.3",
                            method: "PATCH",
                            routeTemplate: "{project}/_apis/build/definitions/{DefinitionId}/tags/{*tag}",
                            routeValues: {
                                project: project,
                                definitionId: definitionId
                            },
                            body: updateParameters
                        })];
                });
            });
        };
        /**
         * Removes a tag from builds, definitions, and from the tag store
         *
         * @param project - Project ID or project name
         * @param tag - The tag to remove.
         */
        BuildRestClient.prototype.deleteTag = function (project, tag) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, this.beginRequest({
                            apiVersion: "7.2-preview.3",
                            method: "DELETE",
                            routeTemplate: "{project}/_apis/build/tags/{*tag}",
                            routeValues: {
                                project: project,
                                tag: tag
                            }
                        })];
                });
            });
        };
        /**
         * Gets a list of all build tags in the project.
         *
         * @param project - Project ID or project name
         */
        BuildRestClient.prototype.getTags = function (project) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, this.beginRequest({
                            apiVersion: "7.2-preview.3",
                            routeTemplate: "{project}/_apis/build/tags/{*tag}",
                            routeValues: {
                                project: project
                            }
                        })];
                });
            });
        };
        /**
         * Deletes a build definition template.
         *
         * @param project - Project ID or project name
         * @param templateId - The ID of the template.
         */
        BuildRestClient.prototype.deleteTemplate = function (project, templateId) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, this.beginRequest({
                            apiVersion: "7.2-preview.3",
                            method: "DELETE",
                            routeTemplate: "{project}/_apis/build/definitions/templates/{templateId}",
                            routeValues: {
                                project: project,
                                templateId: templateId
                            }
                        })];
                });
            });
        };
        /**
         * Gets a specific build definition template.
         *
         * @param project - Project ID or project name
         * @param templateId - The ID of the requested template.
         */
        BuildRestClient.prototype.getTemplate = function (project, templateId) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, this.beginRequest({
                            apiVersion: "7.2-preview.3",
                            routeTemplate: "{project}/_apis/build/definitions/templates/{templateId}",
                            routeValues: {
                                project: project,
                                templateId: templateId
                            }
                        })];
                });
            });
        };
        /**
         * Gets all definition templates.
         *
         * @param project - Project ID or project name
         */
        BuildRestClient.prototype.getTemplates = function (project) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, this.beginRequest({
                            apiVersion: "7.2-preview.3",
                            routeTemplate: "{project}/_apis/build/definitions/templates/{templateId}",
                            routeValues: {
                                project: project
                            }
                        })];
                });
            });
        };
        /**
         * Updates an existing build definition template.
         *
         * @param template - The new version of the template.
         * @param project - Project ID or project name
         * @param templateId - The ID of the template.
         */
        BuildRestClient.prototype.saveTemplate = function (template, project, templateId) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, this.beginRequest({
                            apiVersion: "7.2-preview.3",
                            method: "PUT",
                            routeTemplate: "{project}/_apis/build/definitions/templates/{templateId}",
                            routeValues: {
                                project: project,
                                templateId: templateId
                            },
                            body: template
                        })];
                });
            });
        };
        /**
         * Gets details for a build
         *
         * @param project - Project ID or project name
         * @param buildId -
         * @param timelineId -
         * @param changeId -
         * @param planId -
         */
        BuildRestClient.prototype.getBuildTimeline = function (project, buildId, timelineId, changeId, planId) {
            return __awaiter(this, void 0, void 0, function () {
                var queryValues;
                return __generator(this, function (_a) {
                    queryValues = {
                        changeId: changeId,
                        planId: planId
                    };
                    return [2 /*return*/, this.beginRequest({
                            apiVersion: "7.2-preview.3",
                            routeTemplate: "{project}/_apis/build/builds/{buildId}/Timeline/{timelineId}",
                            routeValues: {
                                project: project,
                                buildId: buildId,
                                timelineId: timelineId
                            },
                            queryParams: queryValues
                        })];
                });
            });
        };
        /**
         * Recreates the webhooks for the specified triggers in the given source code repository.
         *
         * @param triggerTypes - The types of triggers to restore webhooks for.
         * @param project - Project ID or project name
         * @param providerName - The name of the source provider.
         * @param serviceEndpointId - If specified, the ID of the service endpoint to query. Can only be omitted for providers that do not use service endpoints, e.g. TFVC or TFGit.
         * @param repository - If specified, the vendor-specific identifier or the name of the repository to get webhooks. Can only be omitted for providers that do not support multiple repositories.
         */
        BuildRestClient.prototype.restoreWebhooks = function (triggerTypes, project, providerName, serviceEndpointId, repository) {
            return __awaiter(this, void 0, void 0, function () {
                var queryValues;
                return __generator(this, function (_a) {
                    queryValues = {
                        serviceEndpointId: serviceEndpointId,
                        repository: repository
                    };
                    return [2 /*return*/, this.beginRequest({
                            apiVersion: "7.2-preview.1",
                            method: "POST",
                            routeTemplate: "{project}/_apis/sourceProviders/{providerName}/webhooks",
                            routeValues: {
                                project: project,
                                providerName: providerName
                            },
                            queryParams: queryValues,
                            body: triggerTypes
                        })];
                });
            });
        };
        /**
         * Gets a list of webhooks installed in the given source code repository.
         *
         * @param project - Project ID or project name
         * @param providerName - The name of the source provider.
         * @param serviceEndpointId - If specified, the ID of the service endpoint to query. Can only be omitted for providers that do not use service endpoints, e.g. TFVC or TFGit.
         * @param repository - If specified, the vendor-specific identifier or the name of the repository to get webhooks. Can only be omitted for providers that do not support multiple repositories.
         */
        BuildRestClient.prototype.listWebhooks = function (project, providerName, serviceEndpointId, repository) {
            return __awaiter(this, void 0, void 0, function () {
                var queryValues;
                return __generator(this, function (_a) {
                    queryValues = {
                        serviceEndpointId: serviceEndpointId,
                        repository: repository
                    };
                    return [2 /*return*/, this.beginRequest({
                            apiVersion: "7.2-preview.1",
                            routeTemplate: "{project}/_apis/sourceProviders/{providerName}/webhooks",
                            routeValues: {
                                project: project,
                                providerName: providerName
                            },
                            queryParams: queryValues
                        })];
                });
            });
        };
        /**
         * Gets the work items associated with a build. Only work items in the same project are returned.
         *
         * @param project - Project ID or project name
         * @param buildId - The ID of the build.
         * @param top - The maximum number of work items to return.
         */
        BuildRestClient.prototype.getBuildWorkItemsRefs = function (project, buildId, top) {
            return __awaiter(this, void 0, void 0, function () {
                var queryValues;
                return __generator(this, function (_a) {
                    queryValues = {
                        '$top': top
                    };
                    return [2 /*return*/, this.beginRequest({
                            apiVersion: "7.2-preview.2",
                            routeTemplate: "{project}/_apis/build/builds/{buildId}/workitems",
                            routeValues: {
                                project: project,
                                buildId: buildId
                            },
                            queryParams: queryValues
                        })];
                });
            });
        };
        /**
         * Gets the work items associated with a build, filtered to specific commits.
         *
         * @param commitIds - A comma-delimited list of commit IDs.
         * @param project - Project ID or project name
         * @param buildId - The ID of the build.
         * @param top - The maximum number of work items to return, or the number of commits to consider if no commit IDs are specified.
         */
        BuildRestClient.prototype.getBuildWorkItemsRefsFromCommits = function (commitIds, project, buildId, top) {
            return __awaiter(this, void 0, void 0, function () {
                var queryValues;
                return __generator(this, function (_a) {
                    queryValues = {
                        '$top': top
                    };
                    return [2 /*return*/, this.beginRequest({
                            apiVersion: "7.2-preview.2",
                            method: "POST",
                            routeTemplate: "{project}/_apis/build/builds/{buildId}/workitems",
                            routeValues: {
                                project: project,
                                buildId: buildId
                            },
                            queryParams: queryValues,
                            body: commitIds
                        })];
                });
            });
        };
        /**
         * Gets all the work items between two builds.
         *
         * @param project - Project ID or project name
         * @param fromBuildId - The ID of the first build.
         * @param toBuildId - The ID of the last build.
         * @param top - The maximum number of work items to return.
         */
        BuildRestClient.prototype.getWorkItemsBetweenBuilds = function (project, fromBuildId, toBuildId, top) {
            return __awaiter(this, void 0, void 0, function () {
                var queryValues;
                return __generator(this, function (_a) {
                    queryValues = {
                        fromBuildId: fromBuildId,
                        toBuildId: toBuildId,
                        '$top': top
                    };
                    return [2 /*return*/, this.beginRequest({
                            apiVersion: "7.2-preview.2",
                            routeTemplate: "{project}/_apis/build/workitems",
                            routeValues: {
                                project: project
                            },
                            queryParams: queryValues
                        })];
                });
            });
        };
        /**
         * Converts a definition to YAML, optionally at a specific revision.
         *
         * @param project - Project ID or project name
         * @param definitionId - The ID of the definition.
         * @param revision - The revision number to retrieve. If this is not specified, the latest version will be returned.
         * @param minMetricsTime - If specified, indicates the date from which metrics should be included.
         * @param propertyFilters - A comma-delimited list of properties to include in the results.
         * @param includeLatestBuilds -
         */
        BuildRestClient.prototype.getDefinitionYaml = function (project, definitionId, revision, minMetricsTime, propertyFilters, includeLatestBuilds) {
            return __awaiter(this, void 0, void 0, function () {
                var queryValues;
                return __generator(this, function (_a) {
                    queryValues = {
                        revision: revision,
                        minMetricsTime: minMetricsTime,
                        propertyFilters: propertyFilters && propertyFilters.join(","),
                        includeLatestBuilds: includeLatestBuilds
                    };
                    return [2 /*return*/, this.beginRequest({
                            apiVersion: "7.2-preview.1",
                            routeTemplate: "{project}/_apis/build/definitions/{definitionId}/yaml",
                            routeValues: {
                                project: project,
                                definitionId: definitionId
                            },
                            queryParams: queryValues
                        })];
                });
            });
        };
        BuildRestClient.RESOURCE_AREA_ID = "965220d5-5bb9-42cf-8d67-9b146df2a5a4";
        return BuildRestClient;
    }(RestClientBase_1.RestClientBase));
    exports.BuildRestClient = BuildRestClient;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/azure-devops-extension-api/Build/BuildServices.js":
/*!************************************************************************!*\
  !*** ./node_modules/azure-devops-extension-api/Build/BuildServices.js ***!
  \************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    /**
     * Contribution ids of Azure Pipelines services which can be obtained from DevOps.getService
     */
    var BuildServiceIds;
    (function (BuildServiceIds) {
        /**
         * Service for getting contextual information when on a builds page
         */
        BuildServiceIds["BuildPageDataService"] = "ms.vss-build-web.build-page-data-service";
    })(BuildServiceIds = exports.BuildServiceIds || (exports.BuildServiceIds = {}));
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/azure-devops-extension-api/Build/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/azure-devops-extension-api/Build/index.js ***!
  \****************************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ./Build */ "./node_modules/azure-devops-extension-api/Build/Build.js"), __webpack_require__(/*! ./BuildClient */ "./node_modules/azure-devops-extension-api/Build/BuildClient.js"), __webpack_require__(/*! ./BuildServices */ "./node_modules/azure-devops-extension-api/Build/BuildServices.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, Build_1, BuildClient_1, BuildServices_1) {
    "use strict";
    function __export(m) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    __export(Build_1);
    __export(BuildClient_1);
    __export(BuildServices_1);
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/azure-devops-extension-api/Common/Fetch.js":
/*!*****************************************************************!*\
  !*** ./node_modules/azure-devops-extension-api/Common/Fetch.js ***!
  \*****************************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*
 * ---------------------------------------------------------
 * Copyright(C) Microsoft Corporation. All rights reserved.
 * ---------------------------------------------------------
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! whatwg-fetch */ "./node_modules/whatwg-fetch/fetch.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    /**
     * Issue a fetch request. This is a wrapper around the browser fetch method that handles VSS authentication
     * and triggers events that can be listened to by other modules.
     *
     * @param requestUrl Url to send the request to
     * @param options fetch settings/options for the request
     * @param vssRequestOptions VSS specific request options
     *
     * Triggered Events:
     *  afterRequest -> IPostRequestEvent is sent after the request has completed.
     *  beforeRequest -> IPreRequestEvent is sent before the request is made.
     */
    function issueRequest(requestUrl, options, vssRequestOptions) {
        return __awaiter(this, void 0, void 0, function () {
            var response, headers, key, sessionId, command, refreshToken, authHeader, ex_1, error, error, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        response = undefined;
                        // Add a X-VSS-ReauthenticationAction header to all fetch requests
                        if (!options) {
                            options = {};
                        }
                        // If options.headers is set, check if it is a Headers object, and if not, convert it to one.
                        if (options.headers) {
                            if (options.headers instanceof Headers) {
                                headers = options.headers;
                            }
                            else {
                                headers = new Headers();
                                if (typeof options.headers.hasOwnProperty === "function") {
                                    for (key in options.headers) {
                                        if (options.headers.hasOwnProperty(key)) {
                                            headers.append(key, options.headers[key]);
                                        }
                                    }
                                }
                            }
                        }
                        else {
                            headers = new Headers();
                        }
                        options.headers = headers;
                        headers.append("X-VSS-ReauthenticationAction", "Suppress");
                        // Add a X-TFS-Session header with the current sessionId and command for correlation
                        if (vssRequestOptions) {
                            sessionId = vssRequestOptions.sessionId;
                            command = vssRequestOptions.command;
                            if (sessionId) {
                                if (command) {
                                    headers.append("X-TFS-Session", sessionId + "," + command);
                                }
                                else {
                                    headers.append("X-TFS-Session", sessionId);
                                }
                            }
                        }
                        // Send credentials to the same origin, we will use tokens for differing origins.
                        options.credentials = "same-origin";
                        refreshToken = false;
                        _b.label = 1;
                    case 1:
                        if (!(vssRequestOptions && vssRequestOptions.authTokenProvider)) return [3 /*break*/, 3];
                        return [4 /*yield*/, vssRequestOptions.authTokenProvider.getAuthorizationHeader(refreshToken)];
                    case 2:
                        authHeader = _b.sent();
                        if (authHeader) {
                            headers.append("Authorization", authHeader);
                            refreshToken = true;
                        }
                        headers.append("X-TFS-FedAuthRedirect", "Suppress");
                        _b.label = 3;
                    case 3:
                        _b.trys.push([3, 5, , 6]);
                        return [4 /*yield*/, fetch(requestUrl, options)];
                    case 4:
                        response = _b.sent();
                        return [3 /*break*/, 6];
                    case 5:
                        ex_1 = _b.sent();
                        console.warn("Unhandled exception in fetch for " + requestUrl + ": " + (ex_1 && ex_1.toString()));
                        error = new Error("TF400893: Unable to contact the server. Please check your network connection and try again.");
                        error.name = "NetworkException";
                        throw error;
                    case 6:
                        // If we recieved a 401 and have a token manager, we will refresh our token and try again.
                        if (response.status === 401 && !refreshToken && vssRequestOptions && vssRequestOptions.authTokenProvider) {
                            refreshToken = true;
                            return [3 /*break*/, 7];
                        }
                        _b.label = 7;
                    case 7:
                        if (false) // removed by dead control flow
{}
                        _b.label = 8;
                    case 8:
                        if (!!response.ok) return [3 /*break*/, 10];
                        error = new Error();
                        error.name = "TFS.WebApi.Exception";
                        error.status = response.status;
                        _a = error;
                        return [4 /*yield*/, response.text()];
                    case 9:
                        _a.responseText = _b.sent();
                        // Attempt to parse the response as a json object, for many of the failures
                        // the server will serialize details into the body.
                        if (error.responseText && error.responseText !== "") {
                            try {
                                error.serverError = JSON.parse(error.responseText);
                                if (error.serverError && error.serverError.message) {
                                    error.message = error.serverError.message;
                                }
                            }
                            catch (exception) {
                            }
                        }
                        if (!error.message) {
                            error.message = response.status + ": " + response.statusText;
                        }
                        throw error;
                    case 10: return [2 /*return*/, response];
                }
            });
        });
    }
    exports.issueRequest = issueRequest;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/azure-devops-extension-api/Common/RestClientBase.js":
/*!**************************************************************************!*\
  !*** ./node_modules/azure-devops-extension-api/Common/RestClientBase.js ***!
  \**************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*
 * ---------------------------------------------------------
 * Copyright(C) Microsoft Corporation. All rights reserved.
 * ---------------------------------------------------------
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ./Fetch */ "./node_modules/azure-devops-extension-api/Common/Fetch.js"), __webpack_require__(/*! ./Util/Serialization */ "./node_modules/azure-devops-extension-api/Common/Util/Serialization.js"), __webpack_require__(/*! ./Util/Url */ "./node_modules/azure-devops-extension-api/Common/Util/Url.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, Fetch_1, Serialization_1, Url_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    /**
    * Base class that should be used (derived from) to make requests to VSS REST apis
    */
    var RestClientBase = /** @class */ (function () {
        function RestClientBase(options) {
            this._options = options || {};
            if (typeof this._options.rootPath === "string") {
                this._rootPath = Promise.resolve(this._options.rootPath);
            }
            else {
                this._rootPath = this._options.rootPath || Promise.resolve("/");
            }
        }
        /**
        * Gets the root path of the Service
        *
        * @returns Promise for the resolving the root path of the service.
        */
        RestClientBase.prototype.getRootPath = function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, this._rootPath];
                });
            });
        };
        /**
        * Issue a request to a VSS REST endpoint.
        *
        * @param requestParams request options
        * @returns Promise for the response
        */
        RestClientBase.prototype.beginRequest = function (requestParams) {
            return __awaiter(this, void 0, void 0, function () {
                var _this = this;
                return __generator(this, function (_a) {
                    return [2 /*return*/, this._rootPath.then(function (rootPath) {
                            var requestUrl = rootPath + Url_1.replaceRouteValues(requestParams.routeTemplate, requestParams.routeValues || {});
                            if (requestParams.queryParams) {
                                var uri = new Url_1.Uri(requestUrl);
                                uri.addQueryParams(requestParams.queryParams);
                                requestUrl = uri.absoluteUri;
                            }
                            return _this._issueRequest(requestUrl, requestParams.apiVersion, requestParams);
                        })];
                });
            });
        };
        /**
         * Issue a request to a VSS REST endpoint at the specified location
         *
         * @param requestUrl Resolved URL of the request
         * @param apiVersion API version
         * @param requestParams Optional request parameters
         */
        RestClientBase.prototype._issueRequest = function (requestUrl, apiVersion, requestParams) {
            var fetchOptions = {};
            fetchOptions.method = requestParams.method || "GET";
            fetchOptions.mode = "cors";
            if (!requestParams.isRawData && requestParams.body && fetchOptions.method.toUpperCase() !== 'GET') {
                fetchOptions.body = JSON.stringify(requestParams.body);
            }
            else {
                fetchOptions.body = requestParams.body;
            }
            var acceptType = requestParams.httpResponseType || "application/json";
            var acceptHeaderValue = acceptType + ";api-version=" + apiVersion + ";excludeUrls=true;enumsAsNumbers=true;msDateFormat=true;noArrayWrap=true";
            fetchOptions.headers = Object.assign({
                "Accept": acceptHeaderValue,
                "Content-Type": requestParams.body && "application/json"
            }, requestParams.customHeaders) /* lib.dom.d.ts does not have the correct type for Headers */;
            var vssRequestOptions = {
                authTokenProvider: this._options.authTokenProvider,
                sessionId: this._options.sessionId,
                command: requestParams.command || this._options.command
            };
            var result = Fetch_1.issueRequest(requestUrl, fetchOptions, vssRequestOptions);
            return result.then(function (response) {
                if (requestParams.returnRawResponse) {
                    return response;
                }
                else if (acceptType.toLowerCase().indexOf("json") >= 0) {
                    // MSJSON date formats must be replaced in the raw text before JSON parsing
                    return response.text().then(Serialization_1.deserializeVssJsonObject);
                }
                else if (acceptType.toLowerCase() === "text/plain") {
                    return response.text();
                }
                else {
                    return response.arrayBuffer();
                }
            });
        };
        return RestClientBase;
    }());
    exports.RestClientBase = RestClientBase;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/azure-devops-extension-api/Common/Util/Serialization.js":
/*!******************************************************************************!*\
  !*** ./node_modules/azure-devops-extension-api/Common/Util/Serialization.js ***!
  \******************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*
 * ---------------------------------------------------------
 * Copyright(C) Microsoft Corporation. All rights reserved.
 * ---------------------------------------------------------
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    var msAjaxDateRegEx = new RegExp('(^|[^\\\\])\\"\\\\/Date\\((-?[0-9]+)(?:[a-zA-Z]|(?:\\+|-)[0-9]{4})?\\)\\\\/\\"', 'g');
    /**
     * Handle the raw text of a JSON response which may contain MSJSON style dates and
     * deserialize (JSON.parse) the data in a way that restores Date objects rather than
     * strings.
     *
     * MSJSON style dates are in the form:
     *
     *     "lastModified": "\/Date(1496158224000)\/"
     *
     * This format unnecessarily (but intentionally) escapes the "/" character. So the parsed
     * JSON will have no trace of the escape character (\).
     *
     * @param text The raw JSON text
     */
    function deserializeVssJsonObject(text) {
        function replaceMsJsonDates(object, parentObject, parentObjectKey) {
            if (parentObject && typeof object.__msjson_date__ === "number") {
                parentObject[parentObjectKey] = new Date(object.__msjson_date__);
                return;
            }
            for (var key in object) {
                var value = object[key];
                if (value !== null && typeof value === "object") {
                    replaceMsJsonDates(object[key], object, key);
                }
            }
        }
        var deserializedData = null;
        if (text) {
            // Replace MSJSON dates with an object that we can easily identify after JSON.parse.
            // This replaces the string value (like "\/Date(1496158224000)\/") with a JSON object that 
            // has an "__msjson_date__" key.
            var replacedText = text.replace(msAjaxDateRegEx, "$1{\"__msjson_date__\":$2 }");
            // Do the actual JSON deserialization
            deserializedData = JSON.parse(replacedText);
            // Go through the parsed object and create actual Date objects for our replacements made above
            if (replacedText !== text) {
                replaceMsJsonDates(deserializedData, null, "");
            }
        }
        return deserializedData;
    }
    exports.deserializeVssJsonObject = deserializeVssJsonObject;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/azure-devops-extension-api/Common/Util/Url.js":
/*!********************************************************************!*\
  !*** ./node_modules/azure-devops-extension-api/Common/Util/Url.js ***!
  \********************************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*
 * ---------------------------------------------------------
 * Copyright(C) Microsoft Corporation. All rights reserved.
 * ---------------------------------------------------------
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    /**
     * Key constants used by route parsing.
     */
    var KeyCodes;
    (function (KeyCodes) {
        KeyCodes[KeyCodes["asterisk"] = 42] = "asterisk";
        KeyCodes[KeyCodes["endCurlyBrace"] = 125] = "endCurlyBrace";
        KeyCodes[KeyCodes["startCurlyBrace"] = 123] = "startCurlyBrace";
    })(KeyCodes || (KeyCodes = {}));
    function prepareForComparison(value, upperCase) {
        return value ? (upperCase ? value.toLocaleUpperCase() : value) : "";
    }
    function stringEquals(str1, str2, ignoreCase) {
        if (str1 === str2) {
            return true;
        }
        return prepareForComparison(str1, ignoreCase).localeCompare(prepareForComparison(str2, ignoreCase)) === 0;
    }
    /**
    * Class that represents a Uri and allows parsing/getting and setting of individual parts
    */
    var Uri = /** @class */ (function () {
        /**
        * Create a new Uri.
        *
        * @param uri Optional uri string to populate values with
        * @param options Options for parsing the uri string
        */
        function Uri(uri, options) {
            /**
            * The uri scheme such as http or https
            */
            this.scheme = "";
            /**
             * If true, do not emit the "//" separator after the scheme:
             * Set to true for schemes like mailto (e.g. mailto:foo@bar)
             */
            this.noSchemeSeparator = false;
            /**
            * The uri hostname (does not include port or scheme)
            */
            this.host = "";
            /**
            * The port number of the uri as supplied in the url. 0 if left out in the url (e.g. the default port for the scheme).
            */
            this.port = 0;
            /**
            * The relative path of the uri
            */
            this.path = "";
            /**
            * The array of query parameters in the uri
            */
            this.queryParameters = [];
            /**
            * The hash string of the uri
            */
            this.hashString = "";
            if (uri) {
                this._setFromUriString(uri, options);
            }
        }
        Uri.prototype._setFromUriString = function (uriString, options) {
            var uri = uriString;
            // Parse out the hash string
            var hashSplit = this._singleSplit(uri, "#");
            if (hashSplit) {
                uri = hashSplit.part1;
                this.hashString = this._decodeUriComponent(hashSplit.part2);
            }
            else {
                this.hashString = "";
            }
            // Parse the query parameters
            var querySplit = this._singleSplit(uri, "?");
            if (querySplit) {
                uri = querySplit.part1;
                this.queryString = querySplit.part2;
            }
            else {
                this.queryParameters = [];
            }
            this.scheme = "";
            this.host = "";
            this.port = 0;
            this.path = "";
            // Parse out the scheme components of the uri
            this.noSchemeSeparator = false;
            var schemeSplit = this._singleSplit(uri, ":");
            if (schemeSplit) {
                this.scheme = schemeSplit.part1;
                uri = schemeSplit.part2;
                if (uri.substr(0, 2) === "//") {
                    uri = uri.substr(2);
                    // Parse out the path part of the uri
                    var pathSplit = this._singleSplit(uri, "/");
                    if (pathSplit) {
                        uri = pathSplit.part1;
                        this.path = pathSplit.part2;
                    }
                    else {
                        this.path = "";
                    }
                    // Parse out the port number
                    var portSplit = this._singleSplit(uri, ":");
                    if (portSplit) {
                        this.host = portSplit.part1;
                        this.port = parseInt(portSplit.part2);
                        if (isNaN(this.port)) {
                            // Segment after : was not a port, consider it part of the path
                            this.host += ":";
                            this.path = portSplit.part2 + "/" + this.path;
                        }
                    }
                    else {
                        this.host = uri;
                    }
                }
                else {
                    // No host for schemes like mailto: just use path
                    this.noSchemeSeparator = true;
                    this.path = uri;
                }
            }
            else {
                // Relative Url was given
                this.path = uri;
            }
            if (options && options.absoluteUriRequired && !this.scheme) {
                throw new Error("The uri string \"" + uriString + "\" does not represent a valid absolute uri.");
            }
        };
        Uri.prototype._singleSplit = function (value, separator) {
            var matchIndex = value.indexOf(separator);
            if (matchIndex >= 0) {
                return {
                    part1: value.substr(0, matchIndex),
                    part2: value.substr(matchIndex + 1)
                };
            }
            else {
                return undefined;
            }
        };
        Uri.prototype._decodeUriComponent = function (value) {
            if (value) {
                // Replace "+" character with %20.
                value = value.replace(/\+/g, "%20");
                value = decodeURIComponent(value);
            }
            return value;
        };
        Object.defineProperty(Uri.prototype, "absoluteUri", {
            /**
            * Get the absolute uri string for this Uri
            */
            get: function () {
                var uri = "";
                if (this.scheme) {
                    uri = encodeURI(decodeURI(this.scheme)) + ":";
                    if (!this.noSchemeSeparator) {
                        uri += "//";
                    }
                }
                if (this.host) {
                    uri += encodeURI(decodeURI(this.host));
                    if (this.port) {
                        uri += ":" + this.port;
                    }
                    if (!this.noSchemeSeparator || this.path) {
                        uri += "/";
                    }
                }
                if (this.path) {
                    var encodedPath = void 0;
                    if (this.noSchemeSeparator) {
                        // Only do simple encoding for schemes like mailto: or blob: where
                        // we can't determine host versus path
                        encodedPath = encodeURI(decodeURI(this.path));
                    }
                    else {
                        var parts = this.path.split('/');
                        encodedPath = parts.map(function (p) { return encodeURIComponent(decodeURIComponent(p)); }).join("/");
                    }
                    if (this.host) {
                        uri = combineUrlPaths(uri, encodedPath);
                    }
                    else {
                        uri = uri + encodedPath;
                    }
                }
                var queryString = this.queryString;
                if (queryString) {
                    uri += "?" + queryString;
                }
                if (this.hashString) {
                    var params = this._splitStringIntoParams(this.hashString);
                    var encodedString = this._getParamsAsString(params);
                    uri += "#" + encodedString;
                }
                return uri;
            },
            /**
            * Set the absolute uri string for this Uri. Replaces all existing values
            */
            set: function (uri) {
                this._setFromUriString(uri || "");
            },
            enumerable: true,
            configurable: true
        });
        /**
         * Gets the effective port number, returning the default port number if omitted for the given scheme.
         */
        Uri.prototype.getEffectivePort = function () {
            if (this.port) {
                return this.port;
            }
            else {
                if (stringEquals(this.scheme, "http", true)) {
                    return 80;
                }
                else if (stringEquals(this.scheme, "https", true)) {
                    return 443;
                }
                else {
                    return 0;
                }
            }
        };
        /**
         * Builds an encoded key/value pair string
         * like query string or hash strings
         */
        Uri.prototype._getParamsAsString = function (params) {
            if (params && params.length) {
                return params.map(function (param) {
                    if (param.value !== null) {
                        return encodeURIComponent(param.name) + "=" + encodeURIComponent(param.value);
                    }
                    else {
                        return encodeURIComponent(param.name);
                    }
                }).join("&");
            }
            else {
                return "";
            }
        };
        Object.defineProperty(Uri.prototype, "queryString", {
            /**
            * Get the query string for this Uri.
            */
            get: function () {
                return this._getParamsAsString(this.queryParameters);
            },
            /**
            * Set the query string for this Uri. Replaces existing value
            */
            set: function (queryString) {
                this.queryParameters = this._splitStringIntoParams(queryString);
            },
            enumerable: true,
            configurable: true
        });
        /**
         * Coverts a key/value pair string into parameters array
         * @param paramString String such as a=b&c=d
         */
        Uri.prototype._splitStringIntoParams = function (paramString) {
            var _this = this;
            var params = [];
            paramString.split('&').forEach(function (pair) {
                if (pair) {
                    var valueSplit = _this._singleSplit(pair, "=");
                    if (valueSplit) {
                        params.push({
                            name: _this._decodeUriComponent(valueSplit.part1),
                            value: _this._decodeUriComponent(valueSplit.part2)
                        });
                    }
                    else {
                        params.push({
                            name: _this._decodeUriComponent(pair),
                            value: null
                        });
                    }
                }
            });
            return params;
        };
        /**
        * Get the value of the query parameter with the given key
        *
        * @param name Query parameter name
        */
        Uri.prototype.getQueryParam = function (name) {
            var value;
            if (this.queryParameters) {
                var matchingPairs = this.queryParameters.filter(function (p) { return stringEquals(p.name, name, true); });
                if (matchingPairs.length > 0) {
                    value = matchingPairs[0].value;
                }
            }
            return value;
        };
        /**
         * Adds a query string parameter to the current uri
         *
         * @param name The Query parameter name
         * @param value The Query parameter value
         * @param replaceExisting If true, replace all existing parameters with the same name
         */
        Uri.prototype.addQueryParam = function (name, value, replaceExisting) {
            if (replaceExisting) {
                this.removeQueryParam(name);
            }
            if (!this.queryParameters) {
                this.queryParameters = [];
            }
            this.queryParameters.push({ name: name, value: value });
        };
        /**
         * Adds query string parameters to the current uri
         *
         * @param parameters Query parameters to add
         * @param replaceExisting If true, replace all existing parameters with the same name
         * @param keyPrefix If specified, a value to prepend to all query parameter keys
         */
        Uri.prototype.addQueryParams = function (parameters, replaceExisting, keyPrefix) {
            var _this = this;
            var _loop_1 = function (key) {
                var value = parameters[key];
                if (value !== null && value !== undefined) {
                    var keyWithPrefix_1 = (keyPrefix || "") + key;
                    if (value instanceof Date) {
                        this_1.addQueryParam(keyWithPrefix_1, value.toJSON(), replaceExisting);
                    }
                    else if (Array.isArray(value)) {
                        value.forEach(function (v) { return _this.addQueryParam(keyWithPrefix_1, "" + v, replaceExisting); });
                    }
                    else if (typeof value === "object") {
                        this_1.addQueryParams(value, replaceExisting, keyWithPrefix_1 + ".");
                    }
                    else {
                        this_1.addQueryParam(keyWithPrefix_1, "" + value, replaceExisting);
                    }
                }
            };
            var this_1 = this;
            for (var key in parameters) {
                _loop_1(key);
            }
        };
        /**
         * Removes a query string parameter
         *
         * @param name The Query parameter name
         */
        Uri.prototype.removeQueryParam = function (name) {
            if (this.queryParameters) {
                this.queryParameters = this.queryParameters.filter(function (p) { return !stringEquals(p.name, name, true); });
            }
        };
        return Uri;
    }());
    exports.Uri = Uri;
    /**
     * Take url segments and join them with a single slash character. Takes care of path segements that start and/or end
     * with a slash to ensure that the resulting URL does not have double-slashes
     *
     * @param paths Path segments to concatenate
     */
    function combineUrlPaths() {
        var paths = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            paths[_i] = arguments[_i];
        }
        var segmentsToJoin = [];
        // Trim leading and trailing slash in each segment
        for (var i = 0, last = paths.length - 1; i <= last; i++) {
            var path = paths[i];
            if (path) {
                if (path === "/" && (i === 0 || i === last)) {
                    // For a "/" segment at the beginning or end of the list, insert an empty entry to force
                    // a leading or trailing slash in the resulting URL
                    segmentsToJoin.push("");
                }
                else {
                    if (i > 0 && path[0] === "/") {
                        // Trim leading slash in any segment except the first one
                        path = path.substr(1);
                    }
                    if (i < last && path[path.length - 1] === "/") {
                        // Trim trailing slash in any segment except the last one
                        path = path.substr(0, path.length - 1);
                    }
                    if (path) {
                        segmentsToJoin.push(path);
                    }
                }
            }
        }
        if (segmentsToJoin.length === 1 && segmentsToJoin[0] === "") {
            return "/";
        }
        // Join segments by slash
        return segmentsToJoin.join("/");
    }
    exports.combineUrlPaths = combineUrlPaths;
    /**
     * Parse a route template into a structure that can be used to quickly do route replacements
     *
     * @param routeTemplate MVC route template string (like "/foo/{id}/{*params}")
     */
    function parseRouteTemplate(routeTemplate) {
        var parsedRoute = {
            segments: []
        };
        var paramStartIndex = -1;
        var segmentStartIndex = -1;
        var segmentPrefix = "";
        for (var charIndex = 0, routeTemplateLen = routeTemplate.length; charIndex < routeTemplateLen; charIndex++) {
            var c = routeTemplate.charCodeAt(charIndex);
            if (paramStartIndex >= 0) {
                if (c === 125 /* endCurlyBrace */) {
                    var paramName = routeTemplate.substring(paramStartIndex, charIndex);
                    var isWildCardParam = false;
                    if (paramName.charCodeAt(0) === 42 /* asterisk */) {
                        paramName = paramName.substr(1);
                        isWildCardParam = true;
                    }
                    parsedRoute.segments.push({
                        paramName: paramName,
                        isWildCardParam: isWildCardParam
                    });
                    paramStartIndex = -1;
                }
            }
            else {
                if (c === 123 /* startCurlyBrace */ && routeTemplate.charCodeAt(charIndex + 1) !== 123 /* startCurlyBrace */) {
                    // Start of a parameter
                    if (segmentPrefix || segmentStartIndex >= 0) {
                        // Store the previous segment
                        var segmentText = segmentPrefix;
                        if (segmentStartIndex >= 0) {
                            segmentText += routeTemplate.substring(segmentStartIndex, charIndex);
                        }
                        if (segmentText) {
                            parsedRoute.segments.push({
                                text: segmentText
                            });
                        }
                        // Reset the segment tracking info
                        segmentStartIndex = -1;
                        segmentPrefix = "";
                    }
                    paramStartIndex = charIndex + 1;
                }
                else {
                    // Handle double {{ or double }} as an escape sequence. This is rare. For simplicity we will 
                    if ((c === 123 /* startCurlyBrace */ && routeTemplate.charCodeAt(charIndex + 1) === 123 /* startCurlyBrace */) ||
                        (c === 125 /* endCurlyBrace */ && routeTemplate.charCodeAt(charIndex + 1) === 125 /* endCurlyBrace */)) {
                        segmentPrefix = segmentPrefix + routeTemplate.substring(segmentStartIndex >= 0 ? segmentStartIndex : charIndex, charIndex + 1);
                        segmentStartIndex = -1;
                        charIndex++;
                    }
                    if (segmentStartIndex < 0) {
                        segmentStartIndex = charIndex;
                    }
                }
            }
        }
        // Store any pending segment
        if (segmentStartIndex >= 0 || paramStartIndex >= 0) {
            var segmentText = segmentPrefix + routeTemplate.substring(segmentStartIndex >= 0 ? segmentStartIndex : paramStartIndex);
            if (segmentText) {
                parsedRoute.segments.push({
                    text: segmentText
                });
            }
        }
        // Mark any param as required if it has a text segment (other than just "/") after it
        var required = false;
        for (var i = parsedRoute.segments.length - 1; i >= 0; i--) {
            var segment = parsedRoute.segments[i];
            if (segment.text && segment.text !== "/") {
                required = true;
            }
            else if (required && segment.paramName) {
                segment.isRequiredParam = true;
            }
        }
        return parsedRoute;
    }
    exports.parseRouteTemplate = parseRouteTemplate;
    /**
     * Take a set of routes and route values and form a url using the best match. The best match
     * is the route with the highest number of replacements (of the given routeValues dictionary).
     * In the event of a tie (same number of replacements) the route that came first wins.
     *
     * @param routeCollection Array of parsed routes
     * @param routeValues Replacement values
     */
    function routeUrl(routeCollection, routeValues) {
        var bestMatch = getBestRouteMatch(routeCollection, routeValues);
        if (!bestMatch) {
            return "";
        }
        var uri = new Uri(bestMatch.url);
        for (var routeValueKey in routeValues) {
            if (!bestMatch.matchedParameters[routeValueKey]) {
                uri.addQueryParam(routeValueKey, routeValues[routeValueKey]);
            }
        }
        return uri.absoluteUri;
    }
    exports.routeUrl = routeUrl;
    /**
     * Take a set of routes and find the best match. The best match is the route with the highest number of replacements
     * (of the given routeValues dictionary). In the event of a tie (same number of replacements) the route that came first wins.
     *
     * @param routeCollection Array of parsed routes
     * @param routeValues Replacement values
     */
    function getBestRouteMatch(routeCollection, routeValues) {
        var bestMatch;
        var totalRouteValues = Object.keys(routeValues).length;
        for (var _i = 0, routeCollection_1 = routeCollection; _i < routeCollection_1.length; _i++) {
            var route = routeCollection_1[_i];
            var match = replaceParsedRouteValues(route, routeValues, false);
            if (match && (!bestMatch || match.matchedParametersCount > bestMatch.matchedParametersCount)) {
                bestMatch = match;
                if (match.matchedParametersCount === totalRouteValues) {
                    // This route matched all route values. Return its url directly (no need to even add query params)
                    return bestMatch;
                }
            }
        }
        return bestMatch;
    }
    exports.getBestRouteMatch = getBestRouteMatch;
    /**
     * Replace route values for a specific parsed route
     *
     * @param parsedRoute The route to evaluate
     * @param routeValues Dictionary of route replacement parameters
     * @param continueOnUnmatchedSegements If true, continue with replacements even after a miss. By default (false), stop replacements once a parameter is not present.
     */
    function replaceParsedRouteValues(parsedRoute, routeValues, continueOnUnmatchedSegements) {
        var urlParts = [];
        var matchedParameters = {};
        var matchedParametersCount = 0;
        for (var segmentIndex = 0, l = parsedRoute.segments.length; segmentIndex < l; segmentIndex++) {
            var segment = parsedRoute.segments[segmentIndex];
            if (segment.text) {
                var segmentText = segment.text;
                if (continueOnUnmatchedSegements) {
                    // Make sure we don't have consecutive slash (/) characters in the case of missing segments
                    if (segmentIndex > 0 && segmentText.charAt(0) === "/") {
                        if (urlParts.length === 0) {
                            // First text segment after one or more missing parameter segments. Remove the leading slash.
                            segmentText = segmentText.substr(1);
                        }
                    }
                }
                if (segmentText) {
                    urlParts.push(segmentText);
                }
            }
            else {
                var value = routeValues[segment.paramName];
                if (!value && value !== 0) {
                    // The route value was not supplied
                    if (!continueOnUnmatchedSegements) {
                        if (segment.isRequiredParam) {
                            // This is a required parameter. Return undefined since this route was not a match.
                            return undefined;
                        }
                        else {
                            // This is an omitted optional parameter. Return what we've computed so far.
                            break;
                        }
                    }
                    else if (urlParts.length) {
                        // Unmatched segment being omitted. Remove any previously trailing slash
                        var lastSegment = urlParts[urlParts.length - 1];
                        if (lastSegment[lastSegment.length - 1] === "/") {
                            urlParts[urlParts.length - 1] = lastSegment.substr(0, lastSegment.length - 1);
                        }
                    }
                }
                else {
                    urlParts.push(segment.isWildCardParam ? encodeURI("" + value) : encodeURIComponent("" + value));
                    matchedParameters[segment.paramName] = true;
                    matchedParametersCount++;
                }
            }
        }
        return {
            url: urlParts.join(""),
            matchedParameters: matchedParameters,
            matchedParametersCount: matchedParametersCount
        };
    }
    exports.replaceParsedRouteValues = replaceParsedRouteValues;
    /**
     * Take an MVC route template (like "/foo/{id}/{*params}") and replace the templated parts with values from the given dictionary
     *
     * @param routeTemplate MVC route template (like "/foo/{id}/{*params}")
     * @param routeValues Route value replacements
     */
    function replaceRouteValues(routeTemplate, routeValues) {
        var parsedRoute = parseRouteTemplate(routeTemplate);
        return replaceParsedRouteValues(parsedRoute, routeValues, true).url;
    }
    exports.replaceRouteValues = replaceRouteValues;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/azure-devops-extension-sdk/esm/SDK.min.js":
/*!****************************************************************!*\
  !*** ./node_modules/azure-devops-extension-sdk/esm/SDK.min.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   HostType: () => (/* binding */ h),
/* harmony export */   applyTheme: () => (/* binding */ J),
/* harmony export */   getAccessToken: () => (/* binding */ L),
/* harmony export */   getAppToken: () => (/* binding */ U),
/* harmony export */   getConfiguration: () => (/* binding */ E),
/* harmony export */   getContributionId: () => (/* binding */ C),
/* harmony export */   getExtensionContext: () => (/* binding */ S),
/* harmony export */   getHost: () => (/* binding */ D),
/* harmony export */   getPageContext: () => (/* binding */ P),
/* harmony export */   getService: () => (/* binding */ F),
/* harmony export */   getTeamContext: () => (/* binding */ z),
/* harmony export */   getUser: () => (/* binding */ T),
/* harmony export */   getWebContext: () => (/* binding */ A),
/* harmony export */   init: () => (/* binding */ x),
/* harmony export */   notifyLoadFailed: () => (/* binding */ M),
/* harmony export */   notifyLoadSucceeded: () => (/* binding */ R),
/* harmony export */   ready: () => (/* binding */ j),
/* harmony export */   register: () => (/* binding */ N),
/* harmony export */   resize: () => (/* binding */ H),
/* harmony export */   sdkVersion: () => (/* binding */ c),
/* harmony export */   unregister: () => (/* binding */ W)
/* harmony export */ });
const e=parseInt("10000000000",36),t=Number.MAX_SAFE_INTEGER||9007199254740991;class n{objects={};register(e,t){this.objects[e]=t}unregister(e){delete this.objects[e]}getInstance(e,t){var n=this.objects[e];if(n)return"function"==typeof n?n(t):n}}let r=1;class o{promises={};postToWindow;targetOrigin;handshakeToken;registry;channelId;nextMessageId=1;nextProxyId=1;proxyFunctions={};constructor(o,i){this.postToWindow=o,this.targetOrigin=i,this.registry=new n,this.channelId=r++,this.targetOrigin||(this.handshakeToken=Math.floor(Math.random()*(t-e)+e).toString(36)+Math.floor(Math.random()*(t-e)+e).toString(36))}getObjectRegistry(){return this.registry}async invokeRemoteMethod(e,t,n,r,o){const i={id:this.nextMessageId++,methodName:e,instanceId:t,instanceContext:r,params:this._customSerializeObject(n,o),serializationSettings:o};this.targetOrigin||(i.handshakeToken=this.handshakeToken);const s=new Promise(((e,t)=>{this.promises[i.id]={resolve:e,reject:t}}));return this._sendRpcMessage(i),s}getRemoteObjectProxy(e,t){return this.invokeRemoteMethod("",e,void 0,t)}invokeMethod(e,t){if(t.methodName){var n=e[t.methodName];if("function"==typeof n)try{var r=[];t.params&&(r=this._customDeserializeObject(t.params,{}));var o=n.apply(e,r);o&&o.then&&"function"==typeof o.then?o.then((e=>{this._success(t,e,t.handshakeToken)}),(e=>{this.error(t,e)})):this._success(t,o,t.handshakeToken)}catch(e){this.error(t,e)}else this.error(t,new Error("RPC method not found: "+t.methodName))}else this._success(t,e,t.handshakeToken)}getRegisteredObject(e,t){if("__proxyFunctions"===e)return this.proxyFunctions;var n=this.registry.getInstance(e,t);return n||(n=i.getInstance(e,t)),n}onMessage(e){if(e.instanceId){const t=this.getRegisteredObject(e.instanceId,e.instanceContext);if(!t)return!1;"function"==typeof t.then?t.then((t=>{this.invokeMethod(t,e)}),(t=>{this.error(e,t)})):this.invokeMethod(t,e)}else{const t=this.promises[e.id];if(!t)return!1;e.error?t.reject(this._customDeserializeObject([e.error],{})[0]):t.resolve(this._customDeserializeObject([e.result],{})[0]),delete this.promises[e.id]}return!0}owns(e,t,n){if(this.postToWindow===e){if(this.targetOrigin)return!!t&&("null"===t.toLowerCase()||0===this.targetOrigin.toLowerCase().indexOf(t.toLowerCase()));if(n.handshakeToken&&n.handshakeToken===this.handshakeToken)return this.targetOrigin=t,!0}return!1}error(e,t){this._sendRpcMessage({id:e.id,error:this._customSerializeObject([t],e.serializationSettings)[0],handshakeToken:e.handshakeToken})}_success(e,t,n){this._sendRpcMessage({id:e.id,result:this._customSerializeObject([t],e.serializationSettings)[0],handshakeToken:n})}_sendRpcMessage(e){this.postToWindow.postMessage(JSON.stringify(e),"*")}_customSerializeObject(e,t,n,r=1,o=1){if(!e||o>100)return;if(e instanceof Node||e instanceof Window||e instanceof Event)return;var i;let s;s=n||{newObjects:[],originalObjects:[]},s.originalObjects.push(e);var c=(n,i,c)=>{var a;try{a=n[c]}catch(e){}var h=typeof a;if("undefined"!==h){var d=-1;if("object"===h&&(d=s.originalObjects.indexOf(a)),d>=0){var u=s.newObjects[d];u.__circularReferenceId||(u.__circularReferenceId=r++),i[c]={__circularReference:u.__circularReferenceId}}else"function"===h?(this.nextProxyId++,i[c]={__proxyFunctionId:this._registerProxyFunction(a,e),_channelId:this.channelId}):"object"===h?a&&a instanceof Date?i[c]={__proxyDate:a.getTime()}:i[c]=this._customSerializeObject(a,t,s,r,o+1):"__proxyFunctionId"!==c&&(i[c]=a)}};if(e instanceof Array){i=[],s.newObjects.push(i);for(var a=0,h=e.length;a<h;a++)c(e,i,a)}else{i={},s.newObjects.push(i);let n={};try{n=function(e){const t={};for(;e&&e!==Object.prototype;){const n=Object.getOwnPropertyNames(e);for(const e of n)"constructor"!==e&&(t[e]=!0);e=Object.getPrototypeOf(e)}return t}(e)}catch(e){}for(var d in n)(d&&"_"!==d[0]||t&&t.includeUnderscoreProperties)&&c(e,i,d)}return s.originalObjects.pop(),s.newObjects.pop(),i}_registerProxyFunction(e,t){var n=this.nextProxyId++;return this.proxyFunctions["proxy"+n]=function(){return e.apply(t,Array.prototype.slice.call(arguments,0))},n}_customDeserializeObject(e,t){var n=this;if(!e)return null;var r=(e,r)=>{var o=e[r],i=typeof o;"__circularReferenceId"===r&&"number"===i?(t[o]=e,delete e[r]):"object"===i&&o&&(o.__proxyFunctionId?e[r]=function(){return n.invokeRemoteMethod("proxy"+o.__proxyFunctionId,"__proxyFunctions",Array.prototype.slice.call(arguments,0),{},{includeUnderscoreProperties:!0})}:o.__proxyDate?e[r]=new Date(o.__proxyDate):o.__circularReference?e[r]=t[o.__circularReference]:this._customDeserializeObject(o,t))};if(e instanceof Array)for(var o=0,i=e.length;o<i;o++)r(e,o);else if("object"==typeof e)for(var s in e)r(e,s);return e}}const i=new n,s=new class{_channels=[];constructor(){window.addEventListener("message",this._handleMessageReceived)}addChannel(e,t){const n=new o(e,t);return this._channels.push(n),n}removeChannel(e){this._channels=this._channels.filter((t=>t!==e))}_handleMessageReceived=e=>{let t;if("string"==typeof e.data)try{t=JSON.parse(e.data)}catch(e){}if(t){let n,r=!1;for(const o of this._channels)o.owns(e.source,e.origin,t)&&(n=o,r=o.onMessage(t)||r);n&&!r&&(window.console&&console.error(`No handler found on any channel for message: ${JSON.stringify(t)}`),t.instanceId&&n.error(t,new Error(`The registered object ${t.instanceId} could not be found.`)))}}},c=4,a=window;var h;a._AzureDevOpsSDKVersion&&console.error("The AzureDevOps SDK is already loaded. Only one version of this module can be loaded in a given document."),a._AzureDevOpsSDKVersion=4,function(e){e[e.Unknown=0]="Unknown",e[e.Deployment=1]="Deployment",e[e.Enterprise=2]="Enterprise",e[e.Organization=4]="Organization"}(h||(h={}));const d="DevOps.HostControl",u=s.addChannel(window.parent);let l,f,g,p,m,y,_,v,w,b;const O=new Promise((e=>{b=e}));function k(e,t){const n=window;let r;"function"==typeof n.CustomEvent?r=new n.CustomEvent(e,t):(t=t||{bubbles:!1,cancelable:!1},r=document.createEvent("CustomEvent"),r.initCustomEvent(e,t.bubbles,t.cancelable,t.detail)),window.dispatchEvent(r)}function x(e){return new Promise((t=>{const n={...e,sdkVersion:4};u.invokeRemoteMethod("initialHandshake",d,[n]).then((e=>{const n=e.context;g=n.pageContext,f=g?g.webContext:void 0,l=f?f.team:void 0,m=e.initialConfig||{},y=e.contributionId,p=n.extension,_=n.user,v=n.host,e.themeData&&(J(e.themeData),window.addEventListener("themeChanged",(e=>{J(e.detail.data)}))),b(),t()}))}))}async function j(){return O}function R(){return u.invokeRemoteMethod("notifyLoadSucceeded",d)}function M(e){return u.invokeRemoteMethod("notifyLoadFailed",d,[e])}function I(e){return`Attempted to call ${e}() before init() was complete. Wait for init to complete or place within a ready() callback.`}function E(){if(!m)throw new Error(I("getConfiguration"));return m}function C(){if(!y)throw new Error(I("getContributionId"));return y}function T(){if(!_)throw new Error(I("getUser"));return _}function D(){if(!v)throw new Error(I("getHost"));return v}function S(){if(!p)throw new Error(I("getExtensionContext"));return p}function z(){if(!l)throw new Error(I("getTeamContext"));return l}function P(){if(!g)throw new Error(I("getPageContext"));return g}function A(){if(!f)throw new Error(I("getWebContext"));return f}async function F(e){return j().then((()=>u.invokeRemoteMethod("getService","DevOps.ServiceManager",[e])))}function N(e,t){u.getObjectRegistry().register(e,t)}function W(e){u.getObjectRegistry().unregister(e)}async function L(){return u.invokeRemoteMethod("getAccessToken",d).then((e=>e.token))}async function U(){return u.invokeRemoteMethod("getAppToken",d).then((e=>e.token))}function H(e,t){const n=document.body;if(n){const r="number"==typeof e?e:n?n.scrollWidth:void 0,o="number"==typeof t?t:n?n.scrollHeight:void 0;u.invokeRemoteMethod("resize",d,[r,o])}}function J(e){w||(w=document.createElement("style"),w.type="text/css",document.head.appendChild(w));const t=[];if(e)for(const n in e)t.push("--"+n+": "+e[n]);w.innerText=":root { "+t.join("; ")+" } body { color: var(--text-primary-color) }",k("themeApplied",{detail:e})}u.getObjectRegistry().register("DevOps.SdkClient",{dispatchEvent:k});


/***/ }),

/***/ "./node_modules/azure-devops-ui/Breakpoint.js":
/*!****************************************************!*\
  !*** ./node_modules/azure-devops-ui/Breakpoint.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Breakpoint: () => (/* reexport safe */ _Components_Breakpoint_Breakpoint__WEBPACK_IMPORTED_MODULE_0__.Breakpoint)
/* harmony export */ });
/* harmony import */ var _Components_Breakpoint_Breakpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Components/Breakpoint/Breakpoint */ "./node_modules/azure-devops-ui/Components/Breakpoint/Breakpoint.js");
/* harmony import */ var _Components_Breakpoint_Breakpoint_Props__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Components/Breakpoint/Breakpoint.Props */ "./node_modules/azure-devops-ui/Components/Breakpoint/Breakpoint.Props.js");




/***/ }),

/***/ "./node_modules/azure-devops-ui/Button.js":
/*!************************************************!*\
  !*** ./node_modules/azure-devops-ui/Button.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Button: () => (/* reexport safe */ _Components_Button_Button__WEBPACK_IMPORTED_MODULE_0__.Button),
/* harmony export */   ExpandableButton: () => (/* reexport safe */ _Components_Button_ExpandableButton__WEBPACK_IMPORTED_MODULE_2__.ExpandableButton)
/* harmony export */ });
/* harmony import */ var _Components_Button_Button__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Components/Button/Button */ "./node_modules/azure-devops-ui/Components/Button/Button.js");
/* harmony import */ var _Components_Button_Button_Props__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Components/Button/Button.Props */ "./node_modules/azure-devops-ui/Components/Button/Button.Props.js");
/* harmony import */ var _Components_Button_ExpandableButton__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Components/Button/ExpandableButton */ "./node_modules/azure-devops-ui/Components/Button/ExpandableButton.js");
/* harmony import */ var _Components_Button_ExpandableButton_Props__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Components/Button/ExpandableButton.Props */ "./node_modules/azure-devops-ui/Components/Button/ExpandableButton.Props.js");






/***/ }),

/***/ "./node_modules/azure-devops-ui/ButtonGroup.js":
/*!*****************************************************!*\
  !*** ./node_modules/azure-devops-ui/ButtonGroup.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ButtonGroup: () => (/* reexport safe */ _Components_ButtonGroup_ButtonGroup__WEBPACK_IMPORTED_MODULE_0__.ButtonGroup)
/* harmony export */ });
/* harmony import */ var _Components_ButtonGroup_ButtonGroup__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Components/ButtonGroup/ButtonGroup */ "./node_modules/azure-devops-ui/Components/ButtonGroup/ButtonGroup.js");
/* harmony import */ var _Components_ButtonGroup_ButtonGroup_Props__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Components/ButtonGroup/ButtonGroup.Props */ "./node_modules/azure-devops-ui/Components/ButtonGroup/ButtonGroup.Props.js");




/***/ }),

/***/ "./node_modules/azure-devops-ui/Callout.js":
/*!*************************************************!*\
  !*** ./node_modules/azure-devops-ui/Callout.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Callout: () => (/* reexport safe */ _Components_Callout_Callout__WEBPACK_IMPORTED_MODULE_0__.Callout),
/* harmony export */   ContentJustification: () => (/* reexport safe */ _Components_Callout_Callout_Props__WEBPACK_IMPORTED_MODULE_1__.ContentJustification),
/* harmony export */   ContentLocation: () => (/* reexport safe */ _Components_Callout_Callout_Props__WEBPACK_IMPORTED_MODULE_1__.ContentLocation),
/* harmony export */   ContentOrientation: () => (/* reexport safe */ _Components_Callout_Callout_Props__WEBPACK_IMPORTED_MODULE_1__.ContentOrientation),
/* harmony export */   ContentSize: () => (/* reexport safe */ _Components_Callout_Callout_Props__WEBPACK_IMPORTED_MODULE_1__.ContentSize)
/* harmony export */ });
/* harmony import */ var _Components_Callout_Callout__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Components/Callout/Callout */ "./node_modules/azure-devops-ui/Components/Callout/Callout.js");
/* harmony import */ var _Components_Callout_Callout_Props__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Components/Callout/Callout.Props */ "./node_modules/azure-devops-ui/Components/Callout/Callout.Props.js");




/***/ }),

/***/ "./node_modules/azure-devops-ui/Card.js":
/*!**********************************************!*\
  !*** ./node_modules/azure-devops-ui/Card.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Card: () => (/* reexport safe */ _Components_Card_Card__WEBPACK_IMPORTED_MODULE_0__.Card),
/* harmony export */   CardContent: () => (/* reexport safe */ _Components_Card_CardContent__WEBPACK_IMPORTED_MODULE_1__.CardContent),
/* harmony export */   CardFooter: () => (/* reexport safe */ _Components_Card_CardFooter__WEBPACK_IMPORTED_MODULE_2__.CardFooter),
/* harmony export */   CustomCard: () => (/* reexport safe */ _Components_Card_CustomCard__WEBPACK_IMPORTED_MODULE_3__.CustomCard)
/* harmony export */ });
/* harmony import */ var _Components_Card_Card__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Components/Card/Card */ "./node_modules/azure-devops-ui/Components/Card/Card.js");
/* harmony import */ var _Components_Card_CardContent__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Components/Card/CardContent */ "./node_modules/azure-devops-ui/Components/Card/CardContent.js");
/* harmony import */ var _Components_Card_CardFooter__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Components/Card/CardFooter */ "./node_modules/azure-devops-ui/Components/Card/CardFooter.js");
/* harmony import */ var _Components_Card_CustomCard__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Components/Card/CustomCard */ "./node_modules/azure-devops-ui/Components/Card/CustomCard.js");
/* harmony import */ var _Components_Card_Card_Props__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Components/Card/Card.Props */ "./node_modules/azure-devops-ui/Components/Card/Card.Props.js");







/***/ }),

/***/ "./node_modules/azure-devops-ui/Checkbox.js":
/*!**************************************************!*\
  !*** ./node_modules/azure-devops-ui/Checkbox.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Checkbox: () => (/* reexport safe */ _Components_Checkbox_Checkbox__WEBPACK_IMPORTED_MODULE_0__.Checkbox),
/* harmony export */   TriStateCheckbox: () => (/* reexport safe */ _Components_Checkbox_Checkbox__WEBPACK_IMPORTED_MODULE_0__.TriStateCheckbox)
/* harmony export */ });
/* harmony import */ var _Components_Checkbox_Checkbox__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Components/Checkbox/Checkbox */ "./node_modules/azure-devops-ui/Components/Checkbox/Checkbox.js");
/* harmony import */ var _Components_Checkbox_Checkbox_Props__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Components/Checkbox/Checkbox.Props */ "./node_modules/azure-devops-ui/Components/Checkbox/Checkbox.Props.js");




/***/ }),

/***/ "./node_modules/azure-devops-ui/CommonImports.js":
/*!*******************************************************!*\
  !*** ./node_modules/azure-devops-ui/CommonImports.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var es6_promise_auto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! es6-promise/auto */ "./node_modules/es6-promise/auto.js");
/* harmony import */ var es6_promise_auto__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(es6_promise_auto__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var es6_object_assign_auto__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! es6-object-assign/auto */ "./node_modules/es6-object-assign/auto.js");
/* harmony import */ var es6_object_assign_auto__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(es6_object_assign_auto__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var es6_string_polyfills__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! es6-string-polyfills */ "./node_modules/es6-string-polyfills/polyfill.min.js");
/* harmony import */ var es6_string_polyfills__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(es6_string_polyfills__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var intersection_observer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! intersection-observer */ "./node_modules/intersection-observer/intersection-observer.js");
/* harmony import */ var intersection_observer__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(intersection_observer__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _Core_find__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Core/find */ "./node_modules/azure-devops-ui/Core/find.js");
/* harmony import */ var _Core_find__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_Core_find__WEBPACK_IMPORTED_MODULE_4__);





if (!Element.prototype.matches) {
    Element.prototype.matches = Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;
}
var global = window;
if (typeof global.false === "undefined") {
    global.false = false;
}
// Polyfill MAX_SAFE_INTEGER and MIN_SAFE_INTEGER
if (!Number.MAX_SAFE_INTEGER) {
    Number.MAX_SAFE_INTEGER = Math.pow(2, 53) - 1;
}
if (!Number.MIN_SAFE_INTEGER) {
    Number.MIN_SAFE_INTEGER = -(Math.pow(2, 53) - 1);
}


/***/ }),

/***/ "./node_modules/azure-devops-ui/Components/Breakpoint/Breakpoint.Props.js":
/*!********************************************************************************!*\
  !*** ./node_modules/azure-devops-ui/Components/Breakpoint/Breakpoint.Props.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "./node_modules/azure-devops-ui/Components/Breakpoint/Breakpoint.css":
/*!***************************************************************************!*\
  !*** ./node_modules/azure-devops-ui/Components/Breakpoint/Breakpoint.css ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/styleDomAPI.js */ "./node_modules/style-loader/dist/runtime/styleDomAPI.js");
/* harmony import */ var _style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/insertBySelector.js */ "./node_modules/style-loader/dist/runtime/insertBySelector.js");
/* harmony import */ var _style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/setAttributesWithoutAttributes.js */ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js");
/* harmony import */ var _style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/insertStyleElement.js */ "./node_modules/style-loader/dist/runtime/insertStyleElement.js");
/* harmony import */ var _style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/styleTagTransform.js */ "./node_modules/style-loader/dist/runtime/styleTagTransform.js");
/* harmony import */ var _style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _css_loader_dist_cjs_js_Breakpoint_css__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! !!../../../css-loader/dist/cjs.js!./Breakpoint.css */ "./node_modules/css-loader/dist/cjs.js!./node_modules/azure-devops-ui/Components/Breakpoint/Breakpoint.css");

      
      
      
      
      
      
      
      
      

var options = {};

options.styleTagTransform = (_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default());
options.setAttributes = (_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default());
options.insert = _style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(null, "head");
options.domAPI = (_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default());
options.insertStyleElement = (_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default());

var update = _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_css_loader_dist_cjs_js_Breakpoint_css__WEBPACK_IMPORTED_MODULE_6__["default"], options);




       /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_css_loader_dist_cjs_js_Breakpoint_css__WEBPACK_IMPORTED_MODULE_6__["default"] && _css_loader_dist_cjs_js_Breakpoint_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals ? _css_loader_dist_cjs_js_Breakpoint_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals : undefined);


/***/ }),

/***/ "./node_modules/azure-devops-ui/Components/Breakpoint/Breakpoint.js":
/*!**************************************************************************!*\
  !*** ./node_modules/azure-devops-ui/Components/Breakpoint/Breakpoint.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Breakpoint: () => (/* binding */ Breakpoint)
/* harmony export */ });
/* harmony import */ var _CommonImports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../CommonImports */ "./node_modules/azure-devops-ui/CommonImports.js");
/* harmony import */ var _Core_core_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../Core/core.css */ "./node_modules/azure-devops-ui/Core/core.css");
/* harmony import */ var _Breakpoint_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Breakpoint.css */ "./node_modules/azure-devops-ui/Components/Breakpoint/Breakpoint.css");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _Intersection__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../Intersection */ "./node_modules/azure-devops-ui/Intersection.js");





function Breakpoint(props) {
    var observationElement = react__WEBPACK_IMPORTED_MODULE_3__.useState(function () { return react__WEBPACK_IMPORTED_MODULE_3__.createRef(); })[0];
    var lastBreakpointIndex = -2;
    var observationElementFunction = function () {
        return observationElement.current;
    };
    var observationDelegate = function () {
        var visibleWidth = observationElement.current.parentElement.clientWidth;
        var breakpoints = props.breakpoints, onBreakpoint = props.onBreakpoint;
        // Determine the longest visible breakpoint.
        var breakpointIndex = breakpoints.length - 1;
        for (; breakpointIndex >= 0; breakpointIndex--) {
            if (visibleWidth >= breakpoints[breakpointIndex]) {
                break;
            }
        }
        // Notify the caller about the change in the breakpoint.
        if (breakpointIndex !== lastBreakpointIndex) {
            lastBreakpointIndex = breakpointIndex;
            onBreakpoint(breakpointIndex, breakpoints[breakpointIndex]);
        }
    };
    // Compute the threshold we will use for the notification. This is the percentage
    // visibility of the observation element within the container.
    // NOTE: Due to rounding issues we need to know about all 3 pixels (1 before, at breakpoint, 1 after).
    var breakpoints = props.breakpoints;
    var observationWidth = breakpoints[breakpoints.length - 1] + 1;
    var threshold = [];
    for (var index = 0; index < breakpoints.length; index++) {
        threshold[index * 3] = (breakpoints[index] - 1) / observationWidth;
        threshold[index * 3 + 1] = breakpoints[index] / observationWidth;
        threshold[index * 3 + 2] = (breakpoints[index] + 1) / observationWidth;
    }
    return (react__WEBPACK_IMPORTED_MODULE_3__.createElement("div", { className: "bolt-breakpoint relative" },
        react__WEBPACK_IMPORTED_MODULE_3__.createElement(_Intersection__WEBPACK_IMPORTED_MODULE_4__.Intersection, { observationElement: observationElementFunction, onIntersect: observationDelegate, threshold: threshold },
            react__WEBPACK_IMPORTED_MODULE_3__.createElement("div", { className: "bolt-breakpoint-container absolute-fill scroll-hidden" },
                react__WEBPACK_IMPORTED_MODULE_3__.createElement("div", { className: "bolt-breakpoint-observation absolute", ref: observationElement, style: { width: observationWidth + "px" } })))));
}


/***/ }),

/***/ "./node_modules/azure-devops-ui/Components/Button/Button.Props.js":
/*!************************************************************************!*\
  !*** ./node_modules/azure-devops-ui/Components/Button/Button.Props.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "./node_modules/azure-devops-ui/Components/Button/Button.css":
/*!*******************************************************************!*\
  !*** ./node_modules/azure-devops-ui/Components/Button/Button.css ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/styleDomAPI.js */ "./node_modules/style-loader/dist/runtime/styleDomAPI.js");
/* harmony import */ var _style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/insertBySelector.js */ "./node_modules/style-loader/dist/runtime/insertBySelector.js");
/* harmony import */ var _style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/setAttributesWithoutAttributes.js */ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js");
/* harmony import */ var _style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/insertStyleElement.js */ "./node_modules/style-loader/dist/runtime/insertStyleElement.js");
/* harmony import */ var _style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/styleTagTransform.js */ "./node_modules/style-loader/dist/runtime/styleTagTransform.js");
/* harmony import */ var _style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _css_loader_dist_cjs_js_Button_css__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! !!../../../css-loader/dist/cjs.js!./Button.css */ "./node_modules/css-loader/dist/cjs.js!./node_modules/azure-devops-ui/Components/Button/Button.css");

      
      
      
      
      
      
      
      
      

var options = {};

options.styleTagTransform = (_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default());
options.setAttributes = (_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default());
options.insert = _style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(null, "head");
options.domAPI = (_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default());
options.insertStyleElement = (_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default());

var update = _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_css_loader_dist_cjs_js_Button_css__WEBPACK_IMPORTED_MODULE_6__["default"], options);




       /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_css_loader_dist_cjs_js_Button_css__WEBPACK_IMPORTED_MODULE_6__["default"] && _css_loader_dist_cjs_js_Button_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals ? _css_loader_dist_cjs_js_Button_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals : undefined);


/***/ }),

/***/ "./node_modules/azure-devops-ui/Components/Button/Button.js":
/*!******************************************************************!*\
  !*** ./node_modules/azure-devops-ui/Components/Button/Button.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Button: () => (/* binding */ Button)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var _CommonImports__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../CommonImports */ "./node_modules/azure-devops-ui/CommonImports.js");
/* harmony import */ var _Core_core_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../Core/core.css */ "./node_modules/azure-devops-ui/Core/core.css");
/* harmony import */ var _Button_css__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Button.css */ "./node_modules/azure-devops-ui/Components/Button/Button.css");
/* harmony import */ var _ExpandableButton_css__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./ExpandableButton.css */ "./node_modules/azure-devops-ui/Components/Button/ExpandableButton.css");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _FocusGroup__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../FocusGroup */ "./node_modules/azure-devops-ui/FocusGroup.js");
/* harmony import */ var _FocusZone__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../FocusZone */ "./node_modules/azure-devops-ui/FocusZone.js");
/* harmony import */ var _Icon__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../Icon */ "./node_modules/azure-devops-ui/Icon.js");
/* harmony import */ var _TooltipEx__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../TooltipEx */ "./node_modules/azure-devops-ui/TooltipEx.js");
/* harmony import */ var _Util__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../Util */ "./node_modules/azure-devops-ui/Util.js");
/* harmony import */ var _Utilities_Focus__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../Utilities/Focus */ "./node_modules/azure-devops-ui/Utilities/Focus.js");












var Button = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(Button, _super);
    function Button() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.buttonElement = react__WEBPACK_IMPORTED_MODULE_5__.createRef();
        _this.onClick = function (event) {
            if (!_this.props.disabled) {
                var onClick = _this.props.onClick;
                // @NOTE: Safari doesnt set focus to buttons when they are clicked, we need this
                //  to help manage the focus state for callouts.
                _this.focus();
                if (onClick) {
                    onClick(event);
                }
            }
            else {
                event.preventDefault();
            }
        };
        _this.onFocus = function (event) {
            if (_this.props.onFocus) {
                _this.props.onFocus(event);
            }
            if (_this.props.id) {
                // @NOTE: Due to test issues using React.16.3.2 we MUST validate the onFocus method.
                _this.context.onFocus && _this.context.onFocus(_this.props.id);
            }
        };
        _this.onKeyDown = function (event) {
            if (!event.defaultPrevented && !_this.props.disabled) {
                if (event.which === _Util__WEBPACK_IMPORTED_MODULE_10__.KeyCode.enter || event.which === _Util__WEBPACK_IMPORTED_MODULE_10__.KeyCode.space) {
                    if (_this.props.onClick) {
                        _this.props.onClick(event);
                    }
                    if (!_this.props.href) {
                        event.preventDefault();
                    }
                }
                else if (_this.props.onKeyDown) {
                    _this.props.onKeyDown(event);
                }
            }
        };
        _this.onMouseDown = function (event) {
            if (!event.defaultPrevented) {
                if (_this.props.disabled) {
                    event.preventDefault();
                }
            }
            var onMouseDown = _this.props.onMouseDown;
            if (onMouseDown) {
                onMouseDown(event);
            }
        };
        _this.onMouseLeave = function (event) {
            if (!_this.props.disabled) {
                var onMouseLeave = _this.props.onMouseLeave;
                if (onMouseLeave) {
                    onMouseLeave(event);
                }
            }
        };
        _this.onMouseOver = function (event) {
            if (!_this.props.disabled) {
                var onMouseOver = _this.props.onMouseOver;
                if (onMouseOver) {
                    onMouseOver(event);
                }
            }
        };
        return _this;
    }
    Button.prototype.render = function () {
        var _this = this;
        if (false) // removed by dead control flow
{}
        // Determine if the button is an iconOnly button.
        var iconOnly = this.props.iconProps && !this.props.text && (0,_Util__WEBPACK_IMPORTED_MODULE_10__.childCount)(this.props.children) === 0;
        var tooltipProps = this.props.tooltipProps !== undefined
            ? this.props.tooltipProps
            : iconOnly && this.props.ariaLabel
                ? { text: this.props.ariaLabel }
                : undefined;
        return (react__WEBPACK_IMPORTED_MODULE_5__.createElement(_FocusZone__WEBPACK_IMPORTED_MODULE_7__.FocusZoneContext.Consumer, null, function (zoneContext) {
            var ButtonType = _this.props.href ? "a" : "button";
            // @TODO (line-height): remove the body-m from the text once the line-height is applied globally.
            var role = _this.props.role || (_this.props.href ? "link" : "button");
            var button = (
            // @ts-ignore TypeScript no longer works with dynamic intrinsic component types.
            react__WEBPACK_IMPORTED_MODULE_5__.createElement(ButtonType, { autoFocus: !_this.props.href ? _this.props.autoFocus : undefined, "aria-controls": (0,_Util__WEBPACK_IMPORTED_MODULE_10__.getSafeId)(_this.props.ariaControls), "aria-describedby": (0,_Util__WEBPACK_IMPORTED_MODULE_10__.getSafeId)(_this.props.ariaDescribedBy), "aria-disabled": _this.props.disabled || _this.props.ariaDisabled, "aria-expanded": _this.props.ariaExpanded, "aria-haspopup": _this.props.ariaHasPopup, "aria-hidden": _this.props.ariaHidden, "aria-label": _this.props.ariaLabel, "aria-labelledby": _this.props.ariaLabelledBy, "aria-setsize": _this.props.ariaSetSize, "aria-posinset": _this.props.ariaPosInSet, "aria-selected": _this.props.ariaSelected, "aria-checked": _this.props.ariaChecked, "aria-pressed": _this.props.ariaPressed, "aria-roledescription": _this.props.ariaRoleDescription, className: (0,_Util__WEBPACK_IMPORTED_MODULE_10__.css)(_this.props.className, "bolt-button", _this.props.href && "bolt-link-button", _this.props.iconProps && "bolt-icon-button", _this.props.danger && "danger", _this.props.disabled ? "disabled" : "enabled", _this.props.primary && "primary", _this.props.subtle && "subtle", iconOnly && "icon-only", "bolt-focus-treatment"), "data-focuszone": !_this.props.disabled && !_this.props.excludeFocusZone
                    ? (0,_Util__WEBPACK_IMPORTED_MODULE_10__.css)(_this.props.focusZoneId, zoneContext.focuszoneId)
                    : undefined, "data-index": _this.props.dataIndex, "data-is-focusable": !_this.props.excludeFocusZone, href: !_this.props.disabled ? _this.props.href : undefined, id: (0,_Util__WEBPACK_IMPORTED_MODULE_10__.getSafeId)(_this.props.id), onBlur: _this.props.onBlur, onClick: _this.onClick, onMouseLeave: _this.onMouseLeave, onMouseOver: _this.onMouseOver, onKeyDown: _this.onKeyDown, onMouseDown: _this.onMouseDown, onFocus: _this.onFocus, rel: _this.props.rel, role: role, style: _this.props.style, tabIndex: (0,_Utilities_Focus__WEBPACK_IMPORTED_MODULE_11__.getTabIndex)(_this.props, _this.context), target: _this.props.target, type: _this.props.type ? _this.props.type : !_this.props.href ? "button" : undefined, ref: _this.buttonElement },
                _this.props.iconProps &&
                    (0,_Icon__WEBPACK_IMPORTED_MODULE_8__.Icon)((0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({ size: _Icon__WEBPACK_IMPORTED_MODULE_8__.IconSize.medium }, _this.props.iconProps), { className: (0,_Util__WEBPACK_IMPORTED_MODULE_10__.css)(_this.props.iconProps.className, "left-icon") })),
                _this.props.text && react__WEBPACK_IMPORTED_MODULE_5__.createElement("span", { className: "bolt-button-text body-m" }, _this.props.text),
                _this.props.children));
            if (tooltipProps) {
                button = (react__WEBPACK_IMPORTED_MODULE_5__.createElement(_TooltipEx__WEBPACK_IMPORTED_MODULE_9__.Tooltip, (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({ addAriaDescribedBy: true }, tooltipProps), button));
            }
            return button;
        }));
    };
    Button.prototype.focus = function () {
        if (this.buttonElement.current) {
            this.buttonElement.current.focus();
        }
    };
    Button.contextType = _FocusGroup__WEBPACK_IMPORTED_MODULE_6__.FocusGroupContext;
    return Button;
}(react__WEBPACK_IMPORTED_MODULE_5__.Component));



/***/ }),

/***/ "./node_modules/azure-devops-ui/Components/Button/ExpandableButton.Props.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/azure-devops-ui/Components/Button/ExpandableButton.Props.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "./node_modules/azure-devops-ui/Components/Button/ExpandableButton.css":
/*!*****************************************************************************!*\
  !*** ./node_modules/azure-devops-ui/Components/Button/ExpandableButton.css ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/styleDomAPI.js */ "./node_modules/style-loader/dist/runtime/styleDomAPI.js");
/* harmony import */ var _style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/insertBySelector.js */ "./node_modules/style-loader/dist/runtime/insertBySelector.js");
/* harmony import */ var _style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/setAttributesWithoutAttributes.js */ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js");
/* harmony import */ var _style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/insertStyleElement.js */ "./node_modules/style-loader/dist/runtime/insertStyleElement.js");
/* harmony import */ var _style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/styleTagTransform.js */ "./node_modules/style-loader/dist/runtime/styleTagTransform.js");
/* harmony import */ var _style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _css_loader_dist_cjs_js_ExpandableButton_css__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! !!../../../css-loader/dist/cjs.js!./ExpandableButton.css */ "./node_modules/css-loader/dist/cjs.js!./node_modules/azure-devops-ui/Components/Button/ExpandableButton.css");

      
      
      
      
      
      
      
      
      

var options = {};

options.styleTagTransform = (_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default());
options.setAttributes = (_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default());
options.insert = _style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(null, "head");
options.domAPI = (_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default());
options.insertStyleElement = (_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default());

var update = _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_css_loader_dist_cjs_js_ExpandableButton_css__WEBPACK_IMPORTED_MODULE_6__["default"], options);




       /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_css_loader_dist_cjs_js_ExpandableButton_css__WEBPACK_IMPORTED_MODULE_6__["default"] && _css_loader_dist_cjs_js_ExpandableButton_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals ? _css_loader_dist_cjs_js_ExpandableButton_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals : undefined);


/***/ }),

/***/ "./node_modules/azure-devops-ui/Components/Button/ExpandableButton.js":
/*!****************************************************************************!*\
  !*** ./node_modules/azure-devops-ui/Components/Button/ExpandableButton.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ExpandableButton: () => (/* binding */ ExpandableButton)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var _CommonImports__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../CommonImports */ "./node_modules/azure-devops-ui/CommonImports.js");
/* harmony import */ var _Core_core_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../Core/core.css */ "./node_modules/azure-devops-ui/Core/core.css");
/* harmony import */ var _Button_css__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Button.css */ "./node_modules/azure-devops-ui/Components/Button/Button.css");
/* harmony import */ var _ExpandableButton_css__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./ExpandableButton.css */ "./node_modules/azure-devops-ui/Components/Button/ExpandableButton.css");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _Expandable__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../Expandable */ "./node_modules/azure-devops-ui/Expandable.js");
/* harmony import */ var _Icon__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../Icon */ "./node_modules/azure-devops-ui/Icon.js");
/* harmony import */ var _Util__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../Util */ "./node_modules/azure-devops-ui/Util.js");
/* harmony import */ var _Utilities_Position__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../Utilities/Position */ "./node_modules/azure-devops-ui/Utilities/Position.js");
/* harmony import */ var _Button__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./Button */ "./node_modules/azure-devops-ui/Components/Button/Button.js");











var buttonId = 1;
var ExpandableButton = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(ExpandableButton, _super);
    function ExpandableButton(props) {
        var _this = _super.call(this, props) || this;
        _this.buttonElement = react__WEBPACK_IMPORTED_MODULE_5__.createRef();
        _this.expandable = react__WEBPACK_IMPORTED_MODULE_5__.createRef();
        _this.collapse = function () {
            if (_this.expandable.current) {
                _this.expandable.current.collapse();
            }
        };
        _this.expand = function () {
            if (_this.expandable.current) {
                _this.expandable.current.expand();
            }
        };
        _this.renderCallout = function () {
            return _this.props.renderCallout(_this, _this.dropdownId, _this.props.anchorElement
                ? _this.props.anchorElement
                : !_this.props.anchorPoint
                    ? _this.containerElement.current
                        ? _this.containerElement.current
                        : undefined
                    : undefined, _this.props.anchorOffset || { horizontal: 0, vertical: 0 }, _this.props.anchorOrigin || { horizontal: _Utilities_Position__WEBPACK_IMPORTED_MODULE_9__.Location.end, vertical: _Utilities_Position__WEBPACK_IMPORTED_MODULE_9__.Location.end }, _this.props.anchorPoint, _this.props.dropdownOrigin || { horizontal: _Utilities_Position__WEBPACK_IMPORTED_MODULE_9__.Location.end, vertical: _Utilities_Position__WEBPACK_IMPORTED_MODULE_9__.Location.start });
        };
        _this.dropdownId = props.dropdownId || "dropdown-" + buttonId++;
        _this.containerElement = props.containerRef || react__WEBPACK_IMPORTED_MODULE_5__.createRef();
        return _this;
    }
    ExpandableButton.prototype.render = function () {
        var _this = this;
        // We disable the tooltip when we are expanded. Make sure we dont remove it
        // from the component tree, this causes the button element to get regenerated
        // and focus wont return.
        return (react__WEBPACK_IMPORTED_MODULE_5__.createElement(_Expandable__WEBPACK_IMPORTED_MODULE_6__.Expandable, { disabled: this.props.disabled, expandKey: this.props.expandKey, onCollapse: this.props.onCollapse, onExpand: this.props.onExpand, renderCallout: this.renderCallout, ref: this.expandable }, function (expandableProps) {
            var _a, _b;
            return (react__WEBPACK_IMPORTED_MODULE_5__.createElement("div", { className: (0,_Util__WEBPACK_IMPORTED_MODULE_8__.css)(_this.props.className, "bolt-expandable-button inline-flex-row"), onMouseDown: expandableProps.onMouseDown, onKeyDown: expandableProps.onKeyDown, ref: _this.containerElement },
                react__WEBPACK_IMPORTED_MODULE_5__.createElement(_Button__WEBPACK_IMPORTED_MODULE_10__.Button, (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, _this.props, { ariaControls: expandableProps.expanded ? _this.dropdownId : undefined, ariaExpanded: expandableProps.expanded, ariaHasPopup: true, ariaLabel: (_a = _this.props.ariaLabel) !== null && _a !== void 0 ? _a : (_this.props.tooltipProps && _this.props.tooltipProps.text ? (_b = _this.props.tooltipProps) === null || _b === void 0 ? void 0 : _b.text : ""), className: (0,_Util__WEBPACK_IMPORTED_MODULE_8__.css)(!_this.props.text && !_this.props.children && _this.props.iconProps && "icon-only", expandableProps.expanded && "active", _this.props.buttonClassName), onClick: function (e) {
                        expandableProps.onClick(e);
                        if (_this.props.onClick) {
                            _this.props.onClick(e);
                        }
                        e.preventDefault();
                    }, ref: _this.buttonElement, tooltipProps: _this.props.tooltipProps ? (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, _this.props.tooltipProps), { disabled: expandableProps.expanded }) : undefined }),
                    _this.props.children,
                    !_this.props.hideDropdownIcon
                        ? (0,_Icon__WEBPACK_IMPORTED_MODULE_7__.Icon)({
                            key: "dropdown-icon",
                            className: "icon-right font-weight-normal",
                            iconName: "ChevronDownMed",
                            size: _Icon__WEBPACK_IMPORTED_MODULE_7__.IconSize.small
                        })
                        : undefined)));
        }));
    };
    ExpandableButton.prototype.focus = function () {
        if (this.buttonElement.current) {
            this.buttonElement.current.focus();
        }
    };
    ExpandableButton.defaultProps = {
        expandKey: [_Util__WEBPACK_IMPORTED_MODULE_8__.KeyCode.downArrow, _Util__WEBPACK_IMPORTED_MODULE_8__.KeyCode.enter]
    };
    return ExpandableButton;
}(react__WEBPACK_IMPORTED_MODULE_5__.Component));



/***/ }),

/***/ "./node_modules/azure-devops-ui/Components/ButtonGroup/ButtonGroup.Props.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/azure-devops-ui/Components/ButtonGroup/ButtonGroup.Props.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "./node_modules/azure-devops-ui/Components/ButtonGroup/ButtonGroup.css":
/*!*****************************************************************************!*\
  !*** ./node_modules/azure-devops-ui/Components/ButtonGroup/ButtonGroup.css ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/styleDomAPI.js */ "./node_modules/style-loader/dist/runtime/styleDomAPI.js");
/* harmony import */ var _style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/insertBySelector.js */ "./node_modules/style-loader/dist/runtime/insertBySelector.js");
/* harmony import */ var _style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/setAttributesWithoutAttributes.js */ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js");
/* harmony import */ var _style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/insertStyleElement.js */ "./node_modules/style-loader/dist/runtime/insertStyleElement.js");
/* harmony import */ var _style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/styleTagTransform.js */ "./node_modules/style-loader/dist/runtime/styleTagTransform.js");
/* harmony import */ var _style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _css_loader_dist_cjs_js_ButtonGroup_css__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! !!../../../css-loader/dist/cjs.js!./ButtonGroup.css */ "./node_modules/css-loader/dist/cjs.js!./node_modules/azure-devops-ui/Components/ButtonGroup/ButtonGroup.css");

      
      
      
      
      
      
      
      
      

var options = {};

options.styleTagTransform = (_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default());
options.setAttributes = (_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default());
options.insert = _style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(null, "head");
options.domAPI = (_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default());
options.insertStyleElement = (_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default());

var update = _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_css_loader_dist_cjs_js_ButtonGroup_css__WEBPACK_IMPORTED_MODULE_6__["default"], options);




       /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_css_loader_dist_cjs_js_ButtonGroup_css__WEBPACK_IMPORTED_MODULE_6__["default"] && _css_loader_dist_cjs_js_ButtonGroup_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals ? _css_loader_dist_cjs_js_ButtonGroup_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals : undefined);


/***/ }),

/***/ "./node_modules/azure-devops-ui/Components/ButtonGroup/ButtonGroup.js":
/*!****************************************************************************!*\
  !*** ./node_modules/azure-devops-ui/Components/ButtonGroup/ButtonGroup.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ButtonGroup: () => (/* binding */ ButtonGroup)
/* harmony export */ });
/* harmony import */ var _CommonImports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../CommonImports */ "./node_modules/azure-devops-ui/CommonImports.js");
/* harmony import */ var _Core_core_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../Core/core.css */ "./node_modules/azure-devops-ui/Core/core.css");
/* harmony import */ var _ButtonGroup_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ButtonGroup.css */ "./node_modules/azure-devops-ui/Components/ButtonGroup/ButtonGroup.css");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _Util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../Util */ "./node_modules/azure-devops-ui/Util.js");





var ButtonGroup = function (props) {
    return (react__WEBPACK_IMPORTED_MODULE_3__.createElement("div", { className: (0,_Util__WEBPACK_IMPORTED_MODULE_4__.css)(props.className, "bolt-button-group flex-row"), role: props.role }, props.children));
};


/***/ }),

/***/ "./node_modules/azure-devops-ui/Components/Callout/Callout.Props.js":
/*!**************************************************************************!*\
  !*** ./node_modules/azure-devops-ui/Components/Callout/Callout.Props.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ContentJustification: () => (/* binding */ ContentJustification),
/* harmony export */   ContentLocation: () => (/* binding */ ContentLocation),
/* harmony export */   ContentOrientation: () => (/* binding */ ContentOrientation),
/* harmony export */   ContentSize: () => (/* binding */ ContentSize)
/* harmony export */ });
var ContentJustification;
(function (ContentJustification) {
    ContentJustification[ContentJustification["Start"] = 0] = "Start";
    ContentJustification[ContentJustification["Center"] = 1] = "Center";
    ContentJustification[ContentJustification["End"] = 2] = "End";
    ContentJustification[ContentJustification["Stretch"] = 3] = "Stretch";
})(ContentJustification || (ContentJustification = {}));
var ContentLocation;
(function (ContentLocation) {
    ContentLocation[ContentLocation["Start"] = 0] = "Start";
    ContentLocation[ContentLocation["Center"] = 1] = "Center";
    ContentLocation[ContentLocation["End"] = 2] = "End";
})(ContentLocation || (ContentLocation = {}));
var ContentOrientation;
(function (ContentOrientation) {
    ContentOrientation[ContentOrientation["Column"] = 0] = "Column";
    ContentOrientation[ContentOrientation["Row"] = 1] = "Row";
})(ContentOrientation || (ContentOrientation = {}));
var ContentSize;
(function (ContentSize) {
    ContentSize[ContentSize["Small"] = 0] = "Small";
    ContentSize[ContentSize["Medium"] = 1] = "Medium";
    ContentSize[ContentSize["Large"] = 2] = "Large";
    ContentSize[ContentSize["Auto"] = 3] = "Auto";
    ContentSize[ContentSize["ExtraLarge"] = 4] = "ExtraLarge";
})(ContentSize || (ContentSize = {}));


/***/ }),

/***/ "./node_modules/azure-devops-ui/Components/Callout/Callout.css":
/*!*********************************************************************!*\
  !*** ./node_modules/azure-devops-ui/Components/Callout/Callout.css ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/styleDomAPI.js */ "./node_modules/style-loader/dist/runtime/styleDomAPI.js");
/* harmony import */ var _style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/insertBySelector.js */ "./node_modules/style-loader/dist/runtime/insertBySelector.js");
/* harmony import */ var _style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/setAttributesWithoutAttributes.js */ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js");
/* harmony import */ var _style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/insertStyleElement.js */ "./node_modules/style-loader/dist/runtime/insertStyleElement.js");
/* harmony import */ var _style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/styleTagTransform.js */ "./node_modules/style-loader/dist/runtime/styleTagTransform.js");
/* harmony import */ var _style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _css_loader_dist_cjs_js_Callout_css__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! !!../../../css-loader/dist/cjs.js!./Callout.css */ "./node_modules/css-loader/dist/cjs.js!./node_modules/azure-devops-ui/Components/Callout/Callout.css");

      
      
      
      
      
      
      
      
      

var options = {};

options.styleTagTransform = (_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default());
options.setAttributes = (_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default());
options.insert = _style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(null, "head");
options.domAPI = (_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default());
options.insertStyleElement = (_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default());

var update = _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_css_loader_dist_cjs_js_Callout_css__WEBPACK_IMPORTED_MODULE_6__["default"], options);




       /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_css_loader_dist_cjs_js_Callout_css__WEBPACK_IMPORTED_MODULE_6__["default"] && _css_loader_dist_cjs_js_Callout_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals ? _css_loader_dist_cjs_js_Callout_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals : undefined);


/***/ }),

/***/ "./node_modules/azure-devops-ui/Components/Callout/Callout.js":
/*!********************************************************************!*\
  !*** ./node_modules/azure-devops-ui/Components/Callout/Callout.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Callout: () => (/* binding */ Callout)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var _CommonImports__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../CommonImports */ "./node_modules/azure-devops-ui/CommonImports.js");
/* harmony import */ var _Core_core_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../Core/core.css */ "./node_modules/azure-devops-ui/Core/core.css");
/* harmony import */ var _Callout_css__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Callout.css */ "./node_modules/azure-devops-ui/Components/Callout/Callout.css");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _FocusWithin__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../FocusWithin */ "./node_modules/azure-devops-ui/FocusWithin.js");
/* harmony import */ var _FocusZone__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../FocusZone */ "./node_modules/azure-devops-ui/FocusZone.js");
/* harmony import */ var _Portal__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../Portal */ "./node_modules/azure-devops-ui/Portal.js");
/* harmony import */ var _Util__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../Util */ "./node_modules/azure-devops-ui/Util.js");
/* harmony import */ var _Utilities_Position__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../Utilities/Position */ "./node_modules/azure-devops-ui/Utilities/Position.js");
/* harmony import */ var _Core_TimerManagement__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../Core/TimerManagement */ "./node_modules/azure-devops-ui/Core/TimerManagement.js");
/* harmony import */ var _Surface__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../Surface */ "./node_modules/azure-devops-ui/Surface.js");
/* harmony import */ var _Callout_Props__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./Callout.Props */ "./node_modules/azure-devops-ui/Components/Callout/Callout.Props.js");













var Callout = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(Callout, _super);
    function Callout() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.calloutContent = react__WEBPACK_IMPORTED_MODULE_4__.createRef();
        return _this;
    }
    Callout.prototype.render = function () {
        var portalProps = this.props.portalProps;
        return (react__WEBPACK_IMPORTED_MODULE_4__.createElement(_Portal__WEBPACK_IMPORTED_MODULE_7__.Portal, (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, portalProps, { className: (0,_Util__WEBPACK_IMPORTED_MODULE_8__.css)(portalProps && portalProps.className, this.props.anchorElement && "bolt-layout-relative") }),
            react__WEBPACK_IMPORTED_MODULE_4__.createElement(CalloutContent, (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({ ref: this.calloutContent }, this.props))));
    };
    Callout.prototype.componentWillUnmount = function () {
        // We need to let the content handle the WillUnmount before the Portal, this
        // will ensure the the callout can deal with unmounting content that still has
        // focus. Otherwise the root will be detached from the document and focus will
        // have moved to the body.
        if (this.calloutContent.current) {
            this.calloutContent.current.portalWillUnmount();
        }
    };
    Callout.prototype.updateLayout = function () {
        if (this.calloutContent.current) {
            this.calloutContent.current.updateLayout();
        }
    };
    Callout.defaultProps = {
        blurDismiss: false,
        viewportChangeDismiss: true
    };
    return Callout;
}(react__WEBPACK_IMPORTED_MODULE_4__.Component));

var CalloutContent = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(CalloutContent, _super);
    function CalloutContent(props) {
        var _this = _super.call(this, props) || this;
        _this.calloutElement = react__WEBPACK_IMPORTED_MODULE_4__.createRef();
        _this.relayoutTimer = new _Core_TimerManagement__WEBPACK_IMPORTED_MODULE_10__.TimerManagement();
        _this.scrollListen = false;
        _this.scrollEvent = null;
        _this.initialScreenWidth = window.innerWidth;
        _this.onBlur = function () {
            _this.props.onDismiss && _this.props.onDismiss();
        };
        _this.onClick = function (event) {
            // If we click on the light dismiss div we will dismiss it.
            if (_this.props.lightDismiss && !event.defaultPrevented) {
                if (_this.props.onDismiss) {
                    _this.props.onDismiss();
                }
                event.preventDefault();
            }
        };
        _this.onKeyDown = function (event) {
            var _a, _b;
            // If we press escape from within the callout this will dismiss it.
            if (_this.props.escDismiss && event.which === _Util__WEBPACK_IMPORTED_MODULE_8__.KeyCode.escape && !event.defaultPrevented) {
                if (_this.props.onDismiss) {
                    _this.props.onDismiss();
                }
                event.preventDefault();
            }
            (_b = (_a = _this.props).onKeyDown) === null || _b === void 0 ? void 0 : _b.call(_a, event);
        };
        _this.onResize = function () {
            // Fix for issue where the soft keyboard on android closes callouts.
            if (_this.props.viewportChangeDismiss === true &&
                (_this.initialScreenWidth !== window.innerWidth ||
                    !document.activeElement ||
                    (document.activeElement.tagName !== "INPUT" && document.activeElement.tagName !== "TEXTAREA"))) {
                _this.props.onDismiss && _this.props.onDismiss();
            }
            else if (_this.props.updateLayout) {
                _this.relayoutTimer.clearAllTimers();
                _this.relayoutTimer.setTimeout(function () {
                    _this.updateLayout();
                }, 200);
            }
        };
        _this.onScroll = function (event) {
            if (_this.scrollListen) {
                _this.scrollEvent = event.nativeEvent;
            }
        };
        _this.onScrollDocument = function (event) {
            if (_this.scrollListen) {
                if (event === _this.scrollEvent) {
                    _this.scrollEvent = null;
                }
                else {
                    if (_this.props.viewportChangeDismiss === true) {
                        var anchorElement = _this.props.anchorElement;
                        // If the element containing the anchor is scrolled dismiss the callout.
                        if (event.target && anchorElement && event.target.contains(anchorElement)) {
                            _this.props.onDismiss && _this.props.onDismiss();
                        }
                    }
                    else if (_this.props.updateLayout) {
                        _this.relayoutTimer.setTimeout(function () {
                            _this.updateLayout();
                        }, 50);
                    }
                }
            }
        };
        // Track the element that had focus when we mounted.
        _this.focusElement = document.activeElement;
        _this.contentElement = props.contentRef || react__WEBPACK_IMPORTED_MODULE_4__.createRef();
        return _this;
    }
    CalloutContent.prototype.render = function () {
        var _this = this;
        var _a = this.props, blurDismiss = _a.blurDismiss, contentJustification = _a.contentJustification, contentLocation = _a.contentLocation, contentOrientation = _a.contentOrientation, focuszoneProps = _a.focuszoneProps, lightDismiss = _a.lightDismiss, modal = _a.modal, onAnimationEnd = _a.onAnimationEnd, onMouseEnter = _a.onMouseEnter, onMouseLeave = _a.onMouseLeave, anchorElement = _a.anchorElement;
        var content;
        // If we have both a FocusWithin and a FocusZone we need to use the functional version
        // of the FocusWithin to allow the FocusZone to contain the content directly.
        if (blurDismiss && focuszoneProps) {
            content = (react__WEBPACK_IMPORTED_MODULE_4__.createElement(_FocusWithin__WEBPACK_IMPORTED_MODULE_5__.FocusWithin, { onBlur: this.onBlur, updateStateOnFocusChange: false }, function (props) { return react__WEBPACK_IMPORTED_MODULE_4__.createElement(_FocusZone__WEBPACK_IMPORTED_MODULE_6__.FocusZone, (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, focuszoneProps), _this.renderContent(props.onFocus, props.onBlur)); }));
        }
        else {
            content = this.renderContent();
            // Add the focus tracker to dismiss the callout if we are dismissing on blur.
            if (blurDismiss) {
                content = (react__WEBPACK_IMPORTED_MODULE_4__.createElement(_FocusWithin__WEBPACK_IMPORTED_MODULE_5__.FocusWithin, { onBlur: this.onBlur, updateStateOnFocusChange: false }, content));
            }
            // Add focus zone if focuszoneProperties are specified
            if (focuszoneProps) {
                content = react__WEBPACK_IMPORTED_MODULE_4__.createElement(_FocusZone__WEBPACK_IMPORTED_MODULE_6__.FocusZone, (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, focuszoneProps), content);
            }
        }
        var lightDismissDiv = lightDismiss ? (react__WEBPACK_IMPORTED_MODULE_4__.createElement("div", { className: (0,_Util__WEBPACK_IMPORTED_MODULE_8__.css)("absolute-fill bolt-light-dismiss", modal && "bolt-callout-modal"), onClick: this.onClick })) : null;
        // The callout is wrapped in a floating element in the portal.
        // If lightDismiss is enabled we will create an absolute-fill div to capture onClick events.
        return (react__WEBPACK_IMPORTED_MODULE_4__.createElement(_Surface__WEBPACK_IMPORTED_MODULE_11__.SurfaceContext.Provider, { value: { background: _Surface__WEBPACK_IMPORTED_MODULE_11__.SurfaceBackground.callout } },
            react__WEBPACK_IMPORTED_MODULE_4__.createElement("div", { className: "flex-row flex-grow" },
                react__WEBPACK_IMPORTED_MODULE_4__.createElement("div", { className: (0,_Util__WEBPACK_IMPORTED_MODULE_8__.css)(this.props.className, "bolt-callout absolute", contentLocation !== undefined && "absolute-fill", contentJustification === _Callout_Props__WEBPACK_IMPORTED_MODULE_12__.ContentJustification.Start && "justify-start", contentJustification === _Callout_Props__WEBPACK_IMPORTED_MODULE_12__.ContentJustification.Center && "justify-center", contentJustification === _Callout_Props__WEBPACK_IMPORTED_MODULE_12__.ContentJustification.End && "justify-end", contentLocation === _Callout_Props__WEBPACK_IMPORTED_MODULE_12__.ContentLocation.Start && "flex-start", contentLocation === _Callout_Props__WEBPACK_IMPORTED_MODULE_12__.ContentLocation.Center && "flex-center", contentLocation === _Callout_Props__WEBPACK_IMPORTED_MODULE_12__.ContentLocation.End && "flex-end", contentOrientation === _Callout_Props__WEBPACK_IMPORTED_MODULE_12__.ContentOrientation.Column && "flex-column", contentOrientation !== _Callout_Props__WEBPACK_IMPORTED_MODULE_12__.ContentOrientation.Column && "flex-row", modal && !lightDismiss && "bolt-callout-modal"), id: (0,_Util__WEBPACK_IMPORTED_MODULE_8__.getSafeId)(this.props.id), onAnimationEnd: onAnimationEnd, onMouseEnter: onMouseEnter, onMouseLeave: onMouseLeave, onKeyDown: this.onKeyDown, ref: this.calloutElement, role: this.props.role, tabIndex: -1 },
                    !anchorElement && lightDismissDiv,
                    content),
                !!anchorElement && lightDismissDiv)));
    };
    CalloutContent.prototype.componentDidMount = function () {
        this.updateLayout();
        // If this is an element relative layout we need to listen for scroll events
        // on the document and dismiss the callout if the scroll event didnt pass
        // through the callout.
        if (this.props.anchorElement) {
            window.addEventListener("resize", this.onResize);
            document.addEventListener("scroll", this.onScrollDocument, true);
            this.scrollListen = true;
        }
    };
    CalloutContent.prototype.componentDidUpdate = function () {
        if (this.props.updateLayout) {
            this.updateLayout();
        }
    };
    CalloutContent.prototype.componentWillUnmount = function () {
        if (this.scrollListen) {
            document.removeEventListener("scroll", this.onScrollDocument, true);
            window.removeEventListener("resize", this.onResize);
        }
        if (this.relayoutTimer) {
            this.relayoutTimer.clearAllTimers();
        }
    };
    CalloutContent.prototype.portalWillUnmount = function () {
        var contentElement = this.contentElement.current;
        var focusElement = this.focusElement;
        // If the callout has focus when unmounted we need to set focus back to the last element with focus.
        // Need to wait for next tick otherwise focus/blur events are not fired.
        if (focusElement && contentElement && contentElement.contains(document.activeElement)) {
            window.setTimeout(function () {
                // We need to make sure the active element is portal after the timeout.
                // It may have moved through other means before the timeout expires.
                // Set focus to the focusElement if our element contains focus, or if the focus has gone back to the document body
                if (contentElement.contains(document.activeElement) || document.activeElement === document.body || document.activeElement === null) {
                    focusElement.focus();
                }
            }, 0);
        }
    };
    CalloutContent.prototype.updateLayout = function () {
        if (this.props.contentLocation === undefined) {
            if (this.calloutElement.current) {
                // Position the element based on the initial layout parameters.
                (0,_Utilities_Position__WEBPACK_IMPORTED_MODULE_9__.position)(this.calloutElement.current, this.props.calloutOrigin || { horizontal: _Utilities_Position__WEBPACK_IMPORTED_MODULE_9__.Location.start, vertical: _Utilities_Position__WEBPACK_IMPORTED_MODULE_9__.Location.start }, this.props.anchorOffset, this.props.anchorElement, this.props.anchorOrigin, this.props.anchorPoint, this.props.anchorElement ? 5000 : 0);
                // Now that the component is placed at the requested location, update
                // the layout if the caller didnt request a fixed layout.
                if (!this.props.fixedLayout) {
                    (0,_Utilities_Position__WEBPACK_IMPORTED_MODULE_9__.updateLayout)(this.calloutElement.current, this.props.calloutOrigin || { horizontal: _Utilities_Position__WEBPACK_IMPORTED_MODULE_9__.Location.start, vertical: _Utilities_Position__WEBPACK_IMPORTED_MODULE_9__.Location.start }, this.props.anchorOffset, this.props.anchorElement, this.props.anchorOrigin, this.props.anchorPoint, this.props.anchorElement ? 5000 : 0);
                }
            }
        }
    };
    CalloutContent.prototype.renderContent = function (onFocus, onBlur) {
        var _a = this.props, contentJustification = _a.contentJustification, contentOrientation = _a.contentOrientation, contentSize = _a.contentSize, height = _a.height, width = _a.width;
        return (react__WEBPACK_IMPORTED_MODULE_4__.createElement("div", { "aria-describedby": (0,_Util__WEBPACK_IMPORTED_MODULE_8__.getSafeId)(this.props.ariaDescribedBy), "aria-label": this.props.ariaLabel, "aria-labelledby": (0,_Util__WEBPACK_IMPORTED_MODULE_8__.getSafeId)(this.props.ariaLabelledBy), "aria-modal": this.props.modal, className: (0,_Util__WEBPACK_IMPORTED_MODULE_8__.css)(this.props.contentClassName, "bolt-callout-content", this.props.contentShadow && "bolt-callout-shadow", contentJustification === _Callout_Props__WEBPACK_IMPORTED_MODULE_12__.ContentJustification.Stretch && "flex-grow", contentOrientation === _Callout_Props__WEBPACK_IMPORTED_MODULE_12__.ContentOrientation.Column && "flex-column", contentOrientation === _Callout_Props__WEBPACK_IMPORTED_MODULE_12__.ContentOrientation.Row && "flex-row", contentSize === _Callout_Props__WEBPACK_IMPORTED_MODULE_12__.ContentSize.Small && "bolt-callout-small", contentSize === _Callout_Props__WEBPACK_IMPORTED_MODULE_12__.ContentSize.Medium && "bolt-callout-medium", contentSize === _Callout_Props__WEBPACK_IMPORTED_MODULE_12__.ContentSize.Large && "bolt-callout-large", contentSize === _Callout_Props__WEBPACK_IMPORTED_MODULE_12__.ContentSize.ExtraLarge && "bolt-callout-extra-large", contentSize === _Callout_Props__WEBPACK_IMPORTED_MODULE_12__.ContentSize.Auto && "bolt-callout-auto"), onBlur: onBlur, onFocus: onFocus, onScroll: this.onScroll, ref: this.contentElement, role: this.props.role || "dialog", style: { height: height, width: width } }, this.props.children));
    };
    return CalloutContent;
}(react__WEBPACK_IMPORTED_MODULE_4__.Component));


/***/ }),

/***/ "./node_modules/azure-devops-ui/Components/Card/Card.Props.js":
/*!********************************************************************!*\
  !*** ./node_modules/azure-devops-ui/Components/Card/Card.Props.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "./node_modules/azure-devops-ui/Components/Card/Card.css":
/*!***************************************************************!*\
  !*** ./node_modules/azure-devops-ui/Components/Card/Card.css ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/styleDomAPI.js */ "./node_modules/style-loader/dist/runtime/styleDomAPI.js");
/* harmony import */ var _style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/insertBySelector.js */ "./node_modules/style-loader/dist/runtime/insertBySelector.js");
/* harmony import */ var _style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/setAttributesWithoutAttributes.js */ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js");
/* harmony import */ var _style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/insertStyleElement.js */ "./node_modules/style-loader/dist/runtime/insertStyleElement.js");
/* harmony import */ var _style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/styleTagTransform.js */ "./node_modules/style-loader/dist/runtime/styleTagTransform.js");
/* harmony import */ var _style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _css_loader_dist_cjs_js_Card_css__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! !!../../../css-loader/dist/cjs.js!./Card.css */ "./node_modules/css-loader/dist/cjs.js!./node_modules/azure-devops-ui/Components/Card/Card.css");

      
      
      
      
      
      
      
      
      

var options = {};

options.styleTagTransform = (_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default());
options.setAttributes = (_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default());
options.insert = _style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(null, "head");
options.domAPI = (_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default());
options.insertStyleElement = (_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default());

var update = _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_css_loader_dist_cjs_js_Card_css__WEBPACK_IMPORTED_MODULE_6__["default"], options);




       /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_css_loader_dist_cjs_js_Card_css__WEBPACK_IMPORTED_MODULE_6__["default"] && _css_loader_dist_cjs_js_Card_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals ? _css_loader_dist_cjs_js_Card_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals : undefined);


/***/ }),

/***/ "./node_modules/azure-devops-ui/Components/Card/Card.js":
/*!**************************************************************!*\
  !*** ./node_modules/azure-devops-ui/Components/Card/Card.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Card: () => (/* binding */ Card)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var _CommonImports__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../CommonImports */ "./node_modules/azure-devops-ui/CommonImports.js");
/* harmony import */ var _Core_core_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../Core/core.css */ "./node_modules/azure-devops-ui/Core/core.css");
/* harmony import */ var _Card_css__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Card.css */ "./node_modules/azure-devops-ui/Components/Card/Card.css");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _Button__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../Button */ "./node_modules/azure-devops-ui/Button.js");
/* harmony import */ var _Header__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../Header */ "./node_modules/azure-devops-ui/Header.js");
/* harmony import */ var _Icon__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../Icon */ "./node_modules/azure-devops-ui/Icon.js");
/* harmony import */ var _Observer__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../Observer */ "./node_modules/azure-devops-ui/Observer.js");
/* harmony import */ var _Resources_Card__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../Resources.Card */ "./node_modules/azure-devops-ui/Resources.Card.js");
/* harmony import */ var _Util__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../Util */ "./node_modules/azure-devops-ui/Util.js");
/* harmony import */ var _CardContent__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./CardContent */ "./node_modules/azure-devops-ui/Components/Card/CardContent.js");
/* harmony import */ var _CustomCard__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./CustomCard */ "./node_modules/azure-devops-ui/Components/Card/CustomCard.js");













var Card = function (props) {
    var collapsible = props.collapsible, _a = props.collapsed, collapsed = _a === void 0 ? false : _a, _b = props.titleProps, titleProps = _b === void 0 ? {} : _b, headerCommandBarItems = props.headerCommandBarItems, onCollapseClick = props.onCollapseClick, renderHeader = props.renderHeader;
    var text = titleProps.text;
    return (react__WEBPACK_IMPORTED_MODULE_4__.createElement(_CustomCard__WEBPACK_IMPORTED_MODULE_12__.CustomCard, { className: (0,_Util__WEBPACK_IMPORTED_MODULE_10__.css)(props.className, (text || headerCommandBarItems) && "bolt-card-with-header") }, collapsible ? (react__WEBPACK_IMPORTED_MODULE_4__.createElement(_Observer__WEBPACK_IMPORTED_MODULE_8__.Observer, { collapsed: collapsed }, function (observerProps) { return (react__WEBPACK_IMPORTED_MODULE_4__.createElement(react__WEBPACK_IMPORTED_MODULE_4__.Fragment, null,
        (text || headerCommandBarItems || renderHeader) && (react__WEBPACK_IMPORTED_MODULE_4__.createElement("div", { className: "flex-row" },
            react__WEBPACK_IMPORTED_MODULE_4__.createElement(_Button__WEBPACK_IMPORTED_MODULE_5__.Button, { ariaExpanded: !observerProps.collapsed, ariaLabel: (text ? text + " " : "") + (observerProps.collapsed ? _Resources_Card__WEBPACK_IMPORTED_MODULE_9__.ExpandButtonAriaLabel : _Resources_Card__WEBPACK_IMPORTED_MODULE_9__.CollapseButtonAriaLabel), subtle: true, iconProps: { iconName: observerProps.collapsed ? "ChevronRightMed" : "ChevronDownMed", size: _Icon__WEBPACK_IMPORTED_MODULE_7__.IconSize.small }, className: "bolt-card-expand-button flex-self-start", onClick: onCollapseClick }),
            renderHeader ? (renderHeader()) : (react__WEBPACK_IMPORTED_MODULE_4__.createElement(CardHeader, (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, props, { headerClassName: (0,_Util__WEBPACK_IMPORTED_MODULE_10__.css)(props.headerClassName, "bolt-card-expandable-header", observerProps.collapsed && "bolt-card-header-collapsed") }))))),
        !observerProps.collapsed && react__WEBPACK_IMPORTED_MODULE_4__.createElement(_CardContent__WEBPACK_IMPORTED_MODULE_11__.CardContent, (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, props.contentProps), props.children))); })) : (react__WEBPACK_IMPORTED_MODULE_4__.createElement(react__WEBPACK_IMPORTED_MODULE_4__.Fragment, null,
        renderHeader ? renderHeader() : (text || headerCommandBarItems) && react__WEBPACK_IMPORTED_MODULE_4__.createElement(CardHeader, (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, props)),
        react__WEBPACK_IMPORTED_MODULE_4__.createElement(_CardContent__WEBPACK_IMPORTED_MODULE_11__.CardContent, (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, props.contentProps), props.children)))));
};
var CardHeader = function (props) {
    var collapsible = props.collapsible, _a = props.titleProps, titleProps = _a === void 0 ? {} : _a, headerBreakpoints = props.headerBreakpoints, headerClassName = props.headerClassName, headerCommandBarItems = props.headerCommandBarItems, _b = props.headerDescriptionProps, headerDescriptionProps = _b === void 0 ? {} : _b, headerIconProps = props.headerIconProps;
    var text = titleProps.text, className = titleProps.className, id = titleProps.id, size = titleProps.size, ariaLevel = titleProps.ariaLevel;
    return (react__WEBPACK_IMPORTED_MODULE_4__.createElement(_Header__WEBPACK_IMPORTED_MODULE_6__.Header, { className: (0,_Util__WEBPACK_IMPORTED_MODULE_10__.css)(headerClassName, "bolt-card-header", collapsible && "bolt-card-header-collapsible"), commandBarClassName: "justify-end", commandBarItems: headerCommandBarItems, description: headerDescriptionProps.text, descriptionClassName: headerDescriptionProps.className, headerBreakpoints: headerBreakpoints, titleId: id, titleIconProps: headerIconProps, title: text, titleAriaLevel: ariaLevel, titleClassName: className, titleSize: size }));
};


/***/ }),

/***/ "./node_modules/azure-devops-ui/Components/Card/CardContent.js":
/*!*********************************************************************!*\
  !*** ./node_modules/azure-devops-ui/Components/Card/CardContent.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CardContent: () => (/* binding */ CardContent)
/* harmony export */ });
/* harmony import */ var _CommonImports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../CommonImports */ "./node_modules/azure-devops-ui/CommonImports.js");
/* harmony import */ var _Core_core_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../Core/core.css */ "./node_modules/azure-devops-ui/Core/core.css");
/* harmony import */ var _Card_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Card.css */ "./node_modules/azure-devops-ui/Components/Card/Card.css");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _Surface__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../Surface */ "./node_modules/azure-devops-ui/Surface.js");
/* harmony import */ var _Util__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../Util */ "./node_modules/azure-devops-ui/Util.js");






var CardContent = function (props) {
    return (react__WEBPACK_IMPORTED_MODULE_3__.createElement(_Surface__WEBPACK_IMPORTED_MODULE_4__.SurfaceContext.Consumer, null, function (surfaceContext) {
        var _a = props.contentPadding, contentPadding = _a === void 0 ? true : _a;
        return (react__WEBPACK_IMPORTED_MODULE_3__.createElement("div", { className: (0,_Util__WEBPACK_IMPORTED_MODULE_5__.css)(props.className, "bolt-card-content flex-row flex-grow", contentPadding && surfaceContext.horizontalClassName) }, props.children));
    }));
};


/***/ }),

/***/ "./node_modules/azure-devops-ui/Components/Card/CardFooter.js":
/*!********************************************************************!*\
  !*** ./node_modules/azure-devops-ui/Components/Card/CardFooter.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CardFooter: () => (/* binding */ CardFooter)
/* harmony export */ });
/* harmony import */ var _CommonImports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../CommonImports */ "./node_modules/azure-devops-ui/CommonImports.js");
/* harmony import */ var _Core_core_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../Core/core.css */ "./node_modules/azure-devops-ui/Core/core.css");
/* harmony import */ var _Card_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Card.css */ "./node_modules/azure-devops-ui/Components/Card/Card.css");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _Surface__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../Surface */ "./node_modules/azure-devops-ui/Surface.js");
/* harmony import */ var _Util__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../Util */ "./node_modules/azure-devops-ui/Util.js");






var CardFooter = function (props) {
    return (react__WEBPACK_IMPORTED_MODULE_3__.createElement(_Surface__WEBPACK_IMPORTED_MODULE_4__.SurfaceContext.Consumer, null, function (surfaceContext) { return (react__WEBPACK_IMPORTED_MODULE_3__.createElement("div", { className: (0,_Util__WEBPACK_IMPORTED_MODULE_5__.css)(props.className, "bolt-card-footer flex-row flex-noshrink", surfaceContext.horizontalClassName) }, props.children)); }));
};


/***/ }),

/***/ "./node_modules/azure-devops-ui/Components/Card/CustomCard.js":
/*!********************************************************************!*\
  !*** ./node_modules/azure-devops-ui/Components/Card/CustomCard.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CustomCard: () => (/* binding */ CustomCard)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var _CommonImports__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../CommonImports */ "./node_modules/azure-devops-ui/CommonImports.js");
/* harmony import */ var _Core_core_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../Core/core.css */ "./node_modules/azure-devops-ui/Core/core.css");
/* harmony import */ var _Card_css__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Card.css */ "./node_modules/azure-devops-ui/Components/Card/Card.css");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _Surface__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../Surface */ "./node_modules/azure-devops-ui/Surface.js");
/* harmony import */ var _Util__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../Util */ "./node_modules/azure-devops-ui/Util.js");







var CustomCard = function (props) {
    return (react__WEBPACK_IMPORTED_MODULE_4__.createElement(_Surface__WEBPACK_IMPORTED_MODULE_5__.SurfaceContext.Consumer, null, function (surfaceContext) { return (react__WEBPACK_IMPORTED_MODULE_4__.createElement(_Surface__WEBPACK_IMPORTED_MODULE_5__.Surface, (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, surfaceContext, { spacing: _Surface__WEBPACK_IMPORTED_MODULE_5__.Spacing.default }),
        react__WEBPACK_IMPORTED_MODULE_4__.createElement("div", { className: (0,_Util__WEBPACK_IMPORTED_MODULE_6__.css)(props.className, "bolt-card flex-column depth-8", surfaceContext.background === _Surface__WEBPACK_IMPORTED_MODULE_5__.SurfaceBackground.neutral && "bolt-card-white") }, props.children))); }));
};


/***/ }),

/***/ "./node_modules/azure-devops-ui/Components/Checkbox/Checkbox.Props.js":
/*!****************************************************************************!*\
  !*** ./node_modules/azure-devops-ui/Components/Checkbox/Checkbox.Props.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "./node_modules/azure-devops-ui/Components/Checkbox/Checkbox.css":
/*!***********************************************************************!*\
  !*** ./node_modules/azure-devops-ui/Components/Checkbox/Checkbox.css ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/styleDomAPI.js */ "./node_modules/style-loader/dist/runtime/styleDomAPI.js");
/* harmony import */ var _style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/insertBySelector.js */ "./node_modules/style-loader/dist/runtime/insertBySelector.js");
/* harmony import */ var _style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/setAttributesWithoutAttributes.js */ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js");
/* harmony import */ var _style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/insertStyleElement.js */ "./node_modules/style-loader/dist/runtime/insertStyleElement.js");
/* harmony import */ var _style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/styleTagTransform.js */ "./node_modules/style-loader/dist/runtime/styleTagTransform.js");
/* harmony import */ var _style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _css_loader_dist_cjs_js_Checkbox_css__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! !!../../../css-loader/dist/cjs.js!./Checkbox.css */ "./node_modules/css-loader/dist/cjs.js!./node_modules/azure-devops-ui/Components/Checkbox/Checkbox.css");

      
      
      
      
      
      
      
      
      

var options = {};

options.styleTagTransform = (_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default());
options.setAttributes = (_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default());
options.insert = _style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(null, "head");
options.domAPI = (_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default());
options.insertStyleElement = (_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default());

var update = _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_css_loader_dist_cjs_js_Checkbox_css__WEBPACK_IMPORTED_MODULE_6__["default"], options);




       /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_css_loader_dist_cjs_js_Checkbox_css__WEBPACK_IMPORTED_MODULE_6__["default"] && _css_loader_dist_cjs_js_Checkbox_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals ? _css_loader_dist_cjs_js_Checkbox_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals : undefined);


/***/ }),

/***/ "./node_modules/azure-devops-ui/Components/Checkbox/Checkbox.js":
/*!**********************************************************************!*\
  !*** ./node_modules/azure-devops-ui/Components/Checkbox/Checkbox.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Checkbox: () => (/* binding */ Checkbox),
/* harmony export */   TriStateCheckbox: () => (/* binding */ TriStateCheckbox)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var _CommonImports__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../CommonImports */ "./node_modules/azure-devops-ui/CommonImports.js");
/* harmony import */ var _Core_core_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../Core/core.css */ "./node_modules/azure-devops-ui/Core/core.css");
/* harmony import */ var _Checkbox_css__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Checkbox.css */ "./node_modules/azure-devops-ui/Components/Checkbox/Checkbox.css");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _Core_Observable__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../Core/Observable */ "./node_modules/azure-devops-ui/Core/Observable.js");
/* harmony import */ var _FocusGroup__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../FocusGroup */ "./node_modules/azure-devops-ui/FocusGroup.js");
/* harmony import */ var _FocusZone__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../FocusZone */ "./node_modules/azure-devops-ui/FocusZone.js");
/* harmony import */ var _Icon__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../Icon */ "./node_modules/azure-devops-ui/Icon.js");
/* harmony import */ var _Observer__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../Observer */ "./node_modules/azure-devops-ui/Observer.js");
/* harmony import */ var _TooltipEx__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../TooltipEx */ "./node_modules/azure-devops-ui/TooltipEx.js");
/* harmony import */ var _Util__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../Util */ "./node_modules/azure-devops-ui/Util.js");
/* harmony import */ var _Utilities_Focus__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../Utilities/Focus */ "./node_modules/azure-devops-ui/Utilities/Focus.js");













var checkboxId = 1;
var TriStateCheckbox = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(TriStateCheckbox, _super);
    function TriStateCheckbox(props) {
        var _this = _super.call(this, props) || this;
        _this.checkboxElement = react__WEBPACK_IMPORTED_MODULE_4__.createRef();
        _this.animationClassName = "";
        _this.onClick = function (event) {
            _this.focus();
            _this.onChange(event);
        };
        _this.onFocus = function () {
            var id = _this.props.id;
            if (id) {
                _this.context.onFocus(id);
            }
        };
        _this.onKeyDown = function (event) {
            if (!event.defaultPrevented && !_this.props.disabled) {
                if (event.which === _Util__WEBPACK_IMPORTED_MODULE_11__.KeyCode.space) {
                    _this.onChange(event);
                    event.preventDefault();
                }
            }
        };
        _this.onChange = function (event) {
            if (_this.props.onChange) {
                var checked = _Core_Observable__WEBPACK_IMPORTED_MODULE_5__.ObservableLike.getValue(_this.props.checked);
                // Unchecked transitions to Checked.
                // Checked transitions to TriState or Unchecked.
                // Indeterminate transitions to Unchecked.
                if (checked === false) {
                    checked = true;
                }
                else if (checked === true) {
                    if (_this.props.triState) {
                        checked = undefined;
                    }
                    else {
                        checked = false;
                    }
                }
                else {
                    checked = false;
                }
                _this.props.onChange(event, checked);
            }
        };
        _this.labelId = "checkbox-".concat(checkboxId++, "-label");
        return _this;
    }
    TriStateCheckbox.prototype.render = function () {
        var _this = this;
        var _a = this.props, disabled = _a.disabled, label = _a.label, labelId = _a.labelId, tooltipProps = _a.tooltipProps;
        return (react__WEBPACK_IMPORTED_MODULE_4__.createElement(_FocusZone__WEBPACK_IMPORTED_MODULE_7__.FocusZoneContext.Consumer, null, function (zoneContext) { return (react__WEBPACK_IMPORTED_MODULE_4__.createElement(_Observer__WEBPACK_IMPORTED_MODULE_9__.Observer, { checked: _this.props.checked }, function (props) {
            var ariaChecked;
            if (_this.props.role !== "presentation") {
                ariaChecked = props.checked === undefined ? "mixed" : props.checked ? "true" : "false";
            }
            var checkbox = (react__WEBPACK_IMPORTED_MODULE_4__.createElement("div", { "aria-checked": ariaChecked, "aria-describedby": (0,_Util__WEBPACK_IMPORTED_MODULE_11__.getSafeId)(_this.props.ariaDescribedBy), "aria-disabled": _this.props.disabled, "aria-label": _this.props.ariaLabel, "aria-labelledby": !_this.props.ariaLabel ? (0,_Util__WEBPACK_IMPORTED_MODULE_11__.getSafeId)(_this.props.ariaLabelledBy) : undefined, className: (0,_Util__WEBPACK_IMPORTED_MODULE_11__.css)(_this.props.className, "bolt-checkbox cursor-pointer", props.checked !== false && "checked", disabled ? "disabled" : "enabled", "bolt-focus-treatment", label && "labelled"), "data-focuszone": !disabled && (0,_Util__WEBPACK_IMPORTED_MODULE_11__.css)(_this.props.focuszoneId, !_this.props.excludeFocusZone ? zoneContext.focuszoneId : undefined), id: (0,_Util__WEBPACK_IMPORTED_MODULE_11__.getSafeId)(_this.props.id), onClick: !disabled ? _this.onClick : undefined, onFocus: _this.onFocus, onKeyDown: _this.onKeyDown, ref: _this.checkboxElement, role: _this.props.role || "checkbox", tabIndex: (0,_Utilities_Focus__WEBPACK_IMPORTED_MODULE_12__.getTabIndex)(_this.props, _this.context) },
                react__WEBPACK_IMPORTED_MODULE_4__.createElement("div", { className: "bolt-checkmark justify-center flex-row flex-noshrink scroll-hidden" }, (0,_Icon__WEBPACK_IMPORTED_MODULE_8__.Icon)({
                    className: _this.animationClassName,
                    iconName: props.checked === undefined ? "SkypeMinus" : "CheckMark",
                    size: _Icon__WEBPACK_IMPORTED_MODULE_8__.IconSize.small
                })),
                label && (react__WEBPACK_IMPORTED_MODULE_4__.createElement("div", { className: "bolt-checkbox-label", id: (0,_Util__WEBPACK_IMPORTED_MODULE_11__.getSafeId)(labelId || _this.labelId) }, label)),
                _this.props.children));
            if (tooltipProps) {
                checkbox = (react__WEBPACK_IMPORTED_MODULE_4__.createElement(_TooltipEx__WEBPACK_IMPORTED_MODULE_10__.Tooltip, (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({ addAriaDescribedBy: true }, tooltipProps), checkbox));
            }
            return checkbox;
        })); }));
    };
    TriStateCheckbox.prototype.componentDidMount = function () {
        this.animationClassName = "animation-ready";
    };
    TriStateCheckbox.prototype.focus = function () {
        if (this.checkboxElement.current) {
            this.checkboxElement.current.focus();
        }
    };
    TriStateCheckbox.contextType = _FocusGroup__WEBPACK_IMPORTED_MODULE_6__.FocusGroupContext;
    return TriStateCheckbox;
}(react__WEBPACK_IMPORTED_MODULE_4__.Component));

var Checkbox = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(Checkbox, _super);
    function Checkbox() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Checkbox.defaultProps = {
        checked: false
    };
    return Checkbox;
}(TriStateCheckbox));



/***/ }),

/***/ "./node_modules/azure-devops-ui/Components/Expandable/Expandable.Props.js":
/*!********************************************************************************!*\
  !*** ./node_modules/azure-devops-ui/Components/Expandable/Expandable.Props.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "./node_modules/azure-devops-ui/Components/Expandable/Expandable.js":
/*!**************************************************************************!*\
  !*** ./node_modules/azure-devops-ui/Components/Expandable/Expandable.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Expandable: () => (/* binding */ Expandable),
/* harmony export */   ExpandableContainer: () => (/* binding */ ExpandableContainer)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var _CommonImports__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../CommonImports */ "./node_modules/azure-devops-ui/CommonImports.js");
/* harmony import */ var _Core_core_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../Core/core.css */ "./node_modules/azure-devops-ui/Core/core.css");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _FocusGroup__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../FocusGroup */ "./node_modules/azure-devops-ui/FocusGroup.js");
/* harmony import */ var _FocusZone__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../FocusZone */ "./node_modules/azure-devops-ui/FocusZone.js");
/* harmony import */ var _MouseWithin__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../MouseWithin */ "./node_modules/azure-devops-ui/MouseWithin.js");
/* harmony import */ var _Util__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../Util */ "./node_modules/azure-devops-ui/Util.js");
/* harmony import */ var _Utilities_Focus__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../Utilities/Focus */ "./node_modules/azure-devops-ui/Utilities/Focus.js");









var Expandable = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(Expandable, _super);
    function Expandable() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = { expanded: false };
        _this.collapse = function () {
            if (_this.state.expanded) {
                _this.setState({ expanded: false });
                if (_this.props.onCollapse) {
                    _this.props.onCollapse();
                }
            }
        };
        _this.expand = function () {
            if (!_this.state.expanded) {
                _this.setState({ expanded: !_this.state.expanded });
                if (_this.props.onExpand) {
                    _this.props.onExpand();
                }
            }
        };
        _this.onClick = function (event) {
            if (!_this.props.disabled) {
                if (!event.defaultPrevented) {
                    if (!_this.state.expanded && !_this.ignoreClick) {
                        _this.expand();
                        event.preventDefault();
                    }
                }
            }
            else {
                event.preventDefault();
            }
        };
        _this.onKeyDown = function (event) {
            if (!event.defaultPrevented) {
                // If the control key is pressed we want to navigate in a focus zone and not open the menu
                if (event.ctrlKey) {
                    return;
                }
                if (!_this.state.expanded && _this.isExpandKey(event)) {
                    _this.ignoreClick = false;
                    _this.expand();
                    event.preventDefault();
                }
            }
        };
        _this.onMouseDown = function () {
            // If the callout is expanded when we click on it, we want to ignore the click
            // and let the blur occur and close the callout.
            _this.ignoreClick = _this.state.expanded;
        };
        return _this;
    }
    Expandable.prototype.render = function () {
        var expanded = this.state.expanded;
        var child = this.props.children;
        return (react__WEBPACK_IMPORTED_MODULE_3__.createElement(react__WEBPACK_IMPORTED_MODULE_3__.Fragment, null,
            child({ expanded: expanded, onClick: this.onClick, onKeyDown: this.onKeyDown, onMouseDown: this.onMouseDown }),
            expanded && this.props.renderCallout && this.props.renderCallout()));
    };
    Expandable.prototype.isExpandKey = function (event) {
        return (Array.isArray(this.props.expandKey) && this.props.expandKey.indexOf(event.which) !== -1) || event.which === this.props.expandKey;
    };
    Expandable.defaultProps = {
        expandKey: _Util__WEBPACK_IMPORTED_MODULE_7__.KeyCode.downArrow
    };
    return Expandable;
}(react__WEBPACK_IMPORTED_MODULE_3__.Component));

var expandableContainerId = 1;
/**
 * ExpandableContainer is a specialized form of Expandable and generally shouldn't be used.
 * It's main goal is to provider mouse enter/leave behavior for collapsing.
 *
 * @NOTE: This component MAY be deprecated in the future, use <Expandable /> instead.
 */
var ExpandableContainer = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(ExpandableContainer, _super);
    function ExpandableContainer() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.element = react__WEBPACK_IMPORTED_MODULE_3__.createRef();
        _this.expandedOnHover = false;
        _this.expandable = react__WEBPACK_IMPORTED_MODULE_3__.createRef();
        _this.expandableId = "expandableContainer-" + expandableContainerId++;
        _this.collapse = function () {
            if (_this.expandable.current) {
                _this.expandable.current.collapse();
            }
        };
        _this.expand = function () {
            if (_this.expandable.current) {
                _this.expandable.current.expand();
            }
        };
        _this.onFocus = function (event) {
            // Only call onFocus for the FocusGroup is the expandable itself is getting focus.
            // Otherwise it is going to a child element and it should manage focus appropriately.
            if (_this.props.id && (!_this.element.current || _this.element.current === event.target)) {
                _this.context.onFocus(_this.props.id);
            }
        };
        _this.onMouseEnter = function () {
            if (_this.props.expandOnHover) {
                _this.expandedOnHover = true;
                (0,_Util__WEBPACK_IMPORTED_MODULE_7__.setFocusVisible)(false);
                _this.expand();
            }
        };
        _this.onMouseLeave = function () {
            if (_this.expandedOnHover) {
                _this.collapse();
            }
        };
        _this.renderCallout = function () {
            return _this.props.renderCallout(_this.expandable.current, _this.expandableId, _this.element.current);
        };
        return _this;
    }
    ExpandableContainer.prototype.render = function () {
        var _this = this;
        return (react__WEBPACK_IMPORTED_MODULE_3__.createElement(_FocusZone__WEBPACK_IMPORTED_MODULE_5__.FocusZoneContext.Consumer, null, function (zoneContext) { return (react__WEBPACK_IMPORTED_MODULE_3__.createElement(_MouseWithin__WEBPACK_IMPORTED_MODULE_6__.MouseWithin, { enterDelay: _this.props.expandDelay, leaveDelay: _this.props.collapseDelay, onMouseEnter: _this.onMouseEnter, onMouseLeave: _this.onMouseLeave, updateStateOnMouseChange: false }, function (mouseContext) { return (react__WEBPACK_IMPORTED_MODULE_3__.createElement(Expandable, (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, _this.props, { renderCallout: undefined, ref: _this.expandable }), function (expandableProps) { return (react__WEBPACK_IMPORTED_MODULE_3__.createElement("div", { "aria-controls": _this.props.ariaControls === undefined ? (expandableProps.expanded ? (0,_Util__WEBPACK_IMPORTED_MODULE_7__.getSafeId)(_this.props.expandableId) : undefined)
                : _this.props.ariaControls ? _this.props.ariaControls : undefined, "aria-expanded": _this.props.ariaExpanded === undefined ? expandableProps.expanded
                : _this.props.ariaExpanded === null ? undefined : _this.props.ariaExpanded, "aria-haspopup": _this.props.ariaHasPopup === undefined ? true
                : _this.props.ariaHasPopup === null ? undefined : _this.props.ariaHasPopup, "aria-label": _this.props.ariaLabel, className: (0,_Util__WEBPACK_IMPORTED_MODULE_7__.css)(_this.props.className, "bolt-expandable-container flex-row flex-center", expandableProps.expanded && "expanded"), "data-focuszone": !_this.props.disabled && !_this.props.excludeFocusZone ? zoneContext.focuszoneId : undefined, id: (0,_Util__WEBPACK_IMPORTED_MODULE_7__.getSafeId)(_this.props.id), onClick: expandableProps.onClick, onFocus: _this.onFocus, onKeyDown: expandableProps.onKeyDown, onMouseDown: expandableProps.onMouseDown, onMouseEnter: mouseContext.onMouseEnter, onMouseLeave: mouseContext.onMouseLeave, role: _this.props.role || "button", tabIndex: (0,_Utilities_Focus__WEBPACK_IMPORTED_MODULE_8__.getTabIndex)(_this.props, _this.context), ref: _this.element },
            _this.props.children,
            expandableProps.expanded && _this.renderCallout())); })); })); }));
    };
    ExpandableContainer.contextType = _FocusGroup__WEBPACK_IMPORTED_MODULE_4__.FocusGroupContext;
    ExpandableContainer.defaultProps = {
        collapseDelay: 250,
        expandDelay: 250,
        expandKey: [_Util__WEBPACK_IMPORTED_MODULE_7__.KeyCode.downArrow, _Util__WEBPACK_IMPORTED_MODULE_7__.KeyCode.enter]
    };
    return ExpandableContainer;
}(react__WEBPACK_IMPORTED_MODULE_3__.Component));



/***/ }),

/***/ "./node_modules/azure-devops-ui/Components/FocusGroup/FocusGroup.Props.js":
/*!********************************************************************************!*\
  !*** ./node_modules/azure-devops-ui/Components/FocusGroup/FocusGroup.Props.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "./node_modules/azure-devops-ui/Components/FocusGroup/FocusGroup.js":
/*!**************************************************************************!*\
  !*** ./node_modules/azure-devops-ui/Components/FocusGroup/FocusGroup.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   FocusGroup: () => (/* binding */ FocusGroup),
/* harmony export */   FocusGroupContext: () => (/* binding */ FocusGroupContext)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var _CommonImports__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../CommonImports */ "./node_modules/azure-devops-ui/CommonImports.js");
/* harmony import */ var _Core_core_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../Core/core.css */ "./node_modules/azure-devops-ui/Core/core.css");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _Util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../Util */ "./node_modules/azure-devops-ui/Util.js");





var FocusGroupContext = react__WEBPACK_IMPORTED_MODULE_3__.createContext({
    onFocus: _Util__WEBPACK_IMPORTED_MODULE_4__.noop
});
var FocusGroup = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(FocusGroup, _super);
    function FocusGroup(props) {
        var _this = _super.call(this, props) || this;
        _this.onFocus = function (focusedElementId) {
            // Only setState if the focusedElement is changing. This prevents us from setting the state
            // when focus keeps getting fired on the same element. Example: Browser keeps losing and
            // getting focus.
            if (_this.state.focusedElementId !== focusedElementId) {
                _this.setState({ focusedElementId: focusedElementId });
            }
        };
        _this.state = { defaultElementId: props.defaultElementId, focusedElementId: props.defaultElementId };
        return _this;
    }
    FocusGroup.getDerivedStateFromProps = function (props, state) {
        if (state.defaultElementId !== props.defaultElementId) {
            return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, state), { defaultElementId: props.defaultElementId, focusedElementId: props.defaultElementId });
        }
        return null;
    };
    FocusGroup.prototype.render = function () {
        return (react__WEBPACK_IMPORTED_MODULE_3__.createElement(FocusGroupContext.Provider, { value: {
                focusedElementId: this.state.focusedElementId,
                onFocus: this.onFocus
            } }, this.props.children));
    };
    FocusGroup.prototype.focus = function (elementId) {
        var id = (0,_Util__WEBPACK_IMPORTED_MODULE_4__.getSafeId)(elementId || this.state.focusedElementId);
        if (id) {
            var element = document.getElementById(id);
            if (element) {
                element.focus();
            }
        }
    };
    return FocusGroup;
}(react__WEBPACK_IMPORTED_MODULE_3__.Component));



/***/ }),

/***/ "./node_modules/azure-devops-ui/Components/FocusWithin/FocusWithin.Props.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/azure-devops-ui/Components/FocusWithin/FocusWithin.Props.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "./node_modules/azure-devops-ui/Components/FocusWithin/FocusWithin.js":
/*!****************************************************************************!*\
  !*** ./node_modules/azure-devops-ui/Components/FocusWithin/FocusWithin.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   FocusWithin: () => (/* binding */ FocusWithin)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var _CommonImports__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../CommonImports */ "./node_modules/azure-devops-ui/CommonImports.js");
/* harmony import */ var _Core_core_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../Core/core.css */ "./node_modules/azure-devops-ui/Core/core.css");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");




var FocusWithinContext = react__WEBPACK_IMPORTED_MODULE_3__.createContext({});
var FocusWithin = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(FocusWithin, _super);
    function FocusWithin() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.blurTimeout = -1;
        _this.focusCount = 0;
        _this.focus = false;
        /**
         * onBlur method that should be attached to the onBlur handler of the
         * continers root element.
         */
        _this.onBlur = function () {
            // Don't let the focus count go below 0.
            // We have seen cases where we get a blur event, even when we
            // do not have focus.
            _this.focusCount = Math.max(0, _this.focusCount - 1);
            // Clear any previous timeout if we somehow got a second blur event before
            // ever processing the timeout from the first one.
            if (_this.blurTimeout !== -1) {
                window.clearTimeout(_this.blurTimeout);
            }
            // We must delay the blur processing for two basic reasons:
            // 1) If focus is transitioning to a child element we will fire a Blur
            //  followed quickly by a Focus even though focus never left the element.
            //  This causes problems for things like menus that close on loss of focus.
            // 2) IE 11 fires the blur before the focus (no other browser does this)
            //  and this causes the same issue above but also causes focusCount
            //  inconsistencies.
            _this.blurTimeout = window.setTimeout(function () {
                _this.blurTimeout = -1;
                if (!_this.focusCount) {
                    _this.focus = false;
                    // If we are tracking the focus state we will force a component update.
                    if (_this.props.updateStateOnFocusChange) {
                        _this.forceUpdate();
                    }
                    if (_this.props.onBlur) {
                        _this.props.onBlur();
                    }
                }
            }, 0);
        };
        /**
         * onFocus method that should be attached to the onFocus handler of the
         * continer's root element.
         */
        _this.onFocus = function (event) {
            _this.focusCount++;
            // If focus is just entering one of the child components and not just moving
            // one child to another we will call the onFocus delegate if supplied.
            if (!_this.focus) {
                _this.focus = true;
                // If we are tracking the focus state we will force a component update.
                if (_this.props.updateStateOnFocusChange) {
                    _this.forceUpdate();
                }
                if (_this.props.onFocus) {
                    _this.props.onFocus(event);
                }
            }
        };
        return _this;
    }
    FocusWithin.prototype.render = function () {
        var _this = this;
        return (react__WEBPACK_IMPORTED_MODULE_3__.createElement(FocusWithinContext.Consumer, null, function (focusWithinContext) {
            var children;
            var newProps = {
                onBlur: _this.onBlur,
                onFocus: _this.onFocus
            };
            // Save ou parent focus within for potential communication.
            _this.parentFocusWithin = focusWithinContext.focusWithin;
            if (typeof _this.props.children === "function") {
                var child = _this.props.children;
                // For functional components we pass the hasFocus attribute as well.
                newProps.hasFocus = _this.focus;
                children = child(newProps);
            }
            else {
                var child = react__WEBPACK_IMPORTED_MODULE_3__.Children.only(_this.props.children);
                children = react__WEBPACK_IMPORTED_MODULE_3__.cloneElement(child, (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, child.props), newProps), child.props.children);
            }
            return react__WEBPACK_IMPORTED_MODULE_3__.createElement(FocusWithinContext.Provider, { value: { focusWithin: _this } }, children);
        }));
    };
    /**
     * componentWillUnmount is used to cleanup the component state.
     *
     * @NOTE: The main thing we need to deal with is when this component is unmounted
     * while it has focus. We need to get this FocusWithin and all of its parents state
     * updated since focus will move directly to the body without a blur event.
     */
    FocusWithin.prototype.componentWillUnmount = function () {
        if (this.blurTimeout !== -1) {
            window.clearTimeout(this.blurTimeout);
            this.blurTimeout = -1;
        }
        if (this.focusCount > 0) {
            this.unmountWithFocus(false);
        }
    };
    /**
     * hasFocus returns true if the focus is contained within the focus component
     * hierarchy. This includes portals, the element may or may not
     * be a direct descendant of the focus component in the DOM structure.
     */
    FocusWithin.prototype.hasFocus = function () {
        return this.focusCount > 0;
    };
    /**
     * When the focusWithin unmounts we need to determine if we currently have focus.
     * If we do, focus will be moved silently to the body. We need to cleanup the
     * focusWithin's that are affected by this silent change.
     */
    FocusWithin.prototype.unmountWithFocus = function (fromParent) {
        if (this.focusCount > 0) {
            this.focusCount--;
            if (this.focusCount > 0) {
                // If we are tracking the focus state we will force a component update.
                if (fromParent) {
                    this.focusCount = 0;
                    this.focus = false;
                    if (this.props.updateStateOnFocusChange) {
                        this.forceUpdate();
                    }
                    if (this.props.onBlur) {
                        this.props.onBlur();
                    }
                }
            }
            // Notify the parent focus within that the mounted focus component is unmounting.
            if (this.parentFocusWithin) {
                this.parentFocusWithin.unmountWithFocus(true);
            }
        }
    };
    FocusWithin.defaultProps = {
        updateStateOnFocusChange: true
    };
    return FocusWithin;
}(react__WEBPACK_IMPORTED_MODULE_3__.Component));



/***/ }),

/***/ "./node_modules/azure-devops-ui/Components/FocusZone/FocusZone.Props.js":
/*!******************************************************************************!*\
  !*** ./node_modules/azure-devops-ui/Components/FocusZone/FocusZone.Props.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   FocusZoneDirection: () => (/* binding */ FocusZoneDirection),
/* harmony export */   FocusZoneKeyStroke: () => (/* binding */ FocusZoneKeyStroke)
/* harmony export */ });
/**
 * Which direction focus moves within a FocusZone
 */
var FocusZoneDirection;
(function (FocusZoneDirection) {
    FocusZoneDirection[FocusZoneDirection["Horizontal"] = 1] = "Horizontal";
    FocusZoneDirection[FocusZoneDirection["Vertical"] = 2] = "Vertical";
})(FocusZoneDirection || (FocusZoneDirection = {}));
/**
 * The preprocessKeyStroke method can return one of the following values
 * to modify how the current and parent focus zones treat the keystroke.
 */
var FocusZoneKeyStroke;
(function (FocusZoneKeyStroke) {
    /**
     * Dont alter the keystroke in any way.
     */
    FocusZoneKeyStroke[FocusZoneKeyStroke["IgnoreNone"] = 1] = "IgnoreNone";
    /**
     * All parent focus zones should ignore the keystroke, but it should be
     * processed normally by the current focuszone.
     */
    FocusZoneKeyStroke[FocusZoneKeyStroke["IgnoreParents"] = 2] = "IgnoreParents";
    /**
     * All focuszones that receive the keystroke should ignore it.
     */
    FocusZoneKeyStroke[FocusZoneKeyStroke["IgnoreAll"] = 3] = "IgnoreAll";
})(FocusZoneKeyStroke || (FocusZoneKeyStroke = {}));


/***/ }),

/***/ "./node_modules/azure-devops-ui/Components/FocusZone/FocusZone.js":
/*!************************************************************************!*\
  !*** ./node_modules/azure-devops-ui/Components/FocusZone/FocusZone.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   FocusZone: () => (/* binding */ FocusZone),
/* harmony export */   FocusZoneContext: () => (/* binding */ FocusZoneContext)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var _CommonImports__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../CommonImports */ "./node_modules/azure-devops-ui/CommonImports.js");
/* harmony import */ var _Core_core_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../Core/core.css */ "./node_modules/azure-devops-ui/Core/core.css");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _FocusGroup__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../FocusGroup */ "./node_modules/azure-devops-ui/FocusGroup.js");
/* harmony import */ var _Util__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../Util */ "./node_modules/azure-devops-ui/Util.js");
/* harmony import */ var _FocusZone_Props__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./FocusZone.Props */ "./node_modules/azure-devops-ui/Components/FocusZone/FocusZone.Props.js");







// The FocusZoneContext carries the identifier for the current FocusZone.
var FocusZoneContext = react__WEBPACK_IMPORTED_MODULE_3__.createContext({ direction: undefined, focuszoneId: undefined });
// As an event propagates through the hierarchy of focus zones it may
// be marked as ignored. This allows a child focus zone to mark an event
// as "pass-through" for all of its parents.
var ignoreEvent = false;
// An internal identifier used to created unique focuszoneId's.
var focuszoneId = 1;
var FocusZone = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(FocusZone, _super);
    function FocusZone(props) {
        var _this = _super.call(this, props) || this;
        _this.rootElements = [];
        _this.state = {
            focuszoneId: "focuszone-" + focuszoneId++
        };
        return _this;
    }
    FocusZone.prototype.render = function () {
        var _this = this;
        // We need to shim the KeyDown event on each of the children. This allows us to capture
        // the event and process it for focus changes.
        var content = (react__WEBPACK_IMPORTED_MODULE_3__.createElement(FocusZoneContext.Consumer, null, function (parentContext) { return (react__WEBPACK_IMPORTED_MODULE_3__.createElement(FocusZoneContext.Provider, { value: { direction: _this.props.direction, focuszoneId: _this.state.focuszoneId } }, react__WEBPACK_IMPORTED_MODULE_3__.Children.map(_this.props.children, function (child, index) {
            if (child === null || typeof child === "string" || typeof child === "number") {
                return child;
            }
            // All direct children MUST be DOM elements.
            if (typeof child.type !== "string") {
                throw Error("Children of a focus zone MUST be DOM elements");
            }
            // Save the supplied keydown event handler so we can forward the event to it.
            var existingOnKeyDown = child.props.onKeyDown;
            var existingOnFocus = child.props.onFocus;
            // Save the component reference for this element, either the one from the original
            // component or the one we added.
            _this.rootElements[index] = (0,_Util__WEBPACK_IMPORTED_MODULE_5__.shimRef)(child);
            return react__WEBPACK_IMPORTED_MODULE_3__.cloneElement(child, (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({ key: index }, child.props), { ref: _this.rootElements[index], onFocus: function (event) {
                    var _a;
                    if (existingOnFocus) {
                        existingOnFocus(event);
                    }
                    var focusCurrent = document.activeElement;
                    for (var index_1 = 0; index_1 < _this.rootElements.length; index_1++) {
                        var rootElement = (_a = _this.rootElements[index_1]) === null || _a === void 0 ? void 0 : _a.current;
                        if (rootElement && (rootElement.contains(focusCurrent) || rootElement === focusCurrent)) {
                            _this.lastFocusElement = event.target;
                        }
                    }
                }, onKeyDown: function (event) {
                    var ignoreKeystroke = _FocusZone_Props__WEBPACK_IMPORTED_MODULE_6__.FocusZoneKeyStroke.IgnoreNone;
                    if (existingOnKeyDown) {
                        existingOnKeyDown(event);
                    }
                    // Determine whether or not this focuszone wants to preprocess this keystroke
                    // and mark the current propagation as ignored.
                    if (!ignoreEvent && _this.props.preprocessKeyStroke) {
                        ignoreKeystroke = _this.props.preprocessKeyStroke(event);
                        if (ignoreKeystroke === _FocusZone_Props__WEBPACK_IMPORTED_MODULE_6__.FocusZoneKeyStroke.IgnoreAll) {
                            ignoreEvent = true;
                        }
                    }
                    if (!ignoreEvent) {
                        if (!event.defaultPrevented && !_this.props.disabled) {
                            var nodeName = event.target.nodeName;
                            var offset = void 0;
                            // Logic to handle input / text area tags
                            var inputPosition = void 0;
                            var inputLength = void 0;
                            if (nodeName === "INPUT" || nodeName === "TEXTAREA") {
                                var input = event.target;
                                try {
                                    inputPosition = typeof input.selectionStart === "number" ? input.selectionStart : undefined;
                                }
                                catch (_a) {
                                    // Microsoft Edge throws InvalidStateError when calling 'input.selectionStart' on non-supported input element types
                                    // according to https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement
                                    // Ignore this error
                                }
                                inputLength = input.value.length;
                            }
                            var allowLeftArrow = inputPosition === undefined || (inputPosition === 0 && _this.props.allowArrowOutOfInputs);
                            var allowRightArrow = inputPosition === undefined ||
                                inputLength === undefined ||
                                (inputPosition === inputLength && _this.props.allowArrowOutOfInputs);
                            switch (event.which) {
                                case _Util__WEBPACK_IMPORTED_MODULE_5__.KeyCode.upArrow:
                                    if (nodeName !== "TEXTAREA") {
                                        if (_this.props.direction === _FocusZone_Props__WEBPACK_IMPORTED_MODULE_6__.FocusZoneDirection.Vertical) {
                                            offset = -1;
                                        }
                                    }
                                    break;
                                case _Util__WEBPACK_IMPORTED_MODULE_5__.KeyCode.downArrow:
                                    if (nodeName !== "TEXTAREA") {
                                        if (_this.props.direction === _FocusZone_Props__WEBPACK_IMPORTED_MODULE_6__.FocusZoneDirection.Vertical) {
                                            offset = 1;
                                        }
                                    }
                                    break;
                                case _Util__WEBPACK_IMPORTED_MODULE_5__.KeyCode.rightArrow:
                                    if (allowRightArrow) {
                                        if (_this.props.direction === _FocusZone_Props__WEBPACK_IMPORTED_MODULE_6__.FocusZoneDirection.Horizontal) {
                                            offset = 1;
                                        }
                                    }
                                    break;
                                case _Util__WEBPACK_IMPORTED_MODULE_5__.KeyCode.leftArrow:
                                    if (allowLeftArrow) {
                                        if (_this.props.direction === _FocusZone_Props__WEBPACK_IMPORTED_MODULE_6__.FocusZoneDirection.Horizontal) {
                                            offset = -1;
                                        }
                                    }
                                    break;
                                case _Util__WEBPACK_IMPORTED_MODULE_5__.KeyCode.tab:
                                    if (_this.props.handleTabKey) {
                                        offset = event.shiftKey ? -1 : 1;
                                    }
                                    break;
                                case _Util__WEBPACK_IMPORTED_MODULE_5__.KeyCode.enter:
                                    if (_this.props.activateOnEnter) {
                                        event.target.click();
                                    }
                            }
                            if (offset) {
                                if (_this.focusNextElement(event, offset)) {
                                    event.preventDefault();
                                }
                            }
                        }
                    }
                    if (ignoreKeystroke === _FocusZone_Props__WEBPACK_IMPORTED_MODULE_6__.FocusZoneKeyStroke.IgnoreParents) {
                        ignoreEvent = true;
                    }
                    // Perform any supplied event post processing.
                    if (!ignoreEvent && _this.props.postprocessKeyStroke) {
                        if (_this.props.postprocessKeyStroke(event) === _FocusZone_Props__WEBPACK_IMPORTED_MODULE_6__.FocusZoneKeyStroke.IgnoreParents) {
                            ignoreEvent = true;
                        }
                    }
                    // Once we reach the root focuszone we need to clear the ignoredEvent.
                    if (!parentContext.focuszoneId) {
                        ignoreEvent = false;
                    }
                } }));
        }))); }));
        if (this.props.focusGroupProps) {
            content = react__WEBPACK_IMPORTED_MODULE_3__.createElement(_FocusGroup__WEBPACK_IMPORTED_MODULE_4__.FocusGroup, (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, this.props.focusGroupProps), content);
        }
        return content;
    };
    FocusZone.prototype.componentDidMount = function () {
        var focusElement;
        // If a defaultActiveElement is supplied we will focus it. It is not required to
        // be member of the focus zone, it can be any element.
        if (this.props.focusOnMount) {
            var defaultActiveElement = this.props.defaultActiveElement;
            var focusElements = this.getFocusElements(typeof defaultActiveElement === "function" ? defaultActiveElement() : defaultActiveElement);
            if (focusElements.length > 0) {
                focusElement = focusElements[0];
            }
        }
        if (focusElement) {
            focusElement.focus({
                preventScroll: this.props.preventScrollOnFocus
            });
        }
    };
    FocusZone.prototype.focusNextElement = function (event, offset) {
        var focusElements = this.getFocusElements();
        if (focusElements.length > 0) {
            var focusCurrent = document.activeElement;
            var rootElements = this.rootElements;
            // Determine if an element in the focus zone has focus.
            var focusIndex = focusElements.indexOf(focusCurrent);
            // Focus may not be on an element in the zone so we need to
            // figure out which one we are between in this case.
            if (focusIndex === -1) {
                var index = 0;
                // Determine if the element is in a portal or directly within a focuszone root.
                for (index = 0; index < rootElements.length; index++) {
                    var elementRef = rootElements[index];
                    if (elementRef.current) {
                        if (elementRef.current.contains(event.target)) {
                            break;
                        }
                    }
                }
                // If this is coming from a portal, we will use the element that last had focus.
                if (index === this.rootElements.length && this.lastFocusElement) {
                    focusIndex = focusElements.indexOf(this.lastFocusElement);
                }
                else {
                    for (index = 0; index < focusElements.length; index++) {
                        var relationship = (0,_Util__WEBPACK_IMPORTED_MODULE_5__.getRelationship)(focusCurrent, focusElements[index]);
                        if (relationship === _Util__WEBPACK_IMPORTED_MODULE_5__.ElementRelationship.Before) {
                            focusIndex = index - (offset > 0 ? 1 : 0);
                            break;
                        }
                        else if (relationship === _Util__WEBPACK_IMPORTED_MODULE_5__.ElementRelationship.Child) {
                            focusIndex = index;
                            break;
                        }
                        else if (relationship === _Util__WEBPACK_IMPORTED_MODULE_5__.ElementRelationship.After && index === focusElements.length - 1) {
                            focusIndex = focusElements.length;
                        }
                    }
                }
            }
            // Move to the next component in the set of focus zone components.
            focusIndex += offset;
            // If the FocusZone supports circular navigation and we are on the end
            // we will move to the element on the opposite end.
            if (this.props.circularNavigation) {
                if (focusIndex < 0) {
                    focusIndex = focusElements.length - 1;
                }
                else if (focusIndex >= focusElements.length) {
                    focusIndex = 0;
                }
            }
            // If we ended up on a focusable element update the focus.
            if (focusIndex > -1 && focusIndex < focusElements.length) {
                focusElements[focusIndex].focus();
                if (this.props.selectInputTextOnFocus && focusElements[focusIndex] instanceof HTMLInputElement) {
                    focusElements[focusIndex].select();
                }
                return true;
            }
        }
        return false;
    };
    FocusZone.prototype.getFocusElements = function (customSelector) {
        var focusElements = [];
        var selector = customSelector;
        // If a custom selector was supplied we will use it.
        if (!selector) {
            // The default selector will just pick up items tagged with this focuszone id.
            selector = "[data-focuszone~=" + this.state.focuszoneId + "]";
            // If we are including the default elements from the DOM we will add the
            // default selector to our list of selectors.
            if (this.props.includeDefaults) {
                selector += ",a[href],button,iframe,input,select,textarea,[tabIndex]";
            }
        }
        // Filter the elements that matched our query to the elements that are elligible
        // for receiving focus in this focuszone.
        for (var _i = 0, _a = this.rootElements; _i < _a.length; _i++) {
            var rootElement = _a[_i];
            if (rootElement.current) {
                var focusChildren = rootElement.current.querySelectorAll(selector);
                // Check if the root element matches our selector.
                if (rootElement.current.matches(selector) && this.isFocusElement(rootElement.current, customSelector)) {
                    focusElements.push(rootElement.current);
                }
                // Check all the children of the root that are potential focus elements.
                for (var rootIndex = 0; rootIndex < focusChildren.length; rootIndex++) {
                    var element = focusChildren[rootIndex];
                    if (this.isFocusElement(element, customSelector)) {
                        focusElements.push(element);
                    }
                }
            }
        }
        return focusElements;
    };
    /**
     * isFocusElement is used to determine whether or not an element should participate
     * in this focus zone.
     *
     * @param element HTML Element that you are testing as a valid focus element.
     *
     * @param customSelector A custom selector that is used to match elements with
     *  negative tabIndex. These wont match normally unless targetted by the custom
     *  selector.
     */
    FocusZone.prototype.isFocusElement = function (element, customSelector) {
        // Filter out elements that are disabled.
        if (element.hasAttribute("disabled")) {
            return false;
        }
        if (!customSelector) {
            // Filter out elements that are not visible.
            if (!this.props.skipHiddenCheck) {
                var style = window.getComputedStyle(element);
                if (style.visibility === "hidden" ||
                    style.display === "none" ||
                    !(element.offsetWidth || element.offsetHeight || element.getClientRects().length)) {
                    return false;
                }
            }
            // Filter out elements with negative tabIndex that aren't
            // explicity marked for this focuszone.
            var tabIndex = element.getAttribute("tabindex");
            if (tabIndex && parseInt(tabIndex) < 0) {
                var focuszoneId_1 = element.getAttribute("data-focuszone");
                if (!focuszoneId_1 || focuszoneId_1.indexOf(this.state.focuszoneId) < 0) {
                    return false;
                }
            }
        }
        return true;
    };
    return FocusZone;
}(react__WEBPACK_IMPORTED_MODULE_3__.Component));



/***/ }),

/***/ "./node_modules/azure-devops-ui/Components/Header/CustomHeader.js":
/*!************************************************************************!*\
  !*** ./node_modules/azure-devops-ui/Components/Header/CustomHeader.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CustomHeader: () => (/* binding */ CustomHeader)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var _CommonImports__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../CommonImports */ "./node_modules/azure-devops-ui/CommonImports.js");
/* harmony import */ var _Core_core_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../Core/core.css */ "./node_modules/azure-devops-ui/Core/core.css");
/* harmony import */ var _Header_css__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Header.css */ "./node_modules/azure-devops-ui/Components/Header/Header.css");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _Surface__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../Surface */ "./node_modules/azure-devops-ui/Surface.js");
/* harmony import */ var _Util__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../Util */ "./node_modules/azure-devops-ui/Util.js");







var CustomHeader = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(CustomHeader, _super);
    function CustomHeader() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CustomHeader.prototype.render = function () {
        var _this = this;
        return (react__WEBPACK_IMPORTED_MODULE_4__.createElement(_Surface__WEBPACK_IMPORTED_MODULE_5__.SurfaceContext.Consumer, null, function (surfaceContext) {
            return (react__WEBPACK_IMPORTED_MODULE_4__.createElement(react__WEBPACK_IMPORTED_MODULE_4__.Fragment, null,
                react__WEBPACK_IMPORTED_MODULE_4__.createElement("div", { className: (0,_Util__WEBPACK_IMPORTED_MODULE_6__.css)(_this.props.className, "bolt-header flex-row flex-noshrink flex-start", surfaceContext.horizontalClassName, surfaceContext.spacing === undefined && "bolt-header-no-spacing-defined", surfaceContext.spacing === _Surface__WEBPACK_IMPORTED_MODULE_5__.Spacing.condensed && "bolt-header-condensed", surfaceContext.spacing === _Surface__WEBPACK_IMPORTED_MODULE_5__.Spacing.default && "bolt-header-default", surfaceContext.spacing === _Surface__WEBPACK_IMPORTED_MODULE_5__.Spacing.relaxed && "bolt-header-relaxed") }, _this.props.children),
                _this.props.separator && react__WEBPACK_IMPORTED_MODULE_4__.createElement("div", { className: "bolt-header-separator flex-noshrink" })));
        }));
    };
    return CustomHeader;
}(react__WEBPACK_IMPORTED_MODULE_4__.Component));



/***/ }),

/***/ "./node_modules/azure-devops-ui/Components/Header/Header.Props.js":
/*!************************************************************************!*\
  !*** ./node_modules/azure-devops-ui/Components/Header/Header.Props.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TitleSize: () => (/* binding */ TitleSize)
/* harmony export */ });
var TitleSize;
(function (TitleSize) {
    TitleSize[TitleSize["Medium"] = 0] = "Medium";
    TitleSize[TitleSize["Large"] = 1] = "Large";
    TitleSize[TitleSize["Small"] = 2] = "Small";
})(TitleSize || (TitleSize = {}));


/***/ }),

/***/ "./node_modules/azure-devops-ui/Components/Header/Header.css":
/*!*******************************************************************!*\
  !*** ./node_modules/azure-devops-ui/Components/Header/Header.css ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/styleDomAPI.js */ "./node_modules/style-loader/dist/runtime/styleDomAPI.js");
/* harmony import */ var _style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/insertBySelector.js */ "./node_modules/style-loader/dist/runtime/insertBySelector.js");
/* harmony import */ var _style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/setAttributesWithoutAttributes.js */ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js");
/* harmony import */ var _style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/insertStyleElement.js */ "./node_modules/style-loader/dist/runtime/insertStyleElement.js");
/* harmony import */ var _style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/styleTagTransform.js */ "./node_modules/style-loader/dist/runtime/styleTagTransform.js");
/* harmony import */ var _style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _css_loader_dist_cjs_js_Header_css__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! !!../../../css-loader/dist/cjs.js!./Header.css */ "./node_modules/css-loader/dist/cjs.js!./node_modules/azure-devops-ui/Components/Header/Header.css");

      
      
      
      
      
      
      
      
      

var options = {};

options.styleTagTransform = (_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default());
options.setAttributes = (_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default());
options.insert = _style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(null, "head");
options.domAPI = (_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default());
options.insertStyleElement = (_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default());

var update = _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_css_loader_dist_cjs_js_Header_css__WEBPACK_IMPORTED_MODULE_6__["default"], options);




       /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_css_loader_dist_cjs_js_Header_css__WEBPACK_IMPORTED_MODULE_6__["default"] && _css_loader_dist_cjs_js_Header_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals ? _css_loader_dist_cjs_js_Header_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals : undefined);


/***/ }),

/***/ "./node_modules/azure-devops-ui/Components/Header/Header.js":
/*!******************************************************************!*\
  !*** ./node_modules/azure-devops-ui/Components/Header/Header.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Header: () => (/* binding */ Header)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var _CommonImports__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../CommonImports */ "./node_modules/azure-devops-ui/CommonImports.js");
/* harmony import */ var _Core_core_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../Core/core.css */ "./node_modules/azure-devops-ui/Core/core.css");
/* harmony import */ var _Header_css__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Header.css */ "./node_modules/azure-devops-ui/Components/Header/Header.css");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _Core_Observable__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../Core/Observable */ "./node_modules/azure-devops-ui/Core/Observable.js");
/* harmony import */ var _Breakpoint__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../Breakpoint */ "./node_modules/azure-devops-ui/Breakpoint.js");
/* harmony import */ var _HeaderCommandBar__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../HeaderCommandBar */ "./node_modules/azure-devops-ui/HeaderCommandBar.js");
/* harmony import */ var _Observer__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../Observer */ "./node_modules/azure-devops-ui/Observer.js");
/* harmony import */ var _Tabs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../Tabs */ "./node_modules/azure-devops-ui/Tabs.js");
/* harmony import */ var _Util__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../Util */ "./node_modules/azure-devops-ui/Util.js");
/* harmony import */ var _CustomHeader__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./CustomHeader */ "./node_modules/azure-devops-ui/Components/Header/CustomHeader.js");
/* harmony import */ var _HeaderBackButton__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./HeaderBackButton */ "./node_modules/azure-devops-ui/Components/Header/HeaderBackButton.js");
/* harmony import */ var _HeaderDescription__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./HeaderDescription */ "./node_modules/azure-devops-ui/Components/Header/HeaderDescription.js");
/* harmony import */ var _HeaderIcon__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./HeaderIcon */ "./node_modules/azure-devops-ui/Components/Header/HeaderIcon.js");
/* harmony import */ var _HeaderTitle__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./HeaderTitle */ "./node_modules/azure-devops-ui/Components/Header/HeaderTitle.js");
/* harmony import */ var _HeaderTitleArea__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./HeaderTitleArea */ "./node_modules/azure-devops-ui/Components/Header/HeaderTitleArea.js");
/* harmony import */ var _HeaderTitleRow__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./HeaderTitleRow */ "./node_modules/azure-devops-ui/Components/Header/HeaderTitleRow.js");


















var Header = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(Header, _super);
    function Header(props) {
        var _this = _super.call(this, props) || this;
        _this.breakpointIndex = 0;
        _this.headerCommandBarRef = react__WEBPACK_IMPORTED_MODULE_4__.createRef();
        _this.onBreakPoint = function (index, breakpoint) {
            _this.breakpointIndex = index;
            // This is making sure that command bar items are made visible after getting notified
            // for the exact breakpoint. Otherwise, there is flickering from default to current breakpoint.
            // If there are no breakpoints specified, actions are rendered at first place.
            _this.commandBarClassName.value = (0,_Util__WEBPACK_IMPORTED_MODULE_10__.css)(_this.props.commandBarClassName, "flex-self-start");
        };
        _this.commandBarClassName = new _Core_Observable__WEBPACK_IMPORTED_MODULE_5__.ObservableValue((0,_Util__WEBPACK_IMPORTED_MODULE_10__.css)(props.commandBarClassName, "flex-self-start", !!props.headerBreakpoints && "invisible"));
        return _this;
    }
    Header.prototype.render = function () {
        var _this = this;
        return (react__WEBPACK_IMPORTED_MODULE_4__.createElement(_Tabs__WEBPACK_IMPORTED_MODULE_9__.TabProviderContext.Consumer, null, function (tabProviderContext) {
            var _a = _this.props, backButtonProps = _a.backButtonProps, buttonCount = _a.buttonCount, className = _a.className, contentClassName = _a.contentClassName, commandBarMoreButtonId = _a.commandBarMoreButtonId, description = _a.description, descriptionClassName = _a.descriptionClassName, descriptionId = _a.descriptionId, headerBreakpoints = _a.headerBreakpoints, title = _a.title, titleAriaLevel = _a.titleAriaLevel, titleClassName = _a.titleClassName, titleIconProps = _a.titleIconProps, titleId = _a.titleId, titleSize = _a.titleSize, useAriaLabelForOverflow = _a.useAriaLabelForOverflow;
            var commandBarItems = _this.props.commandBarItems || tabProviderContext.commandBarItems;
            var commandBarComponent = undefined;
            if (commandBarItems) {
                commandBarComponent = (react__WEBPACK_IMPORTED_MODULE_4__.createElement(_Observer__WEBPACK_IMPORTED_MODULE_8__.Observer, { items: commandBarItems, className: _this.commandBarClassName }, function (props) {
                    return (react__WEBPACK_IMPORTED_MODULE_4__.createElement(_HeaderCommandBar__WEBPACK_IMPORTED_MODULE_7__.HeaderCommandBar, { buttonCount: buttonCount, className: props.className, items: _this.getUpdatedCommandBarItems(props.items), moreButtonId: commandBarMoreButtonId, ref: _this.headerCommandBarRef, useAriaLabelForOverflow: useAriaLabelForOverflow }));
                }));
            }
            return (react__WEBPACK_IMPORTED_MODULE_4__.createElement(react__WEBPACK_IMPORTED_MODULE_4__.Fragment, null,
                headerBreakpoints && (react__WEBPACK_IMPORTED_MODULE_4__.createElement(_Breakpoint__WEBPACK_IMPORTED_MODULE_6__.Breakpoint, { breakpoints: headerBreakpoints.map(function (hbp) { return hbp.breakpoint; }), onBreakpoint: _this.onBreakPoint })),
                react__WEBPACK_IMPORTED_MODULE_4__.createElement(_CustomHeader__WEBPACK_IMPORTED_MODULE_11__.CustomHeader, { className: (0,_Util__WEBPACK_IMPORTED_MODULE_10__.css)(className, commandBarItems && commandBarItems.length > 0 && "bolt-header-with-commandbar", backButtonProps && "bolt-header-with-back-button"), separator: _this.props.separator },
                    backButtonProps && react__WEBPACK_IMPORTED_MODULE_4__.createElement(_HeaderBackButton__WEBPACK_IMPORTED_MODULE_12__.HeaderBackButton, { buttonProps: backButtonProps }),
                    react__WEBPACK_IMPORTED_MODULE_4__.createElement("div", { className: (0,_Util__WEBPACK_IMPORTED_MODULE_10__.css)(contentClassName, "bolt-header-content-area flex-row flex-grow flex-self-stretch") },
                        titleIconProps && react__WEBPACK_IMPORTED_MODULE_4__.createElement(_HeaderIcon__WEBPACK_IMPORTED_MODULE_14__.HeaderIcon, { iconProps: titleIconProps, titleSize: titleSize }),
                        react__WEBPACK_IMPORTED_MODULE_4__.createElement(_HeaderTitleArea__WEBPACK_IMPORTED_MODULE_16__.HeaderTitleArea, null,
                            react__WEBPACK_IMPORTED_MODULE_4__.createElement(_HeaderTitleRow__WEBPACK_IMPORTED_MODULE_17__.HeaderTitleRow, null, title && (react__WEBPACK_IMPORTED_MODULE_4__.createElement(_HeaderTitle__WEBPACK_IMPORTED_MODULE_15__.HeaderTitle, { ariaLevel: titleAriaLevel, className: titleClassName, id: titleId, titleSize: titleSize }, title))),
                            description && (react__WEBPACK_IMPORTED_MODULE_4__.createElement(_HeaderDescription__WEBPACK_IMPORTED_MODULE_13__.HeaderDescription, { className: descriptionClassName, id: descriptionId }, description)),
                            _this.props.children),
                        commandBarComponent))));
        }));
    };
    Header.prototype.focus = function (options) {
        if (this.headerCommandBarRef.current) {
            this.headerCommandBarRef.current.focus(options);
        }
    };
    Header.prototype.getUpdatedCommandBarItems = function (sourceCommandBarItems) {
        var headerBreakpoints = this.props.headerBreakpoints;
        var breakpoint = headerBreakpoints ? headerBreakpoints[Math.max(0, this.breakpointIndex)] : null;
        if (breakpoint) {
            var _a = breakpoint.commandBarItems, commandBarItems = _a === void 0 ? [] : _a;
            // Update if there are actions changing their look for this breakpoint
            if (commandBarItems.length > 0) {
                // Convert actions to a map to access later quickly
                var commandBarItemsMap_1 = {};
                commandBarItems.forEach(function (item) { return (commandBarItemsMap_1[item.id] = item); });
                var targetCommandBarItems = [];
                for (var _i = 0, sourceCommandBarItems_1 = sourceCommandBarItems; _i < sourceCommandBarItems_1.length; _i++) {
                    var commandBarItem = sourceCommandBarItems_1[_i];
                    var changedItem = commandBarItemsMap_1[commandBarItem.id];
                    if (changedItem) {
                        // Update command bar item with the specified properties
                        targetCommandBarItems.push((0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, commandBarItem), changedItem));
                    }
                    else {
                        // If there is no change requested, use the same item
                        targetCommandBarItems.push((0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, commandBarItem));
                    }
                }
                return targetCommandBarItems;
            }
        }
        return sourceCommandBarItems;
    };
    return Header;
}(react__WEBPACK_IMPORTED_MODULE_4__.Component));



/***/ }),

/***/ "./node_modules/azure-devops-ui/Components/Header/HeaderBackButton.js":
/*!****************************************************************************!*\
  !*** ./node_modules/azure-devops-ui/Components/Header/HeaderBackButton.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   HeaderBackButton: () => (/* binding */ HeaderBackButton)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var _CommonImports__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../CommonImports */ "./node_modules/azure-devops-ui/CommonImports.js");
/* harmony import */ var _Core_core_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../Core/core.css */ "./node_modules/azure-devops-ui/Core/core.css");
/* harmony import */ var _Header_css__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Header.css */ "./node_modules/azure-devops-ui/Components/Header/Header.css");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _Core_Util_Screen__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../Core/Util/Screen */ "./node_modules/azure-devops-ui/Core/Util/Screen.js");
/* harmony import */ var _Button__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../Button */ "./node_modules/azure-devops-ui/Button.js");
/* harmony import */ var _Icon__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../Icon */ "./node_modules/azure-devops-ui/Icon.js");
/* harmony import */ var _Resources_Page__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../Resources.Page */ "./node_modules/azure-devops-ui/Resources.Page.js");
/* harmony import */ var _Util__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../Util */ "./node_modules/azure-devops-ui/Util.js");
/* harmony import */ var _Utilities_ScreenSize__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../Utilities/ScreenSize */ "./node_modules/azure-devops-ui/Utilities/ScreenSize.js");











function HeaderBackButton(props) {
    var buttonProps = props.buttonProps;
    return (react__WEBPACK_IMPORTED_MODULE_4__.createElement(_Utilities_ScreenSize__WEBPACK_IMPORTED_MODULE_10__.ScreenSizeObserver, null, function (screenSizeProps) {
        var smallScreen = screenSizeProps.screenSize === _Core_Util_Screen__WEBPACK_IMPORTED_MODULE_5__.ScreenSize.xsmall;
        return (react__WEBPACK_IMPORTED_MODULE_4__.createElement(_Button__WEBPACK_IMPORTED_MODULE_6__.Button, (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({ ariaLabel: _Resources_Page__WEBPACK_IMPORTED_MODULE_8__.Back, iconProps: {
                iconName: "Back",
                size: smallScreen ? _Icon__WEBPACK_IMPORTED_MODULE_7__.IconSize.small : undefined
            }, subtle: true }, buttonProps, { text: smallScreen ? (buttonProps.text ? buttonProps.text : _Resources_Page__WEBPACK_IMPORTED_MODULE_8__.Back) : undefined, className: (0,_Util__WEBPACK_IMPORTED_MODULE_9__.css)(buttonProps.className, "bolt-header-back-button justify-end") })));
    }));
}


/***/ }),

/***/ "./node_modules/azure-devops-ui/Components/Header/HeaderDescription.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/azure-devops-ui/Components/Header/HeaderDescription.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   HeaderDescription: () => (/* binding */ HeaderDescription)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var _CommonImports__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../CommonImports */ "./node_modules/azure-devops-ui/CommonImports.js");
/* harmony import */ var _Core_core_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../Core/core.css */ "./node_modules/azure-devops-ui/Core/core.css");
/* harmony import */ var _Header_css__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Header.css */ "./node_modules/azure-devops-ui/Components/Header/Header.css");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _Util__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../Util */ "./node_modules/azure-devops-ui/Util.js");






var HeaderDescription = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(HeaderDescription, _super);
    function HeaderDescription() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    HeaderDescription.prototype.render = function () {
        return (react__WEBPACK_IMPORTED_MODULE_4__.createElement("div", { className: (0,_Util__WEBPACK_IMPORTED_MODULE_5__.css)(this.props.className, "bolt-header-description body-m secondary-text"), id: (0,_Util__WEBPACK_IMPORTED_MODULE_5__.getSafeId)(this.props.id) }, this.props.children));
    };
    return HeaderDescription;
}(react__WEBPACK_IMPORTED_MODULE_4__.Component));



/***/ }),

/***/ "./node_modules/azure-devops-ui/Components/Header/HeaderIcon.js":
/*!**********************************************************************!*\
  !*** ./node_modules/azure-devops-ui/Components/Header/HeaderIcon.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   HeaderIcon: () => (/* binding */ HeaderIcon)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var _CommonImports__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../CommonImports */ "./node_modules/azure-devops-ui/CommonImports.js");
/* harmony import */ var _Core_core_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../Core/core.css */ "./node_modules/azure-devops-ui/Core/core.css");
/* harmony import */ var _Header_css__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Header.css */ "./node_modules/azure-devops-ui/Components/Header/Header.css");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _Header_Props__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Header.Props */ "./node_modules/azure-devops-ui/Components/Header/Header.Props.js");
/* harmony import */ var _Icon__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../Icon */ "./node_modules/azure-devops-ui/Icon.js");
/* harmony import */ var _Util__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../Util */ "./node_modules/azure-devops-ui/Util.js");








var HeaderIcon = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(HeaderIcon, _super);
    function HeaderIcon() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    HeaderIcon.prototype.render = function () {
        var titleSizeClass = undefined;
        switch (this.props.titleSize) {
            case _Header_Props__WEBPACK_IMPORTED_MODULE_5__.TitleSize.Large:
                titleSizeClass = "l";
                break;
            case _Header_Props__WEBPACK_IMPORTED_MODULE_5__.TitleSize.Small:
                titleSizeClass = "s";
                break;
            case _Header_Props__WEBPACK_IMPORTED_MODULE_5__.TitleSize.Medium:
            default:
                titleSizeClass = "m";
        }
        return react__WEBPACK_IMPORTED_MODULE_4__.createElement("div", { className: (0,_Util__WEBPACK_IMPORTED_MODULE_7__.css)(this.props.className, "bolt-header-icon", titleSizeClass) }, (0,_Icon__WEBPACK_IMPORTED_MODULE_6__.Icon)(this.props.iconProps));
    };
    return HeaderIcon;
}(react__WEBPACK_IMPORTED_MODULE_4__.Component));



/***/ }),

/***/ "./node_modules/azure-devops-ui/Components/Header/HeaderTitle.js":
/*!***********************************************************************!*\
  !*** ./node_modules/azure-devops-ui/Components/Header/HeaderTitle.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   HeaderTitle: () => (/* binding */ HeaderTitle)
/* harmony export */ });
/* harmony import */ var _CommonImports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../CommonImports */ "./node_modules/azure-devops-ui/CommonImports.js");
/* harmony import */ var _Core_core_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../Core/core.css */ "./node_modules/azure-devops-ui/Core/core.css");
/* harmony import */ var _Header_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Header.css */ "./node_modules/azure-devops-ui/Components/Header/Header.css");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _Header_Props__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Header.Props */ "./node_modules/azure-devops-ui/Components/Header/Header.Props.js");
/* harmony import */ var _TooltipEx__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../TooltipEx */ "./node_modules/azure-devops-ui/TooltipEx.js");
/* harmony import */ var _Util__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../Util */ "./node_modules/azure-devops-ui/Util.js");







function HeaderTitle(props) {
    var _a = props.ariaLevel, ariaLevel = _a === void 0 ? 1 : _a, id = props.id;
    var titleSizeClass = undefined;
    switch (props.titleSize) {
        case _Header_Props__WEBPACK_IMPORTED_MODULE_4__.TitleSize.Large:
            titleSizeClass = "title-m l";
            break;
        case _Header_Props__WEBPACK_IMPORTED_MODULE_4__.TitleSize.Small:
            titleSizeClass = "title-xs s";
            break;
        case _Header_Props__WEBPACK_IMPORTED_MODULE_4__.TitleSize.Medium:
        default:
            titleSizeClass = "body-xl m";
    }
    return (react__WEBPACK_IMPORTED_MODULE_3__.createElement(_TooltipEx__WEBPACK_IMPORTED_MODULE_5__.Tooltip, { overflowOnly: true },
        react__WEBPACK_IMPORTED_MODULE_3__.createElement("div", { "aria-level": ariaLevel, className: (0,_Util__WEBPACK_IMPORTED_MODULE_6__.css)(props.className, "bolt-header-title", titleSizeClass), id: (0,_Util__WEBPACK_IMPORTED_MODULE_6__.getSafeId)(id), role: "heading" }, props.children)));
}


/***/ }),

/***/ "./node_modules/azure-devops-ui/Components/Header/HeaderTitleArea.js":
/*!***************************************************************************!*\
  !*** ./node_modules/azure-devops-ui/Components/Header/HeaderTitleArea.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   HeaderTitleArea: () => (/* binding */ HeaderTitleArea)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var _CommonImports__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../CommonImports */ "./node_modules/azure-devops-ui/CommonImports.js");
/* harmony import */ var _Core_core_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../Core/core.css */ "./node_modules/azure-devops-ui/Core/core.css");
/* harmony import */ var _Header_css__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Header.css */ "./node_modules/azure-devops-ui/Components/Header/Header.css");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _Util__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../Util */ "./node_modules/azure-devops-ui/Util.js");






var HeaderTitleArea = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(HeaderTitleArea, _super);
    function HeaderTitleArea() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    HeaderTitleArea.prototype.render = function () {
        return react__WEBPACK_IMPORTED_MODULE_4__.createElement("div", { className: (0,_Util__WEBPACK_IMPORTED_MODULE_5__.css)(this.props.className, "bolt-header-title-area flex-column flex-grow scroll-hidden") }, this.props.children);
    };
    return HeaderTitleArea;
}(react__WEBPACK_IMPORTED_MODULE_4__.Component));



/***/ }),

/***/ "./node_modules/azure-devops-ui/Components/Header/HeaderTitleRow.js":
/*!**************************************************************************!*\
  !*** ./node_modules/azure-devops-ui/Components/Header/HeaderTitleRow.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   HeaderTitleRow: () => (/* binding */ HeaderTitleRow)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var _CommonImports__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../CommonImports */ "./node_modules/azure-devops-ui/CommonImports.js");
/* harmony import */ var _Core_core_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../Core/core.css */ "./node_modules/azure-devops-ui/Core/core.css");
/* harmony import */ var _Header_css__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Header.css */ "./node_modules/azure-devops-ui/Components/Header/Header.css");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _Util__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../Util */ "./node_modules/azure-devops-ui/Util.js");






var HeaderTitleRow = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(HeaderTitleRow, _super);
    function HeaderTitleRow() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    HeaderTitleRow.prototype.render = function () {
        return react__WEBPACK_IMPORTED_MODULE_4__.createElement("div", { className: (0,_Util__WEBPACK_IMPORTED_MODULE_5__.css)(this.props.className, "bolt-header-title-row flex-row flex-baseline") }, this.props.children);
    };
    return HeaderTitleRow;
}(react__WEBPACK_IMPORTED_MODULE_4__.Component));



/***/ }),

/***/ "./node_modules/azure-devops-ui/Components/HeaderCommandBar/CustomHeaderCommandBar.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/azure-devops-ui/Components/HeaderCommandBar/CustomHeaderCommandBar.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CustomHeaderCommandBar: () => (/* binding */ CustomHeaderCommandBar)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var _CommonImports__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../CommonImports */ "./node_modules/azure-devops-ui/CommonImports.js");
/* harmony import */ var _Core_core_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../Core/core.css */ "./node_modules/azure-devops-ui/Core/core.css");
/* harmony import */ var _HeaderCommandBar_css__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./HeaderCommandBar.css */ "./node_modules/azure-devops-ui/Components/HeaderCommandBar/HeaderCommandBar.css");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _ButtonGroup__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../ButtonGroup */ "./node_modules/azure-devops-ui/ButtonGroup.js");
/* harmony import */ var _FocusZone__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../FocusZone */ "./node_modules/azure-devops-ui/FocusZone.js");
/* harmony import */ var _Util__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../Util */ "./node_modules/azure-devops-ui/Util.js");








/**
 * Renders children in a FocusZone and ButtonGroup. This should be used directly only
 * if you need to render custom content that does not map to an IHeaderCommandBarItem.
 *
 * This component will always render all of its children - the logic for which items live
 * in the ... button and which items are always shown is only in the HeaderCommandBar. It is assumed
 * that if you are custom rendering the header command bar, that you are responsible for putting
 * the items correctly into the menu button.
 */
var CustomHeaderCommandBar = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(CustomHeaderCommandBar, _super);
    function CustomHeaderCommandBar() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CustomHeaderCommandBar.prototype.render = function () {
        return (react__WEBPACK_IMPORTED_MODULE_4__.createElement(_FocusZone__WEBPACK_IMPORTED_MODULE_6__.FocusZone, { direction: _FocusZone__WEBPACK_IMPORTED_MODULE_6__.FocusZoneDirection.Horizontal, focusGroupProps: this.props.focusGroupProps }, (0,_ButtonGroup__WEBPACK_IMPORTED_MODULE_5__.ButtonGroup)({
            className: (0,_Util__WEBPACK_IMPORTED_MODULE_7__.css)(this.props.className, "bolt-header-commandbar", this.props.lastItemIsIconButton && "bolt-header-commandbar-no-right-padding"),
            children: this.props.children,
            role: this.props.role
        })));
    };
    return CustomHeaderCommandBar;
}(react__WEBPACK_IMPORTED_MODULE_4__.Component));



/***/ }),

/***/ "./node_modules/azure-devops-ui/Components/HeaderCommandBar/HeaderCommandBar.Props.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/azure-devops-ui/Components/HeaderCommandBar/HeaderCommandBar.Props.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "./node_modules/azure-devops-ui/Components/HeaderCommandBar/HeaderCommandBar.css":
/*!***************************************************************************************!*\
  !*** ./node_modules/azure-devops-ui/Components/HeaderCommandBar/HeaderCommandBar.css ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/styleDomAPI.js */ "./node_modules/style-loader/dist/runtime/styleDomAPI.js");
/* harmony import */ var _style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/insertBySelector.js */ "./node_modules/style-loader/dist/runtime/insertBySelector.js");
/* harmony import */ var _style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/setAttributesWithoutAttributes.js */ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js");
/* harmony import */ var _style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/insertStyleElement.js */ "./node_modules/style-loader/dist/runtime/insertStyleElement.js");
/* harmony import */ var _style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/styleTagTransform.js */ "./node_modules/style-loader/dist/runtime/styleTagTransform.js");
/* harmony import */ var _style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _css_loader_dist_cjs_js_HeaderCommandBar_css__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! !!../../../css-loader/dist/cjs.js!./HeaderCommandBar.css */ "./node_modules/css-loader/dist/cjs.js!./node_modules/azure-devops-ui/Components/HeaderCommandBar/HeaderCommandBar.css");

      
      
      
      
      
      
      
      
      

var options = {};

options.styleTagTransform = (_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default());
options.setAttributes = (_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default());
options.insert = _style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(null, "head");
options.domAPI = (_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default());
options.insertStyleElement = (_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default());

var update = _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_css_loader_dist_cjs_js_HeaderCommandBar_css__WEBPACK_IMPORTED_MODULE_6__["default"], options);




       /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_css_loader_dist_cjs_js_HeaderCommandBar_css__WEBPACK_IMPORTED_MODULE_6__["default"] && _css_loader_dist_cjs_js_HeaderCommandBar_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals ? _css_loader_dist_cjs_js_HeaderCommandBar_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals : undefined);


/***/ }),

/***/ "./node_modules/azure-devops-ui/Components/HeaderCommandBar/HeaderCommandBar.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/azure-devops-ui/Components/HeaderCommandBar/HeaderCommandBar.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   HeaderCommandBar: () => (/* binding */ HeaderCommandBar),
/* harmony export */   HeaderCommandBarWithFilter: () => (/* binding */ HeaderCommandBarWithFilter)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var _CommonImports__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../CommonImports */ "./node_modules/azure-devops-ui/CommonImports.js");
/* harmony import */ var _Core_core_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../Core/core.css */ "./node_modules/azure-devops-ui/Core/core.css");
/* harmony import */ var _HeaderCommandBar_css__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./HeaderCommandBar.css */ "./node_modules/azure-devops-ui/Components/HeaderCommandBar/HeaderCommandBar.css");
/* harmony import */ var _Core_Observable__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../Core/Observable */ "./node_modules/azure-devops-ui/Core/Observable.js");
/* harmony import */ var _Button__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../Button */ "./node_modules/azure-devops-ui/Button.js");
/* harmony import */ var _Menu__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../Menu */ "./node_modules/azure-devops-ui/Menu.js");
/* harmony import */ var _ResizeGroup__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../ResizeGroup */ "./node_modules/azure-devops-ui/ResizeGroup.js");
/* harmony import */ var _Util__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../Util */ "./node_modules/azure-devops-ui/Util.js");
/* harmony import */ var _Utilities_Filter__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../Utilities/Filter */ "./node_modules/azure-devops-ui/Utilities/Filter.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _CustomHeaderCommandBar__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./CustomHeaderCommandBar */ "./node_modules/azure-devops-ui/Components/HeaderCommandBar/CustomHeaderCommandBar.js");
/* harmony import */ var _Items__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./Items */ "./node_modules/azure-devops-ui/Components/HeaderCommandBar/Items.js");













var headerCommandBarId = 1;
var HeaderCommandBar = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(HeaderCommandBar, _super);
    function HeaderCommandBar(props) {
        var _this = _super.call(this, props) || this;
        _this.overflowButtonRef = react__WEBPACK_IMPORTED_MODULE_10__.createRef();
        _this.buttonRefs = {};
        _this.moreButtonId = props.moreButtonId || "header-command-bar-menu-button" + headerCommandBarId++;
        return _this;
    }
    HeaderCommandBar.prototype.render = function () {
        var _this = this;
        var _a;
        var items = this.props.items;
        var sortedItems = items.sort(function (a, b) {
            var _a, _b;
            var aRank = (_a = a.rank) !== null && _a !== void 0 ? _a : Number.MAX_VALUE;
            var bRank = (_b = b.rank) !== null && _b !== void 0 ? _b : Number.MAX_VALUE;
            return aRank > bRank ? 1 : aRank < bRank ? -1 : 0;
        });
        var defaultElementId = "";
        this.buttonRefs = {};
        var buttonItems = [];
        var overflowItems = [];
        var extraItems = [];
        var responsiveChildren = [];
        // Anything with important: true will be rendered as a button
        // Anything with important: false will be rendered in overflow
        // If buttonCount is supplied, that many buttons will be rendered into
        // a resizeGroup, and the rest will be overflow.  By default, buttonCount is 3.
        var buttonCount = (_a = this.props.buttonCount) !== null && _a !== void 0 ? _a : 3;
        var isMenuBar = !items.length || items[0].role !== "button";
        sortedItems.forEach(function (value) {
            var id = value.id;
            if (value.itemType === _Menu__WEBPACK_IMPORTED_MODULE_6__.MenuItemType.Divider) {
                if (value.important) {
                    buttonItems.push(react__WEBPACK_IMPORTED_MODULE_10__.createElement("div", { className: "bolt-header-command-item-separator", key: id }));
                }
                else {
                    extraItems.push(value);
                }
            }
            else {
                var buttonProps = {
                    ariaChecked: _Core_Observable__WEBPACK_IMPORTED_MODULE_4__.ObservableLike.getValue(value.checked),
                    ariaLabel: value.ariaLabel,
                    ariaRoleDescription: value.href ? "link" : "button",
                    ariaControls: value.ariaControls,
                    ariaDescribedBy: value.ariaDescribedBy,
                    ariaExpanded: value.ariaExpanded,
                    ariaHasPopup: value.ariaHasPopup,
                    ariaSetSize: value.ariaSetSize,
                    ariaPosInSet: value.ariaPosInSet,
                    ariaSelected: value.ariaSelected,
                    ariaPressed: value.ariaPressed,
                    className: (0,_Util__WEBPACK_IMPORTED_MODULE_8__.css)(value.className, "bolt-header-command-item-button"),
                    disabled: value.disabled,
                    href: value.href,
                    iconProps: value.iconProps,
                    id: id,
                    primary: value.isPrimary,
                    role: value.role || "menuitem",
                    subtle: value.subtle,
                    target: value.target,
                    text: value.text,
                    tooltipProps: value.tooltipProps
                };
                if (value.important === false || (value.important === undefined && buttonCount === 0)) {
                    extraItems.push(value);
                    return;
                }
                else {
                    if (value.important === undefined) {
                        responsiveChildren.push(buttonItems.length);
                        overflowItems.push(value);
                    }
                    buttonCount--;
                }
                var TagName = _Button__WEBPACK_IMPORTED_MODULE_5__.Button;
                var ref = react__WEBPACK_IMPORTED_MODULE_10__.createRef();
                _this.buttonRefs[id] = ref;
                if (value.subMenuProps) {
                    buttonProps.contextualMenuProps = { menuProps: value.subMenuProps };
                    buttonProps.hideDropdownIcon = value.hideDropdownIcon;
                    TagName = _Menu__WEBPACK_IMPORTED_MODULE_6__.MenuButton;
                }
                else {
                    buttonProps.onClick = function (e) { return value.onActivate && value.onActivate(value, e); };
                }
                if (!defaultElementId && !value.disabled) {
                    defaultElementId = id;
                }
                if (value.renderButton) {
                    buttonItems.push(value.renderButton(buttonProps));
                }
                else {
                    buttonItems.push(react__WEBPACK_IMPORTED_MODULE_10__.createElement(TagName, (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, buttonProps, { key: id, ref: ref })));
                }
            }
        });
        buttonItems.push(react__WEBPACK_IMPORTED_MODULE_10__.createElement(_ResizeGroup__WEBPACK_IMPORTED_MODULE_7__.OverflowButton, { className: (0,_Util__WEBPACK_IMPORTED_MODULE_8__.css)(this.props.overflowClassName, "bolt-header-command-item-button"), id: this.moreButtonId, key: this.moreButtonId, role: "menuitem", ref: this.overflowButtonRef, menuClassName: this.props.moreButtonMenuClassName }));
        this.buttonRefs[this.moreButtonId] = this.overflowButtonRef;
        // We will use a role of "menubar", unless the first item has a role of button.
        // This will be the case the close button in Panel Headers.
        if (items.length > 0) {
            return (react__WEBPACK_IMPORTED_MODULE_10__.createElement(_CustomHeaderCommandBar__WEBPACK_IMPORTED_MODULE_11__.CustomHeaderCommandBar, { className: this.props.className, focusGroupProps: { defaultElementId: defaultElementId || this.moreButtonId }, role: isMenuBar ? "menubar" : undefined },
                react__WEBPACK_IMPORTED_MODULE_10__.createElement(_ResizeGroup__WEBPACK_IMPORTED_MODULE_7__.ResizeGroup, { responsiveLayoutProps: {
                        responsiveChildren: responsiveChildren.reverse()
                    }, overflowMenuItems: overflowItems.reverse(), extraItems: extraItems, useAriaLabelForOverflow: this.props.useAriaLabelForOverflow },
                    react__WEBPACK_IMPORTED_MODULE_10__.createElement("div", { className: (0,_Util__WEBPACK_IMPORTED_MODULE_8__.css)(this.props.className, "bolt-header-commandbar-button-group", "flex-row flex-center flex-grow scroll-hidden rhythm-horizontal-8") }, buttonItems))));
        }
        return null;
    };
    HeaderCommandBar.prototype.focus = function (options) {
        var ref = this.buttonRefs[options.commandBarItemId];
        if (ref && ref.current) {
            ref.current.focus();
        }
    };
    return HeaderCommandBar;
}(react__WEBPACK_IMPORTED_MODULE_10__.Component));

var HeaderCommandBarWithFilter = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(HeaderCommandBarWithFilter, _super);
    function HeaderCommandBarWithFilter(props) {
        var _this = _super.call(this, props) || this;
        _this.headerCommandBarRef = react__WEBPACK_IMPORTED_MODULE_10__.createRef();
        _this.onFilterClicked = function () {
            _this.props.filterToggled.value = !_this.props.filterToggled.value;
        };
        _this.onFilterChanged = function () {
            var hasChanges = _this.props.filter.hasChangesToReset();
            if (hasChanges !== _this.state.filterHasChanges) {
                _this.setState({
                    filterHasChanges: hasChanges
                });
            }
        };
        _this.state = { filterHasChanges: _this.props.filter.hasChangesToReset() };
        return _this;
    }
    HeaderCommandBarWithFilter.prototype.componentDidMount = function () {
        this.props.filter.subscribe(this.onFilterChanged, _Utilities_Filter__WEBPACK_IMPORTED_MODULE_9__.FILTER_CHANGE_EVENT);
    };
    HeaderCommandBarWithFilter.prototype.componentWillUnmount = function () {
        this.props.filter.unsubscribe(this.onFilterChanged, _Utilities_Filter__WEBPACK_IMPORTED_MODULE_9__.FILTER_CHANGE_EVENT);
    };
    HeaderCommandBarWithFilter.prototype.render = function () {
        var items = this.props.items ? (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__spreadArray)([], this.props.items, true) : [];
        items.push((0,_Items__WEBPACK_IMPORTED_MODULE_12__.getFilterItem)(this.onFilterClicked, this.state.filterHasChanges));
        return react__WEBPACK_IMPORTED_MODULE_10__.createElement(HeaderCommandBar, (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, this.props, { items: items, ref: this.headerCommandBarRef }));
    };
    HeaderCommandBarWithFilter.prototype.focus = function (options) {
        if (this.headerCommandBarRef.current) {
            this.headerCommandBarRef.current.focus(options);
        }
    };
    return HeaderCommandBarWithFilter;
}(react__WEBPACK_IMPORTED_MODULE_10__.Component));



/***/ }),

/***/ "./node_modules/azure-devops-ui/Components/HeaderCommandBar/Items.js":
/*!***************************************************************************!*\
  !*** ./node_modules/azure-devops-ui/Components/HeaderCommandBar/Items.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getFilterItem: () => (/* binding */ getFilterItem),
/* harmony export */   getFilterItemIconProps: () => (/* binding */ getFilterItemIconProps),
/* harmony export */   getFullScreenItem: () => (/* binding */ getFullScreenItem),
/* harmony export */   toggleFullScreen: () => (/* binding */ toggleFullScreen)
/* harmony export */ });
/* harmony import */ var _CommonImports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../CommonImports */ "./node_modules/azure-devops-ui/CommonImports.js");
/* harmony import */ var _Core_core_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../Core/core.css */ "./node_modules/azure-devops-ui/Core/core.css");
/* harmony import */ var _HeaderCommandBar_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./HeaderCommandBar.css */ "./node_modules/azure-devops-ui/Components/HeaderCommandBar/HeaderCommandBar.css");
/* harmony import */ var _Resources_Page__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../Resources.Page */ "./node_modules/azure-devops-ui/Resources.Page.js");




function getFilterItem(onActivate, isFiltering, important, label) {
    if (important === void 0) { important = true; }
    if (label === void 0) { label = _Resources_Page__WEBPACK_IMPORTED_MODULE_3__.Filter; }
    return {
        ariaLabel: label,
        iconProps: getFilterItemIconProps(isFiltering),
        id: "filter",
        important: important,
        onActivate: onActivate,
        subtle: true,
        tooltipProps: { text: label }
    };
}
function getFilterItemIconProps(isFiltering) {
    return {
        iconName: isFiltering ? "FilterSolid" : "Filter"
    };
}
function getFullScreenItem(onActivate, fullscreen, important) {
    if (important === void 0) { important = true; }
    return {
        ariaLabel: fullscreen ? _Resources_Page__WEBPACK_IMPORTED_MODULE_3__.ExitFullScreen : _Resources_Page__WEBPACK_IMPORTED_MODULE_3__.EnterFullScreen,
        iconProps: {
            iconName: fullscreen ? "BackToWindow" : "FullScreen"
        },
        id: "fullscreen",
        important: important,
        onActivate: onActivate,
        subtle: true
    };
}
function toggleFullScreen(newFullScreenState) {
    if (newFullScreenState) {
        document.body && document.body.classList.add("full-screen-mode");
    }
    else {
        document.body && document.body.classList.remove("full-screen-mode");
    }
}


/***/ }),

/***/ "./node_modules/azure-devops-ui/Components/Icon/FabricIcons.css":
/*!**********************************************************************!*\
  !*** ./node_modules/azure-devops-ui/Components/Icon/FabricIcons.css ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/styleDomAPI.js */ "./node_modules/style-loader/dist/runtime/styleDomAPI.js");
/* harmony import */ var _style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/insertBySelector.js */ "./node_modules/style-loader/dist/runtime/insertBySelector.js");
/* harmony import */ var _style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/setAttributesWithoutAttributes.js */ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js");
/* harmony import */ var _style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/insertStyleElement.js */ "./node_modules/style-loader/dist/runtime/insertStyleElement.js");
/* harmony import */ var _style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/styleTagTransform.js */ "./node_modules/style-loader/dist/runtime/styleTagTransform.js");
/* harmony import */ var _style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _css_loader_dist_cjs_js_FabricIcons_css__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! !!../../../css-loader/dist/cjs.js!./FabricIcons.css */ "./node_modules/css-loader/dist/cjs.js!./node_modules/azure-devops-ui/Components/Icon/FabricIcons.css");

      
      
      
      
      
      
      
      
      

var options = {};

options.styleTagTransform = (_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default());
options.setAttributes = (_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default());
options.insert = _style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(null, "head");
options.domAPI = (_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default());
options.insertStyleElement = (_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default());

var update = _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_css_loader_dist_cjs_js_FabricIcons_css__WEBPACK_IMPORTED_MODULE_6__["default"], options);




       /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_css_loader_dist_cjs_js_FabricIcons_css__WEBPACK_IMPORTED_MODULE_6__["default"] && _css_loader_dist_cjs_js_FabricIcons_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals ? _css_loader_dist_cjs_js_FabricIcons_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals : undefined);


/***/ }),

/***/ "./node_modules/azure-devops-ui/Components/Icon/FluentIcons.css":
/*!**********************************************************************!*\
  !*** ./node_modules/azure-devops-ui/Components/Icon/FluentIcons.css ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/styleDomAPI.js */ "./node_modules/style-loader/dist/runtime/styleDomAPI.js");
/* harmony import */ var _style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/insertBySelector.js */ "./node_modules/style-loader/dist/runtime/insertBySelector.js");
/* harmony import */ var _style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/setAttributesWithoutAttributes.js */ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js");
/* harmony import */ var _style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/insertStyleElement.js */ "./node_modules/style-loader/dist/runtime/insertStyleElement.js");
/* harmony import */ var _style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/styleTagTransform.js */ "./node_modules/style-loader/dist/runtime/styleTagTransform.js");
/* harmony import */ var _style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _css_loader_dist_cjs_js_FluentIcons_css__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! !!../../../css-loader/dist/cjs.js!./FluentIcons.css */ "./node_modules/css-loader/dist/cjs.js!./node_modules/azure-devops-ui/Components/Icon/FluentIcons.css");

      
      
      
      
      
      
      
      
      

var options = {};

options.styleTagTransform = (_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default());
options.setAttributes = (_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default());
options.insert = _style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(null, "head");
options.domAPI = (_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default());
options.insertStyleElement = (_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default());

var update = _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_css_loader_dist_cjs_js_FluentIcons_css__WEBPACK_IMPORTED_MODULE_6__["default"], options);




       /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_css_loader_dist_cjs_js_FluentIcons_css__WEBPACK_IMPORTED_MODULE_6__["default"] && _css_loader_dist_cjs_js_FluentIcons_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals ? _css_loader_dist_cjs_js_FluentIcons_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals : undefined);


/***/ }),

/***/ "./node_modules/azure-devops-ui/Components/Icon/Icon.Props.js":
/*!********************************************************************!*\
  !*** ./node_modules/azure-devops-ui/Components/Icon/Icon.Props.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   IconSize: () => (/* binding */ IconSize)
/* harmony export */ });
/**
 * Note the default IconSize when a custom size is not specified matches
 * the standard body-m font or 0.875rem - 14px.
 */
var IconSize;
(function (IconSize) {
    /**
     * Inherit has the icon take on the current text size.
     */
    IconSize["inherit"] = "";
    /**
     * 1.5rem - 24px
     */
    IconSize["large"] = "large";
    /**
     * 1rem - 16px
     */
    IconSize["medium"] = "medium";
    /**
     * 0.75rem - 12px
     */
    IconSize["small"] = "small";
})(IconSize || (IconSize = {}));


/***/ }),

/***/ "./node_modules/azure-devops-ui/Components/Icon/Icon.js":
/*!**************************************************************!*\
  !*** ./node_modules/azure-devops-ui/Components/Icon/Icon.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Icon: () => (/* binding */ Icon)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var _CommonImports__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../CommonImports */ "./node_modules/azure-devops-ui/CommonImports.js");
/* harmony import */ var _Core_core_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../Core/core.css */ "./node_modules/azure-devops-ui/Core/core.css");
/* harmony import */ var _FabricIcons_css__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./FabricIcons.css */ "./node_modules/azure-devops-ui/Components/Icon/FabricIcons.css");
/* harmony import */ var _FluentIcons_css__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./FluentIcons.css */ "./node_modules/azure-devops-ui/Components/Icon/FluentIcons.css");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _TooltipEx__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../TooltipEx */ "./node_modules/azure-devops-ui/TooltipEx.js");
/* harmony import */ var _Util__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../Util */ "./node_modules/azure-devops-ui/Util.js");








function Icon(props) {
    if (props.render) {
        return props.render(props.className);
    }
    var iconWrapperProps = {
        id: (0,_Util__WEBPACK_IMPORTED_MODULE_7__.getSafeId)(props.id),
        onClick: props.onClick,
        onMouseDown: props.onMouseDown,
        onKeyDown: props.onKeyDown,
        role: props.role ? props.role : props.ariaLabel || props.ariaLabelledBy ? "img" : undefined,
        style: props.style,
        tabIndex: props.tabIndex,
        title: props.title
    };
    var iconClassName = (0,_Util__WEBPACK_IMPORTED_MODULE_7__.css)(props.className, "flex-noshrink", props.iconName && "fabric-icon", props.iconName && "ms-Icon--".concat(props.iconName), props.size);
    var ariaHidden = props.ariaHidden == "removed" ? undefined : props.ariaHidden !== undefined ? props.ariaHidden : "true";
    var icon = props.ariaLabel || props.ariaLabelledBy || props.ariaExpanded !== undefined ? (react__WEBPACK_IMPORTED_MODULE_5__.createElement("span", (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({ "aria-expanded": props.ariaExpanded, "aria-label": props.ariaLabel, "aria-labelledby": (0,_Util__WEBPACK_IMPORTED_MODULE_7__.getSafeId)(props.ariaLabelledBy), className: (0,_Util__WEBPACK_IMPORTED_MODULE_7__.css)("fluent-icons-enabled", props.wrapperClass) }, iconWrapperProps),
        react__WEBPACK_IMPORTED_MODULE_5__.createElement("span", { "aria-hidden": ariaHidden, className: iconClassName }))) : (react__WEBPACK_IMPORTED_MODULE_5__.createElement("span", { className: "fluent-icons-enabled" },
        react__WEBPACK_IMPORTED_MODULE_5__.createElement("span", (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({ "aria-hidden": ariaHidden, className: iconClassName }, iconWrapperProps))));
    if (props.tooltipProps) {
        icon = react__WEBPACK_IMPORTED_MODULE_5__.createElement(_TooltipEx__WEBPACK_IMPORTED_MODULE_6__.Tooltip, (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, props.tooltipProps), icon);
    }
    return icon;
}


/***/ }),

/***/ "./node_modules/azure-devops-ui/Components/Icon/fonts/AzDevMDL2.woff":
/*!***************************************************************************!*\
  !*** ./node_modules/azure-devops-ui/Components/Icon/fonts/AzDevMDL2.woff ***!
  \***************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "scripts/acb0b44d710a15f95219.woff";

/***/ }),

/***/ "./node_modules/azure-devops-ui/Components/Icon/fonts/fluent-filled-v1.1.293.woff2":
/*!*****************************************************************************************!*\
  !*** ./node_modules/azure-devops-ui/Components/Icon/fonts/fluent-filled-v1.1.293.woff2 ***!
  \*****************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "scripts/4111627f66c0b5e39d5b.woff2";

/***/ }),

/***/ "./node_modules/azure-devops-ui/Components/Icon/fonts/fluent-regular-v1.1.293.woff2":
/*!******************************************************************************************!*\
  !*** ./node_modules/azure-devops-ui/Components/Icon/fonts/fluent-regular-v1.1.293.woff2 ***!
  \******************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "scripts/5fbecc534e14189d1e12.woff2";

/***/ }),

/***/ "./node_modules/azure-devops-ui/Components/Intersection/Intersection.Props.js":
/*!************************************************************************************!*\
  !*** ./node_modules/azure-devops-ui/Components/Intersection/Intersection.Props.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "./node_modules/azure-devops-ui/Components/Intersection/Intersection.js":
/*!******************************************************************************!*\
  !*** ./node_modules/azure-devops-ui/Components/Intersection/Intersection.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Intersection: () => (/* binding */ Intersection),
/* harmony export */   IntersectionContext: () => (/* binding */ IntersectionContext)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var _CommonImports__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../CommonImports */ "./node_modules/azure-devops-ui/CommonImports.js");
/* harmony import */ var _Core_core_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../Core/core.css */ "./node_modules/azure-devops-ui/Core/core.css");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _Util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../Util */ "./node_modules/azure-devops-ui/Util.js");





// We need to monitor fine grained changes, especially when the list
// has horizontal scroll. You dont get 100% visible ever.
var defaultThreshold = [];
for (var index = 0; index <= 100; index++) {
    defaultThreshold.push(index / 100);
}
var IntersectionContextImpl = /** @class */ (function () {
    function IntersectionContextImpl() {
        var _this = this;
        this.callbacks = [];
        this.pending = [];
        this.rootMargin = 0;
        this.root = document.body;
        this.onIntersect = function (entries) {
            if (_this.observer) {
                for (var _i = 0, _a = _this.callbacks; _i < _a.length; _i++) {
                    var callback = _a[_i];
                    callback(entries, _this.observer);
                }
            }
        };
    }
    IntersectionContextImpl.prototype.connect = function (root, rootMargin, threshold) {
        if (rootMargin === void 0) { rootMargin = 0; }
        if (threshold === void 0) { threshold = defaultThreshold; }
        this.observer = new IntersectionObserver(this.onIntersect, { root: root, rootMargin: rootMargin + "px", threshold: threshold });
        this.rootMargin = rootMargin;
        this.root = root;
        for (var _i = 0, _a = this.pending; _i < _a.length; _i++) {
            var element = _a[_i];
            this.observer.observe(element);
        }
    };
    IntersectionContextImpl.prototype.disconnect = function () {
        if (this.observer) {
            this.observer.disconnect();
        }
    };
    IntersectionContextImpl.prototype.observe = function (element) {
        if (this.observer) {
            this.observer.observe(element);
        }
        else {
            this.pending.push(element);
        }
    };
    IntersectionContextImpl.prototype.register = function (callback) {
        this.callbacks.push(callback);
    };
    IntersectionContextImpl.prototype.unobserve = function (element) {
        var elementIndex = this.pending.indexOf(element);
        if (elementIndex >= 0) {
            this.pending.splice(elementIndex, 1);
        }
        if (this.observer) {
            this.observer.unobserve(element);
        }
    };
    IntersectionContextImpl.prototype.unregister = function (callback) {
        var callbackIndex = this.callbacks.indexOf(callback);
        if (callbackIndex >= 0) {
            this.callbacks.splice(callbackIndex, 1);
        }
    };
    return IntersectionContextImpl;
}());
var IntersectionContext = react__WEBPACK_IMPORTED_MODULE_3__.createContext(new IntersectionContextImpl());
/**
 * The Intersection is used to observe the changes of visibility in the children
 * of the rootElement. It also will notify the caller when the rootElement is
 * scrolled. It will pass an empty array of entries in the scorlling case.
 */
var Intersection = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(Intersection, _super);
    function Intersection() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.mergedRef = (0,_Util__WEBPACK_IMPORTED_MODULE_4__.createMergedRef)();
        _this.rootElement = react__WEBPACK_IMPORTED_MODULE_3__.createRef();
        _this.state = new IntersectionContextImpl();
        _this.onScroll = function (event) {
            _this.state.onIntersect([]);
        };
        return _this;
    }
    // Render the provider around a SINGLE child. This is the element that is scrollable.
    Intersection.prototype.render = function () {
        var _this = this;
        var child = react__WEBPACK_IMPORTED_MODULE_3__.Children.only(this.props.children);
        var onScroll;
        if (child.props.onScroll) {
            onScroll = function (event) {
                if (child.props.onScroll) {
                    child.props.onScroll(event);
                }
                _this.onScroll(event);
            };
        }
        else {
            onScroll = this.onScroll;
        }
        return (react__WEBPACK_IMPORTED_MODULE_3__.createElement(IntersectionContext.Provider, { value: this.state }, react__WEBPACK_IMPORTED_MODULE_3__.cloneElement(child, (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, child.props), { ref: this.mergedRef(this.rootElement, child.ref), onScroll: onScroll }), child.props.children)));
    };
    Intersection.prototype.componentDidMount = function () {
        var _a = this.props, observationElement = _a.observationElement, rootElement = _a.rootElement;
        var connectElement = null;
        if (rootElement) {
            if (typeof rootElement === "string") {
                connectElement = document.querySelector(rootElement);
            }
            else if (typeof rootElement === "function") {
                connectElement = rootElement();
            }
            else {
                connectElement = rootElement;
            }
            if (connectElement) {
                connectElement.addEventListener("scroll", this.onScroll);
                this.externalElement = connectElement;
            }
        }
        else if (this.rootElement) {
            connectElement = this.rootElement.current;
        }
        if (connectElement) {
            this.state.connect(connectElement, this.props.rootMargin, this.props.threshold);
            // Allow the creator of the intersection to observe intersection events.
            if (this.props.onIntersect) {
                this.state.register(this.props.onIntersect);
            }
            if (observationElement) {
                var observeElement = void 0;
                if (typeof observationElement === "string") {
                    observeElement = document.querySelector(observationElement);
                }
                else if (typeof observationElement === "function") {
                    observeElement = observationElement();
                }
                else {
                    observeElement = observationElement;
                }
                if (observeElement) {
                    this.state.observe(observeElement);
                }
            }
        }
    };
    Intersection.prototype.componentWillUnmount = function () {
        if (this.externalElement) {
            this.externalElement.removeEventListener("scroll", this.onScroll);
        }
        this.state.disconnect();
    };
    return Intersection;
}(react__WEBPACK_IMPORTED_MODULE_3__.Component));



/***/ }),

/***/ "./node_modules/azure-devops-ui/Components/Link/Link.Props.js":
/*!********************************************************************!*\
  !*** ./node_modules/azure-devops-ui/Components/Link/Link.Props.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "./node_modules/azure-devops-ui/Components/Link/Link.css":
/*!***************************************************************!*\
  !*** ./node_modules/azure-devops-ui/Components/Link/Link.css ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/styleDomAPI.js */ "./node_modules/style-loader/dist/runtime/styleDomAPI.js");
/* harmony import */ var _style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/insertBySelector.js */ "./node_modules/style-loader/dist/runtime/insertBySelector.js");
/* harmony import */ var _style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/setAttributesWithoutAttributes.js */ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js");
/* harmony import */ var _style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/insertStyleElement.js */ "./node_modules/style-loader/dist/runtime/insertStyleElement.js");
/* harmony import */ var _style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/styleTagTransform.js */ "./node_modules/style-loader/dist/runtime/styleTagTransform.js");
/* harmony import */ var _style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _css_loader_dist_cjs_js_Link_css__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! !!../../../css-loader/dist/cjs.js!./Link.css */ "./node_modules/css-loader/dist/cjs.js!./node_modules/azure-devops-ui/Components/Link/Link.css");

      
      
      
      
      
      
      
      
      

var options = {};

options.styleTagTransform = (_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default());
options.setAttributes = (_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default());
options.insert = _style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(null, "head");
options.domAPI = (_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default());
options.insertStyleElement = (_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default());

var update = _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_css_loader_dist_cjs_js_Link_css__WEBPACK_IMPORTED_MODULE_6__["default"], options);




       /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_css_loader_dist_cjs_js_Link_css__WEBPACK_IMPORTED_MODULE_6__["default"] && _css_loader_dist_cjs_js_Link_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals ? _css_loader_dist_cjs_js_Link_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals : undefined);


/***/ }),

/***/ "./node_modules/azure-devops-ui/Components/Link/Link.js":
/*!**************************************************************!*\
  !*** ./node_modules/azure-devops-ui/Components/Link/Link.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Link: () => (/* binding */ Link)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var _CommonImports__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../CommonImports */ "./node_modules/azure-devops-ui/CommonImports.js");
/* harmony import */ var _Core_core_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../Core/core.css */ "./node_modules/azure-devops-ui/Core/core.css");
/* harmony import */ var _Link_css__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Link.css */ "./node_modules/azure-devops-ui/Components/Link/Link.css");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _FocusGroup__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../FocusGroup */ "./node_modules/azure-devops-ui/FocusGroup.js");
/* harmony import */ var _FocusZone__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../FocusZone */ "./node_modules/azure-devops-ui/FocusZone.js");
/* harmony import */ var _TooltipEx__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../TooltipEx */ "./node_modules/azure-devops-ui/TooltipEx.js");
/* harmony import */ var _Util__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../Util */ "./node_modules/azure-devops-ui/Util.js");
/* harmony import */ var _Utilities_Focus__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../Utilities/Focus */ "./node_modules/azure-devops-ui/Utilities/Focus.js");










var Link = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(Link, _super);
    function Link() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.ref = react__WEBPACK_IMPORTED_MODULE_4__.createRef();
        _this.onClick = function (event) {
            _this.handleActivation(event);
        };
        _this.onKeyPress = function (event) {
            if (!_this.props.href && event.which === _Util__WEBPACK_IMPORTED_MODULE_8__.KeyCode.enter) {
                // We only want to handle keyboard interaction if there is no href
                _this.handleActivation(event);
            }
        };
        _this.onFocus = function (event) {
            if (_this.props.onFocus) {
                _this.props.onFocus(event);
            }
            if (_this.props.id) {
                _this.context.onFocus(_this.props.id);
            }
        };
        return _this;
    }
    Link.prototype.render = function () {
        var _this = this;
        return (react__WEBPACK_IMPORTED_MODULE_4__.createElement(_FocusZone__WEBPACK_IMPORTED_MODULE_6__.FocusZoneContext.Consumer, null, function (focusZoneContext) {
            var props = _this.props;
            var ariaDescribedBy = props.ariaDescribedBy, ariaLabel = props.ariaLabel, ariaLabelledBy = props.ariaLabelledBy, ariaExpanded = props.ariaExpanded, ariaHasPopup = props.ariaHasPopup, ariaSelected = props.ariaSelected, className = props.className, draggable = props.draggable, excludeFocusZone = props.excludeFocusZone, target = props.target, dataIsFocusable = props.dataIsFocusable;
            var rel = props.rel, role = props.role;
            var TagType = "a";
            // If the link is targetting an external window or tab and no explicit rel
            // attribute was supplied we will set noopener.
            if (target && !rel) {
                rel = "noopener";
            }
            if (!props.href && !props.role) {
                role = "button";
            }
            if (!props.href) {
                TagType = "span";
            }
            var link = (react__WEBPACK_IMPORTED_MODULE_4__.createElement(TagType, { ref: _this.ref, "aria-describedby": (0,_Util__WEBPACK_IMPORTED_MODULE_8__.getSafeId)(ariaDescribedBy), "aria-expanded": ariaExpanded, "aria-haspopup": ariaHasPopup, "aria-label": ariaLabel, "aria-labelledby": ariaLabelledBy, "aria-selected": ariaSelected, className: (0,_Util__WEBPACK_IMPORTED_MODULE_8__.css)(className, "bolt-link", props.disabled && "disabled", props.subtle && "subtle", props.underline && "underline", props.removeUnderline && "no-underline-link"), "data-focuszone": !excludeFocusZone && focusZoneContext.focuszoneId, "data-is-focusable": dataIsFocusable, download: props.download, draggable: draggable, href: props.href, id: (0,_Util__WEBPACK_IMPORTED_MODULE_8__.getSafeId)(props.id), onBlur: props.onBlur, onClick: _this.onClick, onFocus: _this.onFocus, onKeyPress: _this.onKeyPress, onMouseEnter: props.onMouseEnter, onMouseLeave: props.onMouseLeave, onMouseOver: props.onMouseOver, onTouchEnd: props.onTouchEnd, onTouchMove: props.onTouchMove, onTouchStart: props.onTouchStart, rel: rel, role: role, tabIndex: (0,_Utilities_Focus__WEBPACK_IMPORTED_MODULE_9__.getTabIndex)(_this.props, _this.context), target: target }, _this.props.children));
            if (props.tooltipProps) {
                link = react__WEBPACK_IMPORTED_MODULE_4__.createElement(_TooltipEx__WEBPACK_IMPORTED_MODULE_7__.Tooltip, (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, props.tooltipProps), link);
            }
            return link;
        }));
    };
    Link.prototype.focus = function () {
        this.ref.current && this.ref.current.focus();
    };
    Link.prototype.handleActivation = function (event) {
        if (!event.defaultPrevented) {
            if (this.props.disabled) {
                event.preventDefault();
            }
            else {
                this.props.onClick && this.props.onClick(event);
            }
        }
    };
    Link.contextType = _FocusGroup__WEBPACK_IMPORTED_MODULE_5__.FocusGroupContext;
    return Link;
}(react__WEBPACK_IMPORTED_MODULE_4__.Component));



/***/ }),

/***/ "./node_modules/azure-devops-ui/Components/Link/Utilities.js":
/*!*******************************************************************!*\
  !*** ./node_modules/azure-devops-ui/Components/Link/Utilities.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getDefaultAnchorProps: () => (/* binding */ getDefaultAnchorProps),
/* harmony export */   getDefaultLinkProps: () => (/* binding */ getDefaultLinkProps)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");

/**
 * Handles an href and target being passed to an anchor, without a rel.
 */
function getDefaultAnchorProps(anchorProps) {
    var modifiedAnchorProps;
    if (anchorProps) {
        var rel = anchorProps.rel;
        if (anchorProps.href && anchorProps.target && !rel) {
            rel = "noopener";
        }
        modifiedAnchorProps = {
            href: anchorProps.href,
            rel: rel,
            target: anchorProps.target
        };
    }
    return modifiedAnchorProps;
}
/**
 * Handles an href and target being passed to a link, without a rel.
 */
function getDefaultLinkProps(linkProps) {
    if (!linkProps) {
        return getDefaultAnchorProps(linkProps);
    }
    return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, getDefaultAnchorProps(linkProps)), { disabled: linkProps.disabled, id: linkProps.id, onClick: linkProps.onClick, role: linkProps.role });
}


/***/ }),

/***/ "./node_modules/azure-devops-ui/Components/List/DropdownList.css":
/*!***********************************************************************!*\
  !*** ./node_modules/azure-devops-ui/Components/List/DropdownList.css ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/styleDomAPI.js */ "./node_modules/style-loader/dist/runtime/styleDomAPI.js");
/* harmony import */ var _style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/insertBySelector.js */ "./node_modules/style-loader/dist/runtime/insertBySelector.js");
/* harmony import */ var _style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/setAttributesWithoutAttributes.js */ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js");
/* harmony import */ var _style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/insertStyleElement.js */ "./node_modules/style-loader/dist/runtime/insertStyleElement.js");
/* harmony import */ var _style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/styleTagTransform.js */ "./node_modules/style-loader/dist/runtime/styleTagTransform.js");
/* harmony import */ var _style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _css_loader_dist_cjs_js_DropdownList_css__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! !!../../../css-loader/dist/cjs.js!./DropdownList.css */ "./node_modules/css-loader/dist/cjs.js!./node_modules/azure-devops-ui/Components/List/DropdownList.css");

      
      
      
      
      
      
      
      
      

var options = {};

options.styleTagTransform = (_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default());
options.setAttributes = (_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default());
options.insert = _style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(null, "head");
options.domAPI = (_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default());
options.insertStyleElement = (_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default());

var update = _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_css_loader_dist_cjs_js_DropdownList_css__WEBPACK_IMPORTED_MODULE_6__["default"], options);




       /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_css_loader_dist_cjs_js_DropdownList_css__WEBPACK_IMPORTED_MODULE_6__["default"] && _css_loader_dist_cjs_js_DropdownList_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals ? _css_loader_dist_cjs_js_DropdownList_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals : undefined);


/***/ }),

/***/ "./node_modules/azure-devops-ui/Components/List/DropdownList.js":
/*!**********************************************************************!*\
  !*** ./node_modules/azure-devops-ui/Components/List/DropdownList.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DropdownList: () => (/* binding */ DropdownList),
/* harmony export */   DropdownListItem: () => (/* binding */ DropdownListItem)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var _CommonImports__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../CommonImports */ "./node_modules/azure-devops-ui/CommonImports.js");
/* harmony import */ var _Core_core_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../Core/core.css */ "./node_modules/azure-devops-ui/Core/core.css");
/* harmony import */ var _DropdownList_css__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./DropdownList.css */ "./node_modules/azure-devops-ui/Components/List/DropdownList.css");
/* harmony import */ var _List_css__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./List.css */ "./node_modules/azure-devops-ui/Components/List/List.css");
/* harmony import */ var _ListDropIndicator_css__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./ListDropIndicator.css */ "./node_modules/azure-devops-ui/Components/List/ListDropIndicator.css");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _Core_Util_Accessibility__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../Core/Util/Accessibility */ "./node_modules/azure-devops-ui/Core/Util/Accessibility.js");
/* harmony import */ var _Core_Observable__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../Core/Observable */ "./node_modules/azure-devops-ui/Core/Observable.js");
/* harmony import */ var _FocusWithin__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../FocusWithin */ "./node_modules/azure-devops-ui/FocusWithin.js");
/* harmony import */ var _FocusZone__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../FocusZone */ "./node_modules/azure-devops-ui/FocusZone.js");
/* harmony import */ var _Intersection__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../Intersection */ "./node_modules/azure-devops-ui/Intersection.js");
/* harmony import */ var _Link__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../Link */ "./node_modules/azure-devops-ui/Link.js");
/* harmony import */ var _Observer__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../Observer */ "./node_modules/azure-devops-ui/Observer.js");
/* harmony import */ var _Resources_Widgets__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../Resources.Widgets */ "./node_modules/azure-devops-ui/Resources.Widgets.js");
/* harmony import */ var _Util__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../Util */ "./node_modules/azure-devops-ui/Util.js");
/* harmony import */ var _Utilities_Dispatch__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../../Utilities/Dispatch */ "./node_modules/azure-devops-ui/Utilities/Dispatch.js");
/* harmony import */ var _Utilities_DragDrop__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../../Utilities/DragDrop */ "./node_modules/azure-devops-ui/Utilities/DragDrop.js");
/* harmony import */ var _Utilities_Focus__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../../Utilities/Focus */ "./node_modules/azure-devops-ui/Utilities/Focus.js");



















/**
 * The DropdownList component is used to render a collection of items with a series of rows.
 */
var DropdownList = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(DropdownList, _super);
    function DropdownList(props) {
        var _this = _super.call(this, props) || this;
        // Track the table element used to render the rows.
        _this.bodyElement = react__WEBPACK_IMPORTED_MODULE_6__.createRef();
        _this.listElement = react__WEBPACK_IMPORTED_MODULE_6__.createRef();
        // Manage data about pages, including their spacers.
        _this.spacerElements = {};
        _this.scrollToIndex = -1;
        _this.scrollToOptions = undefined;
        // Focus/Selection management members.
        _this.selectOnFocus = true;
        _this.focusIndex = -1;
        _this.pivotIndex = -1;
        _this.onVirtualizeKeyDown = function (e) {
            if (_this.state.virtualize && e.ctrlKey && e.altKey && e.key === "v") {
                var rowCount = _this.props.itemProvider.length;
                _this.setState({ virtualize: false, lastMaterialized: rowCount - 1, lastRendered: rowCount - 1, firstMaterialized: 0, firstRendered: 0 });
                _Core_Util_Accessibility__WEBPACK_IMPORTED_MODULE_7__.announce(_Resources_Widgets__WEBPACK_IMPORTED_MODULE_14__.VirtualizationDisabled);
            }
        };
        _this.onBlur = function () {
            _this.focusIndex = -1;
        };
        _this.onClick = function (event) {
            _this.onDispatch(event);
            if (!event.defaultPrevented && !(event.altKey && _this.props.selectableText)) {
                if (_this.listElement.current) {
                    var _a = cellFromEvent(event), cellElement = _a.cellElement, rowIndex = _a.rowIndex;
                    if (!cellElement || !(0,_Util__WEBPACK_IMPORTED_MODULE_15__.eventTargetContainsNode)(event, ["A"], cellElement)) {
                        var item = _Core_Observable__WEBPACK_IMPORTED_MODULE_8__.ObservableLike.getValue(_this.state.rows[rowIndex]);
                        if (rowIndex >= 0 && item) {
                            var listRow = { data: item, index: rowIndex };
                            // Even for singleClickActivation we fire the selection before activation.
                            if (_this.props.selectRowOnClick) {
                                _this.processSelectionEvent(event, listRow);
                            }
                            // For singleClickActivation we want the activation as well.
                            if (_this.props.singleClickActivation) {
                                _this.rowActivated(event, listRow);
                            }
                        }
                    }
                }
            }
        };
        _this.onDispatch = function (event) {
            _this.state.eventDispatch.dispatchEvent(event);
        };
        _this.onDoubleClick = function (event) {
            _this.onDispatch(event);
            if (!event.defaultPrevented && !_this.props.singleClickActivation) {
                var rowIndex = cellFromEvent(event).rowIndex;
                var item = _Core_Observable__WEBPACK_IMPORTED_MODULE_8__.ObservableLike.getValue(_this.state.rows[rowIndex]);
                if (rowIndex >= 0 && item) {
                    _this.rowActivated(event, { data: item, index: rowIndex });
                }
            }
        };
        _this.onFocusBody = function (event) {
            // The first time the list gets focus we need to select initial row if we are performing
            // selection of focus.
            if (_this.selectOnFocus) {
                var selection = _this.props.selection;
                if (!selection || selection.selectOnFocus) {
                    var rowIndex = _this.focusIndex;
                    if (rowIndex >= 0) {
                        var item = _Core_Observable__WEBPACK_IMPORTED_MODULE_8__.ObservableLike.getValue(_this.state.rows[rowIndex]);
                        if (item) {
                            _this.processSelectionEvent(event, { data: item, index: rowIndex });
                        }
                    }
                }
                _this.selectOnFocus = false;
            }
        };
        _this.onFocusItem = function (rowIndex, event) {
            var focusIndex = _this.focusIndex;
            if (focusIndex !== rowIndex) {
                // We need to re-render the previously focused row and newly focused row so we will
                // clear the cached values.
                if (focusIndex >= 0) {
                    delete _this.state.renderedRows[focusIndex];
                }
                else {
                    // If there was a tabble row that was not the focusIndex row we need to update this
                    // row as well to get it re-rendered without the tabIndex.
                    delete _this.state.renderedRows[_this.getInitialTabbableRow()];
                }
                delete _this.state.renderedRows[rowIndex];
                _this.focusIndex = rowIndex;
                var item = _Core_Observable__WEBPACK_IMPORTED_MODULE_8__.ObservableLike.getValue(_this.state.rows[rowIndex]);
                if (item) {
                    _this.rowFocused(event, { data: item, index: rowIndex });
                }
            }
        };
        _this.onKeyDown = function (event) {
            _this.onDispatch(event);
            if (!event.defaultPrevented) {
                var nodeName = event.target.nodeName;
                if (nodeName === "INPUT" || nodeName === "TEXTAREA") {
                    // Don't handle keyboard events when target is an input
                    return;
                }
                var focusIndex_1 = _this.focusIndex;
                var item = _Core_Observable__WEBPACK_IMPORTED_MODULE_8__.ObservableLike.getValue(_this.state.rows[focusIndex_1]);
                if (item) {
                    if (event.which === _Util__WEBPACK_IMPORTED_MODULE_15__.KeyCode.enter) {
                        if (focusIndex_1 >= 0 && !(0,_Util__WEBPACK_IMPORTED_MODULE_15__.eventTargetContainsNode)(event, ["A"])) {
                            _this.rowActivated(event, { data: item, index: focusIndex_1 });
                        }
                    }
                    else if (event.which === _Util__WEBPACK_IMPORTED_MODULE_15__.KeyCode.space) {
                        _this.processSelectionEvent(event, { data: item, index: focusIndex_1 });
                        event.preventDefault();
                    }
                    else if (event.which === _Util__WEBPACK_IMPORTED_MODULE_15__.KeyCode.upArrow || event.which === _Util__WEBPACK_IMPORTED_MODULE_15__.KeyCode.downArrow) {
                        var selection = _this.props.selection;
                        if (!selection || (selection.selectOnFocus && (event.shiftKey || !event.ctrlKey))) {
                            event.persist();
                            // Need to wait for the keyboard event to be processed by the focuszone.
                            window.setTimeout(function () {
                                if (_this.focusIndex != focusIndex_1) {
                                    var data = _Core_Observable__WEBPACK_IMPORTED_MODULE_8__.ObservableLike.getValue(_this.state.rows[_this.focusIndex]);
                                    if (data) {
                                        _this.processSelectionEvent(event, { data: data, index: _this.focusIndex });
                                    }
                                }
                            }, 0);
                        }
                    }
                    else if (event.which === _Util__WEBPACK_IMPORTED_MODULE_15__.KeyCode.pageDown) {
                        var stats = _this.getStats();
                        _this.focusRow(Math.min(focusIndex_1 + (stats.lastRendered - stats.firstRendered), _this.state.rowCount - 1), 1);
                        event.preventDefault();
                    }
                    else if (event.which === _Util__WEBPACK_IMPORTED_MODULE_15__.KeyCode.pageUp) {
                        var stats = _this.getStats();
                        _this.focusRow(Math.max(focusIndex_1 - (stats.lastRendered - stats.firstRendered), 0), -1);
                        event.preventDefault();
                    }
                    else if (event.which === _Util__WEBPACK_IMPORTED_MODULE_15__.KeyCode.home) {
                        _this.focusRow(0, 1);
                        event.preventDefault();
                    }
                    else if (event.which === _Util__WEBPACK_IMPORTED_MODULE_15__.KeyCode.end) {
                        _this.focusRow(_this.state.rowCount - 1, -1);
                        event.preventDefault();
                    }
                }
            }
        };
        _this.onIntersect = function (entries) {
            // If virtualization is disabled, we will not attempt to adjust the viewport.
            if (!_this.state.virtualize) {
                return;
            }
            var scrollTop = _this.context.root.scrollTop;
            var _a = _this.state, firstRendered = _a.firstRendered, firstMaterialized = _a.firstMaterialized, lastRendered = _a.lastRendered, lastMaterialized = _a.lastMaterialized, rowCount = _a.rowCount, rowProportion = _a.rowProportion;
            var rowHeight = _this.state.rowHeight;
            // console.log({ phase: "onIntersect - Start", firstMaterialized, lastMaterialized, rowHeight });
            // Don't process an intersection while scroll event is pending.
            if (scrollTop !== _this.state.scrollTop && entries.length) {
                // console.log("Don't process an intersection while scroll event is pending.");
                return;
            }
            // Ignore events if we dont have a our basic elements resolved (this should never happen).
            if (!_this.listElement.current || !_this.bodyElement.current) {
                // console.log("Elements not available at this point.");
                return;
            }
            // We are going to enumerate all the children, if the row is in the viewport
            // we will determine if it should be paged out.
            var rowElements = _this.bodyElement.current.children;
            // If a rowHeight was specified we will compute one based on the average rowHeight in the
            // first page rendered.
            if (rowHeight === 0) {
                if (rowElements.length > 0) {
                    var totalHeight = 0;
                    var childCount = 0;
                    // Loop through all children and average the rowHeight's.
                    for (var childIndex = 0; childIndex < rowElements.length; childIndex++) {
                        var childHeight = _this.bodyElement.current.children[childIndex].getBoundingClientRect().height;
                        if (childHeight > 0) {
                            totalHeight += childHeight;
                            childCount++;
                        }
                    }
                    // Make sure we have at least one child row that has size.
                    if (childCount > 0) {
                        rowHeight = totalHeight / childCount;
                    }
                }
                if (rowHeight === 0) {
                    return;
                }
                // If we have a pending scrollIntoView we will schedule it now that we have the rowHeight
                if (_this.scrollToIndex !== -1) {
                    _this.setState({
                        firstMaterialized: Math.max(0, _this.scrollToIndex - _this.state.pageSize),
                        lastMaterialized: _this.scrollToIndex + Math.min(_this.props.initialPageCount * _this.state.pageSize, rowCount - 1),
                        rowHeight: rowHeight
                    });
                    return;
                }
                // console.log({ phase: "onIntersect - Compute RowHeight", rowHeight });
            }
            // Determine the location of the intersection within the page. This is the element
            // we are scrolling within.
            var intersectionRect = _this.context.root.getBoundingClientRect();
            // Track the first and last row elements for adjusting the range.
            var firstMaterializedElement;
            var lastMaterializedElement;
            var firstMaterializedUpdated = firstMaterialized;
            var lastMaterializedUpdated = lastMaterialized;
            var firstRenderedUpdated = lastMaterializedUpdated;
            var lastRenderedUpdated = firstMaterializedUpdated;
            // Go through the viewport pages and determine if any are out of range and should be
            // paged out. Range is defined as more than 1 page of estimated rows away from the
            // nearest edge. If you dont allow for 1 page of estimated rows it may thrash pages
            // in and out of materialization.
            for (var childIndex = 0; childIndex < rowElements.length; childIndex++) {
                // Determine if this child is in the viewport, ignore rows that are not.
                var rowElement = rowElements[childIndex];
                var rowIndex = getAttributeAsNumber(rowElement, "data-row-index");
                var rowRect = rowElement.getBoundingClientRect();
                if (rowIndex >= firstMaterialized && rowIndex <= lastMaterialized) {
                    // Make sure to leave some extra room above and below the visible rectangle to handle
                    // variable height rows. This helps prevent jittering when paging rows out.
                    if (rowRect.bottom < intersectionRect.top - _this.state.pageSize * (rowProportion * rowHeight)) {
                        firstMaterializedUpdated++;
                    }
                    else if (rowRect.top > intersectionRect.bottom + _this.state.pageSize * (rowProportion * rowHeight)) {
                        lastMaterializedUpdated--;
                    }
                    // We will save the first and last rows for later computations.
                    if (rowIndex === firstMaterialized) {
                        firstMaterializedElement = rowElement;
                    }
                    if (rowIndex === lastMaterialized) {
                        lastMaterializedElement = rowElement;
                    }
                }
                // If the row is within the intersection rect, update the first and last rendered rows. These might be the focused items
                if (rowIndex > -1 && rowRect.top < intersectionRect.bottom && rowRect.bottom > intersectionRect.top) {
                    lastRenderedUpdated = Math.max(lastRenderedUpdated, rowIndex);
                    firstRenderedUpdated = Math.min(firstRenderedUpdated, rowIndex);
                }
            }
            // When we are scaling the size of the list, we want to keep a pageSize worth of elements materiaized but not rendered.
            // This allows users to scroll a few items. If they quickly scroll past the last materialized element or drag the scroll wheel, we recalculate where we should be
            // instead of paging in rows.
            if (rowProportion < 1) {
                if (firstMaterializedUpdated > lastMaterializedUpdated ||
                    firstRenderedUpdated === firstMaterializedUpdated ||
                    lastRenderedUpdated === lastMaterializedUpdated) {
                    if (lastRenderedUpdated >= rowCount - 1) {
                        firstMaterializedUpdated = Math.ceil(lastMaterializedUpdated - (intersectionRect.height / rowHeight + _this.state.pageSize));
                    }
                    else {
                        var offsetTop = scrollTop - (_this.listElement.current.offsetTop - _this.context.root.offsetTop);
                        firstMaterializedUpdated = Math.max(0, Math.min(rowCount - 1, Math.floor(offsetTop / (rowProportion * rowHeight))) - _this.state.pageSize);
                        lastMaterializedUpdated = Math.min(rowCount - 1, firstMaterializedUpdated + Math.ceil(intersectionRect.height / (rowProportion * rowHeight) + _this.state.pageSize - 1));
                        lastRenderedUpdated = -1;
                        firstRenderedUpdated = -1;
                    }
                }
                else {
                    firstMaterializedUpdated = Math.min(firstMaterializedUpdated, firstRenderedUpdated - _this.state.pageSize);
                    //-1 helps to avoid jittering when paging rows out
                    lastMaterializedUpdated = Math.max(lastMaterializedUpdated, lastRenderedUpdated + _this.state.pageSize - 1);
                    lastRenderedUpdated = -1;
                    firstRenderedUpdated = -1;
                }
            }
            // If the row range is inverted (top above bottom) then all rows have been hidden and we should
            // recompute the viewport based on the scrollTop of our intersection and intersection height.
            else if (firstMaterializedUpdated > lastMaterializedUpdated) {
                var offsetTop = scrollTop - (_this.listElement.current.offsetTop - _this.context.root.offsetTop);
                firstMaterializedUpdated = Math.max(0, Math.min(rowCount - 1, Math.floor(offsetTop / rowHeight)) - _this.state.pageSize);
                lastMaterializedUpdated = Math.min(rowCount - 1, firstMaterializedUpdated + Math.ceil(intersectionRect.height / rowHeight + _this.state.pageSize - 1));
                lastRenderedUpdated = -1;
                firstRenderedUpdated = -1;
            }
            else {
                // If the firstPage didn't move down, we may need more pages above.
                if (firstMaterializedUpdated === firstMaterialized && firstMaterializedElement) {
                    var rowRect = firstMaterializedElement.getBoundingClientRect();
                    var availableSpace = rowRect.top - intersectionRect.top;
                    if (availableSpace > 0) {
                        firstMaterializedUpdated -= Math.ceil(availableSpace / rowHeight);
                    }
                }
                // If the lastPage didn't move up, we may need more pages below.
                if (lastMaterializedUpdated === lastMaterialized && lastMaterializedElement) {
                    var rowRect = lastMaterializedElement.getBoundingClientRect();
                    var availableSpace = intersectionRect.bottom - rowRect.bottom;
                    if (availableSpace > 0) {
                        lastMaterializedUpdated += Math.ceil(availableSpace / rowHeight);
                    }
                }
            }
            // Make sure our page boundary stays in the available page range.
            firstMaterializedUpdated = Math.max(firstMaterializedUpdated, 0);
            lastMaterializedUpdated = Math.min(lastMaterializedUpdated, rowCount - 1);
            // console.log({ phase: "onIntersect - End", firstMaterializedUpdated, lastMaterializedUpdated, rowHeight });
            // Update our state if and only if something has changed.
            if (firstMaterializedUpdated !== firstMaterialized ||
                firstRenderedUpdated !== firstRendered ||
                lastMaterializedUpdated !== lastMaterialized ||
                lastRenderedUpdated !== lastRendered ||
                rowHeight !== _this.state.rowHeight ||
                scrollTop !== _this.state.scrollTop) {
                //
                // @TODO: We need to unload data for pages that are no longer rendererd.
                // This means not in the viewport or within any other rendered range.
                //
                // console.log({ phase: "onIntersect - stateChange", firstMaterializedUpdated, firstRenderedUpdated, lastRenderedUpdated, lastMaterializedUpdated, scrollTop });
                _this.setState({
                    firstMaterialized: firstMaterializedUpdated,
                    firstRendered: firstRenderedUpdated,
                    lastMaterialized: lastMaterializedUpdated,
                    lastRendered: lastRenderedUpdated,
                    rowHeight: rowHeight,
                    scrollTop: scrollTop
                });
            }
        };
        _this.onPointerDownBody = function (event) {
            // If the table body gets a mousedown, we will never need to fire the selection event when
            // the list gets focus since the mouse event will cause the selection.
            _this.selectOnFocus = false;
        };
        _this.getInitialTabbableRow = function () {
            var _a = _this.props, defaultTabbableRow = _a.defaultTabbableRow, itemProvider = _a.itemProvider, selection = _a.selection;
            if (defaultTabbableRow) {
                return defaultTabbableRow;
            }
            if (selection) {
                for (var i = 0; i < itemProvider.length; i++) {
                    if (selection.selectable(i)) {
                        return i;
                    }
                }
            }
            return 0;
        };
        _this.getHeight = function (rowIndex, countFromBottom) {
            var height = 0;
            var rowHeights = _this.props.rowHeights || [];
            var start = countFromBottom ? _this.state.rowCount - rowIndex : 0;
            var end = countFromBottom ? _this.state.rowCount : rowIndex;
            for (var i = start; i < end; i++) {
                height += rowHeights[i] || _this.state.rowHeight;
            }
            return height;
        };
        var rowCount = props.itemProvider.length;
        var pageSize = props.pageSize;
        _this.state = {
            columnCount: 1,
            eventDispatch: props.eventDispatch || new _Utilities_Dispatch__WEBPACK_IMPORTED_MODULE_16__.EventDispatch(),
            firstMaterialized: 0,
            firstRendered: 0,
            itemProvider: props.itemProvider,
            lastMaterialized: _this.props.virtualize ? Math.min(props.initialPageCount * pageSize, rowCount - 1) : rowCount - 1,
            lastRendered: _this.props.virtualize ? Math.min(props.initialPageCount * pageSize, rowCount - 1) : rowCount - 1,
            overlays: new _Core_Observable__WEBPACK_IMPORTED_MODULE_8__.ObservableArray(),
            pageSize: pageSize,
            renderedRows: {},
            rowCount: rowCount,
            rowHeight: props.rowHeight || 0,
            rowProportion: props.rowHeight && props.maxHeight ? Math.min(1, props.maxHeight / (props.rowHeight * rowCount)) : 1,
            rows: {},
            scrollTop: 0,
            virtualize: !!props.virtualize
        };
        // Initialize the supplied behaviors.
        if (props.behaviors) {
            for (var _i = 0, _a = props.behaviors; _i < _a.length; _i++) {
                var behavior = _a[_i];
                if (behavior.initialize) {
                    behavior.initialize(props, _this, _this.state.eventDispatch);
                }
            }
        }
        return _this;
    }
    DropdownList.getDerivedStateFromProps = function (props, state) {
        var rowCount = props.itemProvider.length;
        var firstMaterialized = state.firstMaterialized;
        var lastMaterialized = state.lastMaterialized;
        if (rowCount !== state.rowCount) {
            firstMaterialized = Math.max(0, Math.min(state.firstMaterialized, rowCount));
            lastMaterialized = state.virtualize
                ? Math.max(firstMaterialized, Math.min(state.lastMaterialized +
                    (state.lastMaterialized === state.rowCount - 1 || state.lastMaterialized === state.rowCount ? props.pageSize : 0), rowCount - 1))
                : rowCount - 1;
        }
        // Ensure out pages and providers are appropriately computed.
        var updatedState = {
            firstMaterialized: firstMaterialized,
            itemProvider: props.itemProvider,
            lastMaterialized: lastMaterialized,
            pageSize: props.pageSize,
            rowCount: rowCount,
            rowProportion: Math.min(1, (props.maxHeight || 100000) / (state.rowHeight * (rowCount - (lastMaterialized - firstMaterialized))))
        };
        // If there are changes to the props that affect the cached data, we need it clear it.
        if (props.itemProvider !== state.itemProvider || props.columnCount !== state.columnCount) {
            updatedState.columnCount = props.columnCount;
            updatedState.renderedRows = {};
            updatedState.rows = {};
        }
        // console.log(updatedState);
        return updatedState;
    };
    DropdownList.prototype.render = function () {
        var _this = this;
        var _a = this.props, ariaRowOffset = _a.ariaRowOffset, className = _a.className, focuszoneProps = _a.focuszoneProps, id = _a.id, maxWidth = _a.maxWidth, minWidth = _a.minWidth, width = _a.width;
        var _b = this.state, firstMaterialized = _b.firstMaterialized, lastMaterialized = _b.lastMaterialized, rowCount = _b.rowCount, rowProportion = _b.rowProportion;
        var focusIndex = this.focusIndex;
        var role = this.props.role ? this.props.role : this.props.selection ? "listbox" : "list";
        var useAriaCounts = role === "table" || role === "grid" || role === "treegrid";
        var rows = [];
        // Number of pages each spacer takes up. There are potentially two spacers above
        // or below the view port. They surround the focus range when the focus range is
        // not within the viewport.
        var topSpacer1 = 0;
        var topSpacer2 = firstMaterialized;
        var bottomSpacer2 = Math.max(0, rowCount - lastMaterialized - 1);
        var bottomSpacer1 = 0;
        var firstFocusRow = Number.MAX_SAFE_INTEGER;
        var lastFocusRow = 0;
        // Compute the range of focus pages, these will be either before or after the pages
        // in the viewport. We need to ensure we have one row before and one row after the
        // focus row to support arrowing up and down.
        if (focusIndex !== -1) {
            firstFocusRow = Math.max(0, focusIndex - 3);
            lastFocusRow = Math.min(rowCount, focusIndex + 3);
            // Make sure we dont draw any of the pages that are in the viewport.
            if (firstFocusRow < firstMaterialized) {
                lastFocusRow = Math.min(lastFocusRow, firstMaterialized - 1);
                topSpacer1 = firstFocusRow;
                topSpacer2 = firstMaterialized - lastFocusRow - 1;
            }
            else if (lastFocusRow > lastMaterialized) {
                firstFocusRow = Math.max(firstFocusRow, lastMaterialized + 1);
                bottomSpacer2 = firstFocusRow - lastMaterialized - 1;
                bottomSpacer1 = Math.max(0, rowCount - lastFocusRow - 1);
            }
        }
        if (rowProportion < 1) {
            // Ensure that the spacers leave room for 1 pageSize above the viewport
            topSpacer2 += Math.min(this.state.pageSize, firstMaterialized);
        }
        // console.log({ phase: "render", firstMaterialized, lastMaterialized, topSpacer1, topSpacer2, bottomSpacer2, bottomSpacer1 });
        rows.push(this.renderSpacer("st1", topSpacer1));
        // If the focus pages are before the viewport render them up to
        // the first page but not including the first page.
        if (firstFocusRow < firstMaterialized) {
            for (var rowIndex = firstFocusRow; rowIndex <= lastFocusRow; rowIndex++) {
                rows.push(this.renderRow(rowIndex));
            }
        }
        rows.push(this.renderSpacer("st2", topSpacer2));
        // Go through each of the rendered pages and generate the child component.
        for (var rowIndex = firstMaterialized; rowIndex <= lastMaterialized; rowIndex++) {
            rows.push(this.renderRow(rowIndex));
        }
        rows.push(this.renderSpacer("sb2", bottomSpacer2, { countFromBottom: true, estimateRowHeight: !this.props.rowHeights }));
        // If the focus pages are after the last page in the viewport render
        // them but not including the last page.
        if (lastFocusRow > lastMaterialized) {
            for (var rowIndex = firstFocusRow; rowIndex <= lastFocusRow; rowIndex++) {
                rows.push(this.renderRow(rowIndex));
            }
        }
        rows.push(this.renderSpacer("sb1", bottomSpacer1, { countFromBottom: true, estimateRowHeight: !this.props.rowHeights }));
        return (react__WEBPACK_IMPORTED_MODULE_6__.createElement(_Observer__WEBPACK_IMPORTED_MODULE_13__.UncheckedObserver, { itemProvider: {
                // Supply an IObservableExpression to elevate the provider change to a state
                // update for the entire component instead of just the observer.
                filter: function (change, action) {
                    // Notify the selection about the change to the items.
                    if (_this.props.selection) {
                        _this.props.selection.onItemsChanged(change, action);
                    }
                    // @NOTE: For now we will just wipe out the entire cache, we can do an optimized
                    // update to the cache based on the rows that changed.
                    var updatedState = {
                        renderedRows: {},
                        rows: {}
                    };
                    // If the focused row was removed, we will clear the focus index.
                    if (change.removedItems && _this.focusIndex >= change.index && change.index + change.removedItems.length >= _this.focusIndex) {
                        _this.focusIndex = -1;
                    }
                    // If there is a well defined rowcount we will update it and the maxPage.
                    if (_this.state.rowCount !== -1) {
                        var countChange = (change.addedItems ? change.addedItems.length : 0) - (change.removedItems ? change.removedItems.length : 0);
                        if (countChange) {
                            updatedState.rowCount = _this.state.rowCount + countChange;
                            updatedState.firstMaterialized = Math.max(0, Math.min(_this.state.firstMaterialized, updatedState.rowCount - 1));
                            updatedState.lastMaterialized = _this.state.virtualize
                                ? Math.max(updatedState.firstMaterialized, Math.min(_this.state.lastMaterialized +
                                    (change.index >= _this.state.firstMaterialized && change.index <= _this.state.lastMaterialized + 1
                                        ? Math.min(_this.state.pageSize, countChange)
                                        : 0), updatedState.rowCount - 1))
                                : updatedState.rowCount - 1;
                        }
                    }
                    // console.log(updatedState);
                    _this.setState(updatedState);
                    return false;
                },
                observableValue: this.props.itemProvider
            } },
            react__WEBPACK_IMPORTED_MODULE_6__.createElement(_FocusWithin__WEBPACK_IMPORTED_MODULE_9__.FocusWithin, { onBlur: this.onBlur }, function (focusStatus) {
                // @TODO: Once we get the line-height: 20px in the body the body-m should be removed from the list.
                var list = (react__WEBPACK_IMPORTED_MODULE_6__.createElement("ul", { "aria-colcount": useAriaCounts ? (_this.props.ariaColumnCount ? _this.props.ariaColumnCount : _this.props.columnCount) : undefined, "aria-label": _this.props.ariaLabel || _Resources_Widgets__WEBPACK_IMPORTED_MODULE_14__.DropdownSelection, "aria-rowcount": useAriaCounts ? _this.state.itemProvider.length + ariaRowOffset : undefined, className: (0,_Util__WEBPACK_IMPORTED_MODULE_15__.css)(className, "bolt-list body-m relative", _this.props.showScroll ? undefined : "scroll-hidden"), id: (0,_Util__WEBPACK_IMPORTED_MODULE_15__.getSafeId)(id), onBlur: focusStatus.onBlur, onClick: _this.onClick, onContextMenu: _this.onDispatch, onDoubleClick: _this.onDoubleClick, onDragEnd: _this.onDispatch, onDragEnter: _this.onDispatch, onDragExit: _this.onDispatch, onDragOver: _this.onDispatch, onDragStart: _this.onDispatch, onDrop: _this.onDispatch, onFocus: focusStatus.onFocus, onKeyDown: _this.onKeyDown, onKeyUp: _this.onDispatch, onPointerDown: _this.onDispatch, ref: _this.listElement, role: role, style: { maxWidth: maxWidth, minWidth: minWidth, width: width }, tabIndex: 0 },
                    _this.props.renderHeader && _this.props.renderHeader(),
                    react__WEBPACK_IMPORTED_MODULE_6__.createElement("div", { className: (0,_Util__WEBPACK_IMPORTED_MODULE_15__.css)("relative", "listbox"), onFocus: _this.onFocusBody, onPointerDown: _this.onPointerDownBody, ref: _this.bodyElement, role: role === "listbox" || role === "list" || role === "menu" || role === "tree" ? "presentation" : undefined },
                        _this.renderOverlay(_this.listElement),
                        rows)));
                if (focuszoneProps) {
                    list = (react__WEBPACK_IMPORTED_MODULE_6__.createElement(_FocusZone__WEBPACK_IMPORTED_MODULE_10__.FocusZone, (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, focuszoneProps, { skipHiddenCheck: true }), list));
                }
                return list;
            })));
    };
    DropdownList.prototype.componentDidMount = function () {
        this.context.register(this.onIntersect);
        if (this.props.virtualize) {
            document.addEventListener("keydown", this.onVirtualizeKeyDown);
        }
    };
    DropdownList.prototype.componentDidUpdate = function () {
        var _a = this, scrollToIndex = _a.scrollToIndex, onScrollComplete = _a.onScrollComplete;
        if (scrollToIndex !== -1 && this.state.rowHeight) {
            var parentElement = this.bodyElement.current;
            var _b = this.state, firstMaterialized = _b.firstMaterialized, lastMaterialized = _b.lastMaterialized;
            // If the row is materialized, we will ensure it is in the viewport.
            if (scrollToIndex >= firstMaterialized && scrollToIndex <= lastMaterialized && parentElement) {
                for (var currentIndex = 0; currentIndex < parentElement.children.length; currentIndex++) {
                    var childElement = parentElement.children[currentIndex];
                    var cellDetails = cellFromElement(childElement);
                    if (cellDetails.rowIndex === scrollToIndex) {
                        childElement.scrollIntoView(this.scrollToOptions);
                        break;
                    }
                }
            }
            // Reset the scroll state before we notify the complete function, it may start a new scroll operation.
            this.onScrollComplete = undefined;
            this.scrollToIndex = -1;
            this.scrollToOptions = undefined;
            // Notify any pending scrollComplete method that scrolling has completed.
            if (onScrollComplete) {
                onScrollComplete(scrollToIndex);
            }
        }
    };
    DropdownList.prototype.componentWillUnmount = function () {
        this.context.unregister(this.onIntersect);
        if (this.props.virtualize) {
            document.removeEventListener("keydown", this.onVirtualizeKeyDown);
        }
    };
    DropdownList.prototype.addOverlay = function (id, rowIndex, render, zIndex, columnIndex) {
        if (zIndex === void 0) { zIndex = 0; }
        var overlays = this.state.overlays;
        var overlayIndex = overlays.value.findIndex(function (overlay) { return overlay.id === id; });
        var rowOverlay = { render: render, id: id, rowIndex: rowIndex, zIndex: zIndex + 1, columnIndex: columnIndex };
        // Update the overlay if it exists for that id, otherwise add it
        if (overlayIndex >= 0) {
            overlays.change(overlayIndex, rowOverlay);
        }
        else {
            overlays.push(rowOverlay);
        }
    };
    DropdownList.prototype.removeOverlay = function (id) {
        var overlays = this.state.overlays;
        var overlayIndex = overlays.value.findIndex(function (overlay) { return overlay.id === id; });
        // Remove the overlay if it exists.
        if (overlayIndex >= 0) {
            overlays.splice(overlayIndex, 1);
        }
    };
    DropdownList.prototype.getFocusIndex = function () {
        return this.focusIndex;
    };
    DropdownList.prototype.getStats = function () {
        return {
            firstMaterialized: this.state.firstMaterialized,
            firstRendered: this.state.firstRendered,
            lastMaterialized: this.state.lastMaterialized,
            lastRendered: this.state.lastRendered
        };
    };
    DropdownList.prototype.scrollIntoView = function (rowIndex, options, onScrollComplete) {
        var _a = this.state, firstMaterialized = _a.firstMaterialized, lastMaterialized = _a.lastMaterialized, pageSize = _a.pageSize, rowCount = _a.rowCount, rowHeight = _a.rowHeight, rowProportion = _a.rowProportion;
        if (rowIndex >= 0 && rowIndex < this.state.rowCount) {
            var parentElement = this.bodyElement.current;
            // If the row is materialized, we will ensure it is in the viewport.
            if (rowIndex >= firstMaterialized && rowIndex <= lastMaterialized && parentElement) {
                for (var currentIndex = 0; currentIndex < parentElement.children.length; currentIndex++) {
                    var childElement = parentElement.children[currentIndex];
                    var cellDetails = cellFromElement(childElement);
                    if (cellDetails.rowIndex === rowIndex) {
                        childElement.scrollIntoView(options);
                        break;
                    }
                }
                // If the caller wants to know when the scroll has completed, notify them.
                if (onScrollComplete) {
                    onScrollComplete(rowIndex);
                }
            }
            else {
                // We only notify the last caller for now, if someone was waiting and another
                // scroll request was made we will send -1 as the rowIndex scrolled into view.
                if (this.onScrollComplete) {
                    this.onScrollComplete(-1);
                }
                // Set the scrollToOptions that will be applied after the next update.
                this.onScrollComplete = onScrollComplete;
                this.scrollToIndex = rowIndex;
                this.scrollToOptions = options;
                // We need to add some padding when we grow proportionally, since the spacers do not fill up enough room if
                // the list starts in the middle of the scrollable region
                var padding = rowProportion < 1 ? pageSize : 0;
                // If we havent computed the rowHeight at this point we need to wait until
                // we know how big rows are to get the row in the right location.
                if (rowHeight) {
                    this.setState({
                        firstMaterialized: Math.max(0, rowIndex - padding),
                        lastMaterialized: Math.min(rowCount - 1, rowIndex + padding)
                    });
                }
            }
        }
    };
    DropdownList.prototype.focusRow = function (rowIndex, direction) {
        var _this = this;
        if (direction === void 0) { direction = 1; }
        return new Promise(function (resolve) {
            _this.scrollIntoView(rowIndex, { block: "center" }, function (completedIndex) {
                if (completedIndex === rowIndex && _this.bodyElement.current) {
                    var rowElement = _this.bodyElement.current.querySelector("[data-row-index='" + completedIndex + "']");
                    if (rowElement) {
                        // We need to ensure the requested row is focusable, if not we will move in the
                        // requested direction to find the first focusable row.
                        if (!rowElement.getAttribute("tabindex")) {
                            var newIndex = Math.min(_this.state.rowCount - 1, Math.max(0, completedIndex + direction));
                            if (newIndex !== completedIndex) {
                                _this.focusRow(newIndex, direction);
                            }
                            else if (newIndex !== _this.focusIndex) {
                                _this.focusRow(newIndex, -direction);
                            }
                        }
                        else {
                            rowElement.focus();
                        }
                    }
                }
                resolve();
            });
        });
    };
    DropdownList.prototype.processSelectionEvent = function (event, listRow) {
        var _a = this.props, selection = _a.selection, enforceSingleSelect = _a.enforceSingleSelect;
        if (!selection || selection.selectable(listRow.index)) {
            if (selection) {
                var index = listRow.index;
                var multiSelect = enforceSingleSelect ? false : selection.multiSelect;
                // Determine the type of change being made to the selection based on key states.
                if (this.pivotIndex >= 0 && event.shiftKey && multiSelect) {
                    selection.select(Math.min(this.pivotIndex, index), Math.abs(this.pivotIndex - index) + 1, event.ctrlKey || event.metaKey, multiSelect);
                }
                else {
                    var isSpaceBarStroke = event.which === _Util__WEBPACK_IMPORTED_MODULE_15__.KeyCode.space;
                    if ((event.ctrlKey || event.metaKey || selection.alwaysMerge || isSpaceBarStroke) && multiSelect) {
                        selection.toggle(index, true, multiSelect);
                    }
                    else {
                        selection.select(index, 1, false, multiSelect);
                    }
                }
                // Save the last selectionIndex that we selected, this will allow
                // us to perform range based selection.
                if (!event.shiftKey) {
                    this.pivotIndex = index;
                }
            }
            this.rowSelected(event, listRow);
        }
    };
    DropdownList.prototype.renderLoadingRow = function (rowIndex, details) {
        return (react__WEBPACK_IMPORTED_MODULE_6__.createElement(DropdownListItem, { className: "bolt-list-row-loading", details: details, index: rowIndex },
            react__WEBPACK_IMPORTED_MODULE_6__.createElement("div", { className: "shimmer shimmer-line", style: { width: Math.random() * 80 + 20 + "%" } }, "\u00A0")));
    };
    DropdownList.prototype.renderOverlay = function (listElementRef) {
        var _this = this;
        var _a = this.state, firstMaterialized = _a.firstMaterialized, lastMaterialized = _a.lastMaterialized, overlays = _a.overlays;
        return (react__WEBPACK_IMPORTED_MODULE_6__.createElement(_Observer__WEBPACK_IMPORTED_MODULE_13__.Observer, { overlays: overlays }, function (props) {
            var bodyElement = _this.bodyElement.current;
            if (props.overlays.length > 0 && bodyElement) {
                return (react__WEBPACK_IMPORTED_MODULE_6__.createElement("div", { className: "bolt-list-overlay-container absolute" }, props.overlays.map(function (overlay) {
                    var _a;
                    // Make sure the row is in the rendered range of rows before starting.
                    // Explicitly include column headers at row -1
                    if (overlay.rowIndex !== -1 && (overlay.rowIndex < firstMaterialized || overlay.rowIndex > lastMaterialized) && !(0,_Utilities_DragDrop__WEBPACK_IMPORTED_MODULE_17__.getDragInProgress)()) {
                        return null;
                    }
                    // Find the row for the given rowIndex
                    var defaultRowElement = listElementRef.current &&
                        listElementRef.current.querySelector("[data-row-index='" + overlay.rowIndex + "']");
                    var rowElement = _this.props.overlay
                        ? defaultRowElement === null || defaultRowElement === void 0 ? void 0 : defaultRowElement.querySelector(_this.props.overlay)
                        : defaultRowElement;
                    // Special case for column overlay
                    var columnElement = (_a = listElementRef.current) === null || _a === void 0 ? void 0 : _a.querySelector("[data-column-index='" + overlay.columnIndex + "']");
                    // We cant render the overlay if the row is paged out since we can't determine
                    // the location of the row.
                    if (rowElement) {
                        return !columnElement ? (react__WEBPACK_IMPORTED_MODULE_6__.createElement("div", { className: "bolt-list-overlay flex-row absolute", id: (0,_Util__WEBPACK_IMPORTED_MODULE_15__.getSafeId)(overlay.id), key: overlay.id, style: {
                                height: rowElement.offsetHeight,
                                top: rowElement.getBoundingClientRect().top - bodyElement.getBoundingClientRect().top,
                                zIndex: overlay.zIndex * 10
                            } }, overlay.render({ rowElement: rowElement }))) : (react__WEBPACK_IMPORTED_MODULE_6__.createElement("div", { className: "bolt-list-overlay flex-row absolute", id: (0,_Util__WEBPACK_IMPORTED_MODULE_15__.getSafeId)(overlay.id), key: overlay.id, style: {
                                height: rowElement.offsetHeight,
                                width: columnElement.offsetWidth,
                                top: rowElement.getBoundingClientRect().top - bodyElement.getBoundingClientRect().top,
                                left: columnElement.getBoundingClientRect().left - bodyElement.getBoundingClientRect().left,
                                zIndex: overlay.zIndex * 10
                            } }, overlay.render({ rowElement: columnElement })));
                    }
                    return null;
                })));
            }
            return null;
        }));
    };
    DropdownList.prototype.renderRow = function (rowIndex) {
        var _this = this;
        var itemProvider = this.props.itemProvider;
        var _a = this.state, renderedRows = _a.renderedRows, rows = _a.rows;
        var renderedRow = renderedRows[rowIndex];
        if (!renderedRow) {
            var item_1 = rows[rowIndex];
            if (!item_1) {
                if (itemProvider.getItem) {
                    item_1 = itemProvider.getItem(rowIndex);
                }
                else {
                    item_1 = itemProvider.value[rowIndex];
                }
            }
            // @TODO: If there are no more rows, we need to handle an itemProvider with -1 length.
            if (!item_1) {
                return null;
            }
            // Save the current item in the item cache.
            rows[rowIndex] = item_1;
            var selection = this.props.selection;
            var selectionObservable = void 0;
            if (selection) {
                selectionObservable = {
                    observableValue: selection,
                    filter: function (selectedRanges) {
                        for (var _i = 0, selectedRanges_1 = selectedRanges; _i < selectedRanges_1.length; _i++) {
                            var selectionRange = selectedRanges_1[_i];
                            if (rowIndex >= selectionRange.beginIndex && rowIndex <= selectionRange.endIndex) {
                                return true;
                            }
                        }
                        return false;
                    }
                };
            }
            // console.log("render row - " + rowIndex);
            // Render the row, save it in the cache, and add it to the current page.
            renderedRow = (react__WEBPACK_IMPORTED_MODULE_6__.createElement(_Observer__WEBPACK_IMPORTED_MODULE_13__.UncheckedObserver, { item: item_1, key: rowIndex, selection: selectionObservable }, function (props) {
                var _a = _this.props, selectableText = _a.selectableText, renderRow = _a.renderRow, renderLoadingRow = _a.renderLoadingRow;
                var focusIndex = _this.focusIndex;
                var tabbableIndex = focusIndex >= 0 ? focusIndex : _this.getInitialTabbableRow();
                var rowItem = _Core_Observable__WEBPACK_IMPORTED_MODULE_8__.ObservableLike.getValue(item_1);
                var itemDetails = {
                    selectableText: selectableText,
                    ariaBusy: !props.item,
                    ariaRowOffset: _this.props.ariaRowOffset + 1,
                    data: rowItem,
                    eventDispatch: _this.state.eventDispatch,
                    excludeTabStop: _this.props.excludeTabStop || tabbableIndex !== rowIndex,
                    listProps: _this.props,
                    onFocusItem: _this.onFocusItem,
                    singleClickActivation: _this.props.onActivate && _this.props.singleClickActivation
                };
                if (props.item) {
                    return renderRow(rowIndex, props.item, itemDetails);
                }
                else if (renderLoadingRow) {
                    return renderLoadingRow(rowIndex, itemDetails);
                }
                else {
                    return _this.renderLoadingRow(rowIndex, itemDetails);
                }
            }));
            // Save the row in our cache.
            this.state.renderedRows[rowIndex] = renderedRow;
        }
        return renderedRow;
    };
    DropdownList.prototype.renderSpacer = function (key, rowCount, options) {
        var _this = this;
        var _a;
        var height = !(options === null || options === void 0 ? void 0 : options.estimateRowHeight) && ((_a = this.props.rowHeights) === null || _a === void 0 ? void 0 : _a.length)
            ? this.getHeight(rowCount, options === null || options === void 0 ? void 0 : options.countFromBottom)
            : rowCount * this.state.rowHeight * this.state.rowProportion;
        return (react__WEBPACK_IMPORTED_MODULE_6__.createElement("div", { className: "bolt-list-row-spacer invisible", key: key, ref: function (spacerElement) {
                var existingElement = _this.spacerElements[key];
                if (spacerElement) {
                    if (existingElement !== spacerElement) {
                        if (existingElement) {
                            _this.context.unobserve(spacerElement);
                        }
                        _this.context.observe(spacerElement);
                        _this.spacerElements[key] = spacerElement;
                    }
                }
                else if (existingElement) {
                    _this.context.unobserve(existingElement);
                    delete _this.spacerElements[key];
                }
            }, role: "presentation" },
            react__WEBPACK_IMPORTED_MODULE_6__.createElement("div", { className: "bolt-list-cell-spacer invisible", style: { height: height + "px" } })));
    };
    DropdownList.prototype.rowActivated = function (event, listRow) {
        this.state.eventDispatch.dispatchEvent(event, listRow, "activate");
        if (this.props.onActivate) {
            this.props.onActivate(event, listRow);
        }
    };
    DropdownList.prototype.rowSelected = function (event, listRow) {
        this.state.eventDispatch.dispatchEvent(event, listRow, "select");
        if (this.props.onSelect) {
            this.props.onSelect(event, listRow);
        }
    };
    DropdownList.prototype.rowFocused = function (event, listRow) {
        this.state.eventDispatch.dispatchEvent(event, listRow, "focus");
        if (this.props.onFocus) {
            this.props.onFocus(event, listRow);
        }
    };
    DropdownList.contextType = _Intersection__WEBPACK_IMPORTED_MODULE_11__.IntersectionContext;
    DropdownList.defaultProps = {
        ariaRowOffset: 0,
        columnCount: 1,
        focuszoneProps: { direction: _FocusZone__WEBPACK_IMPORTED_MODULE_10__.FocusZoneDirection.Vertical },
        initialPageCount: 3,
        maxHeight: 100000,
        pageSize: 10,
        singleClickActivation: false,
        selectRowOnClick: true,
        virtualize: true
    };
    return DropdownList;
}(react__WEBPACK_IMPORTED_MODULE_6__.Component));

function DropdownListItem(props) {
    var onFocus = function (event) {
        props.details.onFocusItem(props.index, event);
    };
    var children = props.children, details = props.details, index = props.index, linkProps = props.linkProps, itemId = props.itemId, tabIndex = props.tabIndex;
    var selectableText = details.selectableText, ariaBusy = details.ariaBusy, ariaDescribedBy = details.ariaDescribedBy, ariaLabel = details.ariaLabel, ariaPosInSet = details.ariaPosInSet, ariaSetSize = details.ariaSetSize, excludeFocusZone = details.excludeFocusZone;
    var _a = details.listProps, selection = _a.selection, singleClickActivation = _a.singleClickActivation;
    return (react__WEBPACK_IMPORTED_MODULE_6__.createElement(_FocusWithin__WEBPACK_IMPORTED_MODULE_9__.FocusWithin, { onFocus: onFocus }, function (focusStatus) { return (react__WEBPACK_IMPORTED_MODULE_6__.createElement(_FocusZone__WEBPACK_IMPORTED_MODULE_10__.FocusZoneContext.Consumer, null, function (rowContext) {
        var rowProps = {
            "aria-busy": ariaBusy,
            "aria-describedby": ariaDescribedBy,
            "aria-label": ariaLabel,
            "aria-posinset": ariaPosInSet === undefined ? index + 1 : ariaPosInSet === null ? undefined : ariaPosInSet,
            "aria-selected": selection && selection.selected(index),
            "aria-setsize": ariaSetSize === undefined
                ? props.details.listProps.itemProvider.length
                : ariaSetSize === null
                    ? undefined
                    : ariaSetSize,
            className: (0,_Util__WEBPACK_IMPORTED_MODULE_15__.css)(props.className, "bolt-list-row", index === 0 && "first-row", linkProps && "bolt-link", selection && selection.selected(index) && "selected", focusStatus.hasFocus && "focused", singleClickActivation && "single-click-activation", selectableText && "selectable-text"),
            "data-focuszone": excludeFocusZone || (selection && !selection.selectable(index)) ? undefined : rowContext.focuszoneId,
            "data-row-index": index,
            "data-itemid": itemId,
            tabIndex: tabIndex !== null && tabIndex !== void 0 ? tabIndex : (0,_Utilities_Focus__WEBPACK_IMPORTED_MODULE_18__.getTabIndex)(details),
            onBlur: focusStatus.onBlur,
            onFocus: focusStatus.onFocus,
            role: selection ? "option" : "listitem"
        };
        return (react__WEBPACK_IMPORTED_MODULE_6__.createElement(_FocusZone__WEBPACK_IMPORTED_MODULE_10__.FocusZone, { direction: _FocusZone__WEBPACK_IMPORTED_MODULE_10__.FocusZoneDirection.Horizontal }, linkProps ? (react__WEBPACK_IMPORTED_MODULE_6__.createElement("a", (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, (0,_Link__WEBPACK_IMPORTED_MODULE_12__.getDefaultLinkProps)(linkProps), rowProps),
            react__WEBPACK_IMPORTED_MODULE_6__.createElement("div", { className: "bolt-list-cell", "data-column-index": 0 },
                react__WEBPACK_IMPORTED_MODULE_6__.createElement("div", { className: "bolt-list-cell-content flex-row" }, children)))) : (react__WEBPACK_IMPORTED_MODULE_6__.createElement("li", (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, rowProps),
            react__WEBPACK_IMPORTED_MODULE_6__.createElement("span", { className: "bolt-list-cell", "data-column-index": 0 },
                react__WEBPACK_IMPORTED_MODULE_6__.createElement("div", { className: "bolt-list-cell-content flex-row" }, children))))));
    })); }));
}
function getAttributeAsNumber(element, attributeName) {
    var attributeValue = element.getAttribute(attributeName);
    if (attributeValue) {
        return parseInt(attributeValue, 10);
    }
    return -1;
}
function cellFromElement(element) {
    var attributeValue;
    var cellIndex = -1;
    var rowIndex = -1;
    var cellElement = null;
    while (element) {
        attributeValue = getAttributeAsNumber(element, "data-column-index");
        if (attributeValue !== -1) {
            cellIndex = attributeValue;
            cellElement = element;
        }
        attributeValue = getAttributeAsNumber(element, "data-row-index");
        if (attributeValue !== -1) {
            rowIndex = attributeValue;
            break;
        }
        // We have hit the root of the details list, dont look above this.
        if (element.classList.contains("bolt-list")) {
            element = null;
            break;
        }
        element = element.parentElement;
    }
    return {
        cellElement: cellElement,
        cellIndex: cellIndex,
        rowElement: element,
        rowIndex: rowIndex
    };
}
function cellFromEvent(event) {
    return cellFromElement(event.target);
}


/***/ }),

/***/ "./node_modules/azure-devops-ui/Components/List/FixedHeightList.Props.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/azure-devops-ui/Components/List/FixedHeightList.Props.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "./node_modules/azure-devops-ui/Components/List/FixedHeightList.js":
/*!*************************************************************************!*\
  !*** ./node_modules/azure-devops-ui/Components/List/FixedHeightList.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   FixedHeightList: () => (/* binding */ FixedHeightList),
/* harmony export */   rowFromElement: () => (/* binding */ rowFromElement),
/* harmony export */   rowFromEvent: () => (/* binding */ rowFromEvent)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var _CommonImports__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../CommonImports */ "./node_modules/azure-devops-ui/CommonImports.js");
/* harmony import */ var _Core_core_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../Core/core.css */ "./node_modules/azure-devops-ui/Core/core.css");
/* harmony import */ var _DropdownList_css__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./DropdownList.css */ "./node_modules/azure-devops-ui/Components/List/DropdownList.css");
/* harmony import */ var _List_css__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./List.css */ "./node_modules/azure-devops-ui/Components/List/List.css");
/* harmony import */ var _ListDropIndicator_css__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./ListDropIndicator.css */ "./node_modules/azure-devops-ui/Components/List/ListDropIndicator.css");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _Core_Observable__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../Core/Observable */ "./node_modules/azure-devops-ui/Core/Observable.js");
/* harmony import */ var _FocusWithin__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../FocusWithin */ "./node_modules/azure-devops-ui/FocusWithin.js");
/* harmony import */ var _FocusZone__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../FocusZone */ "./node_modules/azure-devops-ui/FocusZone.js");
/* harmony import */ var _Intersection__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../Intersection */ "./node_modules/azure-devops-ui/Intersection.js");
/* harmony import */ var _Observer__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../Observer */ "./node_modules/azure-devops-ui/Observer.js");
/* harmony import */ var _Util__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../Util */ "./node_modules/azure-devops-ui/Util.js");
/* harmony import */ var _Utilities_Dispatch__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../Utilities/Dispatch */ "./node_modules/azure-devops-ui/Utilities/Dispatch.js");














/**
 * The FixedHeightList component is used to render a collection of items with a series of rows.
 */
var FixedHeightList = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(FixedHeightList, _super);
    function FixedHeightList(props) {
        var _this = _super.call(this, props) || this;
        // Manage data about pages, including their spacers.
        _this.intersectionElements = {};
        // Track the table element used to render the rows.
        _this.bodyElement = react__WEBPACK_IMPORTED_MODULE_6__.createRef();
        _this.listElement = react__WEBPACK_IMPORTED_MODULE_6__.createRef();
        _this.scrollToIndex = -1;
        _this.scrollToOptions = undefined;
        // Focus/Selection management members.
        _this.selectOnFocus = true;
        _this.focusIndex = new _Core_Observable__WEBPACK_IMPORTED_MODULE_7__.ObservableValue(-1);
        _this.pivotIndex = -1;
        _this.onBlur = function () {
            _this.focusIndex.value = -1;
        };
        _this.onClick = function (event) {
            _this.onDispatch(event);
            if (!event.defaultPrevented) {
                if (_this.listElement.current) {
                    var _a = rowFromEvent(event), cellElement = _a.cellElement, rowIndex = _a.rowIndex;
                    if (!cellElement) {
                        var item = _Core_Observable__WEBPACK_IMPORTED_MODULE_7__.ObservableLike.getValue(_this.state.rows[rowIndex]);
                        if (rowIndex >= 0 && item) {
                            var listRow = { data: item, index: rowIndex };
                            // Even for singleClickActivation we fire the selection before activation.
                            if (_this.props.selectRowOnClick) {
                                _this.processSelectionEvent(event, listRow);
                            }
                            // For singleClickActivation we want the activation as well.
                            if (_this.props.singleClickActivation) {
                                _this.rowActivated(event, listRow);
                            }
                        }
                    }
                }
            }
        };
        _this.onDispatch = function (event) {
            _this.state.eventDispatch.dispatchEvent(event);
        };
        _this.onDoubleClick = function (event) {
            _this.onDispatch(event);
            if (!event.defaultPrevented && !_this.props.singleClickActivation) {
                var rowIndex = rowFromEvent(event).rowIndex;
                var item = _Core_Observable__WEBPACK_IMPORTED_MODULE_7__.ObservableLike.getValue(_this.state.rows[rowIndex]);
                if (rowIndex >= 0 && item) {
                    _this.rowActivated(event, { data: item, index: rowIndex });
                }
            }
        };
        _this.onFocusBody = function (event) {
            // The first time the list gets focus we need to select initial row if we are performing
            // selection of focus.
            if (_this.selectOnFocus) {
                var selection = _this.props.selection;
                if (!selection || selection.selectOnFocus) {
                    var rowIndex = _this.focusIndex.value;
                    if (rowIndex >= 0) {
                        var item = _Core_Observable__WEBPACK_IMPORTED_MODULE_7__.ObservableLike.getValue(_this.state.rows[rowIndex]);
                        if (item) {
                            _this.processSelectionEvent(event, { data: item, index: rowIndex });
                        }
                    }
                }
                _this.selectOnFocus = false;
            }
        };
        _this.onFocusItem = function (rowIndex, event) {
            var focusIndex = _this.focusIndex;
            if (focusIndex.value !== rowIndex) {
                _this.focusRow(rowIndex, 2);
                // We need to re-render the previously focused row and newly focused row so we will
                // clear the cached values.
                if (focusIndex.value >= 0) {
                    delete _this.state.renderedRows[focusIndex.value];
                }
                else if (_this.props.defaultTabbableRow !== undefined) {
                    // If there was a tabble row that was not the focusIndex.value row we need to update this
                    // row as well to get it re-rendered without the tabIndex.
                    delete _this.state.renderedRows[_this.props.defaultTabbableRow];
                }
                delete _this.state.renderedRows[rowIndex];
                _this.focusIndex.value = rowIndex;
                var item = _Core_Observable__WEBPACK_IMPORTED_MODULE_7__.ObservableLike.getValue(_this.state.rows[rowIndex]);
                if (item) {
                    _this.rowFocused(event, { data: item, index: rowIndex });
                }
            }
        };
        _this.onKeyDown = function (event) {
            _this.onDispatch(event);
            if (!event.defaultPrevented) {
                var nodeName = event.target.nodeName;
                if (nodeName === "INPUT" || nodeName === "TEXTAREA") {
                    // Don't handle keyboard events when target is an input
                    return;
                }
                var focusIndex_1 = _this.focusIndex;
                var item_1 = _Core_Observable__WEBPACK_IMPORTED_MODULE_7__.ObservableLike.getValue(_this.state.rows[focusIndex_1.value]);
                if (item_1) {
                    if (event.which === _Util__WEBPACK_IMPORTED_MODULE_12__.KeyCode.enter) {
                        if (focusIndex_1.value >= 0 && !(0,_Util__WEBPACK_IMPORTED_MODULE_12__.eventTargetContainsNode)(event, ["A"])) {
                            _this.rowActivated(event, { data: item_1, index: focusIndex_1.value });
                        }
                    }
                    else if (event.which === _Util__WEBPACK_IMPORTED_MODULE_12__.KeyCode.space) {
                        _this.processSelectionEvent(event, { data: item_1, index: focusIndex_1.value });
                        event.preventDefault();
                    }
                    else if (event.which === _Util__WEBPACK_IMPORTED_MODULE_12__.KeyCode.upArrow || event.which === _Util__WEBPACK_IMPORTED_MODULE_12__.KeyCode.downArrow) {
                        var selection = _this.props.selection;
                        if (!selection || (selection.selectOnFocus && (event.shiftKey || !event.ctrlKey))) {
                            event.persist();
                            // Need to wait for the keyboard event to be processed by the focuszone.
                            window.setTimeout(function () {
                                if (_this.focusIndex.value != focusIndex_1.value) {
                                    _this.processSelectionEvent(event, { data: item_1, index: _this.focusIndex.value });
                                }
                            }, 0);
                        }
                    }
                    else if (event.which === _Util__WEBPACK_IMPORTED_MODULE_12__.KeyCode.pageDown) {
                        _this.focusRow(Math.min(focusIndex_1.value + _this.props.pageSize, _this.state.rowCount - 1), 1);
                        event.preventDefault();
                    }
                    else if (event.which === _Util__WEBPACK_IMPORTED_MODULE_12__.KeyCode.pageUp) {
                        _this.focusRow(Math.max(focusIndex_1.value - _this.props.pageSize, 0), -1);
                        event.preventDefault();
                    }
                    else if (event.which === _Util__WEBPACK_IMPORTED_MODULE_12__.KeyCode.home) {
                        _this.focusRow(0, 1);
                        event.preventDefault();
                    }
                    else if (event.which === _Util__WEBPACK_IMPORTED_MODULE_12__.KeyCode.end) {
                        _this.focusRow(_this.state.rowCount - 1, -1);
                        event.preventDefault();
                    }
                }
            }
        };
        _this.onIntersect = function (entries) {
            var scrollTop = _this.context.root.scrollTop;
            var rowCount = _this.state.rowCount;
            var _a = _this.state, firstMaterialized = _a.firstMaterialized, lastMaterialized = _a.lastMaterialized;
            var _b = _this.state, rowHeight = _b.rowHeight, rowProportion = _b.rowProportion;
            // Don't process an intersection while scroll event is pending.
            if (scrollTop !== _this.state.scrollTop && entries.length) {
                return;
            }
            // Ignore events if we dont have a our basic elements resolved (this should never happen).
            if (!_this.listElement.current || !_this.bodyElement.current) {
                return;
            }
            // Determine the location of the intersection within the page. This is the element
            // we are scrolling within.
            var intersectionRect = _this.context.root.getBoundingClientRect();
            var scrollTopRect = Math.max(0, scrollTop + _this.context.root.offsetTop - _this.listElement.current.offsetTop);
            // Track the first and last row elements for adjusting the range.
            var firstMaterializedUpdated = Math.max(0, Math.min(rowCount - 1, Math.floor(scrollTopRect / (rowHeight * rowProportion))));
            var lastMaterializedUpdated = Math.min(rowCount - 1, firstMaterializedUpdated + Math.ceil(intersectionRect.height / rowHeight));
            if (scrollTopRect + (lastMaterializedUpdated - firstMaterializedUpdated) * rowHeight > _this.state.maxHeight) {
                lastMaterializedUpdated = rowCount - 1;
                firstMaterializedUpdated = Math.max(0, lastMaterializedUpdated - Math.ceil(intersectionRect.height / rowHeight));
            }
            // Update our state if and only if something has changed.
            if (firstMaterializedUpdated !== firstMaterialized ||
                lastMaterializedUpdated !== lastMaterialized ||
                rowHeight !== _this.state.rowHeight ||
                scrollTop !== _this.state.scrollTop ||
                scrollTopRect !== _this.state.scrollTopRect) {
                //
                // @TODO: We need to unload data for pages that are no longer rendererd.
                // This means not in the viewport or within any other rendered range.
                //
                _this.setState({
                    firstMaterialized: firstMaterializedUpdated,
                    lastMaterialized: lastMaterializedUpdated,
                    rowHeight: rowHeight,
                    scrollTop: scrollTop,
                    scrollTopRect: scrollTopRect
                });
            }
        };
        _this.onMouseDownBody = function (event) {
            // If the table body gets a mousedown, we will never need to fire the selection event when
            // the list gets focus since the mouse event will cause the selection.
            _this.selectOnFocus = false;
        };
        var rowCount = props.itemProvider.length;
        _this.state = {
            eventDispatch: props.eventDispatch || new _Utilities_Dispatch__WEBPACK_IMPORTED_MODULE_13__.EventDispatch(),
            firstMaterialized: 0,
            itemProvider: props.itemProvider,
            lastMaterialized: 0,
            maxHeight: _this.props.maxHeight || 1000000,
            focusRows: {},
            renderedRows: {},
            rowCount: rowCount,
            rowHeight: props.rowHeight || 0,
            rowProportion: props.rowHeight && props.maxHeight ? Math.min(1, props.maxHeight / (props.rowHeight * rowCount)) : 1,
            rows: {},
            scrollTop: 0,
            scrollTopRect: 0
        };
        return _this;
    }
    FixedHeightList.getDerivedStateFromProps = function (props, state) {
        var rowCount = props.itemProvider.length;
        var firstMaterialized = state.firstMaterialized;
        var lastMaterialized = state.lastMaterialized;
        if (rowCount !== state.rowCount) {
            firstMaterialized = Math.max(0, Math.min(state.firstMaterialized, rowCount));
            lastMaterialized = Math.max(firstMaterialized, Math.min(state.lastMaterialized + (state.lastMaterialized === state.rowCount - 1 ? props.pageSize : 0), rowCount - 1));
        }
        // Ensure out pages and providers are appropriately computed.
        var updatedState = {
            firstMaterialized: firstMaterialized,
            itemProvider: props.itemProvider,
            lastMaterialized: lastMaterialized,
            rowCount: rowCount,
            rowProportion: Math.min(1, state.maxHeight / (state.rowHeight * rowCount))
        };
        // If there are changes to the props that affect the cached data, we need it clear it.
        if (props.itemProvider !== state.itemProvider) {
            updatedState.renderedRows = {};
            updatedState.rows = {};
        }
        return updatedState;
    };
    FixedHeightList.prototype.getListRole = function () {
        return this.props.role ? this.props.role : this.props.selection ? "listbox" : "list";
    };
    FixedHeightList.prototype.getItemRole = function () {
        switch (this.getListRole()) {
            case "tree":
            case "group":
                return "treeitem";
            case "list":
                return "listitem";
            case "listbox":
                return "option";
            case "radiogroup":
                return "radio";
            default:
                return null;
        }
    };
    FixedHeightList.prototype.render = function () {
        var _this = this;
        var _a = this.props, className = _a.className, focuszoneProps = _a.focuszoneProps, id = _a.id, width = _a.width;
        var _b = this.state, firstMaterialized = _b.firstMaterialized, lastMaterialized = _b.lastMaterialized, maxHeight = _b.maxHeight, rowCount = _b.rowCount, rowHeight = _b.rowHeight;
        var role = this.getListRole();
        var rows = [];
        var firstFocusRow = Math.max(0, this.focusIndex.value - 3);
        var lastFocusRow = Math.min(rowCount, this.focusIndex.value + 3);
        rows.push(this.renderIntersectionBounds(true));
        // Add focus rows around rendered rows.
        if (this.focusIndex.value !== -1 && firstFocusRow < firstMaterialized) {
            for (var rowIndex = firstFocusRow; rowIndex <= Math.min(lastFocusRow, firstMaterialized - 1); rowIndex++) {
                rows.push(this.renderRow(rowIndex, false));
            }
        }
        for (var rowIndex = firstMaterialized; rowIndex <= lastMaterialized; rowIndex++) {
            rows.push(this.renderRow(rowIndex, true));
        }
        if (this.focusIndex.value !== -1 && lastFocusRow > lastMaterialized && lastMaterialized > 0) {
            for (var rowIndex = Math.max(firstFocusRow, lastMaterialized + 1); rowIndex <= lastFocusRow; rowIndex++) {
                rows.push(this.renderRow(rowIndex, false));
            }
        }
        rows.push(this.renderIntersectionBounds(false));
        var height = Math.min(maxHeight, rowHeight * this.state.rowCount);
        var list = (react__WEBPACK_IMPORTED_MODULE_6__.createElement("div", { "aria-label": this.props.ariaLabel, className: (0,_Util__WEBPACK_IMPORTED_MODULE_12__.css)(className, "bolt-fixed-height-list relative"), id: (0,_Util__WEBPACK_IMPORTED_MODULE_12__.getSafeId)(id), onBlur: this.onBlur, onClick: this.onClick, onDoubleClick: this.onDoubleClick, onDragEnd: this.onDispatch, onDragEnter: this.onDispatch, onDragExit: this.onDispatch, onDragOver: this.onDispatch, onDragStart: this.onDispatch, onDrop: this.onDispatch, onKeyUp: this.onDispatch, onMouseDown: this.onDispatch, onTouchStart: this.onDispatch, ref: this.listElement, role: role, style: { width: width, height: height } },
            react__WEBPACK_IMPORTED_MODULE_6__.createElement("div", { className: "relative", onFocus: this.onFocusBody, onKeyDown: this.onKeyDown, onMouseDown: this.onMouseDownBody, ref: this.bodyElement, style: { width: width, height: height } }, rows)));
        list = (react__WEBPACK_IMPORTED_MODULE_6__.createElement(_FocusZone__WEBPACK_IMPORTED_MODULE_9__.FocusZone, (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({ direction: _FocusZone__WEBPACK_IMPORTED_MODULE_9__.FocusZoneDirection.Vertical, skipHiddenCheck: true }, focuszoneProps), list));
        return (react__WEBPACK_IMPORTED_MODULE_6__.createElement(_Observer__WEBPACK_IMPORTED_MODULE_11__.Observer, { itemProvider: {
                // Supply an IObservableExpression to elevate the provider change to a state
                // update for the entire component instead of just the observer.
                filter: function (change, action) {
                    // Notify the selection about the change to the items.
                    if (_this.props.selection) {
                        _this.props.selection.onItemsChanged(change, action);
                    }
                    // @NOTE: For now we will just wipe out the entire cache, we can do an optimized
                    // update to the cache based on the rows that changed.
                    var updatedState = {
                        renderedRows: {},
                        focusRows: {},
                        rows: {}
                    };
                    // If their is a well defined rowcount we will update it and the maxPage.
                    if (_this.state.rowCount !== -1) {
                        var countChange = (change.addedItems ? change.addedItems.length : 0) - (change.removedItems ? change.removedItems.length : 0);
                        if (countChange) {
                            updatedState.rowCount = _this.state.rowCount + countChange;
                            updatedState.firstMaterialized = Math.max(0, Math.min(_this.state.firstMaterialized, updatedState.rowCount - 1));
                            updatedState.lastMaterialized = Math.max(updatedState.firstMaterialized, Math.min(_this.state.lastMaterialized +
                                (change.index >= _this.state.firstMaterialized && change.index <= _this.state.lastMaterialized + 1
                                    ? countChange
                                    : 0), updatedState.rowCount - 1));
                        }
                    }
                    _this.setState(updatedState);
                    return false;
                },
                observableValue: this.props.itemProvider
            } }, function () { return list; }));
    };
    FixedHeightList.prototype.componentDidMount = function () {
        this.onIntersect([]);
        this.context.register(this.onIntersect);
    };
    FixedHeightList.prototype.componentDidUpdate = function (prevProps, prevState) {
        var _a = this, scrollToIndex = _a.scrollToIndex, onScrollComplete = _a.onScrollComplete;
        if (this.state.rowCount !== prevState.rowCount) {
            this.onIntersect([]);
        }
        if (scrollToIndex !== -1 && this.state.rowHeight) {
            var parentElement = this.bodyElement.current;
            var _b = this.state, firstMaterialized = _b.firstMaterialized, lastMaterialized = _b.lastMaterialized;
            // If the row is materialized, we will ensure it is in the viewport.
            if (scrollToIndex >= firstMaterialized && scrollToIndex <= lastMaterialized && parentElement) {
                for (var currentIndex = 0; currentIndex < parentElement.children.length; currentIndex++) {
                    var childElement = parentElement.children[currentIndex];
                    var cellDetails = rowFromElement(childElement);
                    if (cellDetails.rowIndex === scrollToIndex) {
                        childElement.scrollIntoView(this.scrollToOptions);
                        break;
                    }
                }
            }
            // Reset the scroll state before we notify the complete function, it may start a new scroll operation.
            this.onScrollComplete = undefined;
            this.scrollToIndex = -1;
            this.scrollToOptions = undefined;
            // Notify any pending scrollComplete method that scrolling has completed.
            if (onScrollComplete) {
                onScrollComplete(scrollToIndex);
            }
        }
    };
    FixedHeightList.prototype.componentWillUnmount = function () {
        this.context.unregister(this.onIntersect);
    };
    FixedHeightList.prototype.getFocusIndex = function () {
        return this.focusIndex.value;
    };
    FixedHeightList.prototype.getStats = function () {
        return {
            firstMaterialized: this.state.firstMaterialized,
            lastMaterialized: this.state.lastMaterialized
        };
    };
    FixedHeightList.prototype.scrollIntoView = function (rowIndex, options, onScrollComplete) {
        var pageSize = this.props.pageSize;
        var _a = this.state, firstMaterialized = _a.firstMaterialized, lastMaterialized = _a.lastMaterialized, rowCount = _a.rowCount;
        if (rowIndex >= 0 && rowIndex < this.state.rowCount) {
            var parentElement = this.bodyElement.current;
            // If the row is materialized, we will ensure it is in the viewport.
            if (rowIndex >= firstMaterialized && rowIndex <= lastMaterialized && parentElement) {
                for (var currentIndex = 0; currentIndex < parentElement.children.length; currentIndex++) {
                    var childElement = parentElement.children[currentIndex];
                    var cellDetails = rowFromElement(childElement);
                    if (cellDetails.rowIndex === rowIndex) {
                        childElement.scrollIntoView(options);
                        break;
                    }
                }
                // If the caller wants to know when the scroll has completed, notify them.
                if (onScrollComplete) {
                    onScrollComplete(rowIndex);
                }
            }
            else {
                // We only notify the last caller for now, if someone was waiting and another
                // scroll request was made we will send -1 as the rowIndex scrolled into view.
                if (this.onScrollComplete) {
                    this.onScrollComplete(-1);
                }
                // Set the scrollToOptions that will be applied after the next update.
                this.onScrollComplete = onScrollComplete;
                this.scrollToIndex = rowIndex;
                this.scrollToOptions = options;
                // If we havent computed the rowHeight at this point we need to wait until
                // we know how big rows are to get the row in the right location.
                this.setState({
                    firstMaterialized: Math.max(0, rowIndex - Math.floor((lastMaterialized - firstMaterialized) / 2)),
                    lastMaterialized: Math.min(rowCount - 1, Math.ceil(rowIndex + (lastMaterialized - firstMaterialized) / 2))
                });
            }
        }
    };
    FixedHeightList.prototype.focusRow = function (rowIndex, direction) {
        var _this = this;
        this.scrollIntoView(rowIndex, { block: "nearest" }, function (completedIndex) {
            if (completedIndex === rowIndex && _this.bodyElement.current) {
                var rowElement = _this.bodyElement.current.querySelector("[data-row-index='" + completedIndex + "']");
                if (rowElement) {
                    // We need to ensure the requested row is focusable, if not we will move in the
                    // requested direction to find the first focusable row.
                    if (!rowElement.getAttribute("tabindex")) {
                        var newIndex = Math.min(_this.state.rowCount - 1, Math.max(0, completedIndex + direction));
                        if (newIndex !== completedIndex) {
                            _this.focusRow(newIndex, direction);
                        }
                        else if (newIndex !== _this.focusIndex.value) {
                            _this.focusRow(newIndex, -direction);
                        }
                    }
                    else {
                        // Set focus to the row that scroll to
                        rowElement.focus();
                    }
                }
            }
        });
    };
    FixedHeightList.prototype.processSelectionEvent = function (event, listRow) {
        var selection = this.props.selection;
        if (!selection || selection.selectable(listRow.index)) {
            var initialState = false;
            var targetState = true;
            if (selection) {
                var index = listRow.index;
                // If a selection is available use it to track the initial state.
                initialState = selection.selected(index);
                // Determine the type of change being made to the selection based on key states.
                if (this.pivotIndex >= 0 && event.shiftKey && selection.multiSelect) {
                    selection.select(Math.min(this.pivotIndex, index), Math.abs(this.pivotIndex - index) + 1, event.ctrlKey || event.metaKey);
                }
                else {
                    if ((event.ctrlKey || event.metaKey || selection.alwaysMerge) && selection.multiSelect) {
                        selection.toggle(index, true);
                        targetState = false;
                    }
                    else {
                        selection.select(index, 1, false);
                    }
                }
                // Save the last selectionIndex that we selected, this will allow
                // us to perform range based selection.
                if (!event.shiftKey) {
                    this.pivotIndex = index;
                }
            }
            if (initialState !== targetState) {
                this.rowSelected(event, listRow);
            }
        }
    };
    FixedHeightList.prototype.renderLoadingRow = function (rowIndex, details) {
        return (react__WEBPACK_IMPORTED_MODULE_6__.createElement("div", { className: "bolt-list-row-loading" },
            react__WEBPACK_IMPORTED_MODULE_6__.createElement("div", { className: "shimmer shimmer-line", style: { width: Math.random() * 80 + 20 + "%" } }, "\u00A0")));
    };
    FixedHeightList.prototype.renderIntersectionBounds = function (top) {
        var _this = this;
        var _a = this.state, firstMaterialized = _a.firstMaterialized, lastMaterialized = _a.lastMaterialized, rowHeight = _a.rowHeight, rowProportion = _a.rowProportion;
        var key = top ? "topobserv" : "bottomobserv";
        var rowTop = 0;
        // If we run out of room move from the bottom up. This can happen with proportionally allocated rows
        if (firstMaterialized * rowHeight * rowProportion + (lastMaterialized - firstMaterialized) * rowHeight > this.state.maxHeight) {
            if (top) {
                rowTop = this.state.maxHeight;
                rowTop -= (lastMaterialized - firstMaterialized) * rowHeight * rowProportion + rowHeight;
                rowTop--;
            }
            else {
                rowTop = this.state.maxHeight - 1;
            }
        }
        else {
            if (top) {
                rowTop = firstMaterialized * rowHeight * rowProportion - 1;
            }
            else {
                rowTop = firstMaterialized * rowHeight * rowProportion + (1 + lastMaterialized - firstMaterialized) * rowHeight + 1;
            }
        }
        return (react__WEBPACK_IMPORTED_MODULE_6__.createElement("div", { className: "bolt-list-row-spacer invisible absolute", key: key, ref: function (spacerElement) {
                var existingElement = _this.intersectionElements[key];
                if (spacerElement) {
                    if (existingElement !== spacerElement) {
                        if (existingElement) {
                            _this.context.unobserve(spacerElement);
                        }
                        _this.context.observe(spacerElement);
                        _this.intersectionElements[key] = spacerElement;
                    }
                }
                else if (existingElement) {
                    _this.context.unobserve(existingElement);
                    delete _this.intersectionElements[key];
                }
            }, role: "presentation", style: { top: "".concat(rowTop, "px"), height: "1px" } }));
    };
    FixedHeightList.prototype.renderRow = function (rowIndex, isVisible) {
        var _this = this;
        var itemProvider = this.props.itemProvider;
        var _a = this.state, focusRows = _a.focusRows, renderedRows = _a.renderedRows, firstMaterialized = _a.firstMaterialized, lastMaterialized = _a.lastMaterialized, rowHeight = _a.rowHeight, rowProportion = _a.rowProportion, rows = _a.rows;
        var role = this.getItemRole();
        var renderedRow = isVisible ? renderedRows[rowIndex] : focusRows[rowIndex];
        // We can't use the cache for proportioned rows since the top is different based on what the firstMaterialized value is
        if (!renderedRow || rowProportion !== 1) {
            var item_2 = rows[rowIndex];
            if (!item_2) {
                if (itemProvider.getItem) {
                    item_2 = itemProvider.getItem(rowIndex);
                }
                else {
                    item_2 = itemProvider.value[rowIndex];
                }
            }
            // @TODO: If there are no more rows, we need to handle an itemProvider with -1 length.
            if (!item_2) {
                return null;
            }
            // Save the current item in the item cache.
            rows[rowIndex] = item_2;
            var selection = this.props.selection;
            var selectionObservable = void 0;
            if (selection) {
                selectionObservable = {
                    observableValue: selection,
                    filter: function (selectedRanges) {
                        for (var _i = 0, selectedRanges_1 = selectedRanges; _i < selectedRanges_1.length; _i++) {
                            var selectionRange = selectedRanges_1[_i];
                            if (rowIndex >= selectionRange.beginIndex && rowIndex <= selectionRange.endIndex) {
                                return true;
                            }
                        }
                        return false;
                    }
                };
            }
            var onFocus_1 = function (event) {
                _this.onFocusItem(rowIndex, event);
            };
            // Render the row, save it in the cache, and add it to the current page.
            renderedRow = (react__WEBPACK_IMPORTED_MODULE_6__.createElement(_Observer__WEBPACK_IMPORTED_MODULE_11__.UncheckedObserver, { item: item_2, key: rowIndex, selection: selectionObservable, focusIndex: this.focusIndex }, function (props) {
                var _a, _b;
                var _c = _this.props, renderRow = _c.renderRow, renderLoadingRow = _c.renderLoadingRow;
                var _d = _this.state, rowHeight = _d.rowHeight, rowCount = _d.rowCount;
                var rowItem = _Core_Observable__WEBPACK_IMPORTED_MODULE_7__.ObservableLike.getValue(item_2);
                var itemDetails = {
                    ariaBusy: !props.item,
                    ariaRowOffset: 1,
                    data: rowItem,
                    eventDispatch: _this.state.eventDispatch,
                    itemProvider: _this.props.itemProvider,
                    listProps: _this.props,
                    onFocusItem: _this.onFocusItem,
                    singleClickActivation: _this.props.onActivate && _this.props.singleClickActivation
                };
                var renderedRow;
                if (props.item) {
                    renderedRow = renderRow(rowIndex, props.item, itemDetails);
                }
                else if (renderLoadingRow) {
                    renderedRow = renderLoadingRow(rowIndex, itemDetails);
                }
                else {
                    renderedRow = _this.renderLoadingRow(rowIndex, itemDetails);
                }
                var rowTop = 0;
                var rowHeightSpace = 0;
                if (rowIndex >= firstMaterialized && rowIndex <= lastMaterialized) {
                    rowHeightSpace = rowHeight;
                }
                // If we run out of room move from the bottom up. This can happen with proportionally allocated rows
                if (firstMaterialized * rowHeight * rowProportion + (lastMaterialized - firstMaterialized) * rowHeight >
                    _this.state.maxHeight) {
                    rowTop = _this.state.maxHeight;
                    rowTop -= (rowCount - lastMaterialized) * rowHeight * rowProportion;
                    rowTop -= (lastMaterialized - rowIndex) * rowHeight;
                }
                else {
                    if (rowHeightSpace === 0) {
                        rowTop = rowIndex * rowHeight * rowProportion;
                    }
                    else {
                        rowTop = firstMaterialized * rowHeight * rowProportion;
                        rowTop += (rowIndex - firstMaterialized) * rowHeight;
                    }
                }
                var rowData = itemDetails === null || itemDetails === void 0 ? void 0 : itemDetails.data;
                var hasChildItems = (_a = rowData === null || rowData === void 0 ? void 0 : rowData.underlyingItem) === null || _a === void 0 ? void 0 : _a.childItems;
                var isExpanded = (_b = rowData === null || rowData === void 0 ? void 0 : rowData.underlyingItem) === null || _b === void 0 ? void 0 : _b.expanded;
                return (react__WEBPACK_IMPORTED_MODULE_6__.createElement(_FocusWithin__WEBPACK_IMPORTED_MODULE_8__.FocusWithin, { onFocus: onFocus_1 }, function (focusStatus) {
                    return (react__WEBPACK_IMPORTED_MODULE_6__.createElement(_FocusZone__WEBPACK_IMPORTED_MODULE_9__.FocusZoneContext.Consumer, null, function (rowContext) {
                        return (react__WEBPACK_IMPORTED_MODULE_6__.createElement(_FocusZone__WEBPACK_IMPORTED_MODULE_9__.FocusZone, { direction: _FocusZone__WEBPACK_IMPORTED_MODULE_9__.FocusZoneDirection.Horizontal },
                            react__WEBPACK_IMPORTED_MODULE_6__.createElement("div", { className: (0,_Util__WEBPACK_IMPORTED_MODULE_12__.css)("bolt-fixed-height-list-row scroll-hidden absolute", _this.focusIndex.value === rowIndex && "focused"), style: {
                                    height: "".concat(rowHeightSpace, "px"),
                                    top: "".concat(rowTop, "px")
                                }, "data-focuszone": rowContext.focuszoneId, "data-row-index": rowIndex, tabIndex: rowIndex == 0 || hasChildItems ? 0 : -1, onBlur: focusStatus.onBlur, onFocus: focusStatus.onFocus, role: role, "aria-expanded": hasChildItems && isExpanded === undefined ? false : isExpanded, "aria-labelledby": "rowContent-".concat(rowIndex) }, renderedRow)));
                    }));
                }));
            }));
            // Save the row in our cache.
            if (isVisible) {
                this.state.renderedRows[rowIndex] = renderedRow;
            }
            else {
                this.state.focusRows[rowIndex] = renderedRow;
            }
        }
        return renderedRow;
    };
    FixedHeightList.prototype.rowActivated = function (event, listRow) {
        this.state.eventDispatch.dispatchEvent(event, listRow, "activate");
        if (this.props.onActivate) {
            this.props.onActivate(event, listRow);
        }
    };
    FixedHeightList.prototype.rowSelected = function (event, listRow) {
        this.state.eventDispatch.dispatchEvent(event, listRow, "select");
        if (this.props.onSelect) {
            this.props.onSelect(event, listRow);
        }
    };
    FixedHeightList.prototype.rowFocused = function (event, listRow) {
        this.state.eventDispatch.dispatchEvent(event, listRow, "focus");
        if (this.props.onFocus) {
            this.props.onFocus(event, listRow);
        }
    };
    FixedHeightList.contextType = _Intersection__WEBPACK_IMPORTED_MODULE_10__.IntersectionContext;
    FixedHeightList.defaultProps = {
        defaultTabbableRow: 0,
        focuszoneProps: { direction: _FocusZone__WEBPACK_IMPORTED_MODULE_9__.FocusZoneDirection.Vertical },
        maxHeight: 1000000
    };
    return FixedHeightList;
}(react__WEBPACK_IMPORTED_MODULE_6__.Component));

function getAttributeAsNumber(element, attributeName) {
    var attributeValue = element.getAttribute(attributeName);
    if (attributeValue) {
        return parseInt(attributeValue, 10);
    }
    return -1;
}
function rowFromElement(element) {
    var attributeValue;
    var cellIndex = -1;
    var rowIndex = -1;
    var cellElement = null;
    while (element) {
        attributeValue = getAttributeAsNumber(element, "data-row-index");
        if (attributeValue !== -1) {
            rowIndex = attributeValue;
            break;
        }
        // We have hit the root of the details list, dont look above this.
        if (element.classList.contains("bolt-fixed-height-list")) {
            element = null;
            break;
        }
        element = element.parentElement;
    }
    return {
        cellElement: cellElement,
        cellIndex: cellIndex,
        rowElement: element,
        rowIndex: rowIndex
    };
}
function rowFromEvent(event) {
    return rowFromElement(event.target);
}


/***/ }),

/***/ "./node_modules/azure-devops-ui/Components/List/List.Props.js":
/*!********************************************************************!*\
  !*** ./node_modules/azure-devops-ui/Components/List/List.Props.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "./node_modules/azure-devops-ui/Components/List/List.css":
/*!***************************************************************!*\
  !*** ./node_modules/azure-devops-ui/Components/List/List.css ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/styleDomAPI.js */ "./node_modules/style-loader/dist/runtime/styleDomAPI.js");
/* harmony import */ var _style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/insertBySelector.js */ "./node_modules/style-loader/dist/runtime/insertBySelector.js");
/* harmony import */ var _style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/setAttributesWithoutAttributes.js */ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js");
/* harmony import */ var _style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/insertStyleElement.js */ "./node_modules/style-loader/dist/runtime/insertStyleElement.js");
/* harmony import */ var _style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/styleTagTransform.js */ "./node_modules/style-loader/dist/runtime/styleTagTransform.js");
/* harmony import */ var _style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _css_loader_dist_cjs_js_List_css__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! !!../../../css-loader/dist/cjs.js!./List.css */ "./node_modules/css-loader/dist/cjs.js!./node_modules/azure-devops-ui/Components/List/List.css");

      
      
      
      
      
      
      
      
      

var options = {};

options.styleTagTransform = (_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default());
options.setAttributes = (_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default());
options.insert = _style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(null, "head");
options.domAPI = (_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default());
options.insertStyleElement = (_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default());

var update = _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_css_loader_dist_cjs_js_List_css__WEBPACK_IMPORTED_MODULE_6__["default"], options);




       /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_css_loader_dist_cjs_js_List_css__WEBPACK_IMPORTED_MODULE_6__["default"] && _css_loader_dist_cjs_js_List_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals ? _css_loader_dist_cjs_js_List_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals : undefined);


/***/ }),

/***/ "./node_modules/azure-devops-ui/Components/List/List.js":
/*!**************************************************************!*\
  !*** ./node_modules/azure-devops-ui/Components/List/List.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   List: () => (/* binding */ List),
/* harmony export */   ListItem: () => (/* binding */ ListItem),
/* harmony export */   ScrollableList: () => (/* binding */ ScrollableList),
/* harmony export */   SimpleList: () => (/* binding */ SimpleList),
/* harmony export */   cellFromElement: () => (/* binding */ cellFromElement),
/* harmony export */   cellFromEvent: () => (/* binding */ cellFromEvent),
/* harmony export */   renderListCell: () => (/* binding */ renderListCell),
/* harmony export */   renderListItem: () => (/* binding */ renderListItem)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var _CommonImports__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../CommonImports */ "./node_modules/azure-devops-ui/CommonImports.js");
/* harmony import */ var _Core_core_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../Core/core.css */ "./node_modules/azure-devops-ui/Core/core.css");
/* harmony import */ var _DropdownList_css__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./DropdownList.css */ "./node_modules/azure-devops-ui/Components/List/DropdownList.css");
/* harmony import */ var _List_css__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./List.css */ "./node_modules/azure-devops-ui/Components/List/List.css");
/* harmony import */ var _ListDropIndicator_css__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./ListDropIndicator.css */ "./node_modules/azure-devops-ui/Components/List/ListDropIndicator.css");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _Core_Observable__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../Core/Observable */ "./node_modules/azure-devops-ui/Core/Observable.js");
/* harmony import */ var _Core_Util_Accessibility__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../Core/Util/Accessibility */ "./node_modules/azure-devops-ui/Core/Util/Accessibility.js");
/* harmony import */ var _FocusWithin__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../FocusWithin */ "./node_modules/azure-devops-ui/FocusWithin.js");
/* harmony import */ var _FocusZone__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../FocusZone */ "./node_modules/azure-devops-ui/FocusZone.js");
/* harmony import */ var _Icon__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../Icon */ "./node_modules/azure-devops-ui/Icon.js");
/* harmony import */ var _Intersection__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../Intersection */ "./node_modules/azure-devops-ui/Intersection.js");
/* harmony import */ var _Link__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../Link */ "./node_modules/azure-devops-ui/Link.js");
/* harmony import */ var _Observer__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../Observer */ "./node_modules/azure-devops-ui/Observer.js");
/* harmony import */ var _Resources_Widgets__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../Resources.Widgets */ "./node_modules/azure-devops-ui/Resources.Widgets.js");
/* harmony import */ var _TooltipEx__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../../TooltipEx */ "./node_modules/azure-devops-ui/TooltipEx.js");
/* harmony import */ var _Util__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../../Util */ "./node_modules/azure-devops-ui/Util.js");
/* harmony import */ var _Utilities_Dispatch__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../../Utilities/Dispatch */ "./node_modules/azure-devops-ui/Utilities/Dispatch.js");
/* harmony import */ var _Utilities_DragDrop__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../../Utilities/DragDrop */ "./node_modules/azure-devops-ui/Utilities/DragDrop.js");
/* harmony import */ var _Utilities_Focus__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../../Utilities/Focus */ "./node_modules/azure-devops-ui/Utilities/Focus.js");





















/**
 * The List component is used to render a collection of items with a series of rows.
 */
var List = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(List, _super);
    function List(props) {
        var _this = _super.call(this, props) || this;
        // Track the table element used to render the rows.
        _this.bodyElement = react__WEBPACK_IMPORTED_MODULE_6__.createRef();
        _this.listElement = react__WEBPACK_IMPORTED_MODULE_6__.createRef();
        // Manage data about pages, including their spacers.
        _this.spacerElements = {};
        _this.scrollToIndex = -1;
        _this.scrollToOptions = undefined;
        // Focus/Selection management members.
        _this.selectOnFocus = true;
        _this.focusIndex = -1;
        _this.pivotIndex = -1;
        _this.onVirtualizeKeyDown = function (e) {
            if (_this.state.virtualize && e.ctrlKey && e.altKey && e.key === "v") {
                var rowCount = _this.props.itemProvider.length;
                _this.setState({ virtualize: false, lastMaterialized: rowCount - 1, lastRendered: rowCount - 1, firstMaterialized: 0, firstRendered: 0 });
                _Core_Util_Accessibility__WEBPACK_IMPORTED_MODULE_8__.announce(_Resources_Widgets__WEBPACK_IMPORTED_MODULE_15__.VirtualizationDisabled);
            }
        };
        _this.onBlur = function () {
            _this.focusIndex = -1;
        };
        _this.onClick = function (event) {
            _this.onDispatch(event);
            if (!event.defaultPrevented && !(event.altKey && _this.props.selectableText)) {
                if (_this.listElement.current) {
                    var _a = cellFromEvent(event), cellElement = _a.cellElement, rowIndex = _a.rowIndex;
                    if (!cellElement || !(0,_Util__WEBPACK_IMPORTED_MODULE_17__.eventTargetContainsNode)(event, ["A"], cellElement)) {
                        var item = _Core_Observable__WEBPACK_IMPORTED_MODULE_7__.ObservableLike.getValue(_this.state.rows[rowIndex]);
                        if (rowIndex >= 0 && item) {
                            var listRow = { data: item, index: rowIndex };
                            // Even for singleClickActivation we fire the selection before activation.
                            if (_this.props.selectRowOnClick) {
                                _this.processSelectionEvent(event, listRow);
                            }
                            // For singleClickActivation we want the activation as well.
                            if (_this.props.singleClickActivation) {
                                _this.rowActivated(event, listRow);
                            }
                        }
                    }
                }
            }
        };
        _this.onDispatch = function (event) {
            _this.state.eventDispatch.dispatchEvent(event);
        };
        _this.onDoubleClick = function (event) {
            _this.onDispatch(event);
            if (!event.defaultPrevented && !_this.props.singleClickActivation) {
                var rowIndex = cellFromEvent(event).rowIndex;
                var item = _Core_Observable__WEBPACK_IMPORTED_MODULE_7__.ObservableLike.getValue(_this.state.rows[rowIndex]);
                if (rowIndex >= 0 && item) {
                    _this.rowActivated(event, { data: item, index: rowIndex });
                }
            }
        };
        _this.onFocusBody = function (event) {
            // The first time the list gets focus we need to select initial row if we are performing
            // selection of focus.
            if (_this.selectOnFocus) {
                var selection = _this.props.selection;
                if (!selection || selection.selectOnFocus) {
                    var rowIndex = _this.focusIndex;
                    if (rowIndex >= 0) {
                        var item = _Core_Observable__WEBPACK_IMPORTED_MODULE_7__.ObservableLike.getValue(_this.state.rows[rowIndex]);
                        if (item) {
                            _this.processSelectionEvent(event, { data: item, index: rowIndex });
                        }
                    }
                }
                _this.selectOnFocus = false;
            }
        };
        _this.onFocusItem = function (rowIndex, event) {
            var focusIndex = _this.focusIndex;
            if (focusIndex !== rowIndex) {
                // We need to re-render the previously focused row and newly focused row so we will
                // clear the cached values.
                if (focusIndex >= 0) {
                    delete _this.state.renderedRows[focusIndex];
                }
                else {
                    // If there was a tabble row that was not the focusIndex row we need to update this
                    // row as well to get it re-rendered without the tabIndex.
                    delete _this.state.renderedRows[_this.getInitialTabbableRow()];
                }
                delete _this.state.renderedRows[rowIndex];
                _this.focusIndex = rowIndex;
                var item = _Core_Observable__WEBPACK_IMPORTED_MODULE_7__.ObservableLike.getValue(_this.state.rows[rowIndex]);
                if (item) {
                    _this.rowFocused(event, { data: item, index: rowIndex });
                }
            }
        };
        _this.onKeyDown = function (event) {
            _this.onDispatch(event);
            if (!event.defaultPrevented) {
                var nodeName = event.target.nodeName;
                if (nodeName === "INPUT" || nodeName === "TEXTAREA") {
                    // Don't handle keyboard events when target is an input
                    return;
                }
                var focusIndex_1 = _this.focusIndex;
                var item = _Core_Observable__WEBPACK_IMPORTED_MODULE_7__.ObservableLike.getValue(_this.state.rows[focusIndex_1]);
                if (item) {
                    if (event.which === _Util__WEBPACK_IMPORTED_MODULE_17__.KeyCode.enter) {
                        if (focusIndex_1 >= 0 && !(0,_Util__WEBPACK_IMPORTED_MODULE_17__.eventTargetContainsNode)(event, ["A"])) {
                            _this.rowActivated(event, { data: item, index: focusIndex_1 });
                        }
                    }
                    else if (event.which === _Util__WEBPACK_IMPORTED_MODULE_17__.KeyCode.space) {
                        _this.processSelectionEvent(event, { data: item, index: focusIndex_1 });
                        event.preventDefault();
                    }
                    else if (event.which === _Util__WEBPACK_IMPORTED_MODULE_17__.KeyCode.upArrow || event.which === _Util__WEBPACK_IMPORTED_MODULE_17__.KeyCode.downArrow) {
                        var selection = _this.props.selection;
                        if (!selection || (selection.selectOnFocus && (event.shiftKey || !event.ctrlKey))) {
                            event.persist();
                            // Need to wait for the keyboard event to be processed by the focuszone.
                            window.setTimeout(function () {
                                if (_this.focusIndex != focusIndex_1) {
                                    var data = _Core_Observable__WEBPACK_IMPORTED_MODULE_7__.ObservableLike.getValue(_this.state.rows[_this.focusIndex]);
                                    if (data) {
                                        _this.processSelectionEvent(event, { data: data, index: _this.focusIndex });
                                    }
                                }
                            }, 0);
                        }
                    }
                    else if (event.which === _Util__WEBPACK_IMPORTED_MODULE_17__.KeyCode.pageDown) {
                        var stats = _this.getStats();
                        _this.focusRow(Math.min(focusIndex_1 + (stats.lastRendered - stats.firstRendered), _this.state.rowCount - 1), 1);
                        event.preventDefault();
                    }
                    else if (event.which === _Util__WEBPACK_IMPORTED_MODULE_17__.KeyCode.pageUp) {
                        var stats = _this.getStats();
                        _this.focusRow(Math.max(focusIndex_1 - (stats.lastRendered - stats.firstRendered), 0), -1);
                        event.preventDefault();
                    }
                    else if (event.which === _Util__WEBPACK_IMPORTED_MODULE_17__.KeyCode.home) {
                        _this.focusRow(0, 1);
                        event.preventDefault();
                    }
                    else if (event.which === _Util__WEBPACK_IMPORTED_MODULE_17__.KeyCode.end) {
                        _this.focusRow(_this.state.rowCount - 1, -1);
                        event.preventDefault();
                    }
                }
            }
        };
        _this.onIntersect = function (entries) {
            // If virtualization is disabled, we will not attempt to adjust the viewport.
            if (!_this.state.virtualize) {
                return;
            }
            var scrollTop = _this.context.root.scrollTop;
            var _a = _this.state, firstRendered = _a.firstRendered, firstMaterialized = _a.firstMaterialized, lastRendered = _a.lastRendered, lastMaterialized = _a.lastMaterialized, rowCount = _a.rowCount, rowProportion = _a.rowProportion;
            var rowHeight = _this.state.rowHeight;
            // console.log({ phase: "onIntersect - Start", firstMaterialized, lastMaterialized, rowHeight });
            // Don't process an intersection while scroll event is pending.
            if (scrollTop !== _this.state.scrollTop && entries.length) {
                // console.log("Don't process an intersection while scroll event is pending.");
                return;
            }
            // Ignore events if we dont have a our basic elements resolved (this should never happen).
            if (!_this.listElement.current || !_this.bodyElement.current) {
                // console.log("Elements not available at this point.");
                return;
            }
            // We are going to enumerate all the children, if the row is in the viewport
            // we will determine if it should be paged out.
            var rowElements = _this.bodyElement.current.children;
            // If a rowHeight was specified we will compute one based on the average rowHeight in the
            // first page rendered.
            if (rowHeight === 0) {
                if (rowElements.length > 0) {
                    var totalHeight = 0;
                    var childCount = 0;
                    // Loop through all children and average the rowHeight's.
                    for (var childIndex = 0; childIndex < rowElements.length; childIndex++) {
                        var child = _this.bodyElement.current.children[childIndex];
                        var childHeight = child.getBoundingClientRect().height;
                        var isSpacer = child.classList.contains("bolt-list-row-spacer");
                        if (childHeight > 0 && !isSpacer) {
                            totalHeight += childHeight;
                            childCount++;
                        }
                    }
                    // Make sure we have at least one child row that has size.
                    if (childCount > 0) {
                        rowHeight = totalHeight / childCount;
                    }
                }
                if (rowHeight === 0) {
                    return;
                }
                // If we have a pending scrollIntoView we will schedule it now that we have the rowHeight
                if (_this.scrollToIndex !== -1) {
                    _this.setState({
                        firstMaterialized: Math.max(0, _this.scrollToIndex - _this.state.pageSize),
                        lastMaterialized: _this.scrollToIndex + Math.min(_this.props.initialPageCount * _this.state.pageSize, rowCount - 1),
                        rowHeight: rowHeight
                    });
                    return;
                }
                // console.log({ phase: "onIntersect - Compute RowHeight", rowHeight });
            }
            // Determine the location of the intersection within the page. This is the element
            // we are scrolling within.
            var intersectionRect = _this.context.root.getBoundingClientRect();
            // Track the first and last row elements for adjusting the range.
            var firstMaterializedElement;
            var lastMaterializedElement;
            var firstMaterializedUpdated = firstMaterialized;
            var lastMaterializedUpdated = lastMaterialized;
            var firstRenderedUpdated = lastMaterializedUpdated;
            var lastRenderedUpdated = firstMaterializedUpdated;
            // Go through the viewport pages and determine if any are out of range and should be
            // paged out. Range is defined as more than 1 page of estimated rows away from the
            // nearest edge. If you dont allow for 1 page of estimated rows it may thrash pages
            // in and out of materialization.
            for (var childIndex = 0; childIndex < rowElements.length; childIndex++) {
                // Determine if this child is in the viewport, ignore rows that are not.
                var rowElement = rowElements[childIndex];
                var rowIndex = getAttributeAsNumber(rowElement, "data-row-index");
                var rowRect = rowElement.getBoundingClientRect();
                if (rowIndex >= firstMaterialized && rowIndex <= lastMaterialized) {
                    // Make sure to leave some extra room above and below the visible rectangle to handle
                    // variable height rows. This helps prevent jittering when paging rows out.
                    if (rowRect.bottom < intersectionRect.top - _this.state.pageSize * (rowProportion * rowHeight)) {
                        firstMaterializedUpdated++;
                    }
                    else if (rowRect.top > intersectionRect.bottom + _this.state.pageSize * (rowProportion * rowHeight)) {
                        lastMaterializedUpdated--;
                    }
                    // We will save the first and last rows for later computations.
                    if (rowIndex === firstMaterialized) {
                        firstMaterializedElement = rowElement;
                    }
                    if (rowIndex === lastMaterialized) {
                        lastMaterializedElement = rowElement;
                    }
                }
                // If the row is within the intersection rect, update the first and last rendered rows. These might be the focused items
                if (rowIndex > -1 && rowRect.top < intersectionRect.bottom && rowRect.bottom > intersectionRect.top) {
                    lastRenderedUpdated = Math.max(lastRenderedUpdated, rowIndex);
                    firstRenderedUpdated = Math.min(firstRenderedUpdated, rowIndex);
                }
            }
            // When we are scaling the size of the list, we want to keep a pageSize worth of elements materiaized but not rendered.
            // This allows users to scroll a few items. If they quickly scroll past the last materialized element or drag the scroll wheel, we recalculate where we should be
            // instead of paging in rows.
            if (rowProportion < 1) {
                if (firstMaterializedUpdated > lastMaterializedUpdated ||
                    firstRenderedUpdated === firstMaterializedUpdated ||
                    lastRenderedUpdated === lastMaterializedUpdated) {
                    if (lastRenderedUpdated >= rowCount - 1) {
                        firstMaterializedUpdated = Math.ceil(lastMaterializedUpdated - (intersectionRect.height / rowHeight + _this.state.pageSize));
                    }
                    else {
                        var offsetTop = scrollTop - (_this.listElement.current.offsetTop - _this.context.root.offsetTop);
                        firstMaterializedUpdated = Math.max(0, Math.min(rowCount - 1, Math.floor(offsetTop / (rowProportion * rowHeight))) - _this.state.pageSize);
                        lastMaterializedUpdated = Math.min(rowCount - 1, firstMaterializedUpdated + Math.ceil(intersectionRect.height / (rowProportion * rowHeight) + _this.state.pageSize - 1));
                        lastRenderedUpdated = -1;
                        firstRenderedUpdated = -1;
                    }
                }
                else {
                    firstMaterializedUpdated = Math.min(firstMaterializedUpdated, firstRenderedUpdated - _this.state.pageSize);
                    //-1 helps to avoid jittering when paging rows out
                    lastMaterializedUpdated = Math.max(lastMaterializedUpdated, lastRenderedUpdated + _this.state.pageSize - 1);
                    lastRenderedUpdated = -1;
                    firstRenderedUpdated = -1;
                }
            }
            // If the row range is inverted (top above bottom) then all rows have been hidden and we should
            // recompute the viewport based on the scrollTop of our intersection and intersection height.
            else if (firstMaterializedUpdated > lastMaterializedUpdated) {
                var offsetTop = scrollTop - (_this.listElement.current.offsetTop - _this.context.root.offsetTop);
                var index = _this.props.rowHeights
                    ? _this.getFirstMaterializedItemBaseOnRowHeights(_this.props.rowHeights, rowHeight, offsetTop)
                    : undefined;
                if (index) {
                    firstMaterializedUpdated = Math.max(0, Math.min(rowCount - 1, index - _this.state.pageSize));
                }
                else {
                    firstMaterializedUpdated = Math.max(0, Math.min(rowCount - 1, Math.floor(offsetTop / rowHeight)) - _this.state.pageSize);
                }
                lastMaterializedUpdated = Math.min(rowCount - 1, firstMaterializedUpdated + Math.ceil(intersectionRect.height / rowHeight + _this.state.pageSize - 1));
                lastRenderedUpdated = -1;
                firstRenderedUpdated = -1;
            }
            else {
                // If the firstPage didn't move down, we may need more pages above.
                if (firstMaterializedUpdated === firstMaterialized && firstMaterializedElement) {
                    var rowRect = firstMaterializedElement.getBoundingClientRect();
                    var availableSpace = rowRect.top - intersectionRect.top;
                    if (availableSpace > 0) {
                        firstMaterializedUpdated -= Math.ceil(availableSpace / rowHeight);
                    }
                }
                // If the lastPage didn't move up, we may need more pages below.
                if (lastMaterializedUpdated === lastMaterialized && lastMaterializedElement) {
                    var rowRect = lastMaterializedElement.getBoundingClientRect();
                    var availableSpace = intersectionRect.bottom - rowRect.bottom;
                    if (availableSpace > 0) {
                        lastMaterializedUpdated += Math.ceil(availableSpace / rowHeight);
                    }
                }
            }
            // Make sure our page boundary stays in the available page range.
            firstMaterializedUpdated = Math.max(firstMaterializedUpdated, 0);
            lastMaterializedUpdated = Math.min(lastMaterializedUpdated, rowCount - 1);
            // console.log({ phase: "onIntersect - End", firstMaterializedUpdated, lastMaterializedUpdated, rowHeight });
            // Update our state if and only if something has changed.
            if (firstMaterializedUpdated !== firstMaterialized ||
                firstRenderedUpdated !== firstRendered ||
                lastMaterializedUpdated !== lastMaterialized ||
                lastRenderedUpdated !== lastRendered ||
                rowHeight !== _this.state.rowHeight ||
                scrollTop !== _this.state.scrollTop) {
                //
                // @TODO: We need to unload data for pages that are no longer rendererd.
                // This means not in the viewport or within any other rendered range.
                //
                // console.log({ phase: "onIntersect - stateChange", firstMaterializedUpdated, firstRenderedUpdated, lastRenderedUpdated, lastMaterializedUpdated, scrollTop });
                _this.setState({
                    firstMaterialized: firstMaterializedUpdated,
                    firstRendered: firstRenderedUpdated,
                    lastMaterialized: lastMaterializedUpdated,
                    lastRendered: lastRenderedUpdated,
                    rowHeight: rowHeight,
                    scrollTop: scrollTop
                });
            }
        };
        _this.onPointerDownBody = function (event) {
            // If the table body gets a mousedown, we will never need to fire the selection event when
            // the list gets focus since the mouse event will cause the selection.
            _this.selectOnFocus = false;
        };
        _this.getInitialTabbableRow = function () {
            var _a = _this.props, defaultTabbableRow = _a.defaultTabbableRow, itemProvider = _a.itemProvider, selection = _a.selection;
            if (defaultTabbableRow) {
                return defaultTabbableRow;
            }
            if (selection) {
                for (var i = 0; i < itemProvider.length; i++) {
                    if (selection.selectable(i)) {
                        return i;
                    }
                }
            }
            return 0;
        };
        _this.getHeight = function (rowIndex, countFromBottom) {
            var height = 0;
            var rowHeights = _this.props.rowHeights || [];
            var start = countFromBottom ? _this.state.rowCount - rowIndex : 0;
            var end = countFromBottom ? _this.state.rowCount : rowIndex;
            for (var i = start; i < end; i++) {
                height += rowHeights[i] || _this.state.rowHeight;
            }
            return height;
        };
        var rowCount = props.itemProvider.length;
        var pageSize = props.pageSize;
        _this.state = {
            columnCount: 1,
            eventDispatch: props.eventDispatch || new _Utilities_Dispatch__WEBPACK_IMPORTED_MODULE_18__.EventDispatch(),
            firstMaterialized: 0,
            firstRendered: 0,
            itemProvider: props.itemProvider,
            lastMaterialized: _this.props.virtualize ? Math.min(props.initialPageCount * pageSize, rowCount - 1) : rowCount - 1,
            lastRendered: _this.props.virtualize ? Math.min(props.initialPageCount * pageSize, rowCount - 1) : rowCount - 1,
            overlays: new _Core_Observable__WEBPACK_IMPORTED_MODULE_7__.ObservableArray(),
            pageSize: pageSize,
            renderedRows: {},
            rowCount: rowCount,
            rowHeight: props.rowHeight || 0,
            rowProportion: props.rowHeight && props.maxHeight ? Math.min(1, props.maxHeight / (props.rowHeight * rowCount)) : 1,
            rows: {},
            scrollTop: 0,
            virtualize: !!props.virtualize
        };
        // Initialize the supplied behaviors.
        if (props.behaviors) {
            for (var _i = 0, _a = props.behaviors; _i < _a.length; _i++) {
                var behavior = _a[_i];
                if (behavior.initialize) {
                    behavior.initialize(props, _this, _this.state.eventDispatch);
                }
            }
        }
        return _this;
    }
    List.getDerivedStateFromProps = function (props, state) {
        var rowCount = props.itemProvider.length;
        var firstMaterialized = state.firstMaterialized;
        var lastMaterialized = state.lastMaterialized;
        if (rowCount !== state.rowCount) {
            firstMaterialized = Math.max(0, Math.min(state.firstMaterialized, rowCount));
            lastMaterialized = state.virtualize
                ? Math.max(firstMaterialized, Math.min(state.lastMaterialized +
                    (state.lastMaterialized === state.rowCount - 1 || state.lastMaterialized === state.rowCount ? props.pageSize : 0), rowCount - 1))
                : rowCount - 1;
        }
        // Ensure out pages and providers are appropriately computed.
        var updatedState = {
            firstMaterialized: firstMaterialized,
            itemProvider: props.itemProvider,
            lastMaterialized: lastMaterialized,
            pageSize: props.pageSize,
            rowCount: rowCount,
            rowProportion: Math.min(1, (props.maxHeight || 100000) / (state.rowHeight * (rowCount - (lastMaterialized - firstMaterialized))))
        };
        // If there are changes to the props that affect the cached data, we need it clear it.
        if (props.itemProvider !== state.itemProvider || props.columnCount !== state.columnCount) {
            updatedState.columnCount = props.columnCount;
            updatedState.renderedRows = {};
            updatedState.rows = {};
        }
        // console.log(updatedState);
        return updatedState;
    };
    List.prototype.render = function () {
        var _this = this;
        var _a = this.props, ariaRowOffset = _a.ariaRowOffset, className = _a.className, focuszoneProps = _a.focuszoneProps, id = _a.id, maxWidth = _a.maxWidth, minWidth = _a.minWidth, width = _a.width;
        var _b = this.state, firstMaterialized = _b.firstMaterialized, lastMaterialized = _b.lastMaterialized, rowCount = _b.rowCount, rowProportion = _b.rowProportion;
        var focusIndex = this.focusIndex;
        var role = this.props.role ? this.props.role : this.props.selection ? "listbox" : "list";
        var useAriaCounts = role === "table" || role === "grid" || role === "treegrid";
        var rows = [];
        // Number of pages each spacer takes up. There are potentially two spacers above
        // or below the view port. They surround the focus range when the focus range is
        // not within the viewport.
        var topSpacer1 = 0;
        var topSpacer2 = firstMaterialized;
        var bottomSpacer2 = Math.max(0, rowCount - lastMaterialized - 1);
        var bottomSpacer1 = 0;
        var firstFocusRow = Number.MAX_SAFE_INTEGER;
        var lastFocusRow = 0;
        // Compute the range of focus pages, these will be either before or after the pages
        // in the viewport. We need to ensure we have one row before and one row after the
        // focus row to support arrowing up and down.
        if (focusIndex !== -1) {
            firstFocusRow = Math.max(0, focusIndex - 3);
            lastFocusRow = Math.min(rowCount, focusIndex + 3);
            // Make sure we dont draw any of the pages that are in the viewport.
            if (firstFocusRow < firstMaterialized) {
                lastFocusRow = Math.min(lastFocusRow, firstMaterialized - 1);
                topSpacer1 = firstFocusRow;
                topSpacer2 = firstMaterialized - lastFocusRow - 1;
            }
            else if (lastFocusRow > lastMaterialized) {
                firstFocusRow = Math.max(firstFocusRow, lastMaterialized + 1);
                bottomSpacer2 = firstFocusRow - lastMaterialized - 1;
                bottomSpacer1 = Math.max(0, rowCount - lastFocusRow - 1);
            }
        }
        if (rowProportion < 1) {
            // Ensure that the spacers leave room for 1 pageSize above the viewport
            topSpacer2 += Math.min(this.state.pageSize, firstMaterialized);
        }
        // console.log({ phase: "render", firstMaterialized, lastMaterialized, topSpacer1, topSpacer2, bottomSpacer2, bottomSpacer1 });
        rows.push(this.renderSpacer("st1", topSpacer1));
        // If the focus pages are before the viewport render them up to
        // the first page but not including the first page.
        if (firstFocusRow < firstMaterialized) {
            for (var rowIndex = firstFocusRow; rowIndex <= lastFocusRow; rowIndex++) {
                rows.push(this.renderRow(rowIndex));
            }
        }
        rows.push(this.renderSpacer("st2", topSpacer2));
        // Go through each of the rendered pages and generate the child component.
        for (var rowIndex = firstMaterialized; rowIndex <= lastMaterialized; rowIndex++) {
            rows.push(this.renderRow(rowIndex));
        }
        rows.push(this.renderSpacer("sb2", bottomSpacer2, { countFromBottom: true, estimateRowHeight: !this.props.rowHeights }));
        // If the focus pages are after the last page in the viewport render
        // them but not including the last page.
        if (lastFocusRow > lastMaterialized) {
            for (var rowIndex = firstFocusRow; rowIndex <= lastFocusRow; rowIndex++) {
                rows.push(this.renderRow(rowIndex));
            }
        }
        rows.push(this.renderSpacer("sb1", bottomSpacer1, { countFromBottom: true, estimateRowHeight: !this.props.rowHeights }));
        return (react__WEBPACK_IMPORTED_MODULE_6__.createElement(_Observer__WEBPACK_IMPORTED_MODULE_14__.UncheckedObserver, { itemProvider: {
                // Supply an IObservableExpression to elevate the provider change to a state
                // update for the entire component instead of just the observer.
                filter: function (change, action) {
                    // Notify the selection about the change to the items.
                    if (_this.props.selection) {
                        _this.props.selection.onItemsChanged(change, action);
                    }
                    // @NOTE: For now we will just wipe out the entire cache, we can do an optimized
                    // update to the cache based on the rows that changed.
                    var updatedState = {
                        renderedRows: {},
                        rows: {}
                    };
                    // If the focused row was removed, we will clear the focus index.
                    if (change.removedItems && _this.focusIndex >= change.index && change.index + change.removedItems.length >= _this.focusIndex) {
                        _this.focusIndex = -1;
                    }
                    // If there is a well defined rowcount we will update it and the maxPage.
                    if (_this.state.rowCount !== -1) {
                        var countChange = (change.addedItems ? change.addedItems.length : 0) - (change.removedItems ? change.removedItems.length : 0);
                        if (countChange) {
                            updatedState.rowCount = _this.state.rowCount + countChange;
                            updatedState.firstMaterialized = Math.max(0, Math.min(_this.state.firstMaterialized, updatedState.rowCount - 1));
                            updatedState.lastMaterialized = _this.state.virtualize
                                ? Math.max(updatedState.firstMaterialized, Math.min(_this.state.lastMaterialized +
                                    (change.index >= _this.state.firstMaterialized && change.index <= _this.state.lastMaterialized + 1
                                        ? Math.min(_this.state.pageSize, countChange)
                                        : 0), updatedState.rowCount - 1))
                                : updatedState.rowCount - 1;
                        }
                    }
                    // console.log(updatedState);
                    _this.setState(updatedState);
                    return false;
                },
                observableValue: this.props.itemProvider
            } },
            react__WEBPACK_IMPORTED_MODULE_6__.createElement(_FocusWithin__WEBPACK_IMPORTED_MODULE_9__.FocusWithin, { onBlur: this.onBlur }, function (focusStatus) {
                // @TODO: Once we get the line-height: 20px in the body the body-m should be removed from the list.
                var list = (react__WEBPACK_IMPORTED_MODULE_6__.createElement("table", { "aria-colcount": useAriaCounts ? (_this.props.ariaColumnCount ? _this.props.ariaColumnCount : _this.props.columnCount) : undefined, "aria-label": _this.props.ariaLabel, "aria-rowcount": useAriaCounts ? _this.state.itemProvider.length + ariaRowOffset : undefined, className: (0,_Util__WEBPACK_IMPORTED_MODULE_17__.css)(className, "bolt-list body-m relative", _this.props.showScroll ? undefined : "scroll-hidden"), id: (0,_Util__WEBPACK_IMPORTED_MODULE_17__.getSafeId)(id), onBlur: focusStatus.onBlur, onClick: _this.onClick, onContextMenu: _this.onDispatch, onDoubleClick: _this.onDoubleClick, onDragEnd: _this.onDispatch, onDragEnter: _this.onDispatch, onDragExit: _this.onDispatch, onDragOver: _this.onDispatch, onDragStart: _this.onDispatch, onDrop: _this.onDispatch, onFocus: focusStatus.onFocus, onKeyDown: _this.onKeyDown, onKeyUp: _this.onDispatch, onPointerDown: _this.onDispatch, ref: _this.listElement, role: role, style: { maxWidth: maxWidth, minWidth: minWidth, width: width }, tabIndex: _this.props.excludeTabStop ? -1 : 0 },
                    _this.props.renderHeader && _this.props.renderHeader(),
                    react__WEBPACK_IMPORTED_MODULE_6__.createElement("tbody", { className: "relative", onFocus: _this.onFocusBody, onPointerDown: _this.onPointerDownBody, ref: _this.bodyElement, role: role === "listbox" || role === "list" || role === "menu" || role === "tree" ? "presentation" : undefined },
                        _this.renderOverlay(_this.listElement),
                        rows)));
                if (focuszoneProps) {
                    list = (react__WEBPACK_IMPORTED_MODULE_6__.createElement(_FocusZone__WEBPACK_IMPORTED_MODULE_10__.FocusZone, (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, focuszoneProps, { skipHiddenCheck: true }), list));
                }
                return list;
            })));
    };
    List.prototype.componentDidMount = function () {
        this.context.register(this.onIntersect);
        if (this.props.virtualize) {
            document.addEventListener("keydown", this.onVirtualizeKeyDown);
        }
    };
    List.prototype.componentDidUpdate = function () {
        var _a = this, scrollToIndex = _a.scrollToIndex, onScrollComplete = _a.onScrollComplete;
        if (scrollToIndex !== -1 && this.state.rowHeight) {
            var parentElement = this.bodyElement.current;
            var _b = this.state, firstMaterialized = _b.firstMaterialized, lastMaterialized = _b.lastMaterialized;
            // If the row is materialized, we will ensure it is in the viewport.
            if (scrollToIndex >= firstMaterialized && scrollToIndex <= lastMaterialized && parentElement) {
                for (var currentIndex = 0; currentIndex < parentElement.children.length; currentIndex++) {
                    var childElement = parentElement.children[currentIndex];
                    var cellDetails = cellFromElement(childElement);
                    if (cellDetails.rowIndex === scrollToIndex) {
                        childElement.scrollIntoView(this.scrollToOptions);
                        break;
                    }
                }
            }
            // Reset the scroll state before we notify the complete function, it may start a new scroll operation.
            this.onScrollComplete = undefined;
            this.scrollToIndex = -1;
            this.scrollToOptions = undefined;
            // Notify any pending scrollComplete method that scrolling has completed.
            if (onScrollComplete) {
                onScrollComplete(scrollToIndex);
            }
        }
    };
    List.prototype.componentWillUnmount = function () {
        this.context.unregister(this.onIntersect);
        if (this.props.virtualize) {
            document.removeEventListener("keydown", this.onVirtualizeKeyDown);
        }
    };
    List.prototype.addOverlay = function (id, rowIndex, render, zIndex, columnIndex) {
        if (zIndex === void 0) { zIndex = 0; }
        var overlays = this.state.overlays;
        var overlayIndex = overlays.value.findIndex(function (overlay) { return overlay.id === id; });
        var rowOverlay = { render: render, id: id, rowIndex: rowIndex, zIndex: zIndex + 1, columnIndex: columnIndex };
        // Update the overlay if it exists for that id, otherwise add it
        if (overlayIndex >= 0) {
            overlays.change(overlayIndex, rowOverlay);
        }
        else {
            overlays.push(rowOverlay);
        }
    };
    List.prototype.removeOverlay = function (id) {
        var overlays = this.state.overlays;
        var overlayIndex = overlays.value.findIndex(function (overlay) { return overlay.id === id; });
        // Remove the overlay if it exists.
        if (overlayIndex >= 0) {
            overlays.splice(overlayIndex, 1);
        }
    };
    List.prototype.getFocusIndex = function () {
        return this.focusIndex;
    };
    List.prototype.getStats = function () {
        return {
            firstMaterialized: this.state.firstMaterialized,
            firstRendered: this.state.firstRendered,
            lastMaterialized: this.state.lastMaterialized,
            lastRendered: this.state.lastRendered
        };
    };
    List.prototype.scrollIntoView = function (rowIndex, options, onScrollComplete) {
        var _a = this.state, firstMaterialized = _a.firstMaterialized, lastMaterialized = _a.lastMaterialized, pageSize = _a.pageSize, rowCount = _a.rowCount, rowHeight = _a.rowHeight, rowProportion = _a.rowProportion;
        if (rowIndex >= 0 && rowIndex < this.state.rowCount) {
            var parentElement = this.bodyElement.current;
            // If the row is materialized, we will ensure it is in the viewport.
            if (rowIndex >= firstMaterialized && rowIndex <= lastMaterialized && parentElement) {
                for (var currentIndex = 0; currentIndex < parentElement.children.length; currentIndex++) {
                    var childElement = parentElement.children[currentIndex];
                    var cellDetails = cellFromElement(childElement);
                    if (cellDetails.rowIndex === rowIndex) {
                        childElement.scrollIntoView(options);
                        break;
                    }
                }
                // If the caller wants to know when the scroll has completed, notify them.
                if (onScrollComplete) {
                    onScrollComplete(rowIndex);
                }
            }
            else {
                // We only notify the last caller for now, if someone was waiting and another
                // scroll request was made we will send -1 as the rowIndex scrolled into view.
                if (this.onScrollComplete) {
                    this.onScrollComplete(-1);
                }
                // Set the scrollToOptions that will be applied after the next update.
                this.onScrollComplete = onScrollComplete;
                this.scrollToIndex = rowIndex;
                this.scrollToOptions = options;
                // We need to add some padding when we grow proportionally, since the spacers do not fill up enough room if
                // the list starts in the middle of the scrollable region
                var padding = rowProportion < 1 ? pageSize : 0;
                // If we havent computed the rowHeight at this point we need to wait until
                // we know how big rows are to get the row in the right location.
                if (rowHeight) {
                    this.setState({
                        firstMaterialized: Math.max(0, rowIndex - padding),
                        lastMaterialized: Math.min(rowCount - 1, rowIndex + padding)
                    });
                }
            }
        }
    };
    List.prototype.focusRow = function (rowIndex, direction) {
        var _this = this;
        if (direction === void 0) { direction = 1; }
        return new Promise(function (resolve) {
            _this.scrollIntoView(rowIndex, { block: "center" }, function (completedIndex) {
                if (completedIndex === rowIndex && _this.bodyElement.current) {
                    var rowElement = _this.bodyElement.current.querySelector("[data-row-index='" + completedIndex + "']");
                    if (rowElement) {
                        // We need to ensure the requested row is focusable, if not we will move in the
                        // requested direction to find the first focusable row.
                        if (!rowElement.getAttribute("tabindex")) {
                            var newIndex = Math.min(_this.state.rowCount - 1, Math.max(0, completedIndex + direction));
                            if (newIndex !== completedIndex) {
                                _this.focusRow(newIndex, direction);
                            }
                            else if (newIndex !== _this.focusIndex) {
                                _this.focusRow(newIndex, -direction);
                            }
                        }
                        else {
                            rowElement.focus();
                        }
                    }
                }
                resolve();
            });
        });
    };
    List.prototype.processSelectionEvent = function (event, listRow) {
        var _a = this.props, selection = _a.selection, enforceSingleSelect = _a.enforceSingleSelect;
        if (!selection || selection.selectable(listRow.index)) {
            if (selection) {
                var index = listRow.index;
                var multiSelect = enforceSingleSelect ? false : selection.multiSelect;
                // Determine the type of change being made to the selection based on key states.
                if (this.pivotIndex >= 0 && event.shiftKey && multiSelect) {
                    selection.select(Math.min(this.pivotIndex, index), Math.abs(this.pivotIndex - index) + 1, event.ctrlKey || event.metaKey, multiSelect);
                }
                else {
                    var isSpaceBarStroke = event.which === _Util__WEBPACK_IMPORTED_MODULE_17__.KeyCode.space;
                    if ((event.ctrlKey || event.metaKey || selection.alwaysMerge || isSpaceBarStroke) && multiSelect) {
                        selection.toggle(index, true, multiSelect);
                    }
                    else {
                        selection.select(index, 1, false, multiSelect);
                    }
                }
                // Save the last selectionIndex that we selected, this will allow
                // us to perform range based selection.
                if (!event.shiftKey) {
                    this.pivotIndex = index;
                }
            }
            this.rowSelected(event, listRow);
        }
    };
    List.prototype.renderLoadingRow = function (rowIndex, details) {
        return (react__WEBPACK_IMPORTED_MODULE_6__.createElement(ListItem, { className: "bolt-list-row-loading", details: details, index: rowIndex },
            react__WEBPACK_IMPORTED_MODULE_6__.createElement("div", { className: "shimmer shimmer-line", style: { width: Math.random() * 80 + 20 + "%" } }, "\u00A0")));
    };
    List.prototype.renderOverlay = function (listElementRef) {
        var _this = this;
        var _a = this.state, firstMaterialized = _a.firstMaterialized, lastMaterialized = _a.lastMaterialized, overlays = _a.overlays;
        return (react__WEBPACK_IMPORTED_MODULE_6__.createElement(_Observer__WEBPACK_IMPORTED_MODULE_14__.Observer, { overlays: overlays }, function (props) {
            var bodyElement = _this.bodyElement.current;
            if (props.overlays.length > 0 && bodyElement) {
                return (react__WEBPACK_IMPORTED_MODULE_6__.createElement("div", { className: "bolt-list-overlay-container absolute" }, props.overlays.map(function (overlay) {
                    var _a;
                    // Make sure the row is in the rendered range of rows before starting.
                    // Explicitly include column headers at row -1
                    if (overlay.rowIndex !== -1 && (overlay.rowIndex < firstMaterialized || overlay.rowIndex > lastMaterialized) && !(0,_Utilities_DragDrop__WEBPACK_IMPORTED_MODULE_19__.getDragInProgress)()) {
                        return null;
                    }
                    // Find the row for the given rowIndex
                    var defaultRowElement = listElementRef.current &&
                        listElementRef.current.querySelector("[data-row-index='" + overlay.rowIndex + "']");
                    var rowElement = _this.props.overlay
                        ? defaultRowElement === null || defaultRowElement === void 0 ? void 0 : defaultRowElement.querySelector(_this.props.overlay)
                        : defaultRowElement;
                    // Special case for column overlay
                    var columnElement = (_a = listElementRef.current) === null || _a === void 0 ? void 0 : _a.querySelector("[data-column-index='" + overlay.columnIndex + "']");
                    // We cant render the overlay if the row is paged out since we can't determine
                    // the location of the row.
                    if (rowElement) {
                        return !columnElement ? (react__WEBPACK_IMPORTED_MODULE_6__.createElement("div", { className: "bolt-list-overlay flex-row absolute", id: (0,_Util__WEBPACK_IMPORTED_MODULE_17__.getSafeId)(overlay.id), key: overlay.id, style: {
                                height: rowElement.offsetHeight,
                                top: rowElement.getBoundingClientRect().top - bodyElement.getBoundingClientRect().top,
                                zIndex: overlay.zIndex * 10
                            } }, overlay.render({ rowElement: rowElement }))) : (react__WEBPACK_IMPORTED_MODULE_6__.createElement("div", { className: "bolt-list-overlay flex-row absolute", id: (0,_Util__WEBPACK_IMPORTED_MODULE_17__.getSafeId)(overlay.id), key: overlay.id, style: {
                                height: rowElement.offsetHeight,
                                width: columnElement.offsetWidth,
                                top: rowElement.getBoundingClientRect().top - bodyElement.getBoundingClientRect().top,
                                left: columnElement.getBoundingClientRect().left - bodyElement.getBoundingClientRect().left,
                                zIndex: overlay.zIndex * 10
                            } }, overlay.render({ rowElement: columnElement })));
                    }
                    return null;
                })));
            }
            return null;
        }));
    };
    List.prototype.renderRow = function (rowIndex) {
        var _this = this;
        var itemProvider = this.props.itemProvider;
        var _a = this.state, renderedRows = _a.renderedRows, rows = _a.rows;
        var renderedRow = renderedRows[rowIndex];
        if (!renderedRow) {
            var item_1 = rows[rowIndex];
            if (!item_1) {
                if (itemProvider.getItem) {
                    item_1 = itemProvider.getItem(rowIndex);
                }
                else {
                    item_1 = itemProvider.value[rowIndex];
                }
            }
            // @TODO: If there are no more rows, we need to handle an itemProvider with -1 length.
            if (!item_1) {
                return null;
            }
            // Save the current item in the item cache.
            rows[rowIndex] = item_1;
            var selection = this.props.selection;
            var selectionObservable = void 0;
            if (selection) {
                selectionObservable = {
                    observableValue: selection,
                    filter: function (selectedRanges) {
                        for (var _i = 0, selectedRanges_1 = selectedRanges; _i < selectedRanges_1.length; _i++) {
                            var selectionRange = selectedRanges_1[_i];
                            if (rowIndex >= selectionRange.beginIndex && rowIndex <= selectionRange.endIndex) {
                                return true;
                            }
                        }
                        return false;
                    }
                };
            }
            // console.log("render row - " + rowIndex);
            // Render the row, save it in the cache, and add it to the current page.
            renderedRow = (react__WEBPACK_IMPORTED_MODULE_6__.createElement(_Observer__WEBPACK_IMPORTED_MODULE_14__.UncheckedObserver, { item: item_1, key: rowIndex, selection: selectionObservable }, function (props) {
                var _a = _this.props, selectableText = _a.selectableText, renderRow = _a.renderRow, renderLoadingRow = _a.renderLoadingRow;
                var focusIndex = _this.focusIndex;
                var tabbableIndex = focusIndex >= 0 ? focusIndex : _this.getInitialTabbableRow();
                var rowItem = _Core_Observable__WEBPACK_IMPORTED_MODULE_7__.ObservableLike.getValue(item_1);
                var itemDetails = {
                    selectableText: selectableText,
                    ariaBusy: !props.item,
                    ariaRowOffset: _this.props.ariaRowOffset + 1,
                    data: rowItem,
                    eventDispatch: _this.state.eventDispatch,
                    excludeTabStop: _this.props.excludeTabStop || tabbableIndex !== rowIndex,
                    listProps: _this.props,
                    onFocusItem: _this.onFocusItem,
                    singleClickActivation: _this.props.onActivate && _this.props.singleClickActivation
                };
                if (props.item) {
                    return renderRow(rowIndex, props.item, itemDetails);
                }
                else if (renderLoadingRow) {
                    return renderLoadingRow(rowIndex, itemDetails);
                }
                else {
                    return _this.renderLoadingRow(rowIndex, itemDetails);
                }
            }));
            // Save the row in our cache.
            this.state.renderedRows[rowIndex] = renderedRow;
        }
        return renderedRow;
    };
    List.prototype.renderSpacer = function (key, rowCount, options) {
        var _this = this;
        var _a;
        var height = !(options === null || options === void 0 ? void 0 : options.estimateRowHeight) && ((_a = this.props.rowHeights) === null || _a === void 0 ? void 0 : _a.length)
            ? this.getHeight(rowCount, options === null || options === void 0 ? void 0 : options.countFromBottom)
            : rowCount * this.state.rowHeight * this.state.rowProportion;
        return (react__WEBPACK_IMPORTED_MODULE_6__.createElement("tr", { className: "bolt-list-row-spacer invisible", key: key, ref: function (spacerElement) {
                var existingElement = _this.spacerElements[key];
                if (spacerElement) {
                    if (existingElement !== spacerElement) {
                        if (existingElement) {
                            _this.context.unobserve(spacerElement);
                        }
                        _this.context.observe(spacerElement);
                        _this.spacerElements[key] = spacerElement;
                    }
                }
                else if (existingElement) {
                    _this.context.unobserve(existingElement);
                    delete _this.spacerElements[key];
                }
            }, role: "presentation" },
            react__WEBPACK_IMPORTED_MODULE_6__.createElement("td", { className: "bolt-list-cell-spacer invisible", colSpan: this.props.columnCount, style: { height: height + "px" } })));
    };
    List.prototype.rowActivated = function (event, listRow) {
        this.state.eventDispatch.dispatchEvent(event, listRow, "activate");
        if (this.props.onActivate) {
            this.props.onActivate(event, listRow);
        }
    };
    List.prototype.rowSelected = function (event, listRow) {
        this.state.eventDispatch.dispatchEvent(event, listRow, "select");
        if (this.props.onSelect) {
            this.props.onSelect(event, listRow);
        }
    };
    List.prototype.rowFocused = function (event, listRow) {
        this.state.eventDispatch.dispatchEvent(event, listRow, "focus");
        if (this.props.onFocus) {
            this.props.onFocus(event, listRow);
        }
    };
    List.prototype.getFirstMaterializedItemBaseOnRowHeights = function (rowHeights, averageRowHeight, offsetTopHeight) {
        if (!rowHeights.length) {
            return 0;
        }
        var sumOfHeights = 0;
        var firstMaterialized = 0;
        while (offsetTopHeight > sumOfHeights && firstMaterialized < this.state.rowCount) {
            sumOfHeights += rowHeights[firstMaterialized] || averageRowHeight;
            firstMaterialized++;
        }
        if (averageRowHeight > 0 && offsetTopHeight > sumOfHeights) {
            firstMaterialized += Math.ceil((offsetTopHeight - sumOfHeights) / averageRowHeight);
        }
        return firstMaterialized;
    };
    List.contextType = _Intersection__WEBPACK_IMPORTED_MODULE_12__.IntersectionContext;
    List.defaultProps = {
        ariaRowOffset: 0,
        columnCount: 1,
        focuszoneProps: { direction: _FocusZone__WEBPACK_IMPORTED_MODULE_10__.FocusZoneDirection.Vertical },
        initialPageCount: 3,
        maxHeight: 100000,
        pageSize: 10,
        singleClickActivation: false,
        selectRowOnClick: true,
        virtualize: true
    };
    return List;
}(react__WEBPACK_IMPORTED_MODULE_6__.Component));

var ScrollableList = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(ScrollableList, _super);
    function ScrollableList() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.list = react__WEBPACK_IMPORTED_MODULE_6__.createRef();
        _this.scrollableElement = react__WEBPACK_IMPORTED_MODULE_6__.createRef();
        return _this;
    }
    ScrollableList.prototype.render = function () {
        return (react__WEBPACK_IMPORTED_MODULE_6__.createElement(_Intersection__WEBPACK_IMPORTED_MODULE_12__.Intersection, { rootMargin: window.innerHeight / 2 },
            react__WEBPACK_IMPORTED_MODULE_6__.createElement("div", { ref: this.scrollableElement, onScroll: this.props.onScroll, className: (0,_Util__WEBPACK_IMPORTED_MODULE_17__.css)(this.props.outerClassName, "flex-grow", "scroll-auto") },
                react__WEBPACK_IMPORTED_MODULE_6__.createElement(List, (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, this.props, { ref: this.list })))));
    };
    ScrollableList.prototype.addOverlay = function (id, rowIndex, render, zIndex, columnIndex) {
        if (zIndex === void 0) { zIndex = 0; }
        if (this.list.current) {
            return this.list.current.addOverlay(id, rowIndex, render, zIndex, columnIndex);
        }
    };
    ScrollableList.prototype.getStats = function () {
        if (this.list.current) {
            return this.list.current.getStats();
        }
        return {
            firstMaterialized: -1,
            firstRendered: -1,
            lastMaterialized: -1,
            lastRendered: -1
        };
    };
    ScrollableList.prototype.removeOverlay = function (id) {
        if (this.list.current) {
            return this.list.current.removeOverlay(id);
        }
    };
    ScrollableList.prototype.focusRow = function (rowIndex, direction) {
        if (direction === void 0) { direction = 1; }
        if (this.list.current) {
            return this.list.current.focusRow(rowIndex, direction);
        }
        else {
            return Promise.resolve();
        }
    };
    ScrollableList.prototype.getFocusIndex = function () {
        if (this.list.current) {
            return this.list.current.getFocusIndex();
        }
        return -1;
    };
    ScrollableList.prototype.scrollIntoView = function (rowIndex, scrollToOptions) {
        if (this.list.current) {
            return this.list.current.scrollIntoView(rowIndex, scrollToOptions);
        }
    };
    ScrollableList.prototype.scrollTo = function (scrollTop) {
        if (this.scrollableElement.current) {
            this.scrollableElement.current.scrollTop = scrollTop;
        }
    };
    return ScrollableList;
}(react__WEBPACK_IMPORTED_MODULE_6__.Component));

var SimpleList = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(SimpleList, _super);
    function SimpleList() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.list = react__WEBPACK_IMPORTED_MODULE_6__.createRef();
        _this.renderListItem = function (rowIndex, listCell, details) {
            return renderListItem(rowIndex, details, renderListCell(listCell));
        };
        return _this;
    }
    SimpleList.prototype.render = function () {
        var listProps = {
            selectableText: this.props.selectableText,
            className: this.props.className,
            columnCount: 1,
            eventDispatch: this.props.eventDispatch,
            focuszoneProps: this.props.focuszoneProps,
            id: this.props.id,
            initialPageCount: this.props.initialPageCount,
            itemProvider: this.props.itemProvider,
            maxHeight: this.props.maxHeight,
            onActivate: this.props.onActivate,
            onFocus: this.props.onFocus,
            onSelect: this.props.onSelect,
            pageSize: this.props.pageSize,
            renderRow: this.renderListItem,
            selection: this.props.selection,
            width: this.props.width,
            virtualize: this.props.virtualize
        };
        if (this.props.scrollable) {
            return react__WEBPACK_IMPORTED_MODULE_6__.createElement(ScrollableList, (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, listProps, { ref: this.list }));
        }
        else {
            return react__WEBPACK_IMPORTED_MODULE_6__.createElement(List, (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, listProps, { ref: this.list }));
        }
    };
    SimpleList.prototype.addOverlay = function (id, rowIndex, render, zIndex) {
        if (zIndex === void 0) { zIndex = 0; }
        if (this.list.current) {
            return this.list.current.addOverlay(id, rowIndex, render, zIndex);
        }
    };
    SimpleList.prototype.removeOverlay = function (id) {
        if (this.list.current) {
            return this.list.current.removeOverlay(id);
        }
    };
    SimpleList.prototype.focusRow = function (rowIndex, direction) {
        if (direction === void 0) { direction = 1; }
        if (this.list.current) {
            return this.list.current.focusRow(rowIndex, direction);
        }
        else {
            return Promise.resolve();
        }
    };
    SimpleList.prototype.getFocusIndex = function () {
        if (this.list.current) {
            return this.list.current.getFocusIndex();
        }
        return -1;
    };
    SimpleList.prototype.getStats = function () {
        if (this.list.current) {
            return this.list.current.getStats();
        }
        return {
            firstMaterialized: -1,
            firstRendered: -1,
            lastMaterialized: -1,
            lastRendered: -1
        };
    };
    SimpleList.prototype.scrollIntoView = function (rowIndex, scrollToOptions) {
        if (this.list.current) {
            return this.list.current.scrollIntoView(rowIndex, scrollToOptions);
        }
    };
    return SimpleList;
}(react__WEBPACK_IMPORTED_MODULE_6__.Component));

function renderListItem(rowIndex, details, children) {
    return (react__WEBPACK_IMPORTED_MODULE_6__.createElement(ListItem, { details: details, index: rowIndex }, children));
}
function ListItem(props) {
    var onFocus = function (event) {
        props.details.onFocusItem(props.index, event);
    };
    var children = props.children, details = props.details, index = props.index, linkProps = props.linkProps, itemId = props.itemId, tabIndex = props.tabIndex;
    var selectableText = details.selectableText, ariaBusy = details.ariaBusy, ariaDescribedBy = details.ariaDescribedBy, ariaLabel = details.ariaLabel, ariaPosInSet = details.ariaPosInSet, ariaSetSize = details.ariaSetSize, excludeFocusZone = details.excludeFocusZone;
    var _a = details.listProps, selection = _a.selection, singleClickActivation = _a.singleClickActivation;
    return (react__WEBPACK_IMPORTED_MODULE_6__.createElement(_FocusWithin__WEBPACK_IMPORTED_MODULE_9__.FocusWithin, { onFocus: onFocus }, function (focusStatus) { return (react__WEBPACK_IMPORTED_MODULE_6__.createElement(_FocusZone__WEBPACK_IMPORTED_MODULE_10__.FocusZoneContext.Consumer, null, function (rowContext) {
        var rowProps = {
            "aria-busy": ariaBusy,
            "aria-describedby": ariaDescribedBy,
            "aria-label": ariaLabel,
            "aria-posinset": ariaPosInSet === undefined ? index + 1 : ariaPosInSet === null ? undefined : ariaPosInSet,
            "aria-selected": selection && selection.selected(index),
            "aria-setsize": ariaSetSize === undefined
                ? props.details.listProps.itemProvider.length
                : ariaSetSize === null
                    ? undefined
                    : ariaSetSize,
            className: (0,_Util__WEBPACK_IMPORTED_MODULE_17__.css)(props.className, "bolt-list-row", index === 0 && "first-row", linkProps && "bolt-link", selection && selection.selected(index) && "selected", focusStatus.hasFocus && "focused", singleClickActivation && "single-click-activation", selectableText && "selectable-text"),
            "data-focuszone": excludeFocusZone || (selection && !selection.selectable(index)) ? undefined : rowContext.focuszoneId,
            "data-row-index": index,
            "data-itemid": itemId,
            tabIndex: tabIndex !== null && tabIndex !== void 0 ? tabIndex : (0,_Utilities_Focus__WEBPACK_IMPORTED_MODULE_20__.getTabIndex)(details),
            onBlur: focusStatus.onBlur,
            onFocus: focusStatus.onFocus,
            role: selection ? "option" : "listitem"
        };
        return (react__WEBPACK_IMPORTED_MODULE_6__.createElement(_FocusZone__WEBPACK_IMPORTED_MODULE_10__.FocusZone, { direction: _FocusZone__WEBPACK_IMPORTED_MODULE_10__.FocusZoneDirection.Horizontal }, linkProps ? (react__WEBPACK_IMPORTED_MODULE_6__.createElement("a", (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, (0,_Link__WEBPACK_IMPORTED_MODULE_13__.getDefaultLinkProps)(linkProps), rowProps),
            react__WEBPACK_IMPORTED_MODULE_6__.createElement("div", { className: "bolt-list-cell", "data-column-index": 0 },
                react__WEBPACK_IMPORTED_MODULE_6__.createElement("div", { className: "bolt-list-cell-content flex-row" }, children)))) : (react__WEBPACK_IMPORTED_MODULE_6__.createElement("tr", (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, rowProps),
            react__WEBPACK_IMPORTED_MODULE_6__.createElement("td", { className: "bolt-list-cell", "data-column-index": 0 },
                react__WEBPACK_IMPORTED_MODULE_6__.createElement("div", { className: "bolt-list-cell-content flex-row" }, children))))));
    })); }));
}
function renderListCell(listCell, showOverflowTooltip) {
    if (showOverflowTooltip === void 0) { showOverflowTooltip = true; }
    var textClassName = undefined;
    var textContent = (react__WEBPACK_IMPORTED_MODULE_6__.createElement("span", { className: "text-ellipsis body-m" }, typeof listCell === "string" || typeof listCell === "number" ? listCell : listCell.textNode ? listCell.textNode : listCell.text));
    if (showOverflowTooltip) {
        textContent = react__WEBPACK_IMPORTED_MODULE_6__.createElement(_TooltipEx__WEBPACK_IMPORTED_MODULE_16__.Tooltip, { overflowOnly: true }, textContent);
    }
    var content = textContent;
    var classNames = (0,_Util__WEBPACK_IMPORTED_MODULE_17__.css)("bolt-list-cell-child flex-row flex-center");
    if (typeof listCell !== "string" && typeof listCell !== "number") {
        textClassName = listCell.textClassName;
        if (listCell.iconProps) {
            content = (react__WEBPACK_IMPORTED_MODULE_6__.createElement(react__WEBPACK_IMPORTED_MODULE_6__.Fragment, null,
                (0,_Icon__WEBPACK_IMPORTED_MODULE_11__.Icon)((0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, listCell.iconProps), { className: (0,_Util__WEBPACK_IMPORTED_MODULE_17__.css)("icon-margin", listCell.iconProps.className) })),
                textContent));
        }
        if (listCell.href) {
            return (react__WEBPACK_IMPORTED_MODULE_6__.createElement(_Link__WEBPACK_IMPORTED_MODULE_13__.Link, { className: (0,_Util__WEBPACK_IMPORTED_MODULE_17__.css)(textClassName, classNames, "scroll-hidden"), href: listCell.href, rel: listCell.hrefRel, target: listCell.hrefTarget, excludeTabStop: true, subtle: true }, content));
        }
    }
    return react__WEBPACK_IMPORTED_MODULE_6__.createElement("span", { className: (0,_Util__WEBPACK_IMPORTED_MODULE_17__.css)(textClassName, classNames, "bolt-list-cell-text") }, content);
}
function getAttributeAsNumber(element, attributeName) {
    var attributeValue = element.getAttribute(attributeName);
    if (attributeValue) {
        return parseInt(attributeValue, 10);
    }
    return -1;
}
function cellFromElement(element) {
    var attributeValue;
    var cellIndex = -1;
    var rowIndex = -1;
    var cellElement = null;
    while (element) {
        attributeValue = getAttributeAsNumber(element, "data-column-index");
        if (attributeValue !== -1) {
            cellIndex = attributeValue;
            cellElement = element;
        }
        attributeValue = getAttributeAsNumber(element, "data-row-index");
        if (attributeValue !== -1) {
            rowIndex = attributeValue;
            break;
        }
        // We have hit the root of the details list, dont look above this.
        if (element.classList.contains("bolt-list")) {
            element = null;
            break;
        }
        element = element.parentElement;
    }
    return {
        cellElement: cellElement,
        cellIndex: cellIndex,
        rowElement: element,
        rowIndex: rowIndex
    };
}
function cellFromEvent(event) {
    return cellFromElement(event.target);
}


/***/ }),

/***/ "./node_modules/azure-devops-ui/Components/List/ListDragDropBehavior.js":
/*!******************************************************************************!*\
  !*** ./node_modules/azure-devops-ui/Components/List/ListDragDropBehavior.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ListDragDropBehavior: () => (/* binding */ ListDragDropBehavior)
/* harmony export */ });
/* harmony import */ var _CommonImports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../CommonImports */ "./node_modules/azure-devops-ui/CommonImports.js");
/* harmony import */ var _Core_core_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../Core/core.css */ "./node_modules/azure-devops-ui/Core/core.css");
/* harmony import */ var _DropdownList_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./DropdownList.css */ "./node_modules/azure-devops-ui/Components/List/DropdownList.css");
/* harmony import */ var _List_css__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./List.css */ "./node_modules/azure-devops-ui/Components/List/List.css");
/* harmony import */ var _ListDropIndicator_css__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./ListDropIndicator.css */ "./node_modules/azure-devops-ui/Components/List/ListDropIndicator.css");
/* harmony import */ var _Util__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../Util */ "./node_modules/azure-devops-ui/Util.js");
/* harmony import */ var _Utilities_DragDrop__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../Utilities/DragDrop */ "./node_modules/azure-devops-ui/Utilities/DragDrop.js");
/* harmony import */ var _List__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./List */ "./node_modules/azure-devops-ui/Components/List/List.js");
/* harmony import */ var _ListDragSourceBehavior__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./ListDragSourceBehavior */ "./node_modules/azure-devops-ui/Components/List/ListDragSourceBehavior.js");
/* harmony import */ var _ListDropTargetBehavior__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./ListDropTargetBehavior */ "./node_modules/azure-devops-ui/Components/List/ListDropTargetBehavior.js");










/**
 * A behavior that combines the ListDragSourceBehavior and ListDropTargetBehavior. If your list
 * is only meant to be a drag source, or only meant to be a drop target, then use those two
 * behaviors individually.
 * In addition to combining the two behaviors for convenience, this single behavior also enhances
 * the list with keyboard drag and drop support.
 */
var ListDragDropBehavior = /** @class */ (function () {
    function ListDragDropBehavior(options, dragBehavior, dropBehavior) {
        var _this = this;
        this.initialize = function (props, dragDroppableUI, eventDispatch) {
            _this.eventDispatch = eventDispatch;
            _this.itemProvider = props.itemProvider;
            _this.eventDispatch.addEventListener("keydown", _this.onKeyDown);
            _this.dragBehavior.initialize(props, dragDroppableUI, eventDispatch);
            _this.dropBehavior.initialize(props, dragDroppableUI, eventDispatch);
        };
        this.onDragRowKeyDown = function (event) {
            if (event.which === _Util__WEBPACK_IMPORTED_MODULE_5__.KeyCode.escape) {
                _this.endDrag(event);
            }
            else if (event.which === _Util__WEBPACK_IMPORTED_MODULE_5__.KeyCode.space) {
                _this.endDrag(event, true);
            }
            else if (event.which === _Util__WEBPACK_IMPORTED_MODULE_5__.KeyCode.downArrow) {
                _this.focusIndex = Math.min(_this.focusIndex + 1, _this.itemProvider.length);
                _this.fireRowDragEvents(event);
            }
            else if (event.which === _Util__WEBPACK_IMPORTED_MODULE_5__.KeyCode.upArrow) {
                _this.focusIndex = Math.max(_this.focusIndex - 1, 0);
                _this.fireRowDragEvents(event);
            }
            // We don't want the list itself to have a chance to handle these events, while
            // we are in the middle of a drag operation.
            event.preventDefault();
        };
        this.onKeyDown = function (event) {
            if (!event.defaultPrevented && event.which === _Util__WEBPACK_IMPORTED_MODULE_5__.KeyCode.space && event.target.tagName !== "INPUT") {
                // The user has hit spacebar on the row, so we should start the drag/drop operation.
                var index = (0,_List__WEBPACK_IMPORTED_MODULE_7__.cellFromEvent)(event).rowIndex;
                _this.focusIndex = index;
                var item = _this.itemProvider.value[index];
                _this.dataTransfer = {
                    data: item,
                    dropEffect: _Utilities_DragDrop__WEBPACK_IMPORTED_MODULE_6__.DragDropEffect.none,
                    secondaryData: { index: index, sourceId: _this.options.id },
                    setDragImage: _Util__WEBPACK_IMPORTED_MODULE_5__.noop,
                    type: _this.options.type
                };
                // Give the consumer a chance to cancel the drag/drop operation
                (0,_Utilities_DragDrop__WEBPACK_IMPORTED_MODULE_6__.dispatchCustomDragEvent)("dragstart", event.target, event.nativeEvent, _this.dataTransfer);
                if (_this.dataTransfer.effectAllowed !== _Utilities_DragDrop__WEBPACK_IMPORTED_MODULE_6__.DragDropEffect.none) {
                    // As long as the operation was not cancelled, save off the
                    // row element that is being dragged and add a keydown listener.
                    // This listener will get called before the event dispatch for the list
                    // itself and allows us to have a way to no change focus as the user
                    // arrows up and down.
                    _this.dragItemRowElement = event.target;
                    _this.dragItemRowElement.addEventListener("keydown", _this.onDragRowKeyDown);
                }
            }
        };
        this.options = options;
        this.dragBehavior = dragBehavior || new _ListDragSourceBehavior__WEBPACK_IMPORTED_MODULE_8__.ListDragSourceBehavior(options);
        this.dropBehavior = dropBehavior || new _ListDropTargetBehavior__WEBPACK_IMPORTED_MODULE_9__.ListDropTargetBehavior(options);
    }
    ListDragDropBehavior.prototype.componentDidUpdate = function (props) {
        this.itemProvider = props.itemProvider;
        this.dragBehavior.componentDidUpdate(props);
        this.dropBehavior.componentDidUpdate(props);
    };
    ListDragDropBehavior.prototype.componentWillUnmount = function () {
        var _a;
        (_a = this.eventDispatch) === null || _a === void 0 ? void 0 : _a.removeEventListener("keydown", this.onKeyDown);
        if (this.dragItemRowElement) {
            this.dragItemRowElement.removeEventListener("keydown", this.onDragRowKeyDown);
        }
        this.dragBehavior.componentWillUnmount();
        this.dropBehavior.componentWillUnmount();
    };
    ListDragDropBehavior.prototype.dispatchEventAtIndex = function (eventType, target, event, index) {
        // To maintain consistency with mouse-based drag and drop, we want a way to have the row itself fire
        // the drag events. Since the row element isn't actually associated with the keyboard event that we get,
        // because the drag row itself is still the source of all of these events, we need a way to find that
        // row. We do this by first finding the list of our drag row, and then finding the row with the correct
        // index within that list.
        var listElement = target;
        while (listElement) {
            // We have hit the root of the list, dont look above this.
            if (listElement.classList.contains("bolt-list")) {
                break;
            }
            listElement = listElement.parentElement;
        }
        if (listElement) {
            var rowTarget = listElement.querySelector("[data-row-index='" + index + "']");
            if (rowTarget) {
                (0,_Utilities_DragDrop__WEBPACK_IMPORTED_MODULE_6__.dispatchCustomDragEvent)(eventType, rowTarget, event, this.dataTransfer);
            }
        }
    };
    ListDragDropBehavior.prototype.endDrag = function (event, drop) {
        if (drop === void 0) { drop = false; }
        (0,_Utilities_DragDrop__WEBPACK_IMPORTED_MODULE_6__.dispatchCustomDragEvent)("dragend", event.target, event, this.dataTransfer);
        if (drop) {
            this.dispatchEventAtIndex("drop", event.target, event, this.focusIndex);
        }
        else {
            this.dispatchEventAtIndex("dragexit", event.target, event, this.focusIndex);
        }
        if (this.dragItemRowElement) {
            this.dragItemRowElement.removeEventListener("keydown", this.onDragRowKeyDown);
            this.dragItemRowElement = undefined;
        }
    };
    ListDragDropBehavior.prototype.fireRowDragEvents = function (event) {
        this.dispatchEventAtIndex("dragenter", event.target, event, this.focusIndex);
        this.dispatchEventAtIndex("dragover", event.target, event, this.focusIndex);
    };
    return ListDragDropBehavior;
}());



/***/ }),

/***/ "./node_modules/azure-devops-ui/Components/List/ListDragImage.js":
/*!***********************************************************************!*\
  !*** ./node_modules/azure-devops-ui/Components/List/ListDragImage.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ListDragImage: () => (/* binding */ ListDragImage)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var _CommonImports__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../CommonImports */ "./node_modules/azure-devops-ui/CommonImports.js");
/* harmony import */ var _Core_core_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../Core/core.css */ "./node_modules/azure-devops-ui/Core/core.css");
/* harmony import */ var _DropdownList_css__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./DropdownList.css */ "./node_modules/azure-devops-ui/Components/List/DropdownList.css");
/* harmony import */ var _List_css__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./List.css */ "./node_modules/azure-devops-ui/Components/List/List.css");
/* harmony import */ var _ListDropIndicator_css__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./ListDropIndicator.css */ "./node_modules/azure-devops-ui/Components/List/ListDropIndicator.css");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _Icon__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../Icon */ "./node_modules/azure-devops-ui/Icon.js");
/* harmony import */ var _Util__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../Util */ "./node_modules/azure-devops-ui/Util.js");









var ListDragImage = function (props) {
    return (react__WEBPACK_IMPORTED_MODULE_6__.createElement(react__WEBPACK_IMPORTED_MODULE_6__.Fragment, null,
        props.iconProps && react__WEBPACK_IMPORTED_MODULE_6__.createElement(_Icon__WEBPACK_IMPORTED_MODULE_7__.Icon, (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, props.iconProps, { className: (0,_Util__WEBPACK_IMPORTED_MODULE_8__.css)(props.iconProps.className, "flex-noshrink icon-margin") })),
        react__WEBPACK_IMPORTED_MODULE_6__.createElement("span", { className: "text-ellipsis" }, props.text)));
};


/***/ }),

/***/ "./node_modules/azure-devops-ui/Components/List/ListDragSourceBehavior.js":
/*!********************************************************************************!*\
  !*** ./node_modules/azure-devops-ui/Components/List/ListDragSourceBehavior.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ListDragSourceBehavior: () => (/* binding */ ListDragSourceBehavior)
/* harmony export */ });
/* harmony import */ var _CommonImports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../CommonImports */ "./node_modules/azure-devops-ui/CommonImports.js");
/* harmony import */ var _Core_core_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../Core/core.css */ "./node_modules/azure-devops-ui/Core/core.css");
/* harmony import */ var _DropdownList_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./DropdownList.css */ "./node_modules/azure-devops-ui/Components/List/DropdownList.css");
/* harmony import */ var _List_css__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./List.css */ "./node_modules/azure-devops-ui/Components/List/List.css");
/* harmony import */ var _ListDropIndicator_css__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./ListDropIndicator.css */ "./node_modules/azure-devops-ui/Components/List/ListDropIndicator.css");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _Utilities_DragDrop__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../Utilities/DragDrop */ "./node_modules/azure-devops-ui/Utilities/DragDrop.js");
/* harmony import */ var _Utilities_DragDropInternal__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../Utilities/DragDropInternal */ "./node_modules/azure-devops-ui/Utilities/DragDropInternal.js");
/* harmony import */ var _List__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./List */ "./node_modules/azure-devops-ui/Components/List/List.js");









// TODO: FF cleanup target ('dnd-behaviors-optimizations-enabled' document body class):
var DragAndDropOptimizationsBodyClassName = 'dnd-behaviors-optimizations-enabled';
// TODO: FF cleanup target ('dnd-behaviors-parent-autoscroll-enabled' document body class):
var DragAndDropParentAutocrollClassName = 'dnd-behaviors-parent-autoscroll-enabled';
/**
 * A behavior that turns a list into the source of a drag and drop operation. Note - this
 * behavior should only be used if your list is intended to _only_ be a drag source. Please use
 * the ListDragDropBehavior instead if the list is also a drop target, as that is the only way
 * to get keyboard drag and drop support within your list.
 */
var ListDragSourceBehavior = /** @class */ (function () {
    function ListDragSourceBehavior(options) {
        var _this = this;
        this._scrollableParent = null;
        this._isScrollableParentCached = false;
        this.initialize = function (props, dragDroppableUI, eventDispatch) {
            _this.dragDroppableUI = dragDroppableUI;
            _this.eventDispatch = eventDispatch;
            _this.eventDispatch.addEventListener("pointerdown", _this.onPointerDown);
            _this.eventDispatch.addEventListener("dragstart", _this.onDragStart);
            _this.eventDispatch.addEventListener("dragend", _this.onDragEnd);
            _this.eventDispatch.addEventListener("dragover", _this.onDragging);
            _this.itemProvider = props.itemProvider;
            _this._scrollableParent = null;
            _this._isScrollableParentCached = false;
        };
        this.onDragging = function (event) {
            if (_this.options.onDragging) {
                _this.options.onDragging(event);
                return;
            }
            _this.onDraggingDefault();
        };
        this.onDraggingDefault = function () {
            var _a, _b, _c, _d, _e;
            // TODO: FF cleanup target ('dnd-behaviors-parent-autoscroll-enabled' document body class):
            var isParentAutoscrollEnabled = document.body.classList.contains(DragAndDropParentAutocrollClassName);
            var scrollableElement = !isParentAutoscrollEnabled
                ? (_b = (_a = _this.dragDroppableUI) === null || _a === void 0 ? void 0 : _a.currentElement) === null || _b === void 0 ? void 0 : _b.current
                : _this.getScrollableContainer();
            if (!scrollableElement) {
                return;
            }
            ;
            var _f = scrollableElement.getBoundingClientRect(), top = _f.top, bottom = _f.bottom;
            var speedRate = 20;
            var edgeRate = 0.05;
            var edgeSize = scrollableElement.offsetHeight * edgeRate;
            // TODO: FF cleanup target ('dnd-behaviors-optimizations-enabled' document body class):
            var viewportY = document.body.classList.contains(DragAndDropOptimizationsBodyClassName)
                ? (_c = _this.operationOptimized) === null || _c === void 0 ? void 0 : _c.value.y
                : (_e = (_d = _this.operation) === null || _d === void 0 ? void 0 : _d.y) === null || _e === void 0 ? void 0 : _e.value;
            if (!viewportY) {
                return;
            }
            var isInBottomEdge = bottom - edgeSize < viewportY;
            var isInTopEdge = top + edgeSize > viewportY;
            var canScrollUp = scrollableElement.scrollTop > 0;
            var canScrollDown = scrollableElement.scrollTop + scrollableElement.offsetHeight < scrollableElement.scrollHeight;
            if (isInBottomEdge && canScrollDown) {
                scrollableElement.scrollTo({ top: scrollableElement.scrollTop + speedRate });
            }
            else if (isInTopEdge && canScrollUp) {
                scrollableElement.scrollTo({ top: scrollableElement.scrollTop - speedRate });
            }
        };
        this.onDragEnd = function (event) {
            var index = (0,_List__WEBPACK_IMPORTED_MODULE_8__.cellFromEvent)(event).rowIndex;
            if (index >= 0 && _this.options.onDragEnd) {
                _this.options.onDragEnd(event);
            }
            _this.dragDroppableUI.removeOverlay("drag-source-item");
            _this.dragImageData = undefined;
        };
        this.onDragStart = function (event) {
            if (event.detail.dataTransfer) {
                var index = (0,_List__WEBPACK_IMPORTED_MODULE_8__.cellFromEvent)(event).rowIndex;
                if (index >= 0) {
                    if (_this.options.onDragStart) {
                        _this.options.onDragStart(event);
                    }
                    if (event.detail.dataTransfer.effectAllowed !== _Utilities_DragDrop__WEBPACK_IMPORTED_MODULE_6__.DragDropEffect.none) {
                        _this.dragDroppableUI.addOverlay("drag-source-item", index, _this.renderDragSourceItemOverlay);
                        if (_this.dragImageData === undefined) {
                            _this.dragImageData = {
                                image: _this.options.renderDragImage(event)
                            };
                        }
                    }
                }
            }
            else {
                event.stopPropagation();
                event.preventDefault();
            }
        };
        this.onPointerDown = function (event) {
            if (event.button === 0) {
                _this.beginDrag(event);
            }
        };
        this.renderDragSourceItemOverlay = function (props) {
            // TODO: FF cleanup target ('dnd-behaviors-optimizations-enabled' document body class):
            if (document.body.classList.contains(DragAndDropOptimizationsBodyClassName)) {
                return (react__WEBPACK_IMPORTED_MODULE_5__.createElement(react__WEBPACK_IMPORTED_MODULE_5__.Fragment, null,
                    react__WEBPACK_IMPORTED_MODULE_5__.createElement("div", { className: "bolt-list-drag-source-item flex-grow" }),
                    _this.operationOptimized && _this.dragImageData && (react__WEBPACK_IMPORTED_MODULE_5__.createElement(_Utilities_DragDropInternal__WEBPACK_IMPORTED_MODULE_7__.DragImageOptimized, { operation: _this.operationOptimized }, _this.dragImageData.image))));
            }
            return (react__WEBPACK_IMPORTED_MODULE_5__.createElement(react__WEBPACK_IMPORTED_MODULE_5__.Fragment, null,
                react__WEBPACK_IMPORTED_MODULE_5__.createElement("div", { className: "bolt-list-drag-source-item flex-grow" }),
                _this.operation && _this.dragImageData && react__WEBPACK_IMPORTED_MODULE_5__.createElement(_Utilities_DragDrop__WEBPACK_IMPORTED_MODULE_6__.DragImage, { operation: _this.operation }, _this.dragImageData.image)));
        };
        this.setDragImage = function (image, xOffset, yOffset) {
            _this.dragImageData = { image: image, xOffset: xOffset, yOffset: yOffset };
        };
        this.options = options;
    }
    ListDragSourceBehavior.prototype.componentDidUpdate = function (props) {
        this.itemProvider = props.itemProvider;
        this._scrollableParent = null;
        this._isScrollableParentCached = false;
    };
    ListDragSourceBehavior.prototype.componentWillUnmount = function () {
        var _a, _b, _c, _d;
        (_a = this.eventDispatch) === null || _a === void 0 ? void 0 : _a.removeEventListener("pointerdown", this.onPointerDown);
        (_b = this.eventDispatch) === null || _b === void 0 ? void 0 : _b.removeEventListener("dragstart", this.onDragStart);
        (_c = this.eventDispatch) === null || _c === void 0 ? void 0 : _c.removeEventListener("dragend", this.onDragEnd);
        (_d = this.eventDispatch) === null || _d === void 0 ? void 0 : _d.removeEventListener("dragover", this.onDragging);
    };
    ListDragSourceBehavior.prototype.beginDrag = function (event) {
        var index = (0,_List__WEBPACK_IMPORTED_MODULE_8__.cellFromEvent)(event).rowIndex;
        if (this.itemProvider && index >= 0) {
            var item = this.itemProvider.value[index];
            // TODO: FF cleanup target ('dnd-behaviors-optimizations-enabled' document body class):
            if (document.body.classList.contains(DragAndDropOptimizationsBodyClassName)) {
                this.operationOptimized = (0,_Utilities_DragDropInternal__WEBPACK_IMPORTED_MODULE_7__.beginDragOperationOptimized)(event, {
                    data: item,
                    dropEffect: _Utilities_DragDrop__WEBPACK_IMPORTED_MODULE_6__.DragDropEffect.none,
                    secondaryData: { index: index, sourceId: this.options.id },
                    setDragImage: this.setDragImage,
                    type: this.options.type
                });
            }
            else {
                this.operation = (0,_Utilities_DragDrop__WEBPACK_IMPORTED_MODULE_6__.beginDragOperation)(event, {
                    data: item,
                    dropEffect: _Utilities_DragDrop__WEBPACK_IMPORTED_MODULE_6__.DragDropEffect.none,
                    secondaryData: { index: index, sourceId: this.options.id },
                    setDragImage: this.setDragImage,
                    type: this.options.type
                });
            }
        }
    };
    ListDragSourceBehavior.prototype.getScrollableContainer = function () {
        var _a, _b, _c;
        if (this._isScrollableParentCached) {
            return this._scrollableParent;
        }
        this._isScrollableParentCached = true;
        var dragDroppableElement = (_b = (_a = this.dragDroppableUI) === null || _a === void 0 ? void 0 : _a.currentElement) === null || _b === void 0 ? void 0 : _b.current;
        if (!dragDroppableElement) {
            return null;
        }
        this._scrollableParent = this.findScrollableParent(dragDroppableElement);
        return (_c = this._scrollableParent) !== null && _c !== void 0 ? _c : dragDroppableElement;
    };
    ListDragSourceBehavior.prototype.findScrollableParent = function (element) {
        while (element) {
            var style = window.getComputedStyle(element);
            var overflowY = style.overflowY;
            if ((overflowY === 'auto' || overflowY === 'scroll') && element.scrollHeight > element.clientHeight) {
                return element;
            }
            element = element.parentElement;
        }
        return null;
    };
    return ListDragSourceBehavior;
}());



/***/ }),

/***/ "./node_modules/azure-devops-ui/Components/List/ListDropIndicator.Props.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/azure-devops-ui/Components/List/ListDropIndicator.Props.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ListDropIndicatorPosition: () => (/* binding */ ListDropIndicatorPosition)
/* harmony export */ });
/**
 * Represents where within the containing element to draw the drop indicator
 */
var ListDropIndicatorPosition;
(function (ListDropIndicatorPosition) {
    ListDropIndicatorPosition["bottom"] = "bottom";
    ListDropIndicatorPosition["top"] = "top";
    ListDropIndicatorPosition["left"] = "left";
    ListDropIndicatorPosition["right"] = "right";
})(ListDropIndicatorPosition || (ListDropIndicatorPosition = {}));


/***/ }),

/***/ "./node_modules/azure-devops-ui/Components/List/ListDropIndicator.css":
/*!****************************************************************************!*\
  !*** ./node_modules/azure-devops-ui/Components/List/ListDropIndicator.css ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/styleDomAPI.js */ "./node_modules/style-loader/dist/runtime/styleDomAPI.js");
/* harmony import */ var _style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/insertBySelector.js */ "./node_modules/style-loader/dist/runtime/insertBySelector.js");
/* harmony import */ var _style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/setAttributesWithoutAttributes.js */ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js");
/* harmony import */ var _style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/insertStyleElement.js */ "./node_modules/style-loader/dist/runtime/insertStyleElement.js");
/* harmony import */ var _style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/styleTagTransform.js */ "./node_modules/style-loader/dist/runtime/styleTagTransform.js");
/* harmony import */ var _style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _css_loader_dist_cjs_js_ListDropIndicator_css__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! !!../../../css-loader/dist/cjs.js!./ListDropIndicator.css */ "./node_modules/css-loader/dist/cjs.js!./node_modules/azure-devops-ui/Components/List/ListDropIndicator.css");

      
      
      
      
      
      
      
      
      

var options = {};

options.styleTagTransform = (_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default());
options.setAttributes = (_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default());
options.insert = _style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(null, "head");
options.domAPI = (_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default());
options.insertStyleElement = (_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default());

var update = _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_css_loader_dist_cjs_js_ListDropIndicator_css__WEBPACK_IMPORTED_MODULE_6__["default"], options);




       /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_css_loader_dist_cjs_js_ListDropIndicator_css__WEBPACK_IMPORTED_MODULE_6__["default"] && _css_loader_dist_cjs_js_ListDropIndicator_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals ? _css_loader_dist_cjs_js_ListDropIndicator_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals : undefined);


/***/ }),

/***/ "./node_modules/azure-devops-ui/Components/List/ListDropIndicator.js":
/*!***************************************************************************!*\
  !*** ./node_modules/azure-devops-ui/Components/List/ListDropIndicator.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ListDropIndicator: () => (/* binding */ ListDropIndicator)
/* harmony export */ });
/* harmony import */ var _CommonImports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../CommonImports */ "./node_modules/azure-devops-ui/CommonImports.js");
/* harmony import */ var _Core_core_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../Core/core.css */ "./node_modules/azure-devops-ui/Core/core.css");
/* harmony import */ var _DropdownList_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./DropdownList.css */ "./node_modules/azure-devops-ui/Components/List/DropdownList.css");
/* harmony import */ var _List_css__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./List.css */ "./node_modules/azure-devops-ui/Components/List/List.css");
/* harmony import */ var _ListDropIndicator_css__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./ListDropIndicator.css */ "./node_modules/azure-devops-ui/Components/List/ListDropIndicator.css");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _Util__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../Util */ "./node_modules/azure-devops-ui/Util.js");







function ListDropIndicator(props) {
    var position = props.position, xOffset = props.xOffset, lineOffset = props.lineOffset;
    var circleLeft = (xOffset || 0) + "px";
    var lineLeft = (lineOffset || 0) + "px";
    var positionClassName = position;
    return (react__WEBPACK_IMPORTED_MODULE_5__.createElement(react__WEBPACK_IMPORTED_MODULE_5__.Fragment, null,
        react__WEBPACK_IMPORTED_MODULE_5__.createElement("div", { className: (0,_Util__WEBPACK_IMPORTED_MODULE_6__.css)("bolt-list-drop-indicator-line flex-grow absolute", positionClassName), style: { left: lineLeft } }),
        react__WEBPACK_IMPORTED_MODULE_5__.createElement("div", { className: (0,_Util__WEBPACK_IMPORTED_MODULE_6__.css)("bolt-list-drop-indicator-circle absolute", positionClassName), style: { left: circleLeft } })));
}


/***/ }),

/***/ "./node_modules/azure-devops-ui/Components/List/ListDropTargetBehavior.js":
/*!********************************************************************************!*\
  !*** ./node_modules/azure-devops-ui/Components/List/ListDropTargetBehavior.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ListDropTargetBehavior: () => (/* binding */ ListDropTargetBehavior)
/* harmony export */ });
/* harmony import */ var _CommonImports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../CommonImports */ "./node_modules/azure-devops-ui/CommonImports.js");
/* harmony import */ var _Core_core_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../Core/core.css */ "./node_modules/azure-devops-ui/Core/core.css");
/* harmony import */ var _DropdownList_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./DropdownList.css */ "./node_modules/azure-devops-ui/Components/List/DropdownList.css");
/* harmony import */ var _List_css__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./List.css */ "./node_modules/azure-devops-ui/Components/List/List.css");
/* harmony import */ var _ListDropIndicator_css__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./ListDropIndicator.css */ "./node_modules/azure-devops-ui/Components/List/ListDropIndicator.css");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _Util__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../Util */ "./node_modules/azure-devops-ui/Util.js");
/* harmony import */ var _Utilities_DragDrop__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../Utilities/DragDrop */ "./node_modules/azure-devops-ui/Utilities/DragDrop.js");
/* harmony import */ var _List__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./List */ "./node_modules/azure-devops-ui/Components/List/List.js");
/* harmony import */ var _ListDropIndicator__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./ListDropIndicator */ "./node_modules/azure-devops-ui/Components/List/ListDropIndicator.js");
/* harmony import */ var _ListDropIndicator_Props__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./ListDropIndicator.Props */ "./node_modules/azure-devops-ui/Components/List/ListDropIndicator.Props.js");











/**
 * A behavior that turns a list into the target of a drag and drop operation. Note - this
 * behavior should only be used if your list is intended to _only_ be a drop target. Please use
 * the ListDragDropBehavior instead if the list is also a drag source, as that is the only way
 * to get keyboard drag and drop support within your list.
 */
var ListDropTargetBehavior = /** @class */ (function () {
    function ListDropTargetBehavior(options) {
        var _this = this;
        this.initialize = function (props, dragDroppableUI, eventDispatch) {
            _this.dragDroppableUI = dragDroppableUI;
            _this.eventDispatch = eventDispatch;
            _this.eventDispatch.addEventListener("dragenter", _this.onDragEnter);
            _this.eventDispatch.addEventListener("dragexit", _this.onDragExit);
            _this.eventDispatch.addEventListener("dragover", _this.onDragOver);
            _this.eventDispatch.addEventListener("drop", _this.onDrop);
            _this.itemProvider = props.itemProvider;
            _this.indicatorName = _this.options.isTree ? "tree-drop-indicator" : "drop-indicator";
        };
        this.onDragEnter = function (event) {
            if (!_this.handlesType(event)) {
                return;
            }
            if (_this.options.onDragEnter) {
                _this.options.onDragEnter(event);
            }
            else {
                event.detail.dataTransfer.dropEffect = _Utilities_DragDrop__WEBPACK_IMPORTED_MODULE_7__.DragDropEffect.move;
            }
        };
        this.onDragExit = function (event) {
            if (!_this.handlesType(event)) {
                return;
            }
            if (_this.options.onDragExit) {
                _this.options.onDragExit(event);
            }
            _this.dragDroppableUI.removeOverlay(_this.indicatorName);
        };
        this.onDragOver = function (event) {
            if (!_this.handlesType(event)) {
                return;
            }
            var index = _this.calculateIndex(event);
            var dragIndex = event.detail.dataTransfer.secondaryData.index;
            var listId = event.detail.dataTransfer.secondaryData.sourceId;
            var resultFromDragOver;
            if (index >= 0 && (index !== dragIndex || listId !== _this.options.id || _this.options.isTree)) {
                if (_this.options.onDragOver) {
                    resultFromDragOver = _this.options.onDragOver(event, {
                        index: _this.listIndicatorPosition === _ListDropIndicator_Props__WEBPACK_IMPORTED_MODULE_10__.ListDropIndicatorPosition.bottom ? index + 1 : index
                    });
                    if (typeof (resultFromDragOver) === "number") {
                        index = resultFromDragOver;
                    }
                }
                else {
                    event.detail.dataTransfer.dropEffect = _Utilities_DragDrop__WEBPACK_IMPORTED_MODULE_7__.DragDropEffect.move;
                }
            }
            else {
                event.detail.dataTransfer.dropEffect = _Utilities_DragDrop__WEBPACK_IMPORTED_MODULE_7__.DragDropEffect.none;
            }
            if (event.detail.dataTransfer.dropEffect === _Utilities_DragDrop__WEBPACK_IMPORTED_MODULE_7__.DragDropEffect.none) {
                _this.dragDroppableUI.removeOverlay(_this.indicatorName);
            }
            else {
                if (typeof (resultFromDragOver) === "number") {
                    _this.listIndicatorPosition = _ListDropIndicator_Props__WEBPACK_IMPORTED_MODULE_10__.ListDropIndicatorPosition.bottom;
                }
                _this.dragDroppableUI.addOverlay(_this.indicatorName, index, _this.renderDropIndicator);
            }
        };
        this.onDrop = function (event) {
            if (!_this.handlesType(event)) {
                return;
            }
            var index = _this.calculateIndex(event);
            var dragIndex = event.detail.dataTransfer.secondaryData.index;
            var listId = event.detail.dataTransfer.secondaryData.sourceId;
            if (index >= 0 && (index !== dragIndex || listId !== _this.options.id) && _this.options.onDrop) {
                _this.options.onDrop(event, { index: _this.listIndicatorPosition === _ListDropIndicator_Props__WEBPACK_IMPORTED_MODULE_10__.ListDropIndicatorPosition.bottom ? index + 1 : index });
            }
            _this.dragDroppableUI.removeOverlay(_this.indicatorName);
        };
        this.renderDropIndicator = function (props) {
            return _this.options.isTree ? (react__WEBPACK_IMPORTED_MODULE_5__.createElement("div", { className: "bolt-list-tree-drop-target flex-grow" })) : (react__WEBPACK_IMPORTED_MODULE_5__.createElement(_ListDropIndicator__WEBPACK_IMPORTED_MODULE_9__.ListDropIndicator, { position: _this.listIndicatorPosition }));
        };
        this.options = options;
    }
    ListDropTargetBehavior.prototype.componentDidUpdate = function (props) {
        this.itemProvider = props.itemProvider;
    };
    ListDropTargetBehavior.prototype.componentWillUnmount = function () {
        var _a, _b, _c;
        (_a = this.eventDispatch) === null || _a === void 0 ? void 0 : _a.removeEventListener("dragenter", this.onDragEnter);
        (_b = this.eventDispatch) === null || _b === void 0 ? void 0 : _b.removeEventListener("dragexit", this.onDragExit);
        (_c = this.eventDispatch) === null || _c === void 0 ? void 0 : _c.removeEventListener("dragover", this.onDragOver);
    };
    ListDropTargetBehavior.prototype.calculateIndex = function (event) {
        var cell = (0,_List__WEBPACK_IMPORTED_MODULE_8__.cellFromEvent)(event);
        var index = cell.rowIndex;
        if (this.options.isTree) {
            return index;
        }
        if (cell.rowElement && event.detail.dataTransfer.secondaryData) {
            var dragIndex = event.detail.dataTransfer.secondaryData.index;
            var listId = event.detail.dataTransfer.secondaryData.sourceId;
            var nativeEvent = event.detail.nativeEvent;
            var rowRect = cell.rowElement.getBoundingClientRect();
            var point = (0,_Util__WEBPACK_IMPORTED_MODULE_6__.getPointByEventType)(nativeEvent);
            var topHalfOfRow = point ? point.y < rowRect.height / 2 + rowRect.top : index < dragIndex;
            if (this.options.id !== listId) {
                this.listIndicatorPosition = _ListDropIndicator_Props__WEBPACK_IMPORTED_MODULE_10__.ListDropIndicatorPosition.top;
                if (!topHalfOfRow) {
                    index++;
                }
                if (index >= this.itemProvider.length) {
                    this.listIndicatorPosition = _ListDropIndicator_Props__WEBPACK_IMPORTED_MODULE_10__.ListDropIndicatorPosition.bottom;
                    index--;
                }
            }
            else {
                if (index < dragIndex) {
                    this.listIndicatorPosition = _ListDropIndicator_Props__WEBPACK_IMPORTED_MODULE_10__.ListDropIndicatorPosition.top;
                    if (!topHalfOfRow) {
                        index++;
                    }
                }
                else if (index > dragIndex) {
                    this.listIndicatorPosition = _ListDropIndicator_Props__WEBPACK_IMPORTED_MODULE_10__.ListDropIndicatorPosition.bottom;
                    if (topHalfOfRow) {
                        index--;
                    }
                }
                // No-op if index === dragIndex
            }
        }
        return index;
    };
    ListDropTargetBehavior.prototype.handlesType = function (event) {
        var _a;
        var type = ((_a = event.detail.dataTransfer) === null || _a === void 0 ? void 0 : _a.type) || "";
        return this.options.allowedTypes.indexOf(type) !== -1;
    };
    return ListDropTargetBehavior;
}());



/***/ }),

/***/ "./node_modules/azure-devops-ui/Components/List/ListSelection.js":
/*!***********************************************************************!*\
  !*** ./node_modules/azure-devops-ui/Components/List/ListSelection.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   FilteredListSelection: () => (/* binding */ FilteredListSelection),
/* harmony export */   ListSelection: () => (/* binding */ ListSelection)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var _Utilities_Selection__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../Utilities/Selection */ "./node_modules/azure-devops-ui/Utilities/Selection.js");


var ListSelection = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(ListSelection, _super);
    function ListSelection(options) {
        var _this = _super.call(this, typeof options === "boolean" || options === undefined
            ? options
            : {
                alwaysMerge: options.alwaysMerge,
                multiSelect: options.multiSelect,
                unselectableRanges: options.unselectableRanges,
                selectedRanges: options.selectedRanges
            }) || this;
        _this.selectOnFocus = true;
        if (typeof options !== "boolean" && options !== undefined) {
            _this.selectOnFocus = options.selectOnFocus === undefined ? true : options.selectOnFocus;
        }
        return _this;
    }
    return ListSelection;
}(_Utilities_Selection__WEBPACK_IMPORTED_MODULE_1__.Selection));

var FilteredListSelection = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(FilteredListSelection, _super);
    function FilteredListSelection(selection) {
        var _this = _super.call(this, {
            alwaysMerge: selection.alwaysMerge,
            multiSelect: selection.multiSelect,
            unselectableRanges: selection.unselectableRanges,
            selectedRanges: selection.value,
            selectOnFocus: selection.selectOnFocus
        }) || this;
        _this.filteredIndexMap = [];
        _this.updateFilteredSelection = function (filteredIndexMap, multiSelect) {
            if (multiSelect === void 0) { multiSelect = _this.selection.multiSelect; }
            if (filteredIndexMap.length === 0) {
                _this.value = (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__spreadArray)([], _this.selection.value, true);
                _this.unselectableRanges = (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__spreadArray)([], _this.selection.unselectableRanges, true);
            }
            else {
                var newSelection_1 = new _Utilities_Selection__WEBPACK_IMPORTED_MODULE_1__.Selection(multiSelect);
                filteredIndexMap.map(function (mappedIndex, index) {
                    if (_this.selection.selected(mappedIndex)) {
                        newSelection_1.select(index, 1, true, multiSelect);
                    }
                    if (!_this.selection.selectable(mappedIndex)) {
                        newSelection_1.addUnselectable(index);
                    }
                });
                _this.value = (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__spreadArray)([], newSelection_1.value, true);
                _this.unselectableRanges = (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__spreadArray)([], newSelection_1.unselectableRanges, true);
            }
            _this.filteredIndexMap = filteredIndexMap;
        };
        _this.selectionChanged = function (value, action) {
            switch (action) {
                case "addUnselectable":
                    for (var rangeIndex = 0; rangeIndex < value.length; rangeIndex++) {
                        for (var unselectableIndex = value[rangeIndex].beginIndex; unselectableIndex <= value[rangeIndex].endIndex; unselectableIndex++) {
                            var index = _this.filteredIndexMap.length > 0 ? _this.filteredIndexMap.indexOf(unselectableIndex) : unselectableIndex;
                            if (_this.selectable(index)) {
                                _this.addUnselectable(index, 1);
                            }
                        }
                    }
                    break;
                case "removeUnselectable":
                    for (var rangeIndex = 0; rangeIndex < value.length; rangeIndex++) {
                        for (var unselectableIndex = value[rangeIndex].beginIndex; unselectableIndex <= value[rangeIndex].endIndex; unselectableIndex++) {
                            var index = _this.filteredIndexMap.length > 0 ? _this.filteredIndexMap.indexOf(unselectableIndex) : unselectableIndex;
                            if (!_this.selectable(index)) {
                                _this.removeUnselectable(index, 1);
                            }
                        }
                    }
                    break;
                case "setUnselectable":
                case "set":
                    _this.updateFilteredSelection(_this.filteredIndexMap);
                    break;
                case "select":
                    for (var rangeIndex = 0; rangeIndex < value.length; rangeIndex++) {
                        for (var selectionIndex = value[rangeIndex].beginIndex; selectionIndex <= value[rangeIndex].endIndex; selectionIndex++) {
                            var index = _this.filteredIndexMap.length > 0 ? _this.filteredIndexMap.indexOf(selectionIndex) : selectionIndex;
                            if (index > -1 && !_this.selected(index)) {
                                _this.select(index, 1, true);
                            }
                        }
                    }
                    break;
                case "unselect":
                    for (var rangeIndex = 0; rangeIndex < value.length; rangeIndex++) {
                        for (var selectionIndex = value[rangeIndex].beginIndex; selectionIndex <= value[rangeIndex].endIndex; selectionIndex++) {
                            var index = _this.filteredIndexMap.length > 0 ? _this.filteredIndexMap.indexOf(selectionIndex) : selectionIndex;
                            if (_this.selected(index)) {
                                _this.unselect(index, 1);
                            }
                        }
                    }
                    break;
            }
        };
        _this.selection = selection;
        return _this;
    }
    FilteredListSelection.prototype.select = function (index, count, merge, multiSelect) {
        _super.prototype.select.call(this, index, count, merge, multiSelect);
        if (this.filteredIndexMap.length > 0) {
            if (!merge) {
                this.clear();
            }
            count = count || 1;
            for (var i = 0; i < count; i++) {
                this.selection.select(this.filteredIndexMap[index + i], 1, true, multiSelect);
            }
        }
        else {
            this.selection.select(index, count, merge, multiSelect);
        }
    };
    FilteredListSelection.prototype.unselect = function (index, count) {
        _super.prototype.unselect.call(this, index, count);
        if (this.filteredIndexMap.length > 0) {
            count = count || 1;
            for (var i = 0; i < count; i++) {
                this.selection.unselect(this.filteredIndexMap[index + i], 1);
            }
        }
        else {
            this.selection.unselect(index, count);
        }
    };
    FilteredListSelection.prototype.clear = function () {
        _super.prototype.clear.call(this);
        if (this.filteredIndexMap.length > 0) {
            for (var i = 0; i < this.filteredIndexMap.length; i++) {
                this.selection.unselect(this.filteredIndexMap[i]);
            }
        }
        else {
            this.selection.clear();
        }
    };
    return FilteredListSelection;
}(ListSelection));



/***/ }),

/***/ "./node_modules/azure-devops-ui/Components/Menu/ContextMenuBehavior.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/azure-devops-ui/Components/Menu/ContextMenuBehavior.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ContextMenuBehavior: () => (/* binding */ ContextMenuBehavior)
/* harmony export */ });
/* harmony import */ var _CommonImports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../CommonImports */ "./node_modules/azure-devops-ui/CommonImports.js");
/* harmony import */ var _Core_core_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../Core/core.css */ "./node_modules/azure-devops-ui/Core/core.css");
/* harmony import */ var _Menu_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Menu.css */ "./node_modules/azure-devops-ui/Components/Menu/Menu.css");
/* harmony import */ var _MenuButton_css__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./MenuButton.css */ "./node_modules/azure-devops-ui/Components/Menu/MenuButton.css");




var ContextMenuBehavior = /** @class */ (function () {
    function ContextMenuBehavior(contextMenuHandler, allowDefaultMenuOnAnchor) {
        var _this = this;
        if (allowDefaultMenuOnAnchor === void 0) { allowDefaultMenuOnAnchor = false; }
        this.initialize = function (props, component, eventDispatch) {
            _this.eventDispatch = eventDispatch;
            _this.eventDispatch.addEventListener("contextmenu", _this.onContextMenu);
        };
        this.onContextMenu = function (event) {
            if (_this.allowDefaultMenuOnAnchor) {
                // We don't want to show the custom contextual menu and prevent default
                // if user clicked mouse and the target element is an anchor tag.
                if (event.nativeEvent instanceof MouseEvent) {
                    var target = event.nativeEvent.target;
                    if (target && target.nodeName === "A") {
                        return;
                    }
                }
            }
            _this.contextMenuHandler(event);
        };
        this.contextMenuHandler = contextMenuHandler;
        this.allowDefaultMenuOnAnchor = allowDefaultMenuOnAnchor;
    }
    ContextMenuBehavior.prototype.componentWillUnmount = function () {
        var _a;
        (_a = this.eventDispatch) === null || _a === void 0 ? void 0 : _a.removeEventListener("contextmenu", this.onContextMenu);
    };
    return ContextMenuBehavior;
}());



/***/ }),

/***/ "./node_modules/azure-devops-ui/Components/Menu/Menu.Props.js":
/*!********************************************************************!*\
  !*** ./node_modules/azure-devops-ui/Components/Menu/Menu.Props.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   MenuCell: () => (/* binding */ MenuCell),
/* harmony export */   MenuItemType: () => (/* binding */ MenuItemType)
/* harmony export */ });
/**
 * Standard menu item types that are rendered through the menu.
 */
var MenuItemType;
(function (MenuItemType) {
    /**
     * This uses the standard five column menu item.
     */
    MenuItemType[MenuItemType["Normal"] = 0] = "Normal";
    /**
     * This will render a divider line between the previous and next item.
     * A divider will only appear if the previous and next item are non-dividers.
     * Consecutive dividers will be merged to a single divider.
     */
    MenuItemType[MenuItemType["Divider"] = 1] = "Divider";
    /**
     * A special menu item that shows a header styled menu item in the PrimaryText column.
     */
    MenuItemType[MenuItemType["Header"] = 2] = "Header";
})(MenuItemType || (MenuItemType = {}));
/**
 * Indicates what type of menu cell is being rendered. A menu is represented by
 * five columns. If any menu item in the menu uses the column the column will be
 * shown in all items. If no menu item uses the column, the column will not be
 * visible.
 */
var MenuCell;
(function (MenuCell) {
    /**
     * The state column is used to represent the state of the menu item. This is
     * usually either a read-only or read-write checkbox.
     */
    MenuCell[MenuCell["State"] = 0] = "State";
    /**
     * This is an Icon prefix used to represent the menu item.
     */
    MenuCell[MenuCell["Icon"] = 1] = "Icon";
    /**
     * Primary text that describes the menu item. Often this will be the only
     * column that has a value.
     */
    MenuCell[MenuCell["PrimaryText"] = 2] = "PrimaryText";
    /**
     * Secondary text is a column that is generally used to represent things
     * like hot-keys/accelerators.
     */
    MenuCell[MenuCell["SecondaryText"] = 3] = "SecondaryText";
    /**
     * Action column is used to give the user a way to represent a secondary
     * way to interact with the menu. This may be things like the submenu icon
     * or some other ui the user can independantly interact with.
     */
    MenuCell[MenuCell["Action"] = 4] = "Action";
})(MenuCell || (MenuCell = {}));


/***/ }),

/***/ "./node_modules/azure-devops-ui/Components/Menu/Menu.css":
/*!***************************************************************!*\
  !*** ./node_modules/azure-devops-ui/Components/Menu/Menu.css ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/styleDomAPI.js */ "./node_modules/style-loader/dist/runtime/styleDomAPI.js");
/* harmony import */ var _style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/insertBySelector.js */ "./node_modules/style-loader/dist/runtime/insertBySelector.js");
/* harmony import */ var _style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/setAttributesWithoutAttributes.js */ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js");
/* harmony import */ var _style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/insertStyleElement.js */ "./node_modules/style-loader/dist/runtime/insertStyleElement.js");
/* harmony import */ var _style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/styleTagTransform.js */ "./node_modules/style-loader/dist/runtime/styleTagTransform.js");
/* harmony import */ var _style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _css_loader_dist_cjs_js_Menu_css__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! !!../../../css-loader/dist/cjs.js!./Menu.css */ "./node_modules/css-loader/dist/cjs.js!./node_modules/azure-devops-ui/Components/Menu/Menu.css");

      
      
      
      
      
      
      
      
      

var options = {};

options.styleTagTransform = (_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default());
options.setAttributes = (_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default());
options.insert = _style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(null, "head");
options.domAPI = (_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default());
options.insertStyleElement = (_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default());

var update = _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_css_loader_dist_cjs_js_Menu_css__WEBPACK_IMPORTED_MODULE_6__["default"], options);




       /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_css_loader_dist_cjs_js_Menu_css__WEBPACK_IMPORTED_MODULE_6__["default"] && _css_loader_dist_cjs_js_Menu_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals ? _css_loader_dist_cjs_js_Menu_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals : undefined);


/***/ }),

/***/ "./node_modules/azure-devops-ui/Components/Menu/Menu.js":
/*!**************************************************************!*\
  !*** ./node_modules/azure-devops-ui/Components/Menu/Menu.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ContextualMenu: () => (/* binding */ ContextualMenu),
/* harmony export */   Menu: () => (/* binding */ Menu),
/* harmony export */   MenuDivider: () => (/* binding */ MenuDivider),
/* harmony export */   MenuHeader: () => (/* binding */ MenuHeader),
/* harmony export */   MenuItem: () => (/* binding */ MenuItem),
/* harmony export */   groupMenuItems: () => (/* binding */ groupMenuItems)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var _CommonImports__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../CommonImports */ "./node_modules/azure-devops-ui/CommonImports.js");
/* harmony import */ var _Core_core_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../Core/core.css */ "./node_modules/azure-devops-ui/Core/core.css");
/* harmony import */ var _Menu_css__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Menu.css */ "./node_modules/azure-devops-ui/Components/Menu/Menu.css");
/* harmony import */ var _MenuButton_css__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./MenuButton.css */ "./node_modules/azure-devops-ui/Components/Menu/MenuButton.css");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _Core_Observable__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../Core/Observable */ "./node_modules/azure-devops-ui/Core/Observable.js");
/* harmony import */ var _Callout__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../Callout */ "./node_modules/azure-devops-ui/Callout.js");
/* harmony import */ var _Checkbox__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../Checkbox */ "./node_modules/azure-devops-ui/Checkbox.js");
/* harmony import */ var _FocusWithin__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../FocusWithin */ "./node_modules/azure-devops-ui/FocusWithin.js");
/* harmony import */ var _FocusZone__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../FocusZone */ "./node_modules/azure-devops-ui/FocusZone.js");
/* harmony import */ var _Icon__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../Icon */ "./node_modules/azure-devops-ui/Icon.js");
/* harmony import */ var _List__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../List */ "./node_modules/azure-devops-ui/List.js");
/* harmony import */ var _MouseWithin__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../MouseWithin */ "./node_modules/azure-devops-ui/MouseWithin.js");
/* harmony import */ var _Observer__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../Observer */ "./node_modules/azure-devops-ui/Observer.js");
/* harmony import */ var _Util__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../Util */ "./node_modules/azure-devops-ui/Util.js");
/* harmony import */ var _Utilities_Position__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../../Utilities/Position */ "./node_modules/azure-devops-ui/Utilities/Position.js");
/* harmony import */ var _Utilities_Provider__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../../Utilities/Provider */ "./node_modules/azure-devops-ui/Utilities/Provider.js");
/* harmony import */ var _Menu_Props__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./Menu.Props */ "./node_modules/azure-devops-ui/Components/Menu/Menu.Props.js");



















/**
 * Arrange the items into groups and put separators between them and headings above them as needed.
 *
 * @param items Menu items with optional order and groupKey properties
 * @param groupInfo Optional list of menu groups
 */
function groupMenuItems(items, groupInfo) {
    var groupMap = {};
    var maxGroupRank = 0;
    var ungroupedItems = [];
    var groups = groupInfo || [];
    // gather known groups
    if (groups.length > 0) {
        maxGroupRank = groups.reduce(function (max, g) { return (g.rank || 0 > max ? g.rank : max); }, 0) || 0;
        for (var _i = 0, groups_1 = groups; _i < groups_1.length; _i++) {
            var g = groups_1[_i];
            groupMap[g.key] = {
                key: g.key,
                rank: g.rank === undefined ? ++maxGroupRank : g.rank,
                items: []
            };
        }
    }
    // put all menu items in groups
    for (var _a = 0, items_1 = items; _a < items_1.length; _a++) {
        var i = items_1[_a];
        if (i.groupKey) {
            if (groupMap[i.groupKey]) {
                groupMap[i.groupKey].items.push(i);
            }
            else {
                groupMap[i.groupKey] = {
                    key: i.groupKey,
                    rank: ++maxGroupRank,
                    items: [i]
                };
            }
        }
        else {
            ungroupedItems.push(i);
        }
    }
    // sort the groups
    var groupList = Object.keys(groupMap).map(function (n) { return groupMap[n]; });
    groupList.sort(function (a, b) { return (a.rank || Number.MAX_VALUE) - (b.rank || Number.MAX_VALUE); });
    // add ungrouped items to end of group list
    groupList.push({
        key: "ungrouped",
        rank: ++maxGroupRank,
        items: ungroupedItems
    });
    // remove dividers from the beginning and end of each group
    groupList.forEach(function (g) {
        var array = g.items;
        while (array.length > 0 && array[0].itemType === _Menu_Props__WEBPACK_IMPORTED_MODULE_18__.MenuItemType.Divider) {
            array.shift();
        }
        while (array.length > 0 && array[array.length - 1].itemType === _Menu_Props__WEBPACK_IMPORTED_MODULE_18__.MenuItemType.Divider) {
            array.pop();
        }
    });
    // merge the groups into the final array
    items = [];
    var first = true;
    for (var _b = 0, groupList_1 = groupList; _b < groupList_1.length; _b++) {
        var g = groupList_1[_b];
        if (g.items.length === 0) {
            continue;
        }
        // add the separator or header for the top of the group
        if (!first) {
            items.push({
                id: "divider_".concat(g.key),
                itemType: _Menu_Props__WEBPACK_IMPORTED_MODULE_18__.MenuItemType.Divider
            });
        }
        if (first) {
            first = false;
        }
        items = items.concat(g.items);
    }
    return items;
}
var MenuItemProvider = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(MenuItemProvider, _super);
    function MenuItemProvider(menuItems, menuGroups) {
        var _this = _super.call(this, menuItems) || this;
        _this.positions = [];
        var derivedItems = [];
        // Process the set of menu items.
        if (menuItems) {
            var shouldGroupMenuItems = false;
            var shouldSortMenuItems = false;
            var lastItemType = _Menu_Props__WEBPACK_IMPORTED_MODULE_18__.MenuItemType.Divider;
            var dividerItem = void 0;
            for (var _i = 0, menuItems_1 = menuItems; _i < menuItems_1.length; _i++) {
                var menuItem = menuItems_1[_i];
                // Exclude hidden items
                if (menuItem.hidden) {
                    continue;
                }
                // Don't allow multiple dividers to render next to each other.
                if (menuItem.itemType === _Menu_Props__WEBPACK_IMPORTED_MODULE_18__.MenuItemType.Divider) {
                    if (menuItem.itemType === lastItemType) {
                        continue;
                    }
                    dividerItem = menuItem;
                }
                else {
                    if (dividerItem) {
                        derivedItems.push(dividerItem);
                        dividerItem = undefined;
                    }
                    derivedItems.push(menuItem);
                }
                lastItemType = menuItem.itemType || _Menu_Props__WEBPACK_IMPORTED_MODULE_18__.MenuItemType.Normal;
                // If the item is ranked or grouped we need to sort and group them.
                shouldGroupMenuItems = !!menuItem.groupKey || shouldGroupMenuItems;
                shouldSortMenuItems = menuItem.rank >= 0 || shouldSortMenuItems;
            }
            if (shouldSortMenuItems) {
                derivedItems.sort(function (a, b) {
                    var aRank = a.rank || Number.MAX_VALUE;
                    var bRank = b.rank || Number.MAX_VALUE;
                    return aRank - bRank;
                });
            }
            if (shouldGroupMenuItems) {
                derivedItems = groupMenuItems(derivedItems, menuGroups);
            }
        }
        // Update the items to be the derived items.
        _this.items = derivedItems;
        return _this;
    }
    // Custom getCount to support excluding the decorative items from the count.
    MenuItemProvider.prototype.getCount = function () {
        if (this.count === undefined) {
            this.count = 0;
            for (var _i = 0, _a = this.items; _i < _a.length; _i++) {
                var menuItem = _a[_i];
                if (menuItem.itemType === _Menu_Props__WEBPACK_IMPORTED_MODULE_18__.MenuItemType.Divider || menuItem.itemType === _Menu_Props__WEBPACK_IMPORTED_MODULE_18__.MenuItemType.Header) {
                    this.positions.push(-1);
                }
                else {
                    this.positions.push(++this.count);
                }
            }
        }
        return this.count;
    };
    MenuItemProvider.prototype.getItem = function (index) {
        return this.items[index];
    };
    MenuItemProvider.prototype.getPosition = function (index) {
        if (!this.positions.length) {
            this.getCount();
        }
        return this.positions[index];
    };
    return MenuItemProvider;
}(_Utilities_Provider__WEBPACK_IMPORTED_MODULE_17__.ArrayItemProvider));
var Menu = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(Menu, _super);
    function Menu(props) {
        var _this = _super.call(this, props) || this;
        _this.containerElement = react__WEBPACK_IMPORTED_MODULE_5__.createRef();
        _this.expandItem = function (menuItem, expanded) {
            if (!menuItem && _this.state.expandedIndex.value !== -1) {
                menuItem = _this.itemProvider.getItem(_this.state.expandedIndex.value);
            }
            if (menuItem && menuItem.subMenuProps) {
                for (var index = 0; index < _this.itemProvider.length; index++) {
                    if (menuItem === _this.itemProvider.getItem(index)) {
                        if (expanded) {
                            _this.state.expandedIndex.value = index;
                        }
                        else {
                            _this.state.expandedIndex.value = -1;
                        }
                        break;
                    }
                }
            }
        };
        _this.focus = function () {
            if (_this.containerElement.current) {
                _this.containerElement.current.focus();
            }
        };
        _this.getParent = function () {
            return _this.props.parentMenu;
        };
        _this.onActivate = function (menuItem, event) {
            if (_this.props.onActivate) {
                _this.props.onActivate(menuItem, event);
            }
        };
        _this.renderMenuItem = function (index, menuItem, details) {
            var onFocusItem = details.onFocusItem;
            var menuItemDetails = {
                expandedIndex: _this.state.expandedIndex,
                menu: _this,
                menuProps: _this.props,
                onActivate: _this.onActivate,
                onFocusItem: onFocusItem,
                position: _this.itemProvider.getPosition(index),
                setSize: _this.itemProvider.getCount()
            };
            if (menuItem.renderMenuItem) {
                return menuItem.renderMenuItem(index, menuItem, menuItemDetails);
            }
            var key = menuItem.id;
            switch (menuItem.itemType) {
                case _Menu_Props__WEBPACK_IMPORTED_MODULE_18__.MenuItemType.Divider:
                    return MenuDivider(index, menuItem);
                case _Menu_Props__WEBPACK_IMPORTED_MODULE_18__.MenuItemType.Header:
                    return MenuHeader(index, menuItem);
                default:
                    return react__WEBPACK_IMPORTED_MODULE_5__.createElement(MenuItem, { key: key, index: index, menuItem: menuItem, details: menuItemDetails });
            }
        };
        _this.state = {
            expandedIndex: new _Core_Observable__WEBPACK_IMPORTED_MODULE_6__.ObservableValue(-1)
        };
        return _this;
    }
    Menu.prototype.render = function () {
        var _this = this;
        return (react__WEBPACK_IMPORTED_MODULE_5__.createElement(_Observer__WEBPACK_IMPORTED_MODULE_14__.Observer, { items: this.props.items }, function (props) {
            _this.itemProvider = new MenuItemProvider(props.items, _this.props.groups);
            return _this.renderList();
        }));
    };
    Menu.prototype.renderList = function () {
        return (react__WEBPACK_IMPORTED_MODULE_5__.createElement("div", { className: "bolt-menu-container no-outline", ref: this.containerElement, tabIndex: -1 }, this.itemProvider.length > 0 && (react__WEBPACK_IMPORTED_MODULE_5__.createElement(react__WEBPACK_IMPORTED_MODULE_5__.Fragment, null,
            react__WEBPACK_IMPORTED_MODULE_5__.createElement("div", { className: "bolt-menu-spacer", onMouseDown: _Util__WEBPACK_IMPORTED_MODULE_15__.preventDefault }),
            react__WEBPACK_IMPORTED_MODULE_5__.createElement(_List__WEBPACK_IMPORTED_MODULE_12__.List, { ariaLabel: this.props.ariaLabel, className: (0,_Util__WEBPACK_IMPORTED_MODULE_15__.css)(this.props.className, "bolt-menu"), columnCount: 7, focuszoneProps: null, id: this.props.id, itemProvider: this.itemProvider, renderRow: this.renderMenuItem, role: "menu", virtualize: false }),
            react__WEBPACK_IMPORTED_MODULE_5__.createElement("div", { className: "bolt-menu-spacer", onMouseDown: _Util__WEBPACK_IMPORTED_MODULE_15__.preventDefault })))));
    };
    return Menu;
}(react__WEBPACK_IMPORTED_MODULE_5__.Component));

function MenuDivider(index, menuItem) {
    return (react__WEBPACK_IMPORTED_MODULE_5__.createElement("tr", { "aria-hidden": "true", className: (0,_Util__WEBPACK_IMPORTED_MODULE_15__.css)(menuItem.className, "bolt-menuitem-row bolt-list-row bolt-menuitem-divider"), key: menuItem.id || "divider-" + index, onMouseDown: _Util__WEBPACK_IMPORTED_MODULE_15__.preventDefault },
        react__WEBPACK_IMPORTED_MODULE_5__.createElement("td", { className: "bolt-menuitem-cell bolt-list-cell" }),
        react__WEBPACK_IMPORTED_MODULE_5__.createElement("td", { className: "bolt-menuitem-cell bolt-list-cell bolt-menuitem-divider-column", colSpan: 5 },
            react__WEBPACK_IMPORTED_MODULE_5__.createElement("div", { className: "bolt-menuitem-divider-content" })),
        react__WEBPACK_IMPORTED_MODULE_5__.createElement("td", { className: "bolt-menuitem-cell bolt-list-cell" })));
}
function MenuHeader(index, menuItem) {
    return (react__WEBPACK_IMPORTED_MODULE_5__.createElement("tr", { className: (0,_Util__WEBPACK_IMPORTED_MODULE_15__.css)(menuItem.className, "bolt-menuitem-row bolt-list-row bolt-menuitem-header"), key: menuItem.id || "header-" + index, onMouseDown: _Util__WEBPACK_IMPORTED_MODULE_15__.preventDefault, role: "separator" },
        react__WEBPACK_IMPORTED_MODULE_5__.createElement("td", { className: "bolt-menuitem-cell bolt-list-cell" }),
        react__WEBPACK_IMPORTED_MODULE_5__.createElement("td", { className: "bolt-menuitem-cell bolt-list-cell", colSpan: 3 },
            react__WEBPACK_IMPORTED_MODULE_5__.createElement("div", { className: "bolt-menuitem-cell-content bolt-menuitem-cell-text" }, menuItem.text)),
        react__WEBPACK_IMPORTED_MODULE_5__.createElement("td", { className: "bolt-menuitem-cell bolt-list-cell", colSpan: 3 })));
}
var MenuItem = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(MenuItem, _super);
    function MenuItem() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.localKeyStroke = false;
        _this.expanded = false;
        _this.element = react__WEBPACK_IMPORTED_MODULE_5__.createRef();
        _this.handleClick = function (event) {
            var menuItem = _this.props.menuItem;
            if (menuItem.disabled) {
                event.preventDefault();
            }
            else if (!_this.expanded) {
                var ownerResponse = void 0;
                // If the menu owner supplied a handler, we will get feedback from them before doing
                // default processing on the menu item.
                if (menuItem.onActivate) {
                    ownerResponse = menuItem.onActivate(menuItem, event);
                }
                // If the owner specifically returned true, we will not perform any defaults.
                if (!ownerResponse) {
                    if (!menuItem.href) {
                        event.preventDefault();
                    }
                    // For menus with sub-menus we will expand it on activation. For other menu items
                    // they are executed.
                    if (menuItem.subMenuProps) {
                        _this.props.details.menu.expandItem(menuItem, true);
                    }
                    else if (menuItem.href) {
                        _this.props.details.onActivate(menuItem, event);
                    }
                    else if (menuItem.checked === undefined || menuItem.readonly) {
                        _this.props.details.onActivate(menuItem, event);
                    }
                }
            }
        };
        // If the click handler doesn't return false explicitly close dismiss the menu.
        _this.onClick = function (event) {
            if (!event.defaultPrevented) {
                _this.handleClick(event);
            }
        };
        _this.onDismissSubMenu = function (dismissAll) {
            if (!dismissAll && _this.element.current) {
                _this.props.details.menu.expandItem(_this.props.menuItem, false);
            }
        };
        _this.onExpandedChange = function (expandedIndex) {
            return (_this.expanded && expandedIndex !== _this.props.index) || (!_this.expanded && expandedIndex === _this.props.index);
        };
        _this.onFocus = function (event) {
            if (_this.element.current === document.activeElement) {
                _this.props.details.onFocusItem(_this.props.index, event);
            }
        };
        // Handle the keydown to expand the menu.
        _this.onKeyDown = function (event) {
            _this.localKeyStroke = true;
            if (!event.defaultPrevented) {
                var menuItem = _this.props.menuItem;
                if (event.which === _Util__WEBPACK_IMPORTED_MODULE_15__.KeyCode.tab || event.which === _Util__WEBPACK_IMPORTED_MODULE_15__.KeyCode.space) {
                    event.preventDefault();
                }
                else if (event.which === _Util__WEBPACK_IMPORTED_MODULE_15__.KeyCode.rightArrow && menuItem.subMenuProps) {
                    event.preventDefault();
                    _this.props.details.menu.expandItem(menuItem, true);
                }
            }
        };
        // Translate the space and enter keys into onClick event for a menuItem.
        _this.onKeyUp = function (event) {
            // If we get focus while a key is down we will get the keyup. We dont want
            // to process this key, it needs to originate from us.
            if (!_this.localKeyStroke) {
                return;
            }
            if (!event.defaultPrevented) {
                if (event.which === _Util__WEBPACK_IMPORTED_MODULE_15__.KeyCode.enter || event.which === _Util__WEBPACK_IMPORTED_MODULE_15__.KeyCode.space) {
                    _this.handleClick(event);
                }
            }
        };
        _this.onMouseDown = function (event) {
            if (!event.defaultPrevented) {
                var menuItem = _this.props.menuItem;
                if (menuItem.disabled || _this.props.details.expandedIndex.value === _this.props.index) {
                    event.preventDefault();
                }
            }
        };
        // If you hover over a menu with a submenu we will open it after a short delay
        // or stop the closing timeout.
        _this.onMouseEnter = function () {
            if (!_this.props.menuItem.disabled) {
                if (_this.element.current) {
                    _this.element.current.focus();
                }
                _this.props.details.menu.expandItem(_this.props.menuItem, true);
                (0,_Util__WEBPACK_IMPORTED_MODULE_15__.setFocusVisible)(false);
            }
        };
        // If you leave the menu item and sub-menu we will close the menu after a short delay
        // or stop the open timeout.
        _this.onMouseLeave = function () {
            _this.onDismissSubMenu(false);
        };
        return _this;
    }
    MenuItem.prototype.render = function () {
        var _this = this;
        var _a = this.props, index = _a.index, menuItem = _a.menuItem, details = _a.details;
        var menu = details.menu, position = details.position, setSize = details.setSize;
        var ariaLabel = menuItem.ariaLabel, checked = menuItem.checked, className = menuItem.className, disabled = menuItem.disabled, href = menuItem.href, iconProps = menuItem.iconProps, readonly = menuItem.readonly, secondaryText = menuItem.secondaryText, subMenuProps = menuItem.subMenuProps, target = menuItem.target;
        var id = menuItem.id, rel = menuItem.rel, text = menuItem.text;
        // If this is a link menu item we will use an anchor otherwise a plain div.
        var CellType = href ? "div" : "td";
        var RowType = href ? "a" : "tr";
        // If the menu item is a link is targetting an external window or tab and no explicit rel
        // attribute was supplied we will set noopener.
        if (href && target && !rel) {
            rel = "noopener";
        }
        return (react__WEBPACK_IMPORTED_MODULE_5__.createElement(_Observer__WEBPACK_IMPORTED_MODULE_14__.Observer, { checked: checked, expandedIndex: { observableValue: this.props.details.expandedIndex, filter: this.onExpandedChange } }, function (props) {
            _this.expanded = props.expandedIndex === index;
            return (react__WEBPACK_IMPORTED_MODULE_5__.createElement(_MouseWithin__WEBPACK_IMPORTED_MODULE_13__.MouseWithin, { enterDelay: 250, leaveDelay: 250, onMouseEnter: _this.onMouseEnter, onMouseLeave: _this.onMouseLeave }, function (mouseWithinEvents) { return (react__WEBPACK_IMPORTED_MODULE_5__.createElement(_FocusZone__WEBPACK_IMPORTED_MODULE_10__.FocusZoneContext.Consumer, null, function (rowContext) { return (react__WEBPACK_IMPORTED_MODULE_5__.createElement(_FocusWithin__WEBPACK_IMPORTED_MODULE_9__.FocusWithin, { onFocus: _this.onFocus }, function (focusStatus) { return (react__WEBPACK_IMPORTED_MODULE_5__.createElement(_FocusZone__WEBPACK_IMPORTED_MODULE_10__.FocusZone, { direction: _FocusZone__WEBPACK_IMPORTED_MODULE_10__.FocusZoneDirection.Horizontal },
                react__WEBPACK_IMPORTED_MODULE_5__.createElement(RowType, { "aria-label": ariaLabel, "aria-checked": props.checked === true || undefined, "aria-controls": _this.expanded && subMenuProps ? (0,_Util__WEBPACK_IMPORTED_MODULE_15__.getSafeId)(subMenuProps.id) : undefined, "aria-disabled": disabled ? "true" : undefined, "aria-expanded": subMenuProps ? _this.expanded : undefined, "aria-haspopup": subMenuProps ? true : undefined, "aria-posinset": position, "aria-setsize": setSize, className: (0,_Util__WEBPACK_IMPORTED_MODULE_15__.css)(className, "bolt-menuitem-row bolt-list-row bolt-menuitem-row-normal cursor-pointer", disabled && "disabled", _this.expanded && "expanded", focusStatus.hasFocus && "focused"), "data-focuszone": disabled ? undefined : rowContext.focuszoneId, href: href, id: (0,_Util__WEBPACK_IMPORTED_MODULE_15__.getSafeId)(id), role: props.checked !== undefined ? "menuitemcheckbox" : "menuitem", onBlur: focusStatus.onBlur, onClick: _this.onClick, onFocus: focusStatus.onFocus, onKeyDown: _this.onKeyDown, onKeyUp: _this.onKeyUp, onMouseDown: _this.onMouseDown, onMouseEnter: mouseWithinEvents.onMouseEnter, onMouseLeave: mouseWithinEvents.onMouseLeave, ref: _this.element, rel: rel, tabIndex: disabled ? undefined : -1, target: target },
                    react__WEBPACK_IMPORTED_MODULE_5__.createElement(CellType, { className: "bolt-menuitem-cell bolt-list-cell" },
                        react__WEBPACK_IMPORTED_MODULE_5__.createElement("div", { className: "bolt-menuitem-cell-content flex-row" })),
                    react__WEBPACK_IMPORTED_MODULE_5__.createElement(CellType, { className: "bolt-menuitem-cell bolt-list-cell" }, props.checked !== undefined &&
                        ((menuItem.renderMenuCell &&
                            menuItem.renderMenuCell(_Menu_Props__WEBPACK_IMPORTED_MODULE_18__.MenuCell.State, menuItem, details)) || (react__WEBPACK_IMPORTED_MODULE_5__.createElement("div", { className: "bolt-menuitem-cell-content bolt-menuitem-cell-state flex-row" }, readonly === true ? ((0,_Icon__WEBPACK_IMPORTED_MODULE_11__.Icon)({
                            className: (0,_Util__WEBPACK_IMPORTED_MODULE_15__.css)(!props.checked && "invisible"),
                            iconName: "CheckMark"
                        })) : (react__WEBPACK_IMPORTED_MODULE_5__.createElement(_Checkbox__WEBPACK_IMPORTED_MODULE_8__.Checkbox, { checked: props.checked, disabled: disabled, excludeFocusZone: true, excludeTabStop: true, onChange: _this.onClick })))))),
                    react__WEBPACK_IMPORTED_MODULE_5__.createElement(CellType, { className: "bolt-menuitem-cell bolt-list-cell" }, (menuItem.renderMenuCell && menuItem.renderMenuCell(_Menu_Props__WEBPACK_IMPORTED_MODULE_18__.MenuCell.Icon, menuItem, details)) ||
                        (iconProps && (react__WEBPACK_IMPORTED_MODULE_5__.createElement("div", { className: "bolt-menuitem-cell-content bolt-menuitem-cell-icon flex-row" }, (0,_Icon__WEBPACK_IMPORTED_MODULE_11__.Icon)(iconProps))))),
                    react__WEBPACK_IMPORTED_MODULE_5__.createElement(CellType, { className: "bolt-menuitem-cell bolt-list-cell" }, (menuItem.renderMenuCell &&
                        menuItem.renderMenuCell(_Menu_Props__WEBPACK_IMPORTED_MODULE_18__.MenuCell.PrimaryText, menuItem, details)) || (react__WEBPACK_IMPORTED_MODULE_5__.createElement("div", { id: (0,_Util__WEBPACK_IMPORTED_MODULE_15__.getSafeId)(id + "-text"), className: "bolt-menuitem-cell-content bolt-menuitem-cell-text flex-row" }, text ? (react__WEBPACK_IMPORTED_MODULE_5__.createElement(react__WEBPACK_IMPORTED_MODULE_5__.Fragment, null,
                        " ",
                        text,
                        " ")) : (react__WEBPACK_IMPORTED_MODULE_5__.createElement("div", null, "\u00A0"))))),
                    react__WEBPACK_IMPORTED_MODULE_5__.createElement(CellType, { className: "bolt-menuitem-cell bolt-list-cell" }, (menuItem.renderMenuCell &&
                        menuItem.renderMenuCell(_Menu_Props__WEBPACK_IMPORTED_MODULE_18__.MenuCell.SecondaryText, menuItem, details)) ||
                        (secondaryText && (react__WEBPACK_IMPORTED_MODULE_5__.createElement("div", { className: "bolt-menuitem-cell-content bolt-menuitem-cell-secondary flex-row" }, secondaryText)))),
                    react__WEBPACK_IMPORTED_MODULE_5__.createElement(CellType, { className: "bolt-menuitem-cell bolt-list-cell" }, (menuItem.renderMenuCell &&
                        menuItem.renderMenuCell(_Menu_Props__WEBPACK_IMPORTED_MODULE_18__.MenuCell.Action, menuItem, details)) ||
                        (subMenuProps && (react__WEBPACK_IMPORTED_MODULE_5__.createElement("div", { className: "bolt-menuitem-cell-content bolt-menuitem-cell-submenu flex-row" },
                            (0,_Icon__WEBPACK_IMPORTED_MODULE_11__.Icon)({ iconName: "ChevronRightMed", size: _Icon__WEBPACK_IMPORTED_MODULE_11__.IconSize.small }),
                            _this.expanded && _this.element.current && (react__WEBPACK_IMPORTED_MODULE_5__.createElement(ContextualMenu, { anchorElement: _this.element.current, anchorOffset: { horizontal: 0, vertical: -8 }, anchorOrigin: { horizontal: _Utilities_Position__WEBPACK_IMPORTED_MODULE_16__.Location.end, vertical: _Utilities_Position__WEBPACK_IMPORTED_MODULE_16__.Location.start }, subMenu: true, menuOrigin: { horizontal: _Utilities_Position__WEBPACK_IMPORTED_MODULE_16__.Location.start, vertical: _Utilities_Position__WEBPACK_IMPORTED_MODULE_16__.Location.start }, menuProps: subMenuProps, onActivate: _this.props.details.onActivate, onDismiss: _this.onDismissSubMenu, parentMenu: menu })))))),
                    react__WEBPACK_IMPORTED_MODULE_5__.createElement(CellType, { className: "bolt-menuitem-cell bolt-list-cell" },
                        react__WEBPACK_IMPORTED_MODULE_5__.createElement("div", { className: "bolt-menuitem-cell-content flex-row" }))))); })); })); }));
        }));
    };
    return MenuItem;
}(react__WEBPACK_IMPORTED_MODULE_5__.Component));

var ContextualMenu = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(ContextualMenu, _super);
    function ContextualMenu() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.calloutRef = react__WEBPACK_IMPORTED_MODULE_5__.createRef();
        _this.onDismiss = function () {
            if (_this.props.onDismiss) {
                _this.props.onDismiss(false);
            }
        };
        _this.onKeyDown = function (event) {
            if (!event.defaultPrevented) {
                if (event.which === _Util__WEBPACK_IMPORTED_MODULE_15__.KeyCode.escape || event.which === _Util__WEBPACK_IMPORTED_MODULE_15__.KeyCode.tab || (event.which === _Util__WEBPACK_IMPORTED_MODULE_15__.KeyCode.leftArrow && _this.props.subMenu)) {
                    event.preventDefault();
                    if (_this.props.onDismiss) {
                        _this.props.onDismiss(false);
                    }
                }
            }
        };
        _this.onActivate = function (menuItem, event) {
            if (_this.props.menuProps.onActivate) {
                _this.props.menuProps.onActivate(menuItem, event);
            }
            if (_this.props.onActivate) {
                _this.props.onActivate(menuItem, event);
            }
            if (_this.props.onDismiss) {
                _this.props.onDismiss(true);
            }
        };
        _this.preprocessKeyStroke = function (event) {
            if ((0,_Util__WEBPACK_IMPORTED_MODULE_15__.isArrowKey)(event)) {
                return _FocusZone__WEBPACK_IMPORTED_MODULE_10__.FocusZoneKeyStroke.IgnoreParents;
            }
            return _FocusZone__WEBPACK_IMPORTED_MODULE_10__.FocusZoneKeyStroke.IgnoreNone;
        };
        return _this;
    }
    ContextualMenu.prototype.render = function () {
        var _this = this;
        var defaultActiveElement = ".bolt-menu-container";
        // Determine which element should be the first to get focus.
        // Headers may be the first row and they wont take focus.
        var items = _Core_Observable__WEBPACK_IMPORTED_MODULE_6__.ObservableLike.getValue(this.props.menuProps.items);
        // Need slice() because order of elements matters in ObservableCollection
        if (this.props.menuProps.items instanceof _Core_Observable__WEBPACK_IMPORTED_MODULE_6__.ObservableCollection) {
            items = items.slice();
        }
        var sortedItems = items.sort(function (a, b) {
            return (a.rank || Number.MAX_VALUE) - (b.rank || Number.MAX_VALUE);
        });
        for (var menuIndex = 0; menuIndex < sortedItems.length; menuIndex++) {
            if (sortedItems[menuIndex].itemType === _Menu_Props__WEBPACK_IMPORTED_MODULE_18__.MenuItemType.Normal || sortedItems[menuIndex].itemType === undefined) {
                var menuItemId = sortedItems[menuIndex].id;
                if (!menuItemId || sortedItems[menuIndex].disabled) {
                    continue;
                }
                defaultActiveElement = (0,_Util__WEBPACK_IMPORTED_MODULE_15__.getSafeIdSelector)(menuItemId);
                break;
            }
        }
        return (react__WEBPACK_IMPORTED_MODULE_5__.createElement(_Observer__WEBPACK_IMPORTED_MODULE_14__.Observer, { menuItems: {
                observableValue: this.props.menuProps.items,
                filter: function () {
                    var _a;
                    (_a = _this.calloutRef.current) === null || _a === void 0 ? void 0 : _a.updateLayout();
                    return false;
                }
            } }, function () { return (react__WEBPACK_IMPORTED_MODULE_5__.createElement(_Callout__WEBPACK_IMPORTED_MODULE_7__.Callout, { ref: _this.calloutRef, anchorElement: _this.props.anchorElement, anchorOffset: _this.props.anchorOffset, anchorOrigin: _this.props.anchorOrigin, anchorPoint: _this.props.anchorPoint, blurDismiss: true, calloutOrigin: _this.props.menuOrigin, className: _this.props.className, contentClassName: (0,_Util__WEBPACK_IMPORTED_MODULE_15__.css)("bolt-contextual-menu flex-column custom-scrollbar depth-8", _this.props.subMenu && "bolt-contextual-submenu"), contentShadow: true, onDismiss: _this.onDismiss, fixedLayout: _this.props.fixedLayout, focuszoneProps: {
                defaultActiveElement: defaultActiveElement,
                direction: _FocusZone__WEBPACK_IMPORTED_MODULE_10__.FocusZoneDirection.Vertical,
                focusOnMount: true,
                preprocessKeyStroke: _this.preprocessKeyStroke,
                circularNavigation: true
            }, id: _this.props.menuProps.id + "-callout", portalProps: { className: "bolt-menu-portal" } },
            react__WEBPACK_IMPORTED_MODULE_5__.createElement("div", { className: "bolt-contextualmenu-container", onKeyDown: _this.onKeyDown },
                react__WEBPACK_IMPORTED_MODULE_5__.createElement(Menu, (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, _this.props.menuProps, { onActivate: _this.onActivate, parentMenu: _this.props.parentMenu }))))); }));
    };
    return ContextualMenu;
}(react__WEBPACK_IMPORTED_MODULE_5__.Component));



/***/ }),

/***/ "./node_modules/azure-devops-ui/Components/Menu/MenuButton.Props.js":
/*!**************************************************************************!*\
  !*** ./node_modules/azure-devops-ui/Components/Menu/MenuButton.Props.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "./node_modules/azure-devops-ui/Components/Menu/MenuButton.css":
/*!*********************************************************************!*\
  !*** ./node_modules/azure-devops-ui/Components/Menu/MenuButton.css ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/styleDomAPI.js */ "./node_modules/style-loader/dist/runtime/styleDomAPI.js");
/* harmony import */ var _style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/insertBySelector.js */ "./node_modules/style-loader/dist/runtime/insertBySelector.js");
/* harmony import */ var _style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/setAttributesWithoutAttributes.js */ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js");
/* harmony import */ var _style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/insertStyleElement.js */ "./node_modules/style-loader/dist/runtime/insertStyleElement.js");
/* harmony import */ var _style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/styleTagTransform.js */ "./node_modules/style-loader/dist/runtime/styleTagTransform.js");
/* harmony import */ var _style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _css_loader_dist_cjs_js_MenuButton_css__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! !!../../../css-loader/dist/cjs.js!./MenuButton.css */ "./node_modules/css-loader/dist/cjs.js!./node_modules/azure-devops-ui/Components/Menu/MenuButton.css");

      
      
      
      
      
      
      
      
      

var options = {};

options.styleTagTransform = (_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default());
options.setAttributes = (_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default());
options.insert = _style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(null, "head");
options.domAPI = (_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default());
options.insertStyleElement = (_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default());

var update = _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_css_loader_dist_cjs_js_MenuButton_css__WEBPACK_IMPORTED_MODULE_6__["default"], options);




       /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_css_loader_dist_cjs_js_MenuButton_css__WEBPACK_IMPORTED_MODULE_6__["default"] && _css_loader_dist_cjs_js_MenuButton_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals ? _css_loader_dist_cjs_js_MenuButton_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals : undefined);


/***/ }),

/***/ "./node_modules/azure-devops-ui/Components/Menu/MenuButton.js":
/*!********************************************************************!*\
  !*** ./node_modules/azure-devops-ui/Components/Menu/MenuButton.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   MenuButton: () => (/* binding */ MenuButton)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var _CommonImports__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../CommonImports */ "./node_modules/azure-devops-ui/CommonImports.js");
/* harmony import */ var _Core_core_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../Core/core.css */ "./node_modules/azure-devops-ui/Core/core.css");
/* harmony import */ var _Menu_css__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Menu.css */ "./node_modules/azure-devops-ui/Components/Menu/Menu.css");
/* harmony import */ var _MenuButton_css__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./MenuButton.css */ "./node_modules/azure-devops-ui/Components/Menu/MenuButton.css");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _Button__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../Button */ "./node_modules/azure-devops-ui/Button.js");
/* harmony import */ var _Menu__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./Menu */ "./node_modules/azure-devops-ui/Components/Menu/Menu.js");








var buttonId = 1;
var MenuButton = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(MenuButton, _super);
    function MenuButton(props) {
        var _this = _super.call(this, props) || this;
        _this.dropdownButton = react__WEBPACK_IMPORTED_MODULE_5__.createRef();
        _this.expand = function () {
            if (_this.dropdownButton.current) {
                _this.dropdownButton.current.expand();
            }
        };
        _this.collapse = function () {
            if (_this.dropdownButton.current) {
                _this.dropdownButton.current.collapse();
            }
        };
        _this.renderMenu = function (dropdown, dropdownId, anchorElement, anchorOffset, anchorOrigin, anchorPoint, dropdownOrigin) {
            var contextualMenuProps = typeof _this.props.contextualMenuProps === "function" ? _this.props.contextualMenuProps() : _this.props.contextualMenuProps;
            return (react__WEBPACK_IMPORTED_MODULE_5__.createElement(_Menu__WEBPACK_IMPORTED_MODULE_7__.ContextualMenu, { anchorElement: anchorElement, anchorOffset: contextualMenuProps.anchorOffset || anchorOffset, anchorOrigin: contextualMenuProps.anchorOrigin || anchorOrigin, anchorPoint: contextualMenuProps.anchorPoint || anchorPoint, fixedLayout: contextualMenuProps.fixedLayout, menuOrigin: contextualMenuProps.menuOrigin || dropdownOrigin, menuProps: contextualMenuProps.menuProps, className: contextualMenuProps.className, onActivate: function (menuItem, event) {
                    if (contextualMenuProps.onActivate) {
                        contextualMenuProps.onActivate(menuItem, event);
                    }
                    dropdown.collapse();
                }, onDismiss: dropdown.collapse }));
        };
        _this.state = {
            id: _this.props.id || "menu-button-" + buttonId++
        };
        return _this;
    }
    MenuButton.prototype.render = function () {
        var _a;
        var hideDropdownIcon = this.props.hideDropdownIcon;
        var contextualMenuProps = typeof this.props.contextualMenuProps === "function" ? this.props.contextualMenuProps() : this.props.contextualMenuProps;
        return (react__WEBPACK_IMPORTED_MODULE_5__.createElement(_Button__WEBPACK_IMPORTED_MODULE_6__.ExpandableButton, (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, this.props), { menuProps: contextualMenuProps.menuProps }), { dropdownId: (_a = contextualMenuProps === null || contextualMenuProps === void 0 ? void 0 : contextualMenuProps.menuProps) === null || _a === void 0 ? void 0 : _a.id, hideDropdownIcon: hideDropdownIcon, id: this.state.id, ref: this.dropdownButton, renderCallout: this.renderMenu }), this.props.children));
    };
    MenuButton.prototype.focus = function () {
        if (this.dropdownButton.current) {
            this.dropdownButton.current.focus();
        }
    };
    return MenuButton;
}(react__WEBPACK_IMPORTED_MODULE_5__.Component));



/***/ }),

/***/ "./node_modules/azure-devops-ui/Components/Menu/MoreButton.js":
/*!********************************************************************!*\
  !*** ./node_modules/azure-devops-ui/Components/Menu/MoreButton.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   MoreButton: () => (/* binding */ MoreButton)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var _CommonImports__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../CommonImports */ "./node_modules/azure-devops-ui/CommonImports.js");
/* harmony import */ var _Core_core_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../Core/core.css */ "./node_modules/azure-devops-ui/Core/core.css");
/* harmony import */ var _Menu_css__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Menu.css */ "./node_modules/azure-devops-ui/Components/Menu/Menu.css");
/* harmony import */ var _MenuButton_css__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./MenuButton.css */ "./node_modules/azure-devops-ui/Components/Menu/MenuButton.css");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _Resources_Widgets__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../Resources.Widgets */ "./node_modules/azure-devops-ui/Resources.Widgets.js");
/* harmony import */ var _MenuButton__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./MenuButton */ "./node_modules/azure-devops-ui/Components/Menu/MenuButton.js");








var MoreButton = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(MoreButton, _super);
    function MoreButton() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.menuButton = react__WEBPACK_IMPORTED_MODULE_5__.createRef();
        _this.expand = function () {
            if (_this.menuButton.current) {
                _this.menuButton.current.expand();
            }
        };
        _this.collapse = function () {
            if (_this.menuButton.current) {
                _this.menuButton.current.collapse();
            }
        };
        return _this;
    }
    MoreButton.prototype.render = function () {
        return (react__WEBPACK_IMPORTED_MODULE_5__.createElement(_MenuButton__WEBPACK_IMPORTED_MODULE_7__.MenuButton, (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({ ariaLabel: _Resources_Widgets__WEBPACK_IMPORTED_MODULE_6__.MoreActions, hideDropdownIcon: true, iconProps: { iconName: "MoreVertical" }, ref: this.menuButton, subtle: true, tooltipProps: { text: _Resources_Widgets__WEBPACK_IMPORTED_MODULE_6__.MoreActions } }, this.props)));
    };
    MoreButton.prototype.focus = function () {
        if (this.menuButton.current) {
            this.menuButton.current.focus();
        }
    };
    return MoreButton;
}(react__WEBPACK_IMPORTED_MODULE_5__.Component));



/***/ }),

/***/ "./node_modules/azure-devops-ui/Components/MessageBar/MessageBar.Props.js":
/*!********************************************************************************!*\
  !*** ./node_modules/azure-devops-ui/Components/MessageBar/MessageBar.Props.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   MessageBarSeverity: () => (/* binding */ MessageBarSeverity)
/* harmony export */ });
/**
 * Used to regulate the MessageBar's background color and default icon
 */
var MessageBarSeverity;
(function (MessageBarSeverity) {
    MessageBarSeverity["Info"] = "Info";
    MessageBarSeverity["Warning"] = "Warning";
    MessageBarSeverity["Error"] = "Error";
    MessageBarSeverity["Success"] = "Success";
})(MessageBarSeverity || (MessageBarSeverity = {}));


/***/ }),

/***/ "./node_modules/azure-devops-ui/Components/MessageBar/MessageBar.css":
/*!***************************************************************************!*\
  !*** ./node_modules/azure-devops-ui/Components/MessageBar/MessageBar.css ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/styleDomAPI.js */ "./node_modules/style-loader/dist/runtime/styleDomAPI.js");
/* harmony import */ var _style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/insertBySelector.js */ "./node_modules/style-loader/dist/runtime/insertBySelector.js");
/* harmony import */ var _style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/setAttributesWithoutAttributes.js */ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js");
/* harmony import */ var _style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/insertStyleElement.js */ "./node_modules/style-loader/dist/runtime/insertStyleElement.js");
/* harmony import */ var _style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/styleTagTransform.js */ "./node_modules/style-loader/dist/runtime/styleTagTransform.js");
/* harmony import */ var _style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _css_loader_dist_cjs_js_MessageBar_css__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! !!../../../css-loader/dist/cjs.js!./MessageBar.css */ "./node_modules/css-loader/dist/cjs.js!./node_modules/azure-devops-ui/Components/MessageBar/MessageBar.css");

      
      
      
      
      
      
      
      
      

var options = {};

options.styleTagTransform = (_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default());
options.setAttributes = (_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default());
options.insert = _style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(null, "head");
options.domAPI = (_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default());
options.insertStyleElement = (_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default());

var update = _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_css_loader_dist_cjs_js_MessageBar_css__WEBPACK_IMPORTED_MODULE_6__["default"], options);




       /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_css_loader_dist_cjs_js_MessageBar_css__WEBPACK_IMPORTED_MODULE_6__["default"] && _css_loader_dist_cjs_js_MessageBar_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals ? _css_loader_dist_cjs_js_MessageBar_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals : undefined);


/***/ }),

/***/ "./node_modules/azure-devops-ui/Components/MessageBar/MessageBar.js":
/*!**************************************************************************!*\
  !*** ./node_modules/azure-devops-ui/Components/MessageBar/MessageBar.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   MessageBar: () => (/* binding */ MessageBar)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var _CommonImports__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../CommonImports */ "./node_modules/azure-devops-ui/CommonImports.js");
/* harmony import */ var _Core_core_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../Core/core.css */ "./node_modules/azure-devops-ui/Core/core.css");
/* harmony import */ var _MessageBar_css__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./MessageBar.css */ "./node_modules/azure-devops-ui/Components/MessageBar/MessageBar.css");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _Core_Util_Screen__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../Core/Util/Screen */ "./node_modules/azure-devops-ui/Core/Util/Screen.js");
/* harmony import */ var _Core_Util_String__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../Core/Util/String */ "./node_modules/azure-devops-ui/Core/Util/String.js");
/* harmony import */ var _Breakpoint__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../Breakpoint */ "./node_modules/azure-devops-ui/Breakpoint.js");
/* harmony import */ var _Button__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../Button */ "./node_modules/azure-devops-ui/Button.js");
/* harmony import */ var _FocusZone__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../FocusZone */ "./node_modules/azure-devops-ui/FocusZone.js");
/* harmony import */ var _Icon__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../Icon */ "./node_modules/azure-devops-ui/Icon.js");
/* harmony import */ var _Resources_MessageBar__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../Resources.MessageBar */ "./node_modules/azure-devops-ui/Resources.MessageBar.js");
/* harmony import */ var _Util__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../Util */ "./node_modules/azure-devops-ui/Util.js");
/* harmony import */ var _MessageBar_Props__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./MessageBar.Props */ "./node_modules/azure-devops-ui/Components/MessageBar/MessageBar.Props.js");














var MessageBar = function (props) {
    var buttonProps = props.buttonProps, className = props.className, messageClassName = props.messageClassName, iconProps = props.iconProps, onDismiss = props.onDismiss, _a = props.severity, severity = _a === void 0 ? _MessageBar_Props__WEBPACK_IMPORTED_MODULE_13__.MessageBarSeverity.Info : _a, role = props.role;
    var severityProps = MessageBarSeverityInternal[severity];
    var severityClassName = severityProps.className;
    var renderIconProps = iconProps || severityProps.defaultIconProps;
    var screenSize = react__WEBPACK_IMPORTED_MODULE_4__.useContext(_Core_Util_Screen__WEBPACK_IMPORTED_MODULE_5__.ScreenContext);
    var _b = react__WEBPACK_IMPORTED_MODULE_4__.useState(screenSize.size.value === _Core_Util_Screen__WEBPACK_IMPORTED_MODULE_5__.ScreenSize.xsmall), mobile = _b[0], setMobile = _b[1];
    var dismissButtonLabel = (0,_Core_Util_String__WEBPACK_IMPORTED_MODULE_6__.format)(_Resources_MessageBar__WEBPACK_IMPORTED_MODULE_11__.DismissButtonLabel, getSeverityString(severity));
    return (react__WEBPACK_IMPORTED_MODULE_4__.createElement("div", { className: (0,_Util__WEBPACK_IMPORTED_MODULE_12__.css)(className, "bolt-messagebar", severityClassName, mobile && "mobile") },
        react__WEBPACK_IMPORTED_MODULE_4__.createElement(_Breakpoint__WEBPACK_IMPORTED_MODULE_7__.Breakpoint, { breakpoints: [1, _Core_Util_Screen__WEBPACK_IMPORTED_MODULE_5__.ScreenBreakpoints.small], onBreakpoint: function (index) { return setMobile(index === 0); } }),
        react__WEBPACK_IMPORTED_MODULE_4__.createElement(_FocusZone__WEBPACK_IMPORTED_MODULE_9__.FocusZone, { direction: _FocusZone__WEBPACK_IMPORTED_MODULE_9__.FocusZoneDirection.Horizontal },
            react__WEBPACK_IMPORTED_MODULE_4__.createElement("div", { className: (0,_Util__WEBPACK_IMPORTED_MODULE_12__.css)("bolt-messagebar-content flex-grow", mobile && screenSize.size.value === _Core_Util_Screen__WEBPACK_IMPORTED_MODULE_5__.ScreenSize.xsmall ? "flex-column" : "flex-row") },
                react__WEBPACK_IMPORTED_MODULE_4__.createElement("div", { className: (0,_Util__WEBPACK_IMPORTED_MODULE_12__.css)("flex-row", messageClassName) },
                    react__WEBPACK_IMPORTED_MODULE_4__.createElement("div", { className: "bolt-messagebar-icons flex-row" },
                        react__WEBPACK_IMPORTED_MODULE_4__.createElement(_Icon__WEBPACK_IMPORTED_MODULE_10__.Icon, (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, renderIconProps, { className: (0,_Util__WEBPACK_IMPORTED_MODULE_12__.css)(renderIconProps.className, "bolt-messagebar-icon medium") }))),
                    react__WEBPACK_IMPORTED_MODULE_4__.createElement("div", { className: "bolt-messagebar-message flex-row flex-wrap flex-grow flex-shrink flex-center body-m word-break", role: role ? role : severity === _MessageBar_Props__WEBPACK_IMPORTED_MODULE_13__.MessageBarSeverity.Error || severity === _MessageBar_Props__WEBPACK_IMPORTED_MODULE_13__.MessageBarSeverity.Warning ? "alert" : undefined }, props.children),
                    onDismiss && mobile && (react__WEBPACK_IMPORTED_MODULE_4__.createElement(_Button__WEBPACK_IMPORTED_MODULE_8__.Button, { ariaLabel: dismissButtonLabel, className: "bolt-messagebar-close-button relative flex-self-start", iconProps: { iconName: "Cancel" }, key: "closeButton", onClick: onDismiss, subtle: true }))),
                ((onDismiss && !mobile) || (buttonProps && buttonProps.length > 0)) && (react__WEBPACK_IMPORTED_MODULE_4__.createElement("div", { className: "bolt-messagebar-buttons flex-noshrink flex-row flex-center flex-self-stretch" },
                    buttonProps && buttonProps.map(function (value, index) { return react__WEBPACK_IMPORTED_MODULE_4__.createElement(_Button__WEBPACK_IMPORTED_MODULE_8__.Button, (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({ key: index }, value)); }),
                    onDismiss && !mobile && (react__WEBPACK_IMPORTED_MODULE_4__.createElement(_Button__WEBPACK_IMPORTED_MODULE_8__.Button, { ariaLabel: dismissButtonLabel, className: "bolt-messagebar-close-button", iconProps: { iconName: "Cancel" }, key: "closeButton", onClick: onDismiss, subtle: true }))))))));
};
function getSeverityString(severity) {
    switch (severity) {
        case _MessageBar_Props__WEBPACK_IMPORTED_MODULE_13__.MessageBarSeverity.Info:
            return _Resources_MessageBar__WEBPACK_IMPORTED_MODULE_11__.Info;
        case _MessageBar_Props__WEBPACK_IMPORTED_MODULE_13__.MessageBarSeverity.Error:
            return _Resources_MessageBar__WEBPACK_IMPORTED_MODULE_11__.Error;
        case _MessageBar_Props__WEBPACK_IMPORTED_MODULE_13__.MessageBarSeverity.Success:
            return _Resources_MessageBar__WEBPACK_IMPORTED_MODULE_11__.Success;
        case _MessageBar_Props__WEBPACK_IMPORTED_MODULE_13__.MessageBarSeverity.Warning:
            return _Resources_MessageBar__WEBPACK_IMPORTED_MODULE_11__.Warning;
    }
    return "";
}
// Set the function component's name so that Enzyme can recognize it
MessageBar.displayName = "MessageBar";
/**
 * Internal backing struct maps MessageBarSeverity to the necessary data
 */
var MessageBarSeverityInternal = {
    Info: {
        className: "severity-info",
        defaultIconProps: {
            iconName: "Info"
        }
    },
    Success: {
        className: "severity-success",
        defaultIconProps: { iconName: "Completed" }
    },
    Warning: {
        className: "severity-warning",
        defaultIconProps: { iconName: "Warning" }
    },
    Error: {
        className: "severity-error",
        defaultIconProps: { iconName: "ErrorBadge" }
    }
};


/***/ }),

/***/ "./node_modules/azure-devops-ui/Components/MouseWithin/MouseWithin.Props.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/azure-devops-ui/Components/MouseWithin/MouseWithin.Props.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "./node_modules/azure-devops-ui/Components/MouseWithin/MouseWithin.js":
/*!****************************************************************************!*\
  !*** ./node_modules/azure-devops-ui/Components/MouseWithin/MouseWithin.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   MouseWithin: () => (/* binding */ MouseWithin)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var _CommonImports__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../CommonImports */ "./node_modules/azure-devops-ui/CommonImports.js");
/* harmony import */ var _Core_core_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../Core/core.css */ "./node_modules/azure-devops-ui/Core/core.css");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _Util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../Util */ "./node_modules/azure-devops-ui/Util.js");





var MouseWithin = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(MouseWithin, _super);
    function MouseWithin() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.enterTimeout = 0;
        _this.delayTimeout = 0;
        _this.mouse = false;
        /**
         * onMouseEnter method that should be attached to the onMouseEnter handler of the
         * continer's root element.
         */
        _this.onMouseEnter = function (event) {
            // If the mouse is just entering one of the child components and not just moving
            // from one child to another we will call the onMouseEnter delegate if supplied.
            if (!_this.mouse) {
                _this.mouse = true;
                // Clear any pending leave if we have left and re-entered the component during
                // the leaveTimeout.
                if (_this.delayTimeout) {
                    window.clearTimeout(_this.delayTimeout);
                    _this.delayTimeout = 0;
                }
                if (_this.props.enterDelay) {
                    event.persist();
                    // persist does not preserve the currentTarget so we do that manually
                    var currentTarget_1 = event.currentTarget;
                    _this.enterTimeout = window.setTimeout(function () {
                        _this.enterTimeout = 0;
                        var newCurrentTarget = event.currentTarget;
                        event.currentTarget = currentTarget_1;
                        _this.mouseEntered(event);
                        event.currentTarget = newCurrentTarget;
                    }, _this.props.enterDelay);
                }
                else {
                    _this.mouseEntered(event);
                }
            }
        };
        /**
         * onMouseLeave method that should be attached to the onMouseLeave handler of the
         * container's root element.
         */
        _this.onMouseLeave = function (event) {
            if (_this.mouse) {
                _this.mouse = false;
                // Clear any pending enterTimeout if we didnt stay over the element long enough.
                if (_this.enterTimeout) {
                    window.clearTimeout(_this.enterTimeout);
                    _this.enterTimeout = 0;
                }
                if (_this.props.leaveDelay) {
                    event.persist();
                    _this.delayTimeout = window.setTimeout(function () {
                        _this.delayTimeout = 0;
                        _this.mouseLeft(event);
                    }, _this.props.leaveDelay);
                }
                else {
                    _this.mouseLeft(event);
                }
            }
        };
        return _this;
    }
    MouseWithin.prototype.render = function () {
        var newProps = {
            onMouseEnter: this.onMouseEnter,
            onMouseLeave: this.onMouseLeave
        };
        if ((0,_Util__WEBPACK_IMPORTED_MODULE_4__.isFunctionalChildren)(this.props.children)) {
            var child = this.props.children;
            // For functional components we pass the hasMouse attribute as well.
            newProps.hasMouse = this.mouse;
            return child(newProps);
        }
        else {
            var child = react__WEBPACK_IMPORTED_MODULE_3__.Children.only(this.props.children);
            return react__WEBPACK_IMPORTED_MODULE_3__.cloneElement(child, (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, child.props), newProps), child.props.children);
        }
    };
    MouseWithin.prototype.componentWillUnmount = function () {
        if (this.enterTimeout) {
            window.clearTimeout(this.enterTimeout);
        }
        if (this.delayTimeout) {
            window.clearTimeout(this.delayTimeout);
        }
    };
    /**
     * hasMouse returns true if the mouse is contained within the component
     * hierarchy. This includes portals, the element may or may not
     * be a direct descendant of the component in the DOM structure.
     */
    MouseWithin.prototype.hasMouse = function () {
        return this.mouse;
    };
    MouseWithin.prototype.mouseEntered = function (event) {
        // If we are tracking the mouse state we will force a component update.
        if (this.props.updateStateOnMouseChange) {
            this.forceUpdate();
        }
        if (this.props.onMouseEnter) {
            this.props.onMouseEnter(event);
        }
    };
    MouseWithin.prototype.mouseLeft = function (event) {
        // If we are tracking the mouse state we will force a component update.
        if (this.props.updateStateOnMouseChange) {
            this.forceUpdate();
        }
        if (this.props.onMouseLeave) {
            this.props.onMouseLeave(event);
        }
    };
    MouseWithin.defaultProps = {
        updateStateOnMouseChange: true
    };
    return MouseWithin;
}(react__WEBPACK_IMPORTED_MODULE_3__.Component));



/***/ }),

/***/ "./node_modules/azure-devops-ui/Components/Observer/ItemsObserver.Props.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/azure-devops-ui/Components/Observer/ItemsObserver.Props.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "./node_modules/azure-devops-ui/Components/Observer/ItemsObserver.js":
/*!***************************************************************************!*\
  !*** ./node_modules/azure-devops-ui/Components/Observer/ItemsObserver.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ItemsObserver: () => (/* binding */ ItemsObserver)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var _CommonImports__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../CommonImports */ "./node_modules/azure-devops-ui/CommonImports.js");
/* harmony import */ var _Core_core_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../Core/core.css */ "./node_modules/azure-devops-ui/Core/core.css");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _Utilities_Provider__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../Utilities/Provider */ "./node_modules/azure-devops-ui/Utilities/Provider.js");
/* harmony import */ var _Observer__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Observer */ "./node_modules/azure-devops-ui/Components/Observer/Observer.js");






var ItemsObserver = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(ItemsObserver, _super);
    function ItemsObserver() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.onItemsChanged = function (value, action) {
            var _a = _this.props, getUnselectableRanges = _a.getUnselectableRanges, items = _a.items, selection = _a.selection;
            selection.onItemsChanged(value, action);
            selection.unselectableRanges = getUnselectableRanges((0,_Utilities_Provider__WEBPACK_IMPORTED_MODULE_4__.getItemsValue)(items));
            return false;
        };
        return _this;
    }
    ItemsObserver.prototype.componentDidMount = function () {
        this.props.selection.unselectableRanges = this.props.getUnselectableRanges((0,_Utilities_Provider__WEBPACK_IMPORTED_MODULE_4__.getItemsValue)(this.props.items));
    };
    ItemsObserver.prototype.render = function () {
        var itemsObservable = {
            observableValue: this.props.items,
            filter: this.onItemsChanged
        };
        return react__WEBPACK_IMPORTED_MODULE_3__.createElement(_Observer__WEBPACK_IMPORTED_MODULE_5__.UncheckedObserver, { itemsObservable: itemsObservable }, this.props.children);
    };
    return ItemsObserver;
}(react__WEBPACK_IMPORTED_MODULE_3__.Component));



/***/ }),

/***/ "./node_modules/azure-devops-ui/Components/Observer/Observer.Props.js":
/*!****************************************************************************!*\
  !*** ./node_modules/azure-devops-ui/Components/Observer/Observer.Props.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "./node_modules/azure-devops-ui/Components/Observer/Observer.js":
/*!**********************************************************************!*\
  !*** ./node_modules/azure-devops-ui/Components/Observer/Observer.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Observer: () => (/* binding */ Observer),
/* harmony export */   UncheckedObserver: () => (/* binding */ UncheckedObserver)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var _CommonImports__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../CommonImports */ "./node_modules/azure-devops-ui/CommonImports.js");
/* harmony import */ var _Core_core_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../Core/core.css */ "./node_modules/azure-devops-ui/Core/core.css");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _Core_Observable__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../Core/Observable */ "./node_modules/azure-devops-ui/Core/Observable.js");





/**
 * Handles subscription to properties that are IObservableValues, so that components don't have to handle on their own.
 *
 * Usage:
 *
 * <Observer myObservableValue={observableValue}>
 *     <MyComponent myObservableValue='' />
 * </Observer>
 *
 * Your component will get re-rendered with the new value of myObservableValue whenever that value changes.
 * Additionally, any additional props set on the Observer will also get passed down.
 */
var ObserverBase = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(ObserverBase, _super);
    function ObserverBase(props) {
        var _this = _super.call(this, props) || this;
        _this.subscriptions = {};
        // Initialize the state with the initial value of the observable.
        var state = { values: {}, oldProps: {} };
        for (var propName in props) {
            state.values[propName] = getPropValue(props[propName]);
        }
        _this.state = state;
        return _this;
    }
    ObserverBase.getDerivedStateFromProps = function (props, state) {
        var newState = updateSubscriptionsAndState(state.oldProps, props, state);
        if (newState != null) {
            return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, newState), { oldProps: props });
        }
        return { oldProps: props };
    };
    ObserverBase.prototype.render = function () {
        var newProps = {};
        // Copy over any properties from the observable component to the children.
        for (var key in this.state.values) {
            if (key !== "children") {
                newProps[key] = this.state.values[key];
            }
        }
        if (typeof this.props.children === "function") {
            var child = this.props.children;
            return child(newProps);
        }
        else {
            var child = react__WEBPACK_IMPORTED_MODULE_3__.Children.only(this.props.children);
            return react__WEBPACK_IMPORTED_MODULE_3__.cloneElement(child, (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, child.props), newProps), child.props.children);
        }
    };
    ObserverBase.prototype.componentDidMount = function () {
        this.updateSubscriptionsAndStateAfterRender();
    };
    ObserverBase.prototype.componentDidUpdate = function () {
        this.updateSubscriptionsAndStateAfterRender();
        if (this.props.onUpdate) {
            this.props.onUpdate();
        }
    };
    ObserverBase.prototype.componentWillUnmount = function () {
        // Unsubscribe from any of the observable properties.
        for (var propName in this.subscribedProps) {
            this.unsubscribe(propName, this.subscribedProps);
        }
    };
    ObserverBase.prototype.subscribe = function (propName, props) {
        if (propName !== "children") {
            var observableExpression = void 0;
            var observableValue = props[propName];
            var action = void 0;
            // If this is an observableExpression, we need to subscribe to the value
            // and execute the filter on changes.
            if (observableValue && observableValue.observableValue !== undefined) {
                observableExpression = observableValue;
                observableValue = observableExpression.observableValue;
                action = observableExpression.action;
            }
            if (_Core_Observable__WEBPACK_IMPORTED_MODULE_4__.ObservableLike.isObservable(observableValue)) {
                var delegate = this.onValueChanged.bind(this, propName, observableValue, observableExpression);
                _Core_Observable__WEBPACK_IMPORTED_MODULE_4__.ObservableLike.subscribe(observableValue, delegate, action);
                this.subscriptions[propName] = { delegate: delegate, action: action };
            }
        }
    };
    ObserverBase.prototype.unsubscribe = function (propName, props) {
        if (propName !== "children") {
            var observableValue = getObservableValue(props[propName]);
            if (_Core_Observable__WEBPACK_IMPORTED_MODULE_4__.ObservableLike.isObservable(observableValue)) {
                var subscription = this.subscriptions[propName];
                _Core_Observable__WEBPACK_IMPORTED_MODULE_4__.ObservableLike.unsubscribe(observableValue, subscription.delegate, subscription.action);
                delete this.subscriptions[propName];
            }
        }
    };
    ObserverBase.prototype.updateSubscriptionsAndStateAfterRender = function () {
        var newState = updateSubscriptionsAndState(this.subscribedProps, this.props, this.state, this);
        if (newState != null) {
            this.setState(newState);
        }
        this.subscribedProps = (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, this.props);
    };
    ObserverBase.prototype.onValueChanged = function (propName, observableValue, observableExpression, value, action) {
        var setState = true;
        if (!(propName in this.subscriptions)) {
            return;
        }
        // If this is an ObservableExpression we will call the filter before setting state.
        if (observableExpression && observableExpression.filter) {
            setState = observableExpression.filter(value, action);
        }
        if (setState) {
            this.setState(function (prevState, props) {
                var _a;
                return {
                    values: (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, prevState.values), (_a = {}, _a[propName] = observableValue.value || value, _a))
                };
            });
        }
    };
    return ObserverBase;
}(react__WEBPACK_IMPORTED_MODULE_3__.Component));
function getObservableValue(propValue) {
    if (propValue && propValue.observableValue !== undefined) {
        return propValue.observableValue;
    }
    return propValue;
}
function getPropValue(propValue) {
    return _Core_Observable__WEBPACK_IMPORTED_MODULE_4__.ObservableLike.getValue(getObservableValue(propValue));
}
function updateSubscriptionsAndState(oldProps, newProps, state, component) {
    // We need to unsubscribe from any observable values on old props and
    // subscribe to any observable values on new props.
    // In addition, if any of the values of the observables on the new props
    // differ from the value on the state, then we need to update the state.
    // This is possible if the value of the observable changed while the value
    // was being rendered, but before we had set up the subscription.
    // If we want to unsubscribe/resubscribe, then a component should be passed,
    // since this method is always called statically.
    var newState = (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, state);
    var stateChanged = false;
    if (oldProps) {
        for (var propName in oldProps) {
            var oldValue = getObservableValue(oldProps[propName]);
            var newValue = getObservableValue(newProps[propName]);
            if (oldValue !== newValue) {
                component && component.unsubscribe(propName, oldProps);
                if (newValue === undefined) {
                    delete newState.values[propName];
                    stateChanged = true;
                }
            }
        }
    }
    for (var propName in newProps) {
        var oldValue = oldProps && getObservableValue(oldProps[propName]);
        var newValue = getObservableValue(newProps[propName]);
        if (oldValue !== newValue) {
            component && component.subscribe(propName, newProps);
            // Look for changes in the observables between creation and now.
            if (state.values[propName] !== getPropValue(newValue)) {
                newState.values[propName] = getPropValue(newValue);
                stateChanged = true;
            }
        }
    }
    // If any state updates occurred update the state now.
    if (stateChanged) {
        return newState;
    }
    return null;
}
/**
 * Handles subscription to properties that are IObservableValues, so that components don't have to handle on their own.
 *
 * Usage:
 *
 * <Observer myObservableValue={observableValue}>
 *     {(props: {myObservableValue: string}) =>
 *         <MyComponent myObservableValue={props.myObservableValue} />
 *     }
 * </Observer>
 *
 * Your component will get re-rendered with the new value of myObservableValue whenever that value changes.
 */
var Observer = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(Observer, _super);
    function Observer() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return Observer;
}(ObserverBase));

/**
 * UncheckedObserver is like Observer, except that it performs less (no) typechecking on the child observer function,
 * and allows child React elements.
 *
 * Usage:
 *
 * <Observer myObservableValue={observableValue}>
 *     {(props: {myObservableValue: string}) =>
 *         <MyComponent myObservableValue={props.myObservableValue} />
 *     }
 * </Observer>
 *
 * -or-
 *
 * <Observer myObservableValue={observableValue}>
 *     <MyComponent myObservableValue='' />
 * </Observer>
 *
 * Your component will get re-rendered with the new value of myObservableValue whenever that value changes.
 * Additionally, any additional props set on the Observer will also get passed down.
 */
var UncheckedObserver = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(UncheckedObserver, _super);
    function UncheckedObserver() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return UncheckedObserver;
}(ObserverBase));



/***/ }),

/***/ "./node_modules/azure-devops-ui/Components/Observer/ReadyableArrayObserver.Props.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/azure-devops-ui/Components/Observer/ReadyableArrayObserver.Props.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "./node_modules/azure-devops-ui/Components/Observer/ReadyableArrayObserver.js":
/*!************************************************************************************!*\
  !*** ./node_modules/azure-devops-ui/Components/Observer/ReadyableArrayObserver.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ReadyableArrayObserver: () => (/* binding */ ReadyableArrayObserver)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var _CommonImports__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../CommonImports */ "./node_modules/azure-devops-ui/CommonImports.js");
/* harmony import */ var _Core_core_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../Core/core.css */ "./node_modules/azure-devops-ui/Core/core.css");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _Observer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Observer */ "./node_modules/azure-devops-ui/Components/Observer/Observer.js");





var ReadyableArrayObserver = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(ReadyableArrayObserver, _super);
    function ReadyableArrayObserver() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.loaded = false;
        _this.handleLoaded = function () {
            if (_this.props.data.ready.value && !_this.loaded) {
                _this.props.onReady && _this.props.onReady();
                _this.loaded = true;
            }
        };
        return _this;
    }
    ReadyableArrayObserver.prototype.render = function () {
        var _a = this.props, dataComponent = _a.dataComponent, loadingComponent = _a.loadingComponent, zeroDataComponent = _a.zeroDataComponent;
        return (react__WEBPACK_IMPORTED_MODULE_3__.createElement(_Observer__WEBPACK_IMPORTED_MODULE_4__.Observer, { data: this.props.data, onUpdate: this.handleLoaded, ready: this.props.data.ready }, function (props) {
            if (!props.ready) {
                return loadingComponent ? loadingComponent() : null;
            }
            if (props.data.length) {
                return dataComponent(props.data);
            }
            return zeroDataComponent ? zeroDataComponent() : null;
        }));
    };
    ReadyableArrayObserver.prototype.componentDidUpdate = function (prevProps) {
        if (prevProps.data !== this.props.data) {
            this.loaded = false;
            this.handleLoaded();
        }
    };
    ReadyableArrayObserver.prototype.componentDidMount = function () {
        this.handleLoaded();
    };
    return ReadyableArrayObserver;
}(react__WEBPACK_IMPORTED_MODULE_3__.Component));



/***/ }),

/***/ "./node_modules/azure-devops-ui/Components/Observer/SelectionObserver.Props.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/azure-devops-ui/Components/Observer/SelectionObserver.Props.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "./node_modules/azure-devops-ui/Components/Observer/SelectionObserver.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/azure-devops-ui/Components/Observer/SelectionObserver.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SelectionObserver: () => (/* binding */ SelectionObserver)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var _CommonImports__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../CommonImports */ "./node_modules/azure-devops-ui/CommonImports.js");
/* harmony import */ var _Core_core_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../Core/core.css */ "./node_modules/azure-devops-ui/Core/core.css");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _Observer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Observer */ "./node_modules/azure-devops-ui/Components/Observer/Observer.js");





var SelectionObserver = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(SelectionObserver, _super);
    function SelectionObserver() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.onSelectionChanged = function (value, action) {
            var shouldUpdate = false;
            if (action === "select" && _this.props.onSelect) {
                shouldUpdate = _this.props.onSelect(value);
            }
            if ((action === "select" || action === "unselect" || action === "set") && _this.props.onSelectionChanged) {
                shouldUpdate = _this.props.onSelectionChanged(_this.props.selection.value, action);
            }
            return shouldUpdate;
        };
        return _this;
    }
    SelectionObserver.prototype.render = function () {
        var selectionObservable = { observableValue: this.props.selection, filter: this.onSelectionChanged };
        return react__WEBPACK_IMPORTED_MODULE_3__.createElement(_Observer__WEBPACK_IMPORTED_MODULE_4__.UncheckedObserver, { selectionObservable: selectionObservable }, this.props.children);
    };
    return SelectionObserver;
}(react__WEBPACK_IMPORTED_MODULE_3__.Component));



/***/ }),

/***/ "./node_modules/azure-devops-ui/Components/Pill/Pill.Props.js":
/*!********************************************************************!*\
  !*** ./node_modules/azure-devops-ui/Components/Pill/Pill.Props.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   PillSize: () => (/* binding */ PillSize),
/* harmony export */   PillVariant: () => (/* binding */ PillVariant)
/* harmony export */ });
var PillSize;
(function (PillSize) {
    PillSize[PillSize["compact"] = 0] = "compact";
    PillSize[PillSize["regular"] = 1] = "regular";
    PillSize[PillSize["large"] = 2] = "large";
})(PillSize || (PillSize = {}));
var PillVariant;
(function (PillVariant) {
    PillVariant[PillVariant["standard"] = 0] = "standard";
    PillVariant[PillVariant["outlined"] = 1] = "outlined";
    PillVariant[PillVariant["colored"] = 2] = "colored";
    PillVariant[PillVariant["themedStandard"] = 3] = "themedStandard";
})(PillVariant || (PillVariant = {}));


/***/ }),

/***/ "./node_modules/azure-devops-ui/Components/Pill/Pill.css":
/*!***************************************************************!*\
  !*** ./node_modules/azure-devops-ui/Components/Pill/Pill.css ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/styleDomAPI.js */ "./node_modules/style-loader/dist/runtime/styleDomAPI.js");
/* harmony import */ var _style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/insertBySelector.js */ "./node_modules/style-loader/dist/runtime/insertBySelector.js");
/* harmony import */ var _style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/setAttributesWithoutAttributes.js */ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js");
/* harmony import */ var _style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/insertStyleElement.js */ "./node_modules/style-loader/dist/runtime/insertStyleElement.js");
/* harmony import */ var _style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/styleTagTransform.js */ "./node_modules/style-loader/dist/runtime/styleTagTransform.js");
/* harmony import */ var _style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _css_loader_dist_cjs_js_Pill_css__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! !!../../../css-loader/dist/cjs.js!./Pill.css */ "./node_modules/css-loader/dist/cjs.js!./node_modules/azure-devops-ui/Components/Pill/Pill.css");

      
      
      
      
      
      
      
      
      

var options = {};

options.styleTagTransform = (_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default());
options.setAttributes = (_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default());
options.insert = _style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(null, "head");
options.domAPI = (_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default());
options.insertStyleElement = (_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default());

var update = _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_css_loader_dist_cjs_js_Pill_css__WEBPACK_IMPORTED_MODULE_6__["default"], options);




       /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_css_loader_dist_cjs_js_Pill_css__WEBPACK_IMPORTED_MODULE_6__["default"] && _css_loader_dist_cjs_js_Pill_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals ? _css_loader_dist_cjs_js_Pill_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals : undefined);


/***/ }),

/***/ "./node_modules/azure-devops-ui/Components/Pill/Pill.js":
/*!**************************************************************!*\
  !*** ./node_modules/azure-devops-ui/Components/Pill/Pill.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Pill: () => (/* binding */ Pill)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var _CommonImports__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../CommonImports */ "./node_modules/azure-devops-ui/CommonImports.js");
/* harmony import */ var _Core_core_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../Core/core.css */ "./node_modules/azure-devops-ui/Core/core.css");
/* harmony import */ var _Pill_css__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Pill.css */ "./node_modules/azure-devops-ui/Components/Pill/Pill.css");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _Core_Util_String__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../Core/Util/String */ "./node_modules/azure-devops-ui/Core/Util/String.js");
/* harmony import */ var _Button__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../Button */ "./node_modules/azure-devops-ui/Button.js");
/* harmony import */ var _FocusZone__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../FocusZone */ "./node_modules/azure-devops-ui/FocusZone.js");
/* harmony import */ var _Icon__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../Icon */ "./node_modules/azure-devops-ui/Icon.js");
/* harmony import */ var _Resources_Widgets__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../Resources.Widgets */ "./node_modules/azure-devops-ui/Resources.Widgets.js");
/* harmony import */ var _Util__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../Util */ "./node_modules/azure-devops-ui/Util.js");
/* harmony import */ var _Utilities_Color__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../Utilities/Color */ "./node_modules/azure-devops-ui/Utilities/Color.js");
/* harmony import */ var _Utilities_Focus__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../Utilities/Focus */ "./node_modules/azure-devops-ui/Utilities/Focus.js");
/* harmony import */ var _Pill_Props__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./Pill.Props */ "./node_modules/azure-devops-ui/Components/Pill/Pill.Props.js");














var Pill = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(Pill, _super);
    function Pill(props) {
        var _this = _super.call(this, props) || this;
        _this.getChildText = function () {
            var text = "";
            react__WEBPACK_IMPORTED_MODULE_4__.Children.map(_this.props.children, function (child) {
                if (typeof child === "string") {
                    text += child;
                }
            });
            return text;
        };
        _this.onKeyDown = function (event) {
            var keyCode = event.which;
            if (keyCode === _Util__WEBPACK_IMPORTED_MODULE_10__.KeyCode.enter) {
                _this.props.onClick && _this.props.onClick();
            }
        };
        _this.onMouseEnter = function (event) {
            _this.props.onMouseEnter && _this.props.onMouseEnter(event);
            _this.setState({
                isHoveringPrimaryElement: true
            });
        };
        /**
         * onMouseLeaveButton fires first; if it leaves the container too
         * onMouseLeave will setState again, which will prevent weird behavior
         */
        _this.onMouseLeave = function (event) {
            _this.props.onMouseLeave && _this.props.onMouseLeave(event);
            _this.setState({
                isHoveringPrimaryElement: false
            });
        };
        _this.onMouseLeaveButton = function () {
            _this.setState({
                isHoveringPrimaryElement: true
            });
        };
        _this.onMouseOverButton = function () {
            _this.setState({
                isHoveringPrimaryElement: false
            });
        };
        _this.state = {
            isHoveringPrimaryElement: false
        };
        return _this;
    }
    Pill.getColorStyle = function (color, isHoveringPrimaryElement, onClick) {
        if (!color) {
            return undefined;
        }
        var renderColor = onClick && isHoveringPrimaryElement ? (0,_Utilities_Color__WEBPACK_IMPORTED_MODULE_11__.darken)(color, 0.06) : color;
        return { backgroundColor: (0,_Utilities_Color__WEBPACK_IMPORTED_MODULE_11__.getColorString)(renderColor) };
    };
    Pill.getSizeClass = function (size) {
        switch (size) {
            case _Pill_Props__WEBPACK_IMPORTED_MODULE_13__.PillSize.compact:
                return "compact";
            case _Pill_Props__WEBPACK_IMPORTED_MODULE_13__.PillSize.large:
                return "large";
            case _Pill_Props__WEBPACK_IMPORTED_MODULE_13__.PillSize.regular:
            default:
                return "regular";
        }
    };
    Pill.getVariantClass = function (variant, color) {
        switch (variant) {
            case _Pill_Props__WEBPACK_IMPORTED_MODULE_13__.PillVariant.outlined:
                return "outlined";
            case _Pill_Props__WEBPACK_IMPORTED_MODULE_13__.PillVariant.colored:
                if (color) {
                    return (0,_Util__WEBPACK_IMPORTED_MODULE_10__.css)("colored", (0,_Utilities_Color__WEBPACK_IMPORTED_MODULE_11__.isDark)(color) ? "dark" : "light");
                }
                else {
                    return "standard";
                }
            case _Pill_Props__WEBPACK_IMPORTED_MODULE_13__.PillVariant.themedStandard:
                return "themed-standard";
            case _Pill_Props__WEBPACK_IMPORTED_MODULE_13__.PillVariant.standard:
            default:
                return "standard";
        }
    };
    Pill.getDerivedStateFromProps = function (props, state) {
        if (false) // removed by dead control flow
{ var unsupportedFields, color, iconProps, onRenderFilledVisual, _a, size, variant; }
        return state;
    };
    Pill.prototype.render = function () {
        var _this = this;
        var _a = this.props, ariaHidden = _a.ariaHidden, contentClassName = _a.contentClassName, className = _a.className, color = _a.color, _b = _a.containsCount, containsCount = _b === void 0 ? false : _b, iconProps = _a.iconProps, id = _a.id, onClick = _a.onClick, onBlur = _a.onBlur, onFocus = _a.onFocus, onRemoveClick = _a.onRemoveClick, onRenderFilledVisual = _a.onRenderFilledVisual, _c = _a.size, size = _c === void 0 ? _Pill_Props__WEBPACK_IMPORTED_MODULE_13__.PillSize.regular : _c, _d = _a.variant, variant = _d === void 0 ? _Pill_Props__WEBPACK_IMPORTED_MODULE_13__.PillVariant.standard : _d;
        var isHoveringPrimaryElement = this.state.isHoveringPrimaryElement;
        var ariaLabel = this.props.ariaLabel || this.getChildText();
        return (react__WEBPACK_IMPORTED_MODULE_4__.createElement(_FocusZone__WEBPACK_IMPORTED_MODULE_7__.FocusZoneContext.Consumer, null, function (zoneContext) { return (react__WEBPACK_IMPORTED_MODULE_4__.createElement("div", { className: (0,_Util__WEBPACK_IMPORTED_MODULE_10__.css)(className, "bolt-pill flex-row flex-center", Pill.getVariantClass(variant, color), Pill.getSizeClass(size), containsCount && "count", isHoveringPrimaryElement && "hover", onClick && "clickable", onRenderFilledVisual && "has-filled-visual", iconProps && !onRenderFilledVisual && "has-icon", onRemoveClick && "has-remove-button"), id: (0,_Util__WEBPACK_IMPORTED_MODULE_10__.getSafeId)(id), onClick: onClick, onBlur: onBlur, onMouseEnter: _this.onMouseEnter, onMouseLeave: _this.onMouseLeave, style: Pill.getColorStyle(color, isHoveringPrimaryElement, onClick) },
            onRenderFilledVisual && react__WEBPACK_IMPORTED_MODULE_4__.createElement("div", { className: "bolt-pill-filled-visual flex-noshrink" }, onRenderFilledVisual()),
            iconProps && !onRenderFilledVisual && react__WEBPACK_IMPORTED_MODULE_4__.createElement(_Icon__WEBPACK_IMPORTED_MODULE_8__.Icon, (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, iconProps, { className: (0,_Util__WEBPACK_IMPORTED_MODULE_10__.css)(iconProps.className, "bolt-pill-icon") })),
            react__WEBPACK_IMPORTED_MODULE_4__.createElement("div", { "aria-label": ariaLabel, "aria-hidden": ariaHidden, className: (0,_Util__WEBPACK_IMPORTED_MODULE_10__.css)(contentClassName, "bolt-pill-content text-ellipsis"), "data-focuszone": !_this.props.excludeFocusZone ? zoneContext.focuszoneId : undefined, onFocus: onFocus, onKeyDown: _this.onKeyDown, role: _this.props.role || (onClick ? "button" : "presentation"), tabIndex: onClick || onFocus ? (0,_Utilities_Focus__WEBPACK_IMPORTED_MODULE_12__.getTabIndex)(_this.props) : undefined }, _this.props.children),
            onRemoveClick && (react__WEBPACK_IMPORTED_MODULE_4__.createElement(_Button__WEBPACK_IMPORTED_MODULE_6__.Button, { ariaLabel: (0,_Core_Util_String__WEBPACK_IMPORTED_MODULE_5__.format)(_Resources_Widgets__WEBPACK_IMPORTED_MODULE_9__.RemovePillLabel, ariaLabel), className: "bolt-pill-button", iconProps: { iconName: "Cancel", size: _Icon__WEBPACK_IMPORTED_MODULE_8__.IconSize.inherit }, onClick: onRemoveClick, onMouseLeave: _this.onMouseLeaveButton, onMouseOver: _this.onMouseOverButton, subtle: true, tooltipProps: { text: (0,_Core_Util_String__WEBPACK_IMPORTED_MODULE_5__.format)(_Resources_Widgets__WEBPACK_IMPORTED_MODULE_9__.RemovePillLabel, ariaLabel) }, tabIndex: _this.props.removeButtonTabIndex })))); }));
    };
    return Pill;
}(react__WEBPACK_IMPORTED_MODULE_4__.Component));



/***/ }),

/***/ "./node_modules/azure-devops-ui/Components/Portal/Portal.Props.js":
/*!************************************************************************!*\
  !*** ./node_modules/azure-devops-ui/Components/Portal/Portal.Props.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "./node_modules/azure-devops-ui/Components/Portal/Portal.css":
/*!*******************************************************************!*\
  !*** ./node_modules/azure-devops-ui/Components/Portal/Portal.css ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/styleDomAPI.js */ "./node_modules/style-loader/dist/runtime/styleDomAPI.js");
/* harmony import */ var _style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/insertBySelector.js */ "./node_modules/style-loader/dist/runtime/insertBySelector.js");
/* harmony import */ var _style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/setAttributesWithoutAttributes.js */ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js");
/* harmony import */ var _style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/insertStyleElement.js */ "./node_modules/style-loader/dist/runtime/insertStyleElement.js");
/* harmony import */ var _style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/styleTagTransform.js */ "./node_modules/style-loader/dist/runtime/styleTagTransform.js");
/* harmony import */ var _style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _css_loader_dist_cjs_js_Portal_css__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! !!../../../css-loader/dist/cjs.js!./Portal.css */ "./node_modules/css-loader/dist/cjs.js!./node_modules/azure-devops-ui/Components/Portal/Portal.css");

      
      
      
      
      
      
      
      
      

var options = {};

options.styleTagTransform = (_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default());
options.setAttributes = (_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default());
options.insert = _style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(null, "head");
options.domAPI = (_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default());
options.insertStyleElement = (_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default());

var update = _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_css_loader_dist_cjs_js_Portal_css__WEBPACK_IMPORTED_MODULE_6__["default"], options);




       /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_css_loader_dist_cjs_js_Portal_css__WEBPACK_IMPORTED_MODULE_6__["default"] && _css_loader_dist_cjs_js_Portal_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals ? _css_loader_dist_cjs_js_Portal_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals : undefined);


/***/ }),

/***/ "./node_modules/azure-devops-ui/Components/Portal/Portal.js":
/*!******************************************************************!*\
  !*** ./node_modules/azure-devops-ui/Components/Portal/Portal.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Portal: () => (/* binding */ Portal)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var _CommonImports__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../CommonImports */ "./node_modules/azure-devops-ui/CommonImports.js");
/* harmony import */ var _Core_core_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../Core/core.css */ "./node_modules/azure-devops-ui/Core/core.css");
/* harmony import */ var _Portal_css__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Portal.css */ "./node_modules/azure-devops-ui/Components/Portal/Portal.css");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! react-dom */ "./node_modules/react-dom/index.js");
/* harmony import */ var _Core_Observable__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../Core/Observable */ "./node_modules/azure-devops-ui/Core/Observable.js");
/* harmony import */ var _Observer__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../Observer */ "./node_modules/azure-devops-ui/Observer.js");








/**
 * The Portal component is used to create a React Portal through a well known component.
 * This component allows the platform to control where portals are rooted in the document
 * and ensure these are managed properly.
 */
var Portal = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(Portal, _super);
    function Portal(props) {
        var _this = _super.call(this, props) || this;
        _this.mounted = new _Core_Observable__WEBPACK_IMPORTED_MODULE_6__.ObservableValue(false);
        _this.focusElement = document.activeElement;
        // Determine the element that will host the portal.
        var parentElement = _this.props.portalElement;
        if (!parentElement && _this.props.portalSelector) {
            parentElement = document.querySelector(_this.props.portalSelector);
        }
        if (!parentElement) {
            parentElement = document.querySelector(".bolt-portal-host");
            if (!parentElement) {
                parentElement = document.createElement("div");
                parentElement.className = "bolt-portal-host absolute-fill no-events scroll-hidden";
                document.body.appendChild(parentElement);
            }
        }
        if (_this.props.parentClassName && !parentElement.classList.contains(_this.props.parentClassName)) {
            parentElement.classList.add(_this.props.parentClassName);
        }
        _this.parentElement = parentElement;
        // Create the hosting element for the portal.
        _this.hostElement = document.createElement("div");
        return _this;
    }
    Portal.prototype.render = function () {
        var _this = this;
        this.hostElement.className = "";
        this.hostElement.classList.add("bolt-portal");
        this.hostElement.classList.add("absolute-fill");
        // If custom class's are supplied add them (1 at a time since IE doesnt support multiple args).
        if (this.props.className) {
            var classNames = this.props.className.split(" ");
            for (var _i = 0, classNames_1 = classNames; _i < classNames_1.length; _i++) {
                var className = classNames_1[_i];
                this.hostElement.classList.add(className);
            }
        }
        // NOTE: We dont render the children until after we have mounted the portal.
        //  If the caller needs to access the document while mounting the content this
        //  will ensure the children of the portal are not mounted until the portal
        //  is attached to the DOM.
        return react_dom__WEBPACK_IMPORTED_MODULE_5__.createPortal(react__WEBPACK_IMPORTED_MODULE_4__.createElement(_Observer__WEBPACK_IMPORTED_MODULE_7__.Observer, { mounted: this.mounted }, function (props) { return (props.mounted ? _this.props.children : null); }), this.hostElement);
    };
    Portal.prototype.componentDidMount = function () {
        this.parentElement.appendChild(this.hostElement);
        this.mounted.value = true;
    };
    Portal.prototype.componentWillUnmount = function () {
        var _a;
        this.parentElement.removeChild(this.hostElement);
        if (!this.props.bypassActiveElementFocusOnUnmount) {
            (_a = this.focusElement) === null || _a === void 0 ? void 0 : _a.focus();
        }
    };
    return Portal;
}(react__WEBPACK_IMPORTED_MODULE_4__.Component));



/***/ }),

/***/ "./node_modules/azure-devops-ui/Components/ResizeGroup/OverflowButton.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/azure-devops-ui/Components/ResizeGroup/OverflowButton.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   OverflowButton: () => (/* binding */ OverflowButton)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var _CommonImports__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../CommonImports */ "./node_modules/azure-devops-ui/CommonImports.js");
/* harmony import */ var _Core_core_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../Core/core.css */ "./node_modules/azure-devops-ui/Core/core.css");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _Observer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../Observer */ "./node_modules/azure-devops-ui/Observer.js");
/* harmony import */ var _Menu_MoreButton__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../Menu/MoreButton */ "./node_modules/azure-devops-ui/Components/Menu/MoreButton.js");
/* harmony import */ var _ResizeGroup__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./ResizeGroup */ "./node_modules/azure-devops-ui/Components/ResizeGroup/ResizeGroup.js");







var OverflowButton = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(OverflowButton, _super);
    function OverflowButton() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.moreButton = react__WEBPACK_IMPORTED_MODULE_3__.createRef();
        return _this;
    }
    OverflowButton.prototype.render = function () {
        var _this = this;
        return (react__WEBPACK_IMPORTED_MODULE_3__.createElement(_ResizeGroup__WEBPACK_IMPORTED_MODULE_6__.ResizeGroupContext.Consumer, null, function (resizeGroupContext) {
            return (react__WEBPACK_IMPORTED_MODULE_3__.createElement(_Observer__WEBPACK_IMPORTED_MODULE_4__.Observer, { menuItems: resizeGroupContext.overflowItems }, function (props) {
                return props.menuItems && props.menuItems.length > 0 ? (react__WEBPACK_IMPORTED_MODULE_3__.createElement(_Menu_MoreButton__WEBPACK_IMPORTED_MODULE_5__.MoreButton, (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({ contextualMenuProps: {
                        menuProps: { id: "overflow-menu", items: props.menuItems },
                        className: _this.props.menuClassName
                    }, ref: _this.moreButton }, _this.props))) : (react__WEBPACK_IMPORTED_MODULE_3__.createElement("div", { className: "overflow-button-empty-div" }));
            }));
        }));
    };
    OverflowButton.prototype.focus = function () {
        if (this.moreButton.current) {
            this.moreButton.current.focus();
        }
    };
    return OverflowButton;
}(react__WEBPACK_IMPORTED_MODULE_3__.Component));



/***/ }),

/***/ "./node_modules/azure-devops-ui/Components/ResizeGroup/ResizeGroup.Props.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/azure-devops-ui/Components/ResizeGroup/ResizeGroup.Props.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "./node_modules/azure-devops-ui/Components/ResizeGroup/ResizeGroup.js":
/*!****************************************************************************!*\
  !*** ./node_modules/azure-devops-ui/Components/ResizeGroup/ResizeGroup.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ResizeGroup: () => (/* binding */ ResizeGroup),
/* harmony export */   ResizeGroupContext: () => (/* binding */ ResizeGroupContext)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var _CommonImports__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../CommonImports */ "./node_modules/azure-devops-ui/CommonImports.js");
/* harmony import */ var _Core_core_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../Core/core.css */ "./node_modules/azure-devops-ui/Core/core.css");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _Core_Observable__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../Core/Observable */ "./node_modules/azure-devops-ui/Core/Observable.js");
/* harmony import */ var _ResponsiveLayout__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../ResponsiveLayout */ "./node_modules/azure-devops-ui/ResponsiveLayout.js");






var ResizeGroupContext = react__WEBPACK_IMPORTED_MODULE_3__.createContext({});
var ResizeGroup = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(ResizeGroup, _super);
    function ResizeGroup(props) {
        var _this = _super.call(this, props) || this;
        _this.onLayoutChange = function (hiddenCount) {
            _this.state.hiddenCount.value = hiddenCount;
            if (_this.props.responsiveLayoutProps.onLayoutChange) {
                _this.props.responsiveLayoutProps.onLayoutChange(hiddenCount);
            }
            ResizeGroup.updateOverflowItems(_this.props, _this.state);
        };
        var extraItems = _this.props.extraItems || [];
        _this.state = {
            hiddenCount: new _Core_Observable__WEBPACK_IMPORTED_MODULE_4__.ObservableValue(0),
            overflowItems: new _Core_Observable__WEBPACK_IMPORTED_MODULE_4__.ObservableArray((0,tslib__WEBPACK_IMPORTED_MODULE_0__.__spreadArray)([], extraItems, true)),
            editedItems: []
        };
        return _this;
    }
    ResizeGroup.getDerivedStateFromProps = function (nextProps, prevState) {
        ResizeGroup.updateOverflowItems(nextProps, prevState);
        return prevState;
    };
    ResizeGroup.prototype.render = function () {
        return (react__WEBPACK_IMPORTED_MODULE_3__.createElement(ResizeGroupContext.Provider, { value: { overflowItems: this.state.overflowItems } },
            react__WEBPACK_IMPORTED_MODULE_3__.createElement(_ResponsiveLayout__WEBPACK_IMPORTED_MODULE_5__.ResponsiveLayout, (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, this.props.responsiveLayoutProps, { onLayoutChange: this.onLayoutChange }), this.props.children)));
    };
    ResizeGroup.updateOverflowItems = function (props, state) {
        var extraItems = props.extraItems || [];
        state.overflowItems.value = (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__spreadArray)((0,tslib__WEBPACK_IMPORTED_MODULE_0__.__spreadArray)([], extraItems, true), props.overflowMenuItems.slice(0, state.hiddenCount.value), true);
        if (props.useAriaLabelForOverflow) {
            // clear out previously edited menu items text values
            state.editedItems.forEach(function (item) { return (item.text = ""); });
            state.editedItems = [];
            state.overflowItems.value.forEach(function (item) {
                if (!item.text && item.ariaLabel) {
                    item.text = item.ariaLabel;
                    state.editedItems.push(item);
                }
            });
        }
    };
    return ResizeGroup;
}(react__WEBPACK_IMPORTED_MODULE_3__.Component));



/***/ }),

/***/ "./node_modules/azure-devops-ui/Components/ResponsiveLayout/ResponsiveLayout.Props.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/azure-devops-ui/Components/ResponsiveLayout/ResponsiveLayout.Props.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ResponsiveOrientation: () => (/* binding */ ResponsiveOrientation)
/* harmony export */ });
/**
 * The response layout can be used to adjust the children based on either a horizonal or
 * vertical layout but not both at the same time.
 */
var ResponsiveOrientation;
(function (ResponsiveOrientation) {
    /**
     * Components are measured by width and adjusted based on the the width of the parent
     * element.
     */
    ResponsiveOrientation[ResponsiveOrientation["Horizontal"] = 0] = "Horizontal";
    /**
     * Components are measure by height and adjusted based on the height of the parent
     * element.
     */
    ResponsiveOrientation[ResponsiveOrientation["Vertical"] = 1] = "Vertical";
})(ResponsiveOrientation || (ResponsiveOrientation = {}));


/***/ }),

/***/ "./node_modules/azure-devops-ui/Components/ResponsiveLayout/ResponsiveLayout.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/azure-devops-ui/Components/ResponsiveLayout/ResponsiveLayout.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ResponsiveLayout: () => (/* binding */ ResponsiveLayout)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var _CommonImports__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../CommonImports */ "./node_modules/azure-devops-ui/CommonImports.js");
/* harmony import */ var _Core_core_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../Core/core.css */ "./node_modules/azure-devops-ui/Core/core.css");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _Util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../Util */ "./node_modules/azure-devops-ui/Util.js");
/* harmony import */ var _ResponsiveLayout_Props__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./ResponsiveLayout.Props */ "./node_modules/azure-devops-ui/Components/ResponsiveLayout/ResponsiveLayout.Props.js");






/**
 * The ResponsiveLayout component is used to create a container that responds to
 * its size. Children of the layout container element will be shown or hidden
 * based on the amount of space available. The client creates the ResponsiveLayout
 * around the element that should be managed.
 *
 * The children of the layout container MUST map one element per child. This allows
 * the ResponsiveLayout to map visibility of the component to its relative DOM
 * element. The child MAY be a component and is not required to be a direct DOM
 * element. The child component MUST result in one root DOM element.
 */
var ResponsiveLayout = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(ResponsiveLayout, _super);
    function ResponsiveLayout() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /**
         * Details about each of the children in the responsive layout.
         */
        _this.childDetails = [];
        /**
         * All components within the responsiveLayout MUST specific a unique key. The
         * key should follow the same rules as a standard React key. If the component
         * fundamentally changes the key should change along with it.
         */
        _this.childKeys = [];
        /**
         * ref to the container element used by the responsive layout. The direct children
         * are the elements that are responsive.
         */
        _this.containerRef = react__WEBPACK_IMPORTED_MODULE_3__.createRef();
        /**
         * Number of hidden components in the layout.
         */
        _this.hiddenCount = 0;
        /**
         * Timeout used to notify callers about changes to the visible elements.
         */
        _this.layoutTimeout = 0;
        _this.updateLayout = function () {
            var componentElement = _this.containerRef.current;
            if (componentElement && componentElement.children.length) {
                var hiddenCount = _this.hiddenCount;
                var componentClientRect = componentElement.getBoundingClientRect();
                var renderedSize = 0;
                var ignoredSize = 0;
                var initialPass = false;
                // If we dont have the child details computed, or the children have changed we need
                // to populate the child details.s
                // @NOTE: We need to be able to detect changes to children without the length changing.
                if (!_this.childDetails || componentElement.children.length !== _this.childDetails.length) {
                    _this.childDetails = [];
                    initialPass = true;
                }
                // We need to go through and compute the sizes of the child components.
                for (var componentIndex = 0; componentIndex < componentElement.children.length; componentIndex++) {
                    var clientRect = componentElement.children[componentIndex].getBoundingClientRect();
                    // If this is the initial pass we will create new adjust entries for this components
                    // otherwise we will just update the current state.
                    if (initialPass) {
                        var childDetails = {
                            appliedSize: 0,
                            clientRect: clientRect
                        };
                        // Get margins of the current child element
                        var element = window.getComputedStyle(componentElement.children[componentIndex]);
                        if (element) {
                            childDetails.margins = {
                                left: parseInt(element.getPropertyValue("margin-left") || "0"),
                                right: parseInt(element.getPropertyValue("margin-right") || "0")
                            };
                        }
                        _this.childDetails.push(childDetails);
                    }
                    else {
                        _this.childDetails[componentIndex].clientRect = clientRect;
                    }
                    // Track ignored component sizes independently, this will help with rounding issues.
                    if (_this.props.ignoredChildren && _this.props.ignoredChildren.indexOf(componentIndex) >= 0) {
                        ignoredSize += _this.props.orientation === _ResponsiveLayout_Props__WEBPACK_IMPORTED_MODULE_5__.ResponsiveOrientation.Vertical ? clientRect.height : clientRect.width;
                    }
                }
                // The renderedSize is equal to the size from the end of the last component to the
                // start of the first component minus any ignored space.
                if (_this.props.orientation === _ResponsiveLayout_Props__WEBPACK_IMPORTED_MODULE_5__.ResponsiveOrientation.Vertical) {
                    renderedSize = Math.floor(_this.childDetails[_this.childDetails.length - 1].clientRect.bottom - _this.childDetails[0].clientRect.top);
                }
                else {
                    renderedSize = Math.floor(_this.childDetails[_this.childDetails.length - 1].clientRect.right - _this.childDetails[0].clientRect.left);
                }
                renderedSize -= Math.floor(ignoredSize);
                // If there is not enough space we will try to adjust items smaller first.
                var componentClientSize = Math.floor(_this.props.orientation === _ResponsiveLayout_Props__WEBPACK_IMPORTED_MODULE_5__.ResponsiveOrientation.Vertical ? componentClientRect.height : componentClientRect.width);
                if (componentClientSize <= renderedSize) {
                    var availableSpace = componentClientSize - renderedSize;
                    while (availableSpace < 0 && _this.hiddenCount < _this.props.responsiveChildren.length) {
                        var childIndex = _this.props.responsiveChildren[_this.hiddenCount];
                        var childDetail = _this.childDetails[childIndex];
                        // Determine how much space we will recoupe from this component.
                        var appliedSize = Math.ceil(_this.props.orientation === _ResponsiveLayout_Props__WEBPACK_IMPORTED_MODULE_5__.ResponsiveOrientation.Vertical ? childDetail.clientRect.height : childDetail.clientRect.width);
                        // Apply buffer size to prevent flickering.
                        // The buffer must be at least a certain size - considering element's margins.
                        //      --------------               --------------               --------------
                        //  <-- |            | --> <-------- |            | --> <-------- |            | -->
                        //      --------------               --------------               --------------
                        //                         <<<<<<<<<<^^^^^^^^^^^^^^>>>>
                        //                           margin     element   margin
                        // Side margins are calculated dynamically
                        // But in case of need they could be found in related css classes.
                        // (for example, HeaderCommandBar - ".rhythm-horizontal-8 > :not(:first-child)")
                        var margins = childDetail.margins ? childDetail.margins.left + childDetail.margins.right : 0;
                        var buffer = margins || 8;
                        appliedSize += buffer;
                        // Apply the next adjustment to the child components.
                        availableSpace += appliedSize;
                        // Mark the child hidden and track how space we recouped from component.
                        childDetail.hidden = true;
                        childDetail.appliedSize = appliedSize;
                        // Move on to the next component if we need more space.
                        _this.hiddenCount++;
                        // console.log("Adjust (shrink), applied " + appliedSize + " from child " + childIndex);
                    }
                }
                // If we have availableSpace and there are adjusted items we should see if we can give
                // some back to items.
                else if (componentClientSize > renderedSize) {
                    var availableSpace = componentClientSize - renderedSize;
                    while (_this.hiddenCount > 0) {
                        var childIndex = _this.props.responsiveChildren[_this.hiddenCount - 1];
                        var childDetail = _this.childDetails[childIndex];
                        // Check if there is enough space for this component. "appliedSize" already contains buffer
                        if (childDetail.appliedSize >= availableSpace) {
                            break;
                        }
                        // Apply the next adjustment to the child components.
                        availableSpace -= childDetail.appliedSize;
                        childDetail.hidden = false;
                        // Now that this component is visible we will decrement its count.
                        _this.hiddenCount--;
                        // console.log("Adjust (grow), applied " + childDetail.appliedSize + " from child " + childIndex);
                    }
                }
                // If adjustments were applied we need to notify the owner on the change and re-layout.
                if (hiddenCount != _this.hiddenCount) {
                    _this.layoutTimeout = window.setTimeout(function () {
                        _this.layoutTimeout = 0;
                        if (_this.props.onLayoutChange) {
                            _this.props.onLayoutChange(_this.hiddenCount);
                        }
                        // Force updates to the components and we will see if we have gained enough space.
                        _this.forceUpdate();
                    }, 0);
                }
            }
        };
        return _this;
    }
    ResponsiveLayout.prototype.render = function () {
        var _this = this;
        var childKeys = [];
        var container = react__WEBPACK_IMPORTED_MODULE_3__.Children.only(this.props.children);
        // Get the to the container for us to use during sizing calculations.
        this.containerRef = (0,_Util__WEBPACK_IMPORTED_MODULE_4__.shimRef)(container);
        // Clone the container and insert the placeholders for hidden children.
        var children = react__WEBPACK_IMPORTED_MODULE_3__.cloneElement(container, (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, container.props), { ref: this.containerRef }), react__WEBPACK_IMPORTED_MODULE_3__.Children.map(container.props.children, function (child, index) {
            if (false) // removed by dead control flow
{}
            // ALL children MUST have unique keys.
            if (!child.key) {
                console.warn("All children MUST have a unique key");
                child.key = index;
            }
            childKeys[index] = child.key;
            // If the component has been hidden by an layout, we will render a placeholder, that takes 0 size.
            if (_this.childDetails && _this.childDetails[index] && _this.childDetails[index].hidden) {
                return react__WEBPACK_IMPORTED_MODULE_3__.createElement("div", { key: "PH" + index, className: "responsive-placeholder" });
            }
            return child;
        }));
        // If the children have changed we will reset the layout and start over.
        if (this.childKeys) {
            if (this.childKeys.length !== childKeys.length) {
                this.resetLayout();
            }
            else {
                for (var keyIndex = 0; keyIndex < childKeys.length; keyIndex++) {
                    if (this.childKeys[keyIndex] !== childKeys[keyIndex]) {
                        this.resetLayout();
                        break;
                    }
                }
            }
        }
        this.childKeys = childKeys;
        return children;
    };
    ResponsiveLayout.prototype.componentDidMount = function () {
        window.addEventListener("resize", this.updateLayout);
        this.updateLayout();
    };
    ResponsiveLayout.prototype.componentDidUpdate = function () {
        this.updateLayout();
    };
    ResponsiveLayout.prototype.componentWillUnmount = function () {
        if (this.layoutTimeout) {
            window.clearTimeout(this.layoutTimeout);
            this.layoutTimeout = 0;
        }
        window.removeEventListener("resize", this.updateLayout);
    };
    ResponsiveLayout.prototype.resetLayout = function () {
        this.childDetails = undefined;
        this.hiddenCount = 0;
    };
    return ResponsiveLayout;
}(react__WEBPACK_IMPORTED_MODULE_3__.Component));



/***/ }),

/***/ "./node_modules/azure-devops-ui/Components/Spinner/Spinner.Props.js":
/*!**************************************************************************!*\
  !*** ./node_modules/azure-devops-ui/Components/Spinner/Spinner.Props.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SpinnerOrientation: () => (/* binding */ SpinnerOrientation),
/* harmony export */   SpinnerSize: () => (/* binding */ SpinnerSize)
/* harmony export */ });
var SpinnerSize;
(function (SpinnerSize) {
    /**
     * 12px diameter
     */
    SpinnerSize["xSmall"] = "xsmall";
    /**
     * 16px diameter
     */
    SpinnerSize["small"] = "small";
    /**
     * 20px diameter
     */
    SpinnerSize["medium"] = "medium";
    /**
     * 28px diameter
     */
    SpinnerSize["large"] = "large";
})(SpinnerSize || (SpinnerSize = {}));
var SpinnerOrientation;
(function (SpinnerOrientation) {
    /**
     * When a label is used render the label and animation in a row (label to the right).
     */
    SpinnerOrientation[SpinnerOrientation["row"] = 0] = "row";
    /**
     * When a label is used render the label and animation in a column (label below).
     */
    SpinnerOrientation[SpinnerOrientation["column"] = 1] = "column";
})(SpinnerOrientation || (SpinnerOrientation = {}));


/***/ }),

/***/ "./node_modules/azure-devops-ui/Components/Spinner/Spinner.css":
/*!*********************************************************************!*\
  !*** ./node_modules/azure-devops-ui/Components/Spinner/Spinner.css ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/styleDomAPI.js */ "./node_modules/style-loader/dist/runtime/styleDomAPI.js");
/* harmony import */ var _style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/insertBySelector.js */ "./node_modules/style-loader/dist/runtime/insertBySelector.js");
/* harmony import */ var _style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/setAttributesWithoutAttributes.js */ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js");
/* harmony import */ var _style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/insertStyleElement.js */ "./node_modules/style-loader/dist/runtime/insertStyleElement.js");
/* harmony import */ var _style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/styleTagTransform.js */ "./node_modules/style-loader/dist/runtime/styleTagTransform.js");
/* harmony import */ var _style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _css_loader_dist_cjs_js_Spinner_css__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! !!../../../css-loader/dist/cjs.js!./Spinner.css */ "./node_modules/css-loader/dist/cjs.js!./node_modules/azure-devops-ui/Components/Spinner/Spinner.css");

      
      
      
      
      
      
      
      
      

var options = {};

options.styleTagTransform = (_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default());
options.setAttributes = (_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default());
options.insert = _style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(null, "head");
options.domAPI = (_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default());
options.insertStyleElement = (_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default());

var update = _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_css_loader_dist_cjs_js_Spinner_css__WEBPACK_IMPORTED_MODULE_6__["default"], options);




       /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_css_loader_dist_cjs_js_Spinner_css__WEBPACK_IMPORTED_MODULE_6__["default"] && _css_loader_dist_cjs_js_Spinner_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals ? _css_loader_dist_cjs_js_Spinner_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals : undefined);


/***/ }),

/***/ "./node_modules/azure-devops-ui/Components/Spinner/Spinner.js":
/*!********************************************************************!*\
  !*** ./node_modules/azure-devops-ui/Components/Spinner/Spinner.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Spinner: () => (/* binding */ Spinner)
/* harmony export */ });
/* harmony import */ var _CommonImports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../CommonImports */ "./node_modules/azure-devops-ui/CommonImports.js");
/* harmony import */ var _Core_core_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../Core/core.css */ "./node_modules/azure-devops-ui/Core/core.css");
/* harmony import */ var _Spinner_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Spinner.css */ "./node_modules/azure-devops-ui/Components/Spinner/Spinner.css");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _Core_Util_Accessibility__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../Core/Util/Accessibility */ "./node_modules/azure-devops-ui/Core/Util/Accessibility.js");
/* harmony import */ var _Util__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../Util */ "./node_modules/azure-devops-ui/Util.js");
/* harmony import */ var _Spinner_Props__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Spinner.Props */ "./node_modules/azure-devops-ui/Components/Spinner/Spinner.Props.js");







var Spinner = function (props) {
    var ariaLabel = props.ariaLabel, ariaLive = props.ariaLive, className = props.className, id = props.id, label = props.label, _a = props.orientation, orientation = _a === void 0 ? _Spinner_Props__WEBPACK_IMPORTED_MODULE_6__.SpinnerOrientation.column : _a, _b = props.size, size = _b === void 0 ? _Spinner_Props__WEBPACK_IMPORTED_MODULE_6__.SpinnerSize.medium : _b;
    // Only do this on mount; the aria-live region will handle any updates to props
    react__WEBPACK_IMPORTED_MODULE_3__.useEffect(function () {
        if (ariaLive === "assertive" || ariaLive === "polite") {
            (0,_Core_Util_Accessibility__WEBPACK_IMPORTED_MODULE_4__.announce)(ariaLabel || label, ariaLive === "assertive");
        }
    }, []);
    return (react__WEBPACK_IMPORTED_MODULE_3__.createElement("div", { "aria-label": ariaLabel, "aria-live": ariaLive, className: (0,_Util__WEBPACK_IMPORTED_MODULE_5__.css)(className, "bolt-spinner", orientation === _Spinner_Props__WEBPACK_IMPORTED_MODULE_6__.SpinnerOrientation.column ? "flex-column text-center rhythm-vertical-8" : "flex-row flex-center rhythm-horizontal-8"), id: (0,_Util__WEBPACK_IMPORTED_MODULE_5__.getSafeId)(id) },
        react__WEBPACK_IMPORTED_MODULE_3__.createElement("div", { className: (0,_Util__WEBPACK_IMPORTED_MODULE_5__.css)("bolt-spinner-circle", size) }),
        label && react__WEBPACK_IMPORTED_MODULE_3__.createElement("div", { className: "bolt-spinner-label" }, label)));
};
// TODO: Remove if we fix Jest issue
Spinner.displayName = "Spinner";


/***/ }),

/***/ "./node_modules/azure-devops-ui/Components/Surface/Surface.Props.js":
/*!**************************************************************************!*\
  !*** ./node_modules/azure-devops-ui/Components/Surface/Surface.Props.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Spacing: () => (/* binding */ Spacing),
/* harmony export */   SurfaceBackground: () => (/* binding */ SurfaceBackground)
/* harmony export */ });
/**
 * Defines how spacing should be applied to the children of a container.
 */
var Spacing;
(function (Spacing) {
    Spacing[Spacing["condensed"] = 0] = "condensed";
    Spacing[Spacing["default"] = 1] = "default";
    Spacing[Spacing["relaxed"] = 2] = "relaxed";
})(Spacing || (Spacing = {}));
var SurfaceBackground;
(function (SurfaceBackground) {
    SurfaceBackground[SurfaceBackground["normal"] = 0] = "normal";
    SurfaceBackground[SurfaceBackground["neutral"] = 1] = "neutral";
    SurfaceBackground[SurfaceBackground["callout"] = 2] = "callout";
})(SurfaceBackground || (SurfaceBackground = {}));


/***/ }),

/***/ "./node_modules/azure-devops-ui/Components/Surface/Surface.css":
/*!*********************************************************************!*\
  !*** ./node_modules/azure-devops-ui/Components/Surface/Surface.css ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/styleDomAPI.js */ "./node_modules/style-loader/dist/runtime/styleDomAPI.js");
/* harmony import */ var _style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/insertBySelector.js */ "./node_modules/style-loader/dist/runtime/insertBySelector.js");
/* harmony import */ var _style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/setAttributesWithoutAttributes.js */ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js");
/* harmony import */ var _style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/insertStyleElement.js */ "./node_modules/style-loader/dist/runtime/insertStyleElement.js");
/* harmony import */ var _style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/styleTagTransform.js */ "./node_modules/style-loader/dist/runtime/styleTagTransform.js");
/* harmony import */ var _style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _css_loader_dist_cjs_js_Surface_css__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! !!../../../css-loader/dist/cjs.js!./Surface.css */ "./node_modules/css-loader/dist/cjs.js!./node_modules/azure-devops-ui/Components/Surface/Surface.css");

      
      
      
      
      
      
      
      
      

var options = {};

options.styleTagTransform = (_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default());
options.setAttributes = (_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default());
options.insert = _style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(null, "head");
options.domAPI = (_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default());
options.insertStyleElement = (_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default());

var update = _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_css_loader_dist_cjs_js_Surface_css__WEBPACK_IMPORTED_MODULE_6__["default"], options);




       /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_css_loader_dist_cjs_js_Surface_css__WEBPACK_IMPORTED_MODULE_6__["default"] && _css_loader_dist_cjs_js_Surface_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals ? _css_loader_dist_cjs_js_Surface_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals : undefined);


/***/ }),

/***/ "./node_modules/azure-devops-ui/Components/Surface/Surface.js":
/*!********************************************************************!*\
  !*** ./node_modules/azure-devops-ui/Components/Surface/Surface.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Surface: () => (/* binding */ Surface),
/* harmony export */   SurfaceContext: () => (/* binding */ SurfaceContext)
/* harmony export */ });
/* harmony import */ var _CommonImports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../CommonImports */ "./node_modules/azure-devops-ui/CommonImports.js");
/* harmony import */ var _Core_core_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../Core/core.css */ "./node_modules/azure-devops-ui/Core/core.css");
/* harmony import */ var _Surface_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Surface.css */ "./node_modules/azure-devops-ui/Components/Surface/Surface.css");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _Surface_Props__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Surface.Props */ "./node_modules/azure-devops-ui/Components/Surface/Surface.Props.js");





var SurfaceContext = react__WEBPACK_IMPORTED_MODULE_3__.createContext({
    background: _Surface_Props__WEBPACK_IMPORTED_MODULE_4__.SurfaceBackground.normal,
    horizontalClassName: undefined,
    spacing: undefined,
    verticalClassName: undefined
});
var Surface = function (props) {
    return (react__WEBPACK_IMPORTED_MODULE_3__.createElement(SurfaceContext.Provider, { value: {
            background: props.background,
            horizontalClassName: getHorizontalSpacingClassName(props.spacing),
            spacing: props.spacing
        } }, props.children));
};
function getHorizontalSpacingClassName(spacing) {
    if (spacing !== undefined) {
        return horizontalSpacingClassNames[spacing];
    }
    return undefined;
}
var horizontalSpacingClassNames = [
    "bolt-condensed-horizontal-spacing",
    "bolt-default-horizontal-spacing",
    "bolt-relaxed-horizontal-spacing"
];


/***/ }),

/***/ "./node_modules/azure-devops-ui/Components/Tabs/Tab.js":
/*!*************************************************************!*\
  !*** ./node_modules/azure-devops-ui/Components/Tabs/Tab.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Tab: () => (/* binding */ Tab)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var _CommonImports__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../CommonImports */ "./node_modules/azure-devops-ui/CommonImports.js");
/* harmony import */ var _Core_core_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../Core/core.css */ "./node_modules/azure-devops-ui/Core/core.css");
/* harmony import */ var _Tabs_css__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Tabs.css */ "./node_modules/azure-devops-ui/Components/Tabs/Tabs.css");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _FocusGroup__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../FocusGroup */ "./node_modules/azure-devops-ui/FocusGroup.js");
/* harmony import */ var _FocusZone__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../FocusZone */ "./node_modules/azure-devops-ui/FocusZone.js");
/* harmony import */ var _Icon__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../Icon */ "./node_modules/azure-devops-ui/Icon.js");
/* harmony import */ var _Observer__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../Observer */ "./node_modules/azure-devops-ui/Observer.js");
/* harmony import */ var _TooltipEx__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../TooltipEx */ "./node_modules/azure-devops-ui/TooltipEx.js");
/* harmony import */ var _Util__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../Util */ "./node_modules/azure-devops-ui/Util.js");
/* harmony import */ var _Utilities_FriendlyNumber__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../Utilities/FriendlyNumber */ "./node_modules/azure-devops-ui/Utilities/FriendlyNumber.js");
/* harmony import */ var _TabBadge__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./TabBadge */ "./node_modules/azure-devops-ui/Components/Tabs/TabBadge.js");













/**
 * Presentational component that represents a single tab.
 */
var Tab = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(Tab, _super);
    function Tab() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.onClick = function (event) {
            var url = _this.props.url;
            var updatePivot = true;
            // If ctrl-click is pressed, and there is a URL specified for this item, then
            // don't handle the click here, allowing the browser to perform a navigation
            // (i.e. open in a new tab/window)
            if (event.ctrlKey) {
                if (url) {
                    updatePivot = false;
                }
            }
            if (updatePivot) {
                event.preventDefault();
                _this.updateSelectedItem(event);
            }
        };
        _this.onKeyDown = function (event) {
            if (!event.defaultPrevented) {
                if (event.which === _Util__WEBPACK_IMPORTED_MODULE_10__.KeyCode.space || event.which === _Util__WEBPACK_IMPORTED_MODULE_10__.KeyCode.enter) {
                    event.preventDefault();
                    _this.updateSelectedItem(event);
                }
            }
        };
        return _this;
    }
    Tab.prototype.render = function () {
        var _this = this;
        var _a = this.props, ariaLabel = _a.ariaLabel, index = _a.index, setSize = _a.setSize, iconProps = _a.iconProps, id = _a.id, isSelected = _a.isSelected, renderBadge = _a.renderBadge, url = _a.url;
        var TagName = url ? "a" : "div";
        return (react__WEBPACK_IMPORTED_MODULE_4__.createElement(_Observer__WEBPACK_IMPORTED_MODULE_8__.Observer, { name: this.props.name, badgeCount: this.props.badgeCount }, function (props) {
            var name = props.name;
            return (react__WEBPACK_IMPORTED_MODULE_4__.createElement(_FocusGroup__WEBPACK_IMPORTED_MODULE_5__.FocusGroupContext.Consumer, null, function (focusGroupContext) { return (react__WEBPACK_IMPORTED_MODULE_4__.createElement(_FocusZone__WEBPACK_IMPORTED_MODULE_6__.FocusZoneContext.Consumer, null, function (zoneContext) {
                var badge = renderBadge ? renderBadge() : _this.renderBadge(props.badgeCount);
                var icon = iconProps !== undefined && (0,_Icon__WEBPACK_IMPORTED_MODULE_7__.Icon)((0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({ className: "bolt-tab-icon" }, iconProps));
                var text = name && (react__WEBPACK_IMPORTED_MODULE_4__.createElement("span", { className: "bolt-tab-text", "data-content": name }, name));
                var tooltipProps = icon && !name && ariaLabel
                    ? {
                        text: ariaLabel,
                        overflowOnly: false
                    }
                    : {
                        text: name,
                        overflowDetected: overflowDetected,
                        overflowOnly: true
                    };
                return (react__WEBPACK_IMPORTED_MODULE_4__.createElement(_TooltipEx__WEBPACK_IMPORTED_MODULE_9__.Tooltip, (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, tooltipProps),
                    react__WEBPACK_IMPORTED_MODULE_4__.createElement(TagName, { "aria-label": ariaLabel, "aria-posinset": index !== undefined ? index + 1 : undefined, "aria-selected": isSelected, "aria-setsize": setSize, className: (0,_Util__WEBPACK_IMPORTED_MODULE_10__.css)(_this.props.className, "bolt-tab focus-treatment flex-noshrink", isSelected && "selected"), "data-focuszone": zoneContext.focuszoneId, href: url, id: (0,_Util__WEBPACK_IMPORTED_MODULE_10__.getSafeId)("tab-" + id), key: id, onClick: _this.onClick, onKeyDown: _this.onKeyDown, role: "tab", tabIndex: focusGroupContext.focusedElementId === "tab-" + id ? 0 : -1, onFocus: _this.props.onFocus },
                        react__WEBPACK_IMPORTED_MODULE_4__.createElement("span", { className: "bolt-tab-inner-container" },
                            icon,
                            text,
                            badge))));
            })); }));
        }));
    };
    Tab.prototype.renderBadge = function (badgeCount) {
        var badgeDisplayValue = badgeCount !== undefined ? (0,_Utilities_FriendlyNumber__WEBPACK_IMPORTED_MODULE_11__.getFriendlyDisplayValue)(badgeCount) : undefined;
        var badgeTooltip = undefined;
        if (badgeCount && badgeDisplayValue !== badgeCount.toString()) {
            badgeTooltip = badgeCount.toString();
        }
        var badge = null;
        if (badgeDisplayValue) {
            var tooltipProps = badgeTooltip ? { text: badgeTooltip } : undefined;
            badge = react__WEBPACK_IMPORTED_MODULE_4__.createElement(_TabBadge__WEBPACK_IMPORTED_MODULE_12__.TabBadge, { tooltipProps: tooltipProps }, badgeDisplayValue);
        }
        return badge;
    };
    /**
     * Updates the state with the new selected pivot.
     */
    Tab.prototype.updateSelectedItem = function (ev) {
        var onClick = this.props.onClick;
        if (ev && this.props.onBeforeTabChange && !this.props.onBeforeTabChange(ev, this.props.id, this.props.url)) {
            ev.preventDefault();
            return;
        }
        // Update notifiers
        if (onClick) {
            onClick(this.props.id);
        }
    };
    return Tab;
}(react__WEBPACK_IMPORTED_MODULE_4__.Component));

function overflowDetected(anchorElement) {
    var overflowElement = anchorElement.querySelector(".bolt-tab-text");
    if (overflowElement) {
        return overflowElement && overflowElement.scrollWidth > Math.ceil(overflowElement.offsetWidth);
    }
    return false;
}


/***/ }),

/***/ "./node_modules/azure-devops-ui/Components/Tabs/TabBadge.js":
/*!******************************************************************!*\
  !*** ./node_modules/azure-devops-ui/Components/Tabs/TabBadge.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TabBadge: () => (/* binding */ TabBadge)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var _CommonImports__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../CommonImports */ "./node_modules/azure-devops-ui/CommonImports.js");
/* harmony import */ var _Core_core_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../Core/core.css */ "./node_modules/azure-devops-ui/Core/core.css");
/* harmony import */ var _Tabs_css__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Tabs.css */ "./node_modules/azure-devops-ui/Components/Tabs/Tabs.css");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _Pill__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../Pill */ "./node_modules/azure-devops-ui/Pill.js");
/* harmony import */ var _TooltipEx__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../TooltipEx */ "./node_modules/azure-devops-ui/TooltipEx.js");
/* harmony import */ var _Util__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../Util */ "./node_modules/azure-devops-ui/Util.js");








var TabBadge = function (props) {
    var children = props.children, className = props.className, _a = props.containsCount, containsCount = _a === void 0 ? true : _a, tooltipProps = props.tooltipProps;
    var badge = (react__WEBPACK_IMPORTED_MODULE_4__.createElement(_Pill__WEBPACK_IMPORTED_MODULE_5__.Pill, { className: (0,_Util__WEBPACK_IMPORTED_MODULE_7__.css)(className, "bolt-tab-badge"), containsCount: containsCount, size: _Pill__WEBPACK_IMPORTED_MODULE_5__.PillSize.compact, contentClassName: "text-ellipsis", excludeFocusZone: true, excludeTabStop: true }, children));
    if (tooltipProps) {
        badge = react__WEBPACK_IMPORTED_MODULE_4__.createElement(_TooltipEx__WEBPACK_IMPORTED_MODULE_6__.Tooltip, (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, tooltipProps), badge);
    }
    return badge;
};


/***/ }),

/***/ "./node_modules/azure-devops-ui/Components/Tabs/TabBar.js":
/*!****************************************************************!*\
  !*** ./node_modules/azure-devops-ui/Components/Tabs/TabBar.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TabBar: () => (/* binding */ TabBar)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var _CommonImports__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../CommonImports */ "./node_modules/azure-devops-ui/CommonImports.js");
/* harmony import */ var _Core_core_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../Core/core.css */ "./node_modules/azure-devops-ui/Core/core.css");
/* harmony import */ var _Tabs_css__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Tabs.css */ "./node_modules/azure-devops-ui/Components/Tabs/Tabs.css");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _Core_Observable__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../Core/Observable */ "./node_modules/azure-devops-ui/Core/Observable.js");
/* harmony import */ var _Core_Util_Screen__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../Core/Util/Screen */ "./node_modules/azure-devops-ui/Core/Util/Screen.js");
/* harmony import */ var _Observer__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../Observer */ "./node_modules/azure-devops-ui/Observer.js");
/* harmony import */ var _Surface__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../Surface */ "./node_modules/azure-devops-ui/Surface.js");
/* harmony import */ var _Util__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../Util */ "./node_modules/azure-devops-ui/Util.js");
/* harmony import */ var _Tab__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./Tab */ "./node_modules/azure-devops-ui/Components/Tabs/Tab.js");
/* harmony import */ var _TabProviderContext__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./TabProviderContext */ "./node_modules/azure-devops-ui/Components/Tabs/TabProviderContext.js");
/* harmony import */ var _Tabs__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./Tabs */ "./node_modules/azure-devops-ui/Components/Tabs/Tabs.js");













/**
 * Renders tabs (provided as children or through a tab provider context) as well as addtional
 * content such as in-line filters, view options, etc.
 *
 * Tabs provided directly as children will always be place before contributed tabs.
 */
var TabBar = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(TabBar, _super);
    function TabBar() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.renderAdditionalContent = function (renderFilterBar) {
            if (renderFilterBar) {
                return renderFilterBar(true);
            }
            return _this.props.renderAdditionalContent && _this.props.renderAdditionalContent();
        };
        _this.createTab = function (tab) {
            return (react__WEBPACK_IMPORTED_MODULE_4__.createElement(_Tab__WEBPACK_IMPORTED_MODULE_10__.Tab, { ariaLabel: tab.ariaLabel, badgeCount: tab.badgeCount, className: tab.className, key: tab.id, iconProps: tab.iconProps, id: tab.id, name: tab.name, onBeforeTabChange: tab.onBeforeTabChange, url: tab.url && _Core_Observable__WEBPACK_IMPORTED_MODULE_5__.ObservableLike.getValue(tab.url), renderBadge: tab.renderBadge, onFocus: tab.onFocus }));
        };
        return _this;
    }
    TabBar.prototype.render = function () {
        var _this = this;
        return (react__WEBPACK_IMPORTED_MODULE_4__.createElement(_Observer__WEBPACK_IMPORTED_MODULE_7__.Observer, { size: this.context.size }, function (props) {
            //determine on which screen sizes we should stack line by line.
            var shouldBeStacked = props.size <= _Core_Util_Screen__WEBPACK_IMPORTED_MODULE_6__.ScreenSize.medium;
            return (react__WEBPACK_IMPORTED_MODULE_4__.createElement(_Surface__WEBPACK_IMPORTED_MODULE_8__.SurfaceContext.Consumer, null, function (surfaceContext) { return (react__WEBPACK_IMPORTED_MODULE_4__.createElement(_TabProviderContext__WEBPACK_IMPORTED_MODULE_11__.TabProviderContext.Consumer, null, function (tabProviderContext) {
                var selectedTabId = _this.props.selectedTabId || tabProviderContext.selectedId;
                return (react__WEBPACK_IMPORTED_MODULE_4__.createElement("div", { className: (0,_Util__WEBPACK_IMPORTED_MODULE_9__.css)(_this.props.className, "bolt-tabbar flex-row flex-center flex-noshrink", !_this.props.disableSticky && props.size >= _Core_Util_Screen__WEBPACK_IMPORTED_MODULE_6__.ScreenSize.small && "sticky", surfaceContext.background === _Surface__WEBPACK_IMPORTED_MODULE_8__.SurfaceBackground.neutral && "bolt-tabbar-grey", surfaceContext.background === _Surface__WEBPACK_IMPORTED_MODULE_8__.SurfaceBackground.callout && "bolt-tabbar-on-callout") },
                    react__WEBPACK_IMPORTED_MODULE_4__.createElement(_Tabs__WEBPACK_IMPORTED_MODULE_12__.Tabs, (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({ selectedTabId: selectedTabId }, _this.props, { className: (0,_Util__WEBPACK_IMPORTED_MODULE_9__.css)(_this.props.tabsClassName, "bolt-tabbar-tabs flex-grow", !shouldBeStacked && "flex-noshrink", shouldBeStacked && "flex-wrap") }),
                        _this.props.children,
                        tabProviderContext.tabs.map(_this.createTab)),
                    _this.renderAdditionalContent(tabProviderContext.renderFilterBar)));
            })); }));
        }));
    };
    TabBar.contextType = _Core_Util_Screen__WEBPACK_IMPORTED_MODULE_6__.ScreenContext;
    return TabBar;
}(react__WEBPACK_IMPORTED_MODULE_4__.Component));



/***/ }),

/***/ "./node_modules/azure-devops-ui/Components/Tabs/TabContent.js":
/*!********************************************************************!*\
  !*** ./node_modules/azure-devops-ui/Components/Tabs/TabContent.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TabContent: () => (/* binding */ TabContent)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var _CommonImports__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../CommonImports */ "./node_modules/azure-devops-ui/CommonImports.js");
/* harmony import */ var _Core_core_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../Core/core.css */ "./node_modules/azure-devops-ui/Core/core.css");
/* harmony import */ var _Tabs_css__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Tabs.css */ "./node_modules/azure-devops-ui/Components/Tabs/Tabs.css");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _Core_Observable__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../Core/Observable */ "./node_modules/azure-devops-ui/Core/Observable.js");
/* harmony import */ var _TabProviderContext__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./TabProviderContext */ "./node_modules/azure-devops-ui/Components/Tabs/TabProviderContext.js");







/**
 * Hooks into tab provider context to render the tab's provided content, as well
 * as optionally the a filter bar if it is to be rendered outside of the TabBar.
 */
var TabContent = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(TabContent, _super);
    function TabContent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TabContent.prototype.render = function () {
        var _this = this;
        return (react__WEBPACK_IMPORTED_MODULE_4__.createElement(_TabProviderContext__WEBPACK_IMPORTED_MODULE_6__.TabProviderContext.Consumer, null, function (tabProviderContext) {
            var content;
            if (tabProviderContext.renderContent) {
                var filterBar = tabProviderContext.renderFilterBar && tabProviderContext.renderFilterBar(false);
                content = (react__WEBPACK_IMPORTED_MODULE_4__.createElement(react__WEBPACK_IMPORTED_MODULE_4__.Fragment, null,
                    filterBar,
                    tabProviderContext.renderContent()));
            }
            else {
                content = react__WEBPACK_IMPORTED_MODULE_4__.createElement(react__WEBPACK_IMPORTED_MODULE_4__.Fragment, null, _this.props.children);
            }
            return (react__WEBPACK_IMPORTED_MODULE_4__.createElement(_TabProviderContext__WEBPACK_IMPORTED_MODULE_6__.TabProvider, { providers: new _Core_Observable__WEBPACK_IMPORTED_MODULE_5__.ObservableArray([]), selectedTabId: tabProviderContext.selectedId || "" }, content));
        }));
    };
    return TabContent;
}(react__WEBPACK_IMPORTED_MODULE_4__.Component));



/***/ }),

/***/ "./node_modules/azure-devops-ui/Components/Tabs/TabGroupProviderContext.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/azure-devops-ui/Components/Tabs/TabGroupProviderContext.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TabGroupProvider: () => (/* binding */ TabGroupProvider),
/* harmony export */   TabGroupProviderContext: () => (/* binding */ TabGroupProviderContext)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var _CommonImports__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../CommonImports */ "./node_modules/azure-devops-ui/CommonImports.js");
/* harmony import */ var _Core_core_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../Core/core.css */ "./node_modules/azure-devops-ui/Core/core.css");
/* harmony import */ var _Tabs_css__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Tabs.css */ "./node_modules/azure-devops-ui/Components/Tabs/Tabs.css");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _Observer__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../Observer */ "./node_modules/azure-devops-ui/Observer.js");






var TabGroupProviderContext = react__WEBPACK_IMPORTED_MODULE_4__.createContext({ groups: [] });
var TabGroupProvider = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(TabGroupProvider, _super);
    function TabGroupProvider() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TabGroupProvider.prototype.render = function () {
        var _this = this;
        return (react__WEBPACK_IMPORTED_MODULE_4__.createElement(_Observer__WEBPACK_IMPORTED_MODULE_5__.Observer, { groups: this.props.providers }, function (props) {
            var groups = props.groups.sort(function (a, b) { return (a.order || 100) - (b.order || 100); });
            return react__WEBPACK_IMPORTED_MODULE_4__.createElement(TabGroupProviderContext.Provider, { value: { groups: groups } }, _this.props.children);
        }));
    };
    return TabGroupProvider;
}(react__WEBPACK_IMPORTED_MODULE_4__.Component));



/***/ }),

/***/ "./node_modules/azure-devops-ui/Components/Tabs/TabList.js":
/*!*****************************************************************!*\
  !*** ./node_modules/azure-devops-ui/Components/Tabs/TabList.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TabList: () => (/* binding */ TabList)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var _CommonImports__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../CommonImports */ "./node_modules/azure-devops-ui/CommonImports.js");
/* harmony import */ var _Core_core_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../Core/core.css */ "./node_modules/azure-devops-ui/Core/core.css");
/* harmony import */ var _Tabs_css__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Tabs.css */ "./node_modules/azure-devops-ui/Components/Tabs/Tabs.css");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _Core_Observable__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../Core/Observable */ "./node_modules/azure-devops-ui/Core/Observable.js");
/* harmony import */ var _Components_Tabs_Tabs_Props__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../Components/Tabs/Tabs.Props */ "./node_modules/azure-devops-ui/Components/Tabs/Tabs.Props.js");
/* harmony import */ var _Util__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../Util */ "./node_modules/azure-devops-ui/Util.js");
/* harmony import */ var _Tab__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./Tab */ "./node_modules/azure-devops-ui/Components/Tabs/Tab.js");
/* harmony import */ var _TabGroupProviderContext__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./TabGroupProviderContext */ "./node_modules/azure-devops-ui/Components/Tabs/TabGroupProviderContext.js");
/* harmony import */ var _TabProviderContext__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./TabProviderContext */ "./node_modules/azure-devops-ui/Components/Tabs/TabProviderContext.js");
/* harmony import */ var _Tabs__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./Tabs */ "./node_modules/azure-devops-ui/Components/Tabs/Tabs.js");












var TabList = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(TabList, _super);
    function TabList(props) {
        var _this = _super.call(this, props) || this;
        _this.generateGroupMap = function (groups) {
            if (!groups) {
                return {};
            }
            var map = {};
            groups.forEach(function (group) {
                map[group.id] = group;
            });
            return map;
        };
        _this.processChildren = function (groups) {
            var childGroups = {};
            react__WEBPACK_IMPORTED_MODULE_4__.Children.forEach(_this.props.children, function (child) {
                if (child) {
                    var groupId = child.props.groupId || "";
                    if (!childGroups[groupId]) {
                        childGroups[groupId] = {
                            items: [child],
                            groupProps: groups[groupId] || {
                                id: "",
                                name: "",
                                order: -1
                            }
                        };
                    }
                    else {
                        childGroups[groupId].items.push(child);
                    }
                }
            });
            return childGroups;
        };
        _this.processContributions = function (tabs, baseGroups, childGroups) {
            tabs.forEach(function (tab) {
                var mappedTab = _this.createRow(tab);
                var groupId = tab.groupId || "";
                if (!childGroups[groupId]) {
                    childGroups[groupId] = {
                        items: [mappedTab],
                        groupProps: baseGroups[groupId] || {
                            id: "",
                            name: "",
                            order: -1
                        }
                    };
                }
                else {
                    childGroups[groupId].items.push(mappedTab);
                }
            });
            return childGroups;
        };
        _this.processGroups = function (groups) {
            var elements = [];
            // Flattening to allow for sort
            var flatMappedGroups = [];
            for (var groupId in groups) {
                flatMappedGroups.push(groups[groupId]);
            }
            flatMappedGroups
                .sort(function (a, b) { return (a.groupProps.order || 1000) - (b.groupProps.order || 1000); })
                .forEach(function (group) {
                group.groupProps.name &&
                    elements.push(react__WEBPACK_IMPORTED_MODULE_4__.createElement("div", { key: group.groupProps.name, className: "bolt-tablist-heading title-xs flex-noshrink" }, group.groupProps.name));
                elements.push.apply(elements, group.items);
            });
            return elements;
        };
        _this.createRow = function (tab) {
            return (react__WEBPACK_IMPORTED_MODULE_4__.createElement(_Tab__WEBPACK_IMPORTED_MODULE_8__.Tab, { key: tab.id, id: tab.id, name: tab.name, url: tab.url && _Core_Observable__WEBPACK_IMPORTED_MODULE_5__.ObservableLike.getValue(tab.url), onBeforeTabChange: tab.onBeforeTabChange, iconProps: tab.iconProps }));
        };
        _this.renderTitle = function (header) {
            return react__WEBPACK_IMPORTED_MODULE_4__.createElement("div", { className: "bolt-tablist-title title-m flex-noshrink" }, header);
        };
        _this.renderSubTitle = function (header) {
            return react__WEBPACK_IMPORTED_MODULE_4__.createElement("div", { className: "bolt-tablist-subtitle secondary-text flex-noshrink text-ellipsis" }, header);
        };
        _this.onSelectedTabIdChanged = function () {
            _this.forceUpdate();
        };
        return _this;
    }
    TabList.prototype.render = function () {
        var _this = this;
        return (react__WEBPACK_IMPORTED_MODULE_4__.createElement(_TabGroupProviderContext__WEBPACK_IMPORTED_MODULE_9__.TabGroupProviderContext.Consumer, null, function (provider) {
            var _a = _this.props, className = _a.className, tabGroups = _a.tabGroups;
            var mergedGroups = tabGroups ? tabGroups.concat(provider.groups) : provider.groups;
            var groupMap = _this.generateGroupMap(mergedGroups);
            return (react__WEBPACK_IMPORTED_MODULE_4__.createElement(_TabProviderContext__WEBPACK_IMPORTED_MODULE_10__.TabProviderContext.Consumer, null, function (provider) {
                var selectedTabId = _this.props.selectedTabId || provider.selectedId;
                var tabGroups = _this.processContributions(provider.tabs, groupMap, _this.processChildren(groupMap));
                var trueChildren = _this.processGroups(tabGroups);
                return (react__WEBPACK_IMPORTED_MODULE_4__.createElement("div", { className: (0,_Util__WEBPACK_IMPORTED_MODULE_7__.css)(className, "bolt-tablist flex-column") },
                    _this.props.listTitle && _this.renderTitle(_this.props.listTitle),
                    _this.props.listSubTitle && _this.renderSubTitle(_this.props.listSubTitle),
                    react__WEBPACK_IMPORTED_MODULE_4__.createElement(_Tabs__WEBPACK_IMPORTED_MODULE_11__.Tabs, (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({ ariaLabel: _this.props.listTitle, selectedTabId: selectedTabId }, _this.props, { className: "bolt-tablist-tabs", orientation: _Components_Tabs_Tabs_Props__WEBPACK_IMPORTED_MODULE_6__.Orientation.Vertical }), trueChildren)));
            }));
        }));
    };
    return TabList;
}(react__WEBPACK_IMPORTED_MODULE_4__.Component));



/***/ }),

/***/ "./node_modules/azure-devops-ui/Components/Tabs/TabProviderContext.js":
/*!****************************************************************************!*\
  !*** ./node_modules/azure-devops-ui/Components/Tabs/TabProviderContext.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TabProvider: () => (/* binding */ TabProvider),
/* harmony export */   TabProviderContext: () => (/* binding */ TabProviderContext)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var _CommonImports__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../CommonImports */ "./node_modules/azure-devops-ui/CommonImports.js");
/* harmony import */ var _Core_core_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../Core/core.css */ "./node_modules/azure-devops-ui/Core/core.css");
/* harmony import */ var _Tabs_css__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Tabs.css */ "./node_modules/azure-devops-ui/Components/Tabs/Tabs.css");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _Observer__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../Observer */ "./node_modules/azure-devops-ui/Observer.js");






var TabProviderContext = react__WEBPACK_IMPORTED_MODULE_4__.createContext({
    selectedId: undefined,
    tabs: [],
    commandBarItems: [],
    renderContent: undefined,
    renderFilterBar: undefined
});
var TabProvider = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(TabProvider, _super);
    function TabProvider() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TabProvider.prototype.render = function () {
        var _this = this;
        return (react__WEBPACK_IMPORTED_MODULE_4__.createElement(_Observer__WEBPACK_IMPORTED_MODULE_5__.Observer, { selectedTabId: this.props.selectedTabId, tabs: this.props.providers }, function (props) {
            var selectedTabId = props.selectedTabId;
            var selectedTab = undefined;
            var tabs = (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__spreadArray)([], props.tabs.sort(function (a, b) { return (a.order || 100) - (b.order || 100); }), true);
            tabs.forEach(function (tab) {
                if (tab.id === selectedTabId) {
                    selectedTab = tab;
                }
            });
            if (selectedTab === undefined) {
                selectedTab = {
                    id: selectedTabId,
                    name: undefined,
                    render: undefined
                };
            }
            return (react__WEBPACK_IMPORTED_MODULE_4__.createElement(TabProviderContext.Provider, { value: {
                    selectedId: selectedTab.id,
                    tabs: tabs,
                    commandBarItems: selectedTab.commandBarItems,
                    renderContent: selectedTab.render,
                    renderFilterBar: selectedTab.renderFilterBar
                } }, _this.props.children));
        }));
    };
    return TabProvider;
}(react__WEBPACK_IMPORTED_MODULE_4__.Component));



/***/ }),

/***/ "./node_modules/azure-devops-ui/Components/Tabs/Tabs.Props.js":
/*!********************************************************************!*\
  !*** ./node_modules/azure-devops-ui/Components/Tabs/Tabs.Props.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Orientation: () => (/* binding */ Orientation),
/* harmony export */   TabSize: () => (/* binding */ TabSize)
/* harmony export */ });
var TabSize;
(function (TabSize) {
    /**
     * 32px tall with 14px text
     */
    TabSize["Compact"] = "compact";
    /**
     * 48px tall with 14px text
     */
    TabSize["Tall"] = "tall";
    /**
     * 40px tall with 17px text
     */
    TabSize["LargeLink"] = "large-link";
})(TabSize || (TabSize = {}));
/**
 * Defines the orientation of the child FocusZone and the flex orientation
 * of the list
 */
var Orientation;
(function (Orientation) {
    Orientation[Orientation["Horizontal"] = 0] = "Horizontal";
    Orientation[Orientation["Vertical"] = 1] = "Vertical";
})(Orientation || (Orientation = {}));


/***/ }),

/***/ "./node_modules/azure-devops-ui/Components/Tabs/Tabs.css":
/*!***************************************************************!*\
  !*** ./node_modules/azure-devops-ui/Components/Tabs/Tabs.css ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/styleDomAPI.js */ "./node_modules/style-loader/dist/runtime/styleDomAPI.js");
/* harmony import */ var _style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/insertBySelector.js */ "./node_modules/style-loader/dist/runtime/insertBySelector.js");
/* harmony import */ var _style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/setAttributesWithoutAttributes.js */ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js");
/* harmony import */ var _style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/insertStyleElement.js */ "./node_modules/style-loader/dist/runtime/insertStyleElement.js");
/* harmony import */ var _style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/styleTagTransform.js */ "./node_modules/style-loader/dist/runtime/styleTagTransform.js");
/* harmony import */ var _style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _css_loader_dist_cjs_js_Tabs_css__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! !!../../../css-loader/dist/cjs.js!./Tabs.css */ "./node_modules/css-loader/dist/cjs.js!./node_modules/azure-devops-ui/Components/Tabs/Tabs.css");

      
      
      
      
      
      
      
      
      

var options = {};

options.styleTagTransform = (_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default());
options.setAttributes = (_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default());
options.insert = _style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(null, "head");
options.domAPI = (_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default());
options.insertStyleElement = (_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default());

var update = _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_css_loader_dist_cjs_js_Tabs_css__WEBPACK_IMPORTED_MODULE_6__["default"], options);




       /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_css_loader_dist_cjs_js_Tabs_css__WEBPACK_IMPORTED_MODULE_6__["default"] && _css_loader_dist_cjs_js_Tabs_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals ? _css_loader_dist_cjs_js_Tabs_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals : undefined);


/***/ }),

/***/ "./node_modules/azure-devops-ui/Components/Tabs/Tabs.js":
/*!**************************************************************!*\
  !*** ./node_modules/azure-devops-ui/Components/Tabs/Tabs.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Tabs: () => (/* binding */ Tabs)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var _CommonImports__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../CommonImports */ "./node_modules/azure-devops-ui/CommonImports.js");
/* harmony import */ var _Core_core_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../Core/core.css */ "./node_modules/azure-devops-ui/Core/core.css");
/* harmony import */ var _Tabs_css__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Tabs.css */ "./node_modules/azure-devops-ui/Components/Tabs/Tabs.css");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _Components_Tabs_Tabs_Props__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../Components/Tabs/Tabs.Props */ "./node_modules/azure-devops-ui/Components/Tabs/Tabs.Props.js");
/* harmony import */ var _Core_Observable__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../Core/Observable */ "./node_modules/azure-devops-ui/Core/Observable.js");
/* harmony import */ var _FocusZone__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../FocusZone */ "./node_modules/azure-devops-ui/FocusZone.js");
/* harmony import */ var _Util__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../Util */ "./node_modules/azure-devops-ui/Util.js");
/* harmony import */ var _Tab__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./Tab */ "./node_modules/azure-devops-ui/Components/Tabs/Tab.js");










/**
 * Renders all children as focusable, selectable elements and indicates whether or not they are
 * currently selected.
 */
var Tabs = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(Tabs, _super);
    function Tabs(props) {
        var _this = _super.call(this, props) || this;
        _this.onTabClick = function (newTabId) {
            var onSelectedTabChanged = _this.props.onSelectedTabChanged;
            if (onSelectedTabChanged) {
                onSelectedTabChanged(newTabId);
            }
        };
        _this.onSelectedTabIdChanged = function () {
            _this.forceUpdate();
        };
        if (_Core_Observable__WEBPACK_IMPORTED_MODULE_6__.ObservableLike.isObservable(props.selectedTabId)) {
            props.selectedTabId.subscribe(_this.onSelectedTabIdChanged);
        }
        return _this;
    }
    Tabs.prototype.componentWillUnmount = function () {
        if (_Core_Observable__WEBPACK_IMPORTED_MODULE_6__.ObservableLike.isObservable(this.props.selectedTabId)) {
            this.props.selectedTabId.unsubscribe(this.onSelectedTabIdChanged);
        }
    };
    Tabs.prototype.render = function () {
        var _this = this;
        var _a = this.props, _b = _a.tabSize, tabSize = _b === void 0 ? _Components_Tabs_Tabs_Props__WEBPACK_IMPORTED_MODULE_5__.TabSize.Tall : _b, _c = _a.orientation, orientation = _c === void 0 ? _Components_Tabs_Tabs_Props__WEBPACK_IMPORTED_MODULE_5__.Orientation.Horizontal : _c;
        var selectedTabId = this.props.selectedTabId && _Core_Observable__WEBPACK_IMPORTED_MODULE_6__.ObservableLike.getValue(this.props.selectedTabId);
        var childrenCount = 0;
        var childIndex = 0;
        var idToIndex = {};
        var defaultId;
        react__WEBPACK_IMPORTED_MODULE_4__.Children.map(this.props.children, function (child) {
            if (child && child.type === _Tab__WEBPACK_IMPORTED_MODULE_9__.Tab) {
                idToIndex[child.props.id] = childIndex++;
                childrenCount++;
                if (!defaultId && child.props.id) {
                    defaultId = "tab-" + child.props.id;
                }
            }
        });
        var children = react__WEBPACK_IMPORTED_MODULE_4__.Children.map(this.props.children, function (child) {
            if (child && typeof child.type !== "string") {
                // We don't want to pass along the following props, unless the
                // child is a React component that will presumably know what
                // to do with them.
                var isSelected = (child.props.id && child.props.id.toLocaleLowerCase()) === (selectedTabId && selectedTabId.toLocaleLowerCase());
                var onClick = _this.onTabClick;
                return react__WEBPACK_IMPORTED_MODULE_4__.cloneElement(child, (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, child.props), { isSelected: isSelected, onClick: onClick, index: idToIndex[child.props.id], setSize: childrenCount }));
            }
            return child;
        });
        var orientationClass = orientation === _Components_Tabs_Tabs_Props__WEBPACK_IMPORTED_MODULE_5__.Orientation.Vertical ? "flex-column" : "flex-row";
        var focusZoneDirection = orientation === _Components_Tabs_Tabs_Props__WEBPACK_IMPORTED_MODULE_5__.Orientation.Vertical ? _FocusZone__WEBPACK_IMPORTED_MODULE_7__.FocusZoneDirection.Vertical : _FocusZone__WEBPACK_IMPORTED_MODULE_7__.FocusZoneDirection.Horizontal;
        return (react__WEBPACK_IMPORTED_MODULE_4__.createElement(_FocusZone__WEBPACK_IMPORTED_MODULE_7__.FocusZone, { direction: focusZoneDirection, focusGroupProps: { defaultElementId: defaultId } },
            react__WEBPACK_IMPORTED_MODULE_4__.createElement("div", { "aria-label": this.props.ariaLabel, className: (0,_Util__WEBPACK_IMPORTED_MODULE_8__.css)(this.props.className, "bolt-tabs", orientationClass, tabSize), role: "tablist" }, children)));
    };
    return Tabs;
}(react__WEBPACK_IMPORTED_MODULE_4__.Component));



/***/ }),

/***/ "./node_modules/azure-devops-ui/Components/TooltipEx/Tooltip.Props.js":
/*!****************************************************************************!*\
  !*** ./node_modules/azure-devops-ui/Components/TooltipEx/Tooltip.Props.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "./node_modules/azure-devops-ui/Components/TooltipEx/Tooltip.css":
/*!***********************************************************************!*\
  !*** ./node_modules/azure-devops-ui/Components/TooltipEx/Tooltip.css ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/styleDomAPI.js */ "./node_modules/style-loader/dist/runtime/styleDomAPI.js");
/* harmony import */ var _style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/insertBySelector.js */ "./node_modules/style-loader/dist/runtime/insertBySelector.js");
/* harmony import */ var _style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/setAttributesWithoutAttributes.js */ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js");
/* harmony import */ var _style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/insertStyleElement.js */ "./node_modules/style-loader/dist/runtime/insertStyleElement.js");
/* harmony import */ var _style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/styleTagTransform.js */ "./node_modules/style-loader/dist/runtime/styleTagTransform.js");
/* harmony import */ var _style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _css_loader_dist_cjs_js_Tooltip_css__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! !!../../../css-loader/dist/cjs.js!./Tooltip.css */ "./node_modules/css-loader/dist/cjs.js!./node_modules/azure-devops-ui/Components/TooltipEx/Tooltip.css");

      
      
      
      
      
      
      
      
      

var options = {};

options.styleTagTransform = (_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default());
options.setAttributes = (_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default());
options.insert = _style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(null, "head");
options.domAPI = (_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default());
options.insertStyleElement = (_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default());

var update = _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_css_loader_dist_cjs_js_Tooltip_css__WEBPACK_IMPORTED_MODULE_6__["default"], options);




       /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_css_loader_dist_cjs_js_Tooltip_css__WEBPACK_IMPORTED_MODULE_6__["default"] && _css_loader_dist_cjs_js_Tooltip_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals ? _css_loader_dist_cjs_js_Tooltip_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals : undefined);


/***/ }),

/***/ "./node_modules/azure-devops-ui/Components/TooltipEx/Tooltip.js":
/*!**********************************************************************!*\
  !*** ./node_modules/azure-devops-ui/Components/TooltipEx/Tooltip.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Tooltip: () => (/* binding */ Tooltip),
/* harmony export */   TooltipStatus: () => (/* binding */ TooltipStatus)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var _CommonImports__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../CommonImports */ "./node_modules/azure-devops-ui/CommonImports.js");
/* harmony import */ var _Core_core_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../Core/core.css */ "./node_modules/azure-devops-ui/Core/core.css");
/* harmony import */ var _Tooltip_css__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Tooltip.css */ "./node_modules/azure-devops-ui/Components/TooltipEx/Tooltip.css");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _Callout__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../Callout */ "./node_modules/azure-devops-ui/Callout.js");
/* harmony import */ var _FocusWithin__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../FocusWithin */ "./node_modules/azure-devops-ui/FocusWithin.js");
/* harmony import */ var _MouseWithin__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../MouseWithin */ "./node_modules/azure-devops-ui/MouseWithin.js");
/* harmony import */ var _Util__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../Util */ "./node_modules/azure-devops-ui/Util.js");
/* harmony import */ var _Utilities_Position__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../Utilities/Position */ "./node_modules/azure-devops-ui/Utilities/Position.js");










var TooltipStatus;
(function (TooltipStatus) {
    TooltipStatus[TooltipStatus["hidden"] = 0] = "hidden";
    TooltipStatus[TooltipStatus["visible"] = 1] = "visible";
    TooltipStatus[TooltipStatus["fadingout"] = 2] = "fadingout";
})(TooltipStatus || (TooltipStatus = {}));
var tooltipId = 1;
var Tooltip = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(Tooltip, _super);
    function Tooltip(props) {
        var _this = _super.call(this, props) || this;
        _this.contentRef = react__WEBPACK_IMPORTED_MODULE_4__.createRef();
        _this.tooltipId = "tooltip-".concat(tooltipId++);
        _this.focus = false;
        _this.mouse = false;
        _this.showTooltip = function (event) {
            var anchorElement = event.currentTarget;
            if (_this.shouldShowTooltip(anchorElement)) {
                // If no anchorOrigin was specified use the Mouse.position when we show the toolip.
                var anchorPoint = void 0;
                if (!_this.props.anchorOrigin) {
                    anchorPoint = _Util__WEBPACK_IMPORTED_MODULE_8__.Mouse.position;
                }
                _this.mouse = true;
                document.addEventListener("keydown", _this.onKeyDown);
                _this.setState({
                    anchorElement: anchorElement,
                    anchorOffset: { horizontal: 8, vertical: 8 },
                    anchorOrigin: { horizontal: _Utilities_Position__WEBPACK_IMPORTED_MODULE_9__.Location.center, vertical: _Utilities_Position__WEBPACK_IMPORTED_MODULE_9__.Location.end },
                    anchorPoint: anchorPoint,
                    innerText: _this.props.overflowOnly && !_this.props.text ? anchorElement.innerText : undefined,
                    tooltipStatus: TooltipStatus.visible,
                    tooltipOrigin: { horizontal: _Utilities_Position__WEBPACK_IMPORTED_MODULE_9__.Location.start, vertical: _Utilities_Position__WEBPACK_IMPORTED_MODULE_9__.Location.start }
                });
            }
        };
        _this.closeTooltip = function () {
            if (!(_this.focus && (0,_Util__WEBPACK_IMPORTED_MODULE_8__.getFocusVisible)()) && _this.state.tooltipStatus === TooltipStatus.visible) {
                _this.mouse = false;
                document.removeEventListener("keydown", _this.onKeyDown);
                _this.setState({ tooltipStatus: _this.getDismissStatus() });
            }
        };
        _this.onKeyDown = function (event) {
            var _a;
            if (event.which === _Util__WEBPACK_IMPORTED_MODULE_8__.KeyCode.escape && _this.state.tooltipStatus === TooltipStatus.visible) {
                _this.closeTooltip();
            }
            if (event.which === _Util__WEBPACK_IMPORTED_MODULE_8__.KeyCode.ctrl && _this.state.tooltipStatus === TooltipStatus.visible) {
                var container = _this.contentRef.current;
                var selectionNode = (_a = window.getSelection()) === null || _a === void 0 ? void 0 : _a.anchorNode;
                var hasSelectionInTooltip = container && selectionNode && container.contains(selectionNode);
                // Ctrl keystroke anywhere will dismiss the callout as per MAS 1.4.13,
                // except if user has selected something inside, in which case we allow Ctrl-C.
                if (!hasSelectionInTooltip) {
                    _this.closeTooltip();
                }
            }
        };
        _this.onAnimationEnd = function () {
            if (_this.state.tooltipStatus === TooltipStatus.fadingout) {
                _this.setState({
                    tooltipStatus: TooltipStatus.hidden
                });
            }
        };
        _this.getDismissStatus = function () {
            return _this.props.disabled ? TooltipStatus.hidden : TooltipStatus.fadingout;
        };
        _this.shouldShowTooltip = function (anchorElement) {
            if (_this.state.tooltipStatus !== TooltipStatus.hidden) {
                return false;
            }
            // If the tooltip only appears when the anchorElement overflows its parent then
            // we need to check on mouse enter.
            if (_this.props.overflowOnly && !_this.overflowDetected(anchorElement)) {
                return false;
            }
            // Dont show the tooltip if there is not content to show.
            if (!(_this.props.text || _this.props.renderContent || (anchorElement.innerText && _this.props.overflowOnly))) {
                return false;
            }
            return !_this.props.disabled;
        };
        _this.overflowDetected = props.overflowDetected || overflowDetected;
        _this.state = {
            tooltipStatus: TooltipStatus.hidden
        };
        return _this;
    }
    Tooltip.prototype.render = function () {
        var _this = this;
        return (react__WEBPACK_IMPORTED_MODULE_4__.createElement(_MouseWithin__WEBPACK_IMPORTED_MODULE_7__.MouseWithin, { leaveDelay: 50, enterDelay: this.props.delayMs, onMouseLeave: this.closeTooltip, onMouseEnter: this.showTooltip }, function (mouseWithinEvents) {
            var child = react__WEBPACK_IMPORTED_MODULE_4__.Children.only(_this.props.children);
            var id = _this.props.id || _this.tooltipId;
            var showTooltip = _this.state.tooltipStatus !== TooltipStatus.hidden && !_this.props.disabled && _this.state.anchorElement;
            // Save the existing events we will potentially proxy.
            var existingMouseEnter = child.props.onMouseEnter;
            var existingMouseLeave = child.props.onMouseLeave;
            var existingKeyDown = child.props.onKeyDown;
            var existingBlur;
            var existingFocus;
            var onMouseEnter = function (event) {
                if (mouseWithinEvents.onMouseEnter) {
                    mouseWithinEvents.onMouseEnter(event);
                }
                if (existingMouseEnter) {
                    existingMouseEnter(event);
                }
            };
            var onMouseLeave = function (event) {
                if (mouseWithinEvents.onMouseLeave) {
                    mouseWithinEvents.onMouseLeave(event);
                }
                if (existingMouseLeave) {
                    existingMouseLeave(event);
                }
            };
            var onKeyDown = function (event) {
                if (event.which === _Util__WEBPACK_IMPORTED_MODULE_8__.KeyCode.escape && showTooltip) {
                    _this.setState({ tooltipStatus: TooltipStatus.hidden });
                }
                if (existingKeyDown) {
                    existingKeyDown(event);
                }
            };
            // to not let consumers have to care about an implementation detail, wrap
            // the tooltip id in getSafeId and use that as the aria-describedBy property
            // on the child.
            var ariaDescribedById = _this.props.addAriaDescribedBy && _this.state.tooltipStatus !== TooltipStatus.hidden ? (0,_Util__WEBPACK_IMPORTED_MODULE_8__.getSafeId)(id) : undefined;
            var childProps = (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, child.props), { onMouseEnter: onMouseEnter, onMouseLeave: onMouseLeave, onKeyDown: onKeyDown });
            if (childProps["aria-describedby"] === undefined) {
                childProps["aria-describedby"] = ariaDescribedById;
            }
            var clonedChild = react__WEBPACK_IMPORTED_MODULE_4__.cloneElement(child, childProps, child.props.children);
            // If this tooltip should become visible when focus is within the component add the focus tracking.
            if (_this.props.showOnFocus && (_this.props.text || _this.props.renderContent || _this.props.overflowOnly)) {
                existingBlur = child.props.onBlur;
                existingFocus = child.props.onFocus;
                var onBlur = function () {
                    _this.focus = false;
                    if (!_this.mouse) {
                        _this.closeTooltip();
                    }
                    if (existingBlur) {
                        existingBlur();
                    }
                };
                var onFocus = function (event) {
                    var anchorElement = event.currentTarget;
                    if (_this.shouldShowTooltip(anchorElement)) {
                        _this.focus = true;
                        (0,_Util__WEBPACK_IMPORTED_MODULE_8__.getFocusVisible)() &&
                            _this.setState({
                                anchorElement: event.target,
                                anchorOffset: { horizontal: 0, vertical: 8 },
                                anchorOrigin: { horizontal: _Utilities_Position__WEBPACK_IMPORTED_MODULE_9__.Location.center, vertical: _Utilities_Position__WEBPACK_IMPORTED_MODULE_9__.Location.end },
                                anchorPoint: undefined,
                                innerText: _this.props.overflowOnly && !_this.props.text ? anchorElement.innerText : undefined,
                                tooltipStatus: TooltipStatus.visible,
                                tooltipOrigin: { horizontal: _Utilities_Position__WEBPACK_IMPORTED_MODULE_9__.Location.center, vertical: _Utilities_Position__WEBPACK_IMPORTED_MODULE_9__.Location.start }
                            });
                    }
                    if (existingFocus) {
                        existingFocus(event);
                    }
                };
                clonedChild = (react__WEBPACK_IMPORTED_MODULE_4__.createElement(_FocusWithin__WEBPACK_IMPORTED_MODULE_6__.FocusWithin, { onBlur: onBlur, onFocus: onFocus, updateStateOnFocusChange: false }, clonedChild));
            }
            return (react__WEBPACK_IMPORTED_MODULE_4__.createElement(react__WEBPACK_IMPORTED_MODULE_4__.Fragment, null,
                clonedChild,
                showTooltip ? (react__WEBPACK_IMPORTED_MODULE_4__.createElement(_Callout__WEBPACK_IMPORTED_MODULE_5__.Callout, { anchorElement: _this.state.anchorElement, anchorOffset: _this.props.anchorOffset || _this.state.anchorOffset, anchorOrigin: _this.props.anchorOrigin || _this.state.anchorOrigin, anchorPoint: _this.state.anchorPoint, calloutOrigin: _this.props.tooltipOrigin || _this.state.tooltipOrigin, className: (0,_Util__WEBPACK_IMPORTED_MODULE_8__.css)(_this.props.className, "bolt-tooltip", _this.state.tooltipStatus === TooltipStatus.fadingout && "bolt-tooltip-fade-out"), fixedLayout: _this.props.fixedLayout, id: id, key: id, onAnimationEnd: _this.onAnimationEnd, onMouseEnter: mouseWithinEvents.onMouseEnter, onMouseLeave: mouseWithinEvents.onMouseLeave, portalProps: {
                        className: "bolt-tooltip-portal",
                        bypassActiveElementFocusOnUnmount: true
                    }, contentRef: _this.contentRef, role: "tooltip" },
                    react__WEBPACK_IMPORTED_MODULE_4__.createElement("div", { className: "bolt-tooltip-content body-m" }, (_this.props.renderContent && _this.props.renderContent()) || _this.props.text || _this.state.innerText))) : null));
        }));
    };
    Tooltip.prototype.componentWillUnmount = function () {
        document.removeEventListener("keydown", this.onKeyDown);
    };
    Tooltip.defaultProps = {
        delayMs: 250,
        showOnFocus: true
    };
    return Tooltip;
}(react__WEBPACK_IMPORTED_MODULE_4__.Component));

function overflowDetected(anchorElement) {
    return anchorElement.scrollWidth > Math.ceil(anchorElement.offsetWidth);
}


/***/ }),

/***/ "./node_modules/azure-devops-ui/Components/ZeroData/ZeroData.Props.js":
/*!****************************************************************************!*\
  !*** ./node_modules/azure-devops-ui/Components/ZeroData/ZeroData.Props.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ZeroDataActionType: () => (/* binding */ ZeroDataActionType)
/* harmony export */ });
/**
 * Defines options for displaying actions in ZeroData component.
 */
var ZeroDataActionType;
(function (ZeroDataActionType) {
    ZeroDataActionType[ZeroDataActionType["ctaButton"] = 0] = "ctaButton";
    ZeroDataActionType[ZeroDataActionType["link"] = 2] = "link";
})(ZeroDataActionType || (ZeroDataActionType = {}));


/***/ }),

/***/ "./node_modules/azure-devops-ui/Components/ZeroData/ZeroData.css":
/*!***********************************************************************!*\
  !*** ./node_modules/azure-devops-ui/Components/ZeroData/ZeroData.css ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/styleDomAPI.js */ "./node_modules/style-loader/dist/runtime/styleDomAPI.js");
/* harmony import */ var _style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/insertBySelector.js */ "./node_modules/style-loader/dist/runtime/insertBySelector.js");
/* harmony import */ var _style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/setAttributesWithoutAttributes.js */ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js");
/* harmony import */ var _style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/insertStyleElement.js */ "./node_modules/style-loader/dist/runtime/insertStyleElement.js");
/* harmony import */ var _style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/styleTagTransform.js */ "./node_modules/style-loader/dist/runtime/styleTagTransform.js");
/* harmony import */ var _style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _css_loader_dist_cjs_js_ZeroData_css__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! !!../../../css-loader/dist/cjs.js!./ZeroData.css */ "./node_modules/css-loader/dist/cjs.js!./node_modules/azure-devops-ui/Components/ZeroData/ZeroData.css");

      
      
      
      
      
      
      
      
      

var options = {};

options.styleTagTransform = (_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default());
options.setAttributes = (_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default());
options.insert = _style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(null, "head");
options.domAPI = (_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default());
options.insertStyleElement = (_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default());

var update = _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_css_loader_dist_cjs_js_ZeroData_css__WEBPACK_IMPORTED_MODULE_6__["default"], options);




       /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_css_loader_dist_cjs_js_ZeroData_css__WEBPACK_IMPORTED_MODULE_6__["default"] && _css_loader_dist_cjs_js_ZeroData_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals ? _css_loader_dist_cjs_js_ZeroData_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals : undefined);


/***/ }),

/***/ "./node_modules/azure-devops-ui/Components/ZeroData/ZeroData.js":
/*!**********************************************************************!*\
  !*** ./node_modules/azure-devops-ui/Components/ZeroData/ZeroData.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ZeroData: () => (/* binding */ ZeroData)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var _CommonImports__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../CommonImports */ "./node_modules/azure-devops-ui/CommonImports.js");
/* harmony import */ var _Core_core_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../Core/core.css */ "./node_modules/azure-devops-ui/Core/core.css");
/* harmony import */ var _ZeroData_css__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ZeroData.css */ "./node_modules/azure-devops-ui/Components/ZeroData/ZeroData.css");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _Button__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../Button */ "./node_modules/azure-devops-ui/Button.js");
/* harmony import */ var _Icon__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../Icon */ "./node_modules/azure-devops-ui/Icon.js");
/* harmony import */ var _Link__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../Link */ "./node_modules/azure-devops-ui/Link.js");
/* harmony import */ var _Util__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../Util */ "./node_modules/azure-devops-ui/Util.js");
/* harmony import */ var _ZeroData_Props__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./ZeroData.Props */ "./node_modules/azure-devops-ui/Components/ZeroData/ZeroData.Props.js");










/**
 * Component for displaying helpful information when there is no data to show.
 */
var ZeroData = function (props) {
    return react__WEBPACK_IMPORTED_MODULE_4__.createElement(ZeroDataMultiple, { items: [props], className: props.className });
};
/**
 * Component for displaying helpful information when there is no data to show. This one displays
 * multiple (or one) ZeroDataItems.
 *
 * THIS CLASS IS NOT EXPORTED presently because no design for multiple ZeroDataItems has yet been
 * approved.
 */
var ZeroDataMultiple = function (props) {
    var multiple = props.items.length > 1;
    return (react__WEBPACK_IMPORTED_MODULE_4__.createElement("div", { className: (0,_Util__WEBPACK_IMPORTED_MODULE_8__.css)("vss-ZeroData flex-row justify-center", multiple ? "multiple" : "single", props.className) }, props.items.map(function (item, index) { return (react__WEBPACK_IMPORTED_MODULE_4__.createElement(ZeroDataItem, { item: item, key: index, multiple: multiple })); })));
};
/**
 * Represents a single item for the ZeroData component.
 */
var ZeroDataItem = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(ZeroDataItem, _super);
    function ZeroDataItem() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ZeroDataItem.prototype.render = function () {
        var item = this.props.item;
        var secondary;
        if (typeof item.secondaryText === "string") {
            secondary = react__WEBPACK_IMPORTED_MODULE_4__.createElement("span", null, item.secondaryText);
        }
        else {
            secondary = item.secondaryText;
        }
        return (react__WEBPACK_IMPORTED_MODULE_4__.createElement("div", { className: (0,_Util__WEBPACK_IMPORTED_MODULE_8__.css)("vss-ZeroDataItem flex-column flex-center", this.props.multiple && "flex-grow") },
            item.iconProps ? (react__WEBPACK_IMPORTED_MODULE_4__.createElement(_Icon__WEBPACK_IMPORTED_MODULE_6__.Icon, (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({ className: "vss-ZeroDataItem--icon-image" }, item.iconProps))) : (react__WEBPACK_IMPORTED_MODULE_4__.createElement("img", { className: "vss-ZeroDataItem--image", src: item.imagePath, alt: item.imageAltText })),
            react__WEBPACK_IMPORTED_MODULE_4__.createElement("div", { className: (0,_Util__WEBPACK_IMPORTED_MODULE_8__.css)("vss-ZeroDataItem--primary margin-horizontal-16", this.props.multiple ? "title-m" : "title-l") }, item.primaryText),
            secondary && react__WEBPACK_IMPORTED_MODULE_4__.createElement("div", { className: "vss-ZeroDataItem--secondary margin-horizontal-16" }, secondary),
            this.renderAction(item)));
    };
    ZeroDataItem.prototype.renderAction = function (item) {
        if (item.renderAction) {
            return item.renderAction();
        }
        if (!item.actionText) {
            return null;
        }
        // actionType === 1 is for back-compat where it used to be button type
        // button type is rendered same as ctaButton now
        // we can remove actionType === 1 in 143
        if (item.actionType === _ZeroData_Props__WEBPACK_IMPORTED_MODULE_9__.ZeroDataActionType.ctaButton || item.actionType === 1) {
            var onActionClick = function (ev) {
                if (item.onActionClick) {
                    item.onActionClick.call(null, ev, item);
                }
            };
            var buttonProps = (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, (item.actionButtonProps || {})), { className: "vss-ZeroDataItem--action", text: item.actionText, onClick: onActionClick, href: item.actionHref, role: item.actionHref ? "link" : undefined });
            return react__WEBPACK_IMPORTED_MODULE_4__.createElement(_Button__WEBPACK_IMPORTED_MODULE_5__.Button, (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, buttonProps, { primary: true }));
        }
        else {
            return react__WEBPACK_IMPORTED_MODULE_4__.createElement(_Link__WEBPACK_IMPORTED_MODULE_7__.Link, { href: item.actionHref }, item.actionText);
        }
    };
    return ZeroDataItem;
}(react__WEBPACK_IMPORTED_MODULE_4__.Component));


/***/ }),

/***/ "./node_modules/azure-devops-ui/Components/ZeroData/index.js":
/*!*******************************************************************!*\
  !*** ./node_modules/azure-devops-ui/Components/ZeroData/index.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ZeroData: () => (/* reexport safe */ _ZeroData__WEBPACK_IMPORTED_MODULE_3__.ZeroData),
/* harmony export */   ZeroDataActionType: () => (/* reexport safe */ _ZeroData_Props__WEBPACK_IMPORTED_MODULE_4__.ZeroDataActionType)
/* harmony export */ });
/* harmony import */ var _CommonImports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../CommonImports */ "./node_modules/azure-devops-ui/CommonImports.js");
/* harmony import */ var _Core_core_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../Core/core.css */ "./node_modules/azure-devops-ui/Core/core.css");
/* harmony import */ var _ZeroData_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ZeroData.css */ "./node_modules/azure-devops-ui/Components/ZeroData/ZeroData.css");
/* harmony import */ var _ZeroData__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ZeroData */ "./node_modules/azure-devops-ui/Components/ZeroData/ZeroData.js");
/* harmony import */ var _ZeroData_Props__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./ZeroData.Props */ "./node_modules/azure-devops-ui/Components/ZeroData/ZeroData.Props.js");




// @NOTE: Explicit export list due to typescript compiler bug 18644 where a require is generated for export * when const enum's are present



/***/ }),

/***/ "./node_modules/azure-devops-ui/Core/Observable.js":
/*!*********************************************************!*\
  !*** ./node_modules/azure-devops-ui/Core/Observable.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Observable: () => (/* binding */ Observable),
/* harmony export */   ObservableArray: () => (/* binding */ ObservableArray),
/* harmony export */   ObservableCollection: () => (/* binding */ ObservableCollection),
/* harmony export */   ObservableLike: () => (/* binding */ ObservableLike),
/* harmony export */   ObservableObject: () => (/* binding */ ObservableObject),
/* harmony export */   ObservableValue: () => (/* binding */ ObservableValue),
/* harmony export */   ReadyableObservableArray: () => (/* binding */ ReadyableObservableArray),
/* harmony export */   ReadyableObservableValue: () => (/* binding */ ReadyableObservableValue),
/* harmony export */   useDebouncedSubscription: () => (/* binding */ useDebouncedSubscription),
/* harmony export */   useDerivedObservable: () => (/* binding */ useDerivedObservable),
/* harmony export */   useObservable: () => (/* binding */ useObservable),
/* harmony export */   useObservableArray: () => (/* binding */ useObservableArray),
/* harmony export */   useSubscription: () => (/* binding */ useSubscription)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");


/**
 * An Observable implementation that will track a set of subscribers and supports
 * notifications when the underlying system changes.
 */
var Observable = /** @class */ (function () {
    function Observable() {
        this.observers = {};
        this.subscriberCount = 0;
    }
    /**
     * notify is used to send the event to all subscribers that have signed up for this events
     * action. This means they have subscribed directly to this action, or to all actions.
     * If the caller requested the event be persisted the event will be fired in order to new
     * subscribers as well when they subscribe.
     *
     * @param value - The object that represents the event data.
     *
     * @param action - The action that happened on this observable to produce the event.
     *
     * @param persistEvent - Optional value that determines if all future subscribers will
     *  recieve the event as well.
     */
    Observable.prototype.notify = function (value, action, persistEvent) {
        var executeObserverAction = function (observer, value, action) {
            try {
                observer(value, action);
            }
            catch (ex) {
                console.warn(ex);
                if (ex && typeof ErrorEvent === "function") {
                    window.dispatchEvent(new ErrorEvent("error", {
                        error: ex,
                        filename: "Observable.ts",
                        message: ex.message
                    }));
                }
            }
        };
        // NOTE: We need to make a copy of the observers since they may change during notification.
        if (this.observers[action]) {
            var observers = this.observers[action].slice();
            for (var observerIndex = 0; observerIndex < observers.length; observerIndex++) {
                executeObserverAction(observers[observerIndex], value, action);
            }
        }
        if (this.observers[""]) {
            var observers = this.observers[""].slice();
            for (var observerIndex = 0; observerIndex < observers.length; observerIndex++) {
                executeObserverAction(observers[observerIndex], value, action);
            }
        }
        // If the caller wants this event sent to all subscribers, even future ones, track it.
        if (persistEvent) {
            if (!this.events) {
                this.events = [];
            }
            this.events.push({ action: action, value: value });
        }
    };
    Observable.prototype.subscribe = function (observer, action) {
        action = action || "";
        if (!this.observers[action]) {
            this.observers[action] = [];
        }
        this.observers[action].push(observer);
        this.subscriberCount++;
        // Fire the callback for any events that were persisted when they were sent.
        if (this.events) {
            for (var _i = 0, _a = this.events; _i < _a.length; _i++) {
                var event_1 = _a[_i];
                if (!action || event_1.action === action) {
                    observer(event_1.value, event_1.action);
                }
            }
        }
        return observer;
    };
    Observable.prototype.unsubscribe = function (observer, action) {
        action = action || "";
        if (this.observers[action]) {
            var observerIndex = this.observers[action].indexOf(observer);
            if (observerIndex >= 0) {
                this.observers[action].splice(observerIndex, 1);
                this.subscriberCount--;
            }
        }
    };
    return Observable;
}());

var ObservableLike;
(function (ObservableLike) {
    /**
     * Check whether the specified object is an observable or not.
     *
     * @param observableLike Object to perform observable check.
     */
    function isObservable(observableLike) {
        return observableLike && typeof observableLike.subscribe === "function";
    }
    ObservableLike.isObservable = isObservable;
    function getValue(observableLike) {
        if (isObservable(observableLike)) {
            return observableLike.value;
        }
        return observableLike;
    }
    ObservableLike.getValue = getValue;
    /**
     * Subscribes to the specified object if it is an observable.
     *
     * @param observableLike Object to subscribe its value change if applicable.
     * @param observer Delegate to be executed when the underlying data changes.
     * @param action Optional argument that allows the consumer to supply a action
     *  with the delegate. If the action is supplied only those actions are delievered,
     *  while all actions are delivered is no action is supplied.
     * @returns observer
     */
    function subscribe(observableLike, observer, action) {
        if (isObservable(observableLike)) {
            return observableLike.subscribe(observer, action);
        }
        return function () { };
    }
    ObservableLike.subscribe = subscribe;
    /**
     * Unsubscribes from the specified object if it is an observable.
     *
     * @param observableLike Object to subscribe its value change if applicable.
     * @param observer Delegate to be executed when the underlying data changes.
     * @param action Optional argument that allows the consumer to supply a action
     *  with the delegate. If the action is supplied only those actions are delievered,
     *  while all actions are delivered is no action is supplied.
     */
    function unsubscribe(observableLike, observer, action) {
        if (isObservable(observableLike)) {
            observableLike.unsubscribe(observer, action);
        }
    }
    ObservableLike.unsubscribe = unsubscribe;
})(ObservableLike || (ObservableLike = {}));
var ObservableValue = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(ObservableValue, _super);
    function ObservableValue(value) {
        var _this = _super.call(this) || this;
        _this.v = value;
        return _this;
    }
    Object.defineProperty(ObservableValue.prototype, "value", {
        get: function () {
            return this.v;
        },
        set: function (value) {
            this.v = value;
            this.notify(this.v, "set");
        },
        enumerable: false,
        configurable: true
    });
    return ObservableValue;
}(Observable));

/**
 * An ObservableObject can be used to key a named collection of properties
 * and offer an observable endpoint.
 */
var ObservableObject = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(ObservableObject, _super);
    function ObservableObject() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.objects = {};
        return _this;
    }
    ObservableObject.prototype.add = function (objectName, objectDefinition) {
        if (!this.objects.hasOwnProperty(objectName)) {
            this.objects[objectName] = objectDefinition;
            this.notify({ key: objectName, value: objectDefinition }, "add");
        }
    };
    ObservableObject.prototype.get = function (objectName) {
        return this.objects[objectName];
    };
    ObservableObject.prototype.set = function (objectName, objectDefinition) {
        if (this.objects.hasOwnProperty(objectName)) {
            this.objects[objectName] = objectDefinition;
            this.notify({ key: objectName, value: objectDefinition }, "replace");
        }
        else {
            this.add(objectName, objectDefinition);
        }
    };
    ObservableObject.prototype.keys = function () {
        return Object.keys(this.objects);
    };
    return ObservableObject;
}(Observable));

/**
 * EventTypes:
 *  change - { changedItems, index }
 *  push - {addedItems, index }
 *  pop - { index, removedItems}
 *  removeAll - {index, removedItems }
 *  splice - { addedItems, index, removedItems }
 */
var ObservableArray = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(ObservableArray, _super);
    function ObservableArray(items) {
        if (items === void 0) { items = []; }
        var _this = _super.call(this) || this;
        _this.internalItems = items || [];
        return _this;
    }
    ObservableArray.prototype.change = function (start) {
        var _a;
        var items = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            items[_i - 1] = arguments[_i];
        }
        (_a = this.internalItems).splice.apply(_a, (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__spreadArray)([start, items.length], items, false));
        this.notify({ index: start, changedItems: items }, "change");
        return items.length;
    };
    ObservableArray.prototype.changeOrderedBatch = function (batch) {
        var _a;
        var changedItems = [];
        for (var _i = 0, batch_1 = batch; _i < batch_1.length; _i++) {
            var el = batch_1[_i];
            if (el.items !== undefined && el.items.length) {
                (_a = this.internalItems).splice.apply(_a, (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__spreadArray)([el.start, el.items.length], el.items, false));
                changedItems.push.apply(changedItems, el.items);
            }
        }
        this.notify({ index: this.getMinItemIndexByBatch(batch), changedItems: changedItems }, "change");
        return batch.reduce(function (acc, val) { return (acc += val.items ? val.items.length : 0); }, 0);
    };
    Object.defineProperty(ObservableArray.prototype, "length", {
        get: function () {
            return this.internalItems.length;
        },
        enumerable: false,
        configurable: true
    });
    ObservableArray.prototype.push = function () {
        var _a;
        var items = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            items[_i] = arguments[_i];
        }
        if (items.length) {
            var index = this.internalItems.length;
            (_a = this.internalItems).push.apply(_a, items);
            this.notify({ addedItems: items, index: index }, "push");
        }
        return items.length;
    };
    ObservableArray.prototype.pop = function () {
        var item = this.internalItems.pop();
        if (item !== undefined) {
            this.notify({ index: this.internalItems.length, removedItems: [item] }, "pop");
        }
        return item;
    };
    ObservableArray.prototype.removeAll = function (filter) {
        var removedItems = [];
        var remainingItems = [];
        for (var _i = 0, _a = this.internalItems; _i < _a.length; _i++) {
            var item = _a[_i];
            if (!filter || filter(item)) {
                removedItems.push(item);
            }
            else {
                remainingItems.push(item);
            }
        }
        if (removedItems.length > 0) {
            this.internalItems.splice(0, this.internalItems.length);
            for (var _b = 0, remainingItems_1 = remainingItems; _b < remainingItems_1.length; _b++) {
                var item = remainingItems_1[_b];
                this.internalItems.push(item);
            }
            this.notify({ index: 0, removedItems: removedItems }, "removeAll");
        }
        return removedItems;
    };
    ObservableArray.prototype.splice = function (start, deleteCount) {
        var _a;
        var itemsToAdd = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            itemsToAdd[_i - 2] = arguments[_i];
        }
        var removedItems = (_a = this.internalItems).splice.apply(_a, (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__spreadArray)([start, deleteCount], itemsToAdd, false));
        this.notify({ addedItems: itemsToAdd, index: start, removedItems: removedItems }, "splice");
        return removedItems;
    };
    ObservableArray.prototype.spliceOrderedBatch = function (batch) {
        var _a;
        var added = [];
        var removed = [];
        for (var _i = 0, batch_2 = batch; _i < batch_2.length; _i++) {
            var el = batch_2[_i];
            var removedItems = void 0;
            if (el.itemsToAdd !== undefined && el.itemsToAdd.length) {
                removedItems = (_a = this.internalItems).splice.apply(_a, (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__spreadArray)([el.start, el.deleteCount], el.itemsToAdd, false));
                added.push.apply(added, el.itemsToAdd);
            }
            else {
                removedItems = this.internalItems.splice(el.start, el.deleteCount);
            }
            removed.push.apply(removed, removedItems);
        }
        this.notify({ addedItems: added, index: this.getMinItemIndexByBatch(batch), removedItems: removed }, "splice");
        return removed;
    };
    Object.defineProperty(ObservableArray.prototype, "value", {
        get: function () {
            return this.internalItems;
        },
        set: function (items) {
            // Preserve the original array, but avoid the "..." arguments issue with splice/push
            var removedItems;
            if (items === this.internalItems) {
                // Special case for someone passing us the same internal array that we are already using
                // We don't need to modify the internalItems. The "removedItems" in the event is
                // not going to be accurate in the case that someone modified this internal array
                // outside of the observable -- we won't know the prior state in that case.
                removedItems = this.internalItems;
            }
            else {
                // Clear out the existing items
                removedItems = this.internalItems.slice();
                this.internalItems.length = 0;
                // Add all new items
                if (items.length) {
                    for (var _i = 0, items_1 = items; _i < items_1.length; _i++) {
                        var item = items_1[_i];
                        this.internalItems.push(item);
                    }
                }
            }
            this.notify({ addedItems: items, index: 0, removedItems: removedItems }, "splice");
        },
        enumerable: false,
        configurable: true
    });
    ObservableArray.prototype.getMinItemIndexByBatch = function (batch) {
        var itemChangesStartedAt = batch.reduce(function (minObject, currentObject) {
            if (currentObject.start < minObject.start) {
                return currentObject;
            }
            return minObject;
        });
        return itemChangesStartedAt.start;
    };
    return ObservableArray;
}(Observable));

/**
 * An Observable Collection takes an array of arrays or observable arrays
 * and flattens out the items into a single readonly observable array
 * (with all the underlying array values aggregated together).
 *
 * This handles subscribing to any underlying observable arrays and
 * updating the aggregate array as appropriate (and notifying subscribers)
 */
var ObservableCollection = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(ObservableCollection, _super);
    function ObservableCollection() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.collections = [];
        _this.items = [];
        return _this;
    }
    Object.defineProperty(ObservableCollection.prototype, "length", {
        get: function () {
            if (!this.subscriberCount) {
                this.recalculateItems();
            }
            return this.items.length;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ObservableCollection.prototype, "value", {
        get: function () {
            if (!this.subscriberCount) {
                this.recalculateItems();
            }
            return this.items;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Adds an additional collection of items to the end of the array
     *
     * @param collection Array of items or an observable array of items
     * @params transformItems Delegate to process each item that is pulled from the given collection
     */
    ObservableCollection.prototype.push = function (collection, transformItems) {
        var collectionEntry;
        var pushedItems;
        if (ObservableLike.isObservable(collection)) {
            var observable = collection;
            var subscriber = this.getSubscriber(this.collections.length, transformItems);
            collectionEntry = { observable: observable, subscriber: subscriber, transformItems: transformItems, items: [] };
            pushedItems = observable.value;
            if (this.subscriberCount) {
                ObservableLike.subscribe(collectionEntry.observable, subscriber);
            }
        }
        else if (collection.length) {
            pushedItems = collection;
            collectionEntry = { items: this.transformItems(pushedItems, transformItems) };
        }
        if (collectionEntry) {
            this.collections.push(collectionEntry);
            if (this.subscriberCount && pushedItems.length) {
                var newItems = this.transformItems(pushedItems, transformItems);
                for (var _i = 0, newItems_1 = newItems; _i < newItems_1.length; _i++) {
                    var newItem = newItems_1[_i];
                    this.items.push(newItem);
                }
                this.notify({ addedItems: newItems, index: this.items.length - newItems.length }, "push");
            }
        }
    };
    ObservableCollection.prototype.subscribe = function (observer, action) {
        var subscription = _super.prototype.subscribe.call(this, observer, action);
        if (this.subscriberCount === 1) {
            this.recalculateItems();
            for (var _i = 0, _a = this.collections; _i < _a.length; _i++) {
                var collection = _a[_i];
                if (collection.subscriber) {
                    collection.observable.subscribe(collection.subscriber);
                }
            }
        }
        return subscription;
    };
    ObservableCollection.prototype.unsubscribe = function (observer, action) {
        _super.prototype.unsubscribe.call(this, observer, action);
        if (this.subscriberCount === 0) {
            for (var _i = 0, _a = this.collections; _i < _a.length; _i++) {
                var collection = _a[_i];
                if (collection.subscriber) {
                    collection.observable.unsubscribe(collection.subscriber);
                }
            }
        }
    };
    /**
     * Recalculate items. This is necessary while we work without subscribers, as we're not listening to changes in observable inner collections.
     * Once the first subscriber joins, items collection will be in sync real-time.
     */
    ObservableCollection.prototype.recalculateItems = function () {
        this.items.length = 0;
        for (var _i = 0, _a = this.collections; _i < _a.length; _i++) {
            var collection = _a[_i];
            if (collection.observable) {
                collection.items = this.transformItems(collection.observable.value, collection.transformItems);
            }
            for (var _b = 0, _c = collection.items; _b < _c.length; _b++) {
                var item = _c[_b];
                this.items.push(item);
            }
        }
    };
    ObservableCollection.prototype.transformItems = function (inputItems, transformInput) {
        var transformedItems;
        if (!inputItems) {
            transformedItems = [];
        }
        else if (transformInput) {
            transformedItems = [];
            for (var _i = 0, inputItems_1 = inputItems; _i < inputItems_1.length; _i++) {
                var inputItem = inputItems_1[_i];
                var transformedItem = transformInput(inputItem);
                if (transformedItem !== undefined) {
                    transformedItems.push(transformedItem);
                }
            }
        }
        else {
            transformedItems = inputItems;
        }
        return transformedItems;
    };
    ObservableCollection.prototype.getSubscriber = function (collectionIndex, transformInput) {
        var _this = this;
        return function (args) {
            var _a;
            // Find the index in our aggregate array
            var index = args.index;
            for (var i = 0; i < collectionIndex; i++) {
                index += _this.collections[i].items.length;
            }
            if (args.changedItems) {
                // Handle change event
                var changedItems = _this.transformItems(args.changedItems, transformInput);
                (_a = _this.items).splice.apply(_a, (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__spreadArray)([index, args.changedItems.length], changedItems, false));
                _this.notify({ changedItems: changedItems, index: index }, "change");
            }
            else {
                // Handle splice, push, pop events
                var removedItems = _this.transformItems(args.removedItems, transformInput);
                var addedItems = _this.transformItems(args.addedItems, transformInput);
                // We would normally just call splice here with 3 arguments, but splice takes a "..." argument for added items
                // which passes array elements on the stack and is therefore limited (to 32K/64K on some browsers)
                // Remove the removedItems first
                _this.items.splice(index, removedItems.length);
                // Slice-off any remaining items past where we want to insert
                var endItems = _this.items.splice(index);
                // Push the addedItems followed by the endItems that we just removed
                for (var _i = 0, addedItems_1 = addedItems; _i < addedItems_1.length; _i++) {
                    var item = addedItems_1[_i];
                    _this.items.push(item);
                }
                for (var _b = 0, endItems_1 = endItems; _b < endItems_1.length; _b++) {
                    var item = endItems_1[_b];
                    _this.items.push(item);
                }
                _this.notify({ removedItems: removedItems, addedItems: addedItems, index: index }, "splice");
            }
        };
    };
    return ObservableCollection;
}(Observable));

var ReadyableObservableArray = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(ReadyableObservableArray, _super);
    function ReadyableObservableArray(items, ready) {
        if (items === void 0) { items = []; }
        if (ready === void 0) { ready = false; }
        var _this = _super.call(this, items) || this;
        _this.ready = new ObservableValue(ready);
        return _this;
    }
    return ReadyableObservableArray;
}(ObservableArray));

/// <summary>
/// An observable variable which lets consumers know when its initial items have been populated and it is ready to use.
/// </summary>
var ReadyableObservableValue = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(ReadyableObservableValue, _super);
    function ReadyableObservableValue(item, ready) {
        if (ready === void 0) { ready = false; }
        var _this = _super.call(this, item) || this;
        _this.ready = new ObservableValue(ready);
        return _this;
    }
    return ReadyableObservableValue;
}(ObservableValue));

/**
 * React Hooks extension that allows the consumer to track Observables with a useState like
 * hooks API.
 *
 * @param initialState Initial value for the state, or a function that will resolve the value
 * the when the value is initialized.
 */
function useObservable(initialState) {
    var underlyingState = react__WEBPACK_IMPORTED_MODULE_1__.useState(initialState)[0];
    var observable = react__WEBPACK_IMPORTED_MODULE_1__.useState(function () { return new ObservableValue(underlyingState); })[0];
    var updateState = function (updatedState) {
        if (typeof updatedState === "function") {
            observable.value = updatedState(observable.value);
        }
        else {
            observable.value = updatedState;
        }
    };
    return [observable, updateState];
}
/**
 * React Hooks extension that allows the consmer to track ObservableArrays with a useState like
 * hooks API.
 *
 * @param initialState Initial value for the state, or a function that will resolve the value
 * the when the value is initialized.
 */
function useObservableArray(initialState) {
    var underlyingState = react__WEBPACK_IMPORTED_MODULE_1__.useState(initialState)[0];
    var reactState = react__WEBPACK_IMPORTED_MODULE_1__.useState(new ObservableArray(underlyingState));
    var updateState = function (updatedState) {
        if (typeof updatedState === "function") {
            reactState[0].value = updatedState(reactState[0].value);
        }
        else {
            reactState[0].value = updatedState;
        }
    };
    return [reactState[0], updateState];
}
/**
 * React Hooks extension that provides a constant reference to an ObservableValue which will update
 * based on another observable.
 *
 * @remarks
 * The subscription will be safely unsubscribed any time:
 * - The source observable points to a new object
 * - The callback dependencies array changes
 * - The component is unmounted
 *
 * @param sourceObservable
 * @param getDerivedValue
 * @param callbackDependencies
 */
function useDerivedObservable(sourceObservable, getDerivedValue, callbackDependencies) {
    var initialValue = getDerivedValue(sourceObservable.value);
    var _a = useObservable(initialValue), observable = _a[0], setValue = _a[1];
    var getDerivedValueCallback = react__WEBPACK_IMPORTED_MODULE_1__.useCallback(getDerivedValue, callbackDependencies);
    // Update the observable's value when the source observable changes its value
    useSubscription(sourceObservable, function (newValue) {
        var derivedValue = getDerivedValueCallback(newValue);
        setValue(derivedValue);
    }, callbackDependencies);
    return observable;
}
function useSubscription(sourceObservable, callbackFn, callbackDependencies) {
    if (callbackDependencies === void 0) { callbackDependencies = []; }
    var isFirstRenderFinished = react__WEBPACK_IMPORTED_MODULE_1__.useRef(false);
    var callback = react__WEBPACK_IMPORTED_MODULE_1__.useCallback(callbackFn, callbackDependencies);
    // Call the callback when the source observable points to a new object, but not on the first render with the first observable
    react__WEBPACK_IMPORTED_MODULE_1__.useEffect(function () {
        if (!isFirstRenderFinished.current) {
            isFirstRenderFinished.current = true;
            return;
        }
        callback(sourceObservable.value);
    }, [sourceObservable]);
    // Call the callback when the source observable changes its value
    react__WEBPACK_IMPORTED_MODULE_1__.useEffect(function () {
        var doCallback = function () { return callback(sourceObservable.value); };
        sourceObservable.subscribe(doCallback);
        return function () { return sourceObservable.unsubscribe(doCallback); };
    }, [sourceObservable, callback]);
}
function useDebouncedSubscription(sourceObservable, debounceMs, callbackFn, callbackDependencies) {
    if (callbackDependencies === void 0) { callbackDependencies = []; }
    var timeoutRef = react__WEBPACK_IMPORTED_MODULE_1__.useRef(null);
    useSubscription(sourceObservable, function (value) {
        if (timeoutRef.current) {
            clearTimeout(timeoutRef.current);
        }
        timeoutRef.current = setTimeout(function () {
            callbackFn(value);
            timeoutRef.current = null;
        }, debounceMs);
    }, (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__spreadArray)([debounceMs], callbackDependencies, true));
}


/***/ }),

/***/ "./node_modules/azure-devops-ui/Core/TimerManagement.js":
/*!**************************************************************!*\
  !*** ./node_modules/azure-devops-ui/Core/TimerManagement.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TimerManagement: () => (/* binding */ TimerManagement)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");

/**
 * The TimerManagement class is used to track a set of timers.
 */
var TimerManagement = /** @class */ (function () {
    function TimerManagement(parent) {
        this.disposed = false;
        this.immediateIds = null;
        this.intervals = [];
        this.timeouts = [];
        this.parent = parent || null;
    }
    /**
     * clearAllTimers is used to clear any active timers in the object.
     */
    TimerManagement.prototype.clearAllTimers = function () {
        for (var _i = 0, _a = this.intervals; _i < _a.length; _i++) {
            var intervalId = _a[_i];
            window.clearInterval(intervalId);
        }
        for (var _b = 0, _c = this.timeouts; _b < _c.length; _b++) {
            var timeoutId = _c[_b];
            window.clearTimeout(timeoutId);
        }
        this.intervals.splice(0, this.intervals.length);
        this.timeouts.splice(0, this.timeouts.length);
    };
    /**
     * Clears the immediate.
     * @param id - Id to cancel.
     */
    TimerManagement.prototype.clearImmediate = function (id) {
        if (this.immediateIds && this.immediateIds[id]) {
            window.clearTimeout(id);
            delete this.immediateIds[id];
        }
    };
    /**
     * clearInterval is used to stop the series of callbacks that was setup through setInterval.
     *
     * @param intervalId - The id returned from eh setInterval call that you want stopped.
     */
    TimerManagement.prototype.clearInterval = function (intervalId) {
        window.clearInterval(intervalId);
        this.removeInterval(intervalId);
    };
    /**
     * clearTimeout is used to stop a timeout callback that was setup through setTimeout.
     *
     * @param timeoutId - The id returned from the setTimeout call that you want stopped.
     */
    TimerManagement.prototype.clearTimeout = function (timeoutId) {
        window.clearTimeout(timeoutId);
        this.removeTimeout(timeoutId);
    };
    /**
     * SetImmediate override, which will auto cancel the immediate during dispose.
     * @param callback - Callback to execute.
     * @returns The setTimeout id.
     */
    TimerManagement.prototype.setImmediate = function (callback) {
        var _this = this;
        var immediateId = 0;
        if (!this.disposed) {
            if (!this.immediateIds) {
                this.immediateIds = {};
            }
            var setImmediateCallback = function () {
                // Time to execute the timeout, enqueue it as a foreground task to be executed.
                try {
                    // Now delete the record and call the callback.
                    if (_this.immediateIds) {
                        delete _this.immediateIds[immediateId];
                    }
                    callback.apply(_this.parent);
                }
                catch (e) { }
            };
            immediateId = window.setTimeout(setImmediateCallback, 0);
            this.immediateIds[immediateId] = true;
        }
        return immediateId;
    };
    /**
     * setInterval is used to setup a callback that is called on an interval.
     *
     * @param callback - The callback that should be called each interval time period.
     *
     * @param milliseconds - The number of milliseconds between each callback.
     *
     * @param args - Optional variable argument list passed to the callback.
     *
     * @returns - returns a handle to the interval, this can be used to cancel through clearInterval method.
     */
    TimerManagement.prototype.setInterval = function (callback, milliseconds) {
        var args = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            args[_i - 2] = arguments[_i];
        }
        // Create the timer, and add a method to track the completion so we can
        // remove our tracked reference.
        var intervalId = window.setInterval.apply(window, (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__spreadArray)([callback, milliseconds], args, false));
        this.intervals.push(intervalId);
        return intervalId;
    };
    /**
     * setTimeout is used to setup a onetime callback that is called after the specified timeout.
     *
     * @param callback - The callback that should be called when the time period has elapsed.
     *
     * @param milliseconds - The number of milliseconds before the callback should be called.
     *  Even if a timeout of 0 is used the callback will be executed asynchronouly.
     *
     * @param args - Optional variable argument list passed to the callback.
     *
     * @returns - returns a handle to the timeout, this can be used to cancel through clearTimeout method.
     */
    TimerManagement.prototype.setTimeout = function (callback, milliseconds) {
        var _this = this;
        var args = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            args[_i - 2] = arguments[_i];
        }
        var timeoutId = 0;
        // Create the timer, and add a method to track the completion so we can
        // remove our tracked reference.
        timeoutId = window.setTimeout.apply(window, (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__spreadArray)([function () {
                _this.removeTimeout(timeoutId);
                callback.apply(void 0, args);
            },
            milliseconds], args, false));
        this.timeouts.push(timeoutId);
        return timeoutId;
    };
    TimerManagement.prototype.dispose = function () {
        this.disposed = true;
        this.parent = null;
        this.clearAllTimers();
        // Clear immediates.
        if (this.immediateIds) {
            for (var id in this.immediateIds) {
                if (this.immediateIds.hasOwnProperty(id)) {
                    this.clearImmediate(parseInt(id, 10));
                }
            }
        }
        this.immediateIds = null;
    };
    /**
     * Creates a function that will delay the execution of func until after wait milliseconds have
     * elapsed since the last time it was invoked. Provide an options object to indicate that func
     * should be invoked on the leading and/or trailing edge of the wait timeout. Subsequent calls
     * to the debounced function will return the result of the last func call.
     *
     * Note: If leading and trailing options are true func will be called on the trailing edge of
     * the timeout only if the the debounced function is invoked more than once during the wait
     * timeout.
     *
     * @param func - The function to debounce.
     * @param wait - The number of milliseconds to delay.
     * @param options - The options object.
     * @returns The new debounced function.
     */
    TimerManagement.prototype.debounce = function (func, wait, options) {
        var _this = this;
        if (this.disposed) {
            var noOpFunction = (function () {
                /** Do nothing */
            });
            noOpFunction.cancel = function () {
                return;
            };
            noOpFunction.flush = (function () { return null; });
            noOpFunction.pending = function () { return false; };
            return noOpFunction;
        }
        var waitMS = wait || 0;
        var leading = false;
        var trailing = true;
        var maxWait = null;
        var lastCallTime = 0;
        var lastExecuteTime = new Date().getTime();
        var lastResult;
        var lastArgs;
        var timeoutId = null;
        if (options) {
            leading = options.leading || false;
            trailing = options.trailing || true;
            maxWait = options.maxWait || null;
        }
        var markExecuted = function (time) {
            if (timeoutId) {
                _this.clearTimeout(timeoutId);
                timeoutId = null;
            }
            lastExecuteTime = time;
        };
        var invokeFunction = function (time) {
            markExecuted(time);
            lastResult = func.apply(null, lastArgs);
        };
        var callback = function (userCall) {
            var now = new Date().getTime();
            var executeImmediately = false;
            if (userCall) {
                if (leading && now - lastCallTime >= waitMS) {
                    executeImmediately = true;
                }
                lastCallTime = now;
            }
            var delta = now - lastCallTime;
            var waitLength = waitMS - delta;
            var maxWaitDelta = now - lastExecuteTime;
            var maxWaitExpired = false;
            if (maxWait !== null) {
                // maxWait only matters when there is a pending callback
                if (maxWaitDelta >= maxWait && timeoutId) {
                    maxWaitExpired = true;
                }
                else {
                    waitLength = Math.min(waitLength, maxWait - maxWaitDelta);
                }
            }
            if (delta >= waitMS || maxWaitExpired || executeImmediately) {
                invokeFunction(now);
            }
            else if ((timeoutId === null || !userCall) && trailing) {
                timeoutId = _this.setTimeout(callback, waitLength);
            }
            return lastResult;
        };
        var pending = function () {
            return !!timeoutId;
        };
        var cancel = function () {
            if (pending()) {
                // Mark the debounced function as having executed
                markExecuted(new Date().getTime());
            }
        };
        var flush = function () {
            if (pending()) {
                invokeFunction(new Date().getTime());
            }
            return lastResult;
        };
        // tslint:disable-next-line:no-any
        var resultFunction = (function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            lastArgs = args;
            return callback(true);
        });
        resultFunction.cancel = cancel;
        resultFunction.flush = flush;
        resultFunction.pending = pending;
        return resultFunction;
    };
    /**
     * Creates a function that, when executed, will only call the func function at most once per
     * every wait milliseconds. Provide an options object to indicate that func should be invoked
     * on the leading and/or trailing edge of the wait timeout. Subsequent calls to the throttled
     * function will return the result of the last func call.
     *
     * Note: If leading and trailing options are true func will be called on the trailing edge of
     * the timeout only if the the throttled function is invoked more than once during the wait timeout.
     *
     * @param func - The function to throttle.
     * @param wait - The number of milliseconds to throttle executions to. Defaults to 0.
     * @param options - The options object.
     * @returns The new throttled function.
     */
    TimerManagement.prototype.throttle = function (func, wait, options) {
        var _this = this;
        if (this.disposed) {
            var noOpFunction = (function () {
                /** Do nothing */
            });
            noOpFunction.cancel = function () {
                return;
            };
            noOpFunction.flush = (function () { return null; });
            noOpFunction.pending = function () { return false; };
            return noOpFunction;
        }
        var waitMS = wait || 0;
        var leading = true;
        var trailing = true;
        var lastExecuteTime = 0;
        var lastResult;
        // tslint:disable-next-line:no-any
        var lastArgs;
        var timeoutId = null;
        if (options && typeof options.leading === "boolean") {
            leading = options.leading;
        }
        if (options && typeof options.trailing === "boolean") {
            trailing = options.trailing;
        }
        var callback = function (userCall) {
            var now = new Date().getTime();
            var delta = now - lastExecuteTime;
            var waitLength = leading ? waitMS - delta : waitMS;
            if (delta >= waitMS && (!userCall || leading)) {
                lastExecuteTime = now;
                if (timeoutId) {
                    _this.clearTimeout(timeoutId);
                    timeoutId = null;
                }
                lastResult = func.apply(null, lastArgs);
            }
            else if (timeoutId === null && trailing) {
                timeoutId = _this.setTimeout(callback, waitLength);
            }
            return lastResult;
        };
        // tslint:disable-next-line:no-any
        var resultFunction = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            lastArgs = args;
            return callback(true);
        };
        return resultFunction;
    };
    TimerManagement.prototype.removeInterval = function (intervalId) {
        var index = this.intervals.indexOf(intervalId);
        if (index >= 0) {
            this.intervals.splice(index, 1);
        }
    };
    TimerManagement.prototype.removeTimeout = function (timeoutId) {
        var index = this.timeouts.indexOf(timeoutId);
        if (index >= 0) {
            this.timeouts.splice(index, 1);
        }
    };
    return TimerManagement;
}());



/***/ }),

/***/ "./node_modules/azure-devops-ui/Core/Util/Accessibility.js":
/*!*****************************************************************!*\
  !*** ./node_modules/azure-devops-ui/Core/Util/Accessibility.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ProgressAnnouncer: () => (/* binding */ ProgressAnnouncer),
/* harmony export */   announce: () => (/* binding */ announce)
/* harmony export */ });
/**
 * Maximum number of messages to have in the containers that announce() uses.
 */
var MaxAnnounceChildren = 1;
/**
 * Maximum number of containers for announce() to have per assertiveness level.
 */
var MaxAnnounceContainers = 10;
/**
 * Default number of milliseconds to wait before announcing the start of an operation.
 */
var DefaultAnnounceDelay = 1000;
/**
 * ID of the container for the announce() containers.
 */
var ParentContainerId = "utils-accessibility-announce";
var nextId = 0;
/**
 * Gets the parent container for all the announce containers.
 */
function getAnnounceContainer() {
    var container = document.getElementById(ParentContainerId);
    if (!container) {
        container = document.createElement("div");
        container.id = ParentContainerId;
        container.classList.add("visually-hidden");
        document.body.appendChild(container);
    }
    return container;
}
/**
 * Causes screen readers to read the given message.
 * @param message
 * @param assertive if true, the screen reader will read the announcement immediately, instead of waiting for "the next graceful opportunity"
 */
function announce(message, assertive, pause) {
    if (assertive === void 0) { assertive = false; }
    if (pause === void 0) { pause = 100; }
    if (!message) {
        return;
    }
    var assertiveness = assertive ? "assertive" : "polite";
    var parentContainer = getAnnounceContainer();
    var containerList = parentContainer.getElementsByClassName(assertiveness);
    var container = (containerList.length > 0 ? containerList[containerList.length - 1] : null);
    if (!container || container.childElementCount >= MaxAnnounceChildren) {
        container = document.createElement("div");
        container.id = ParentContainerId + nextId++;
        container.setAttribute("aria-live", assertiveness);
        container.classList.add(assertiveness);
        container.setAttribute("aria-relevant", "additions");
        parentContainer.appendChild(container);
        // getElementsByClassName() returns a live list so the new container is already in this list
        if (containerList.length > MaxAnnounceContainers) {
            // remove old containers
            parentContainer.removeChild(containerList[0]);
        }
        window.setTimeout(function () {
            // live regions get announced on update not create, so wait a bit and then update
            announce(message, assertive);
        }, pause);
    }
    else {
        var child = document.createElement("p");
        child.textContent = message;
        container.appendChild(child);
        // toggling the visibility like this seems to help Edge
        container.style.visibility = "hidden";
        container.style.visibility = "visible";
    }
}
/**
 * Class for announcing, through a screen reader, when a single operation begins and ends. Supports
 * a delay before the starting announcement so that quick operations don't trigger announcements.
 *
 * To use, create a ProgressAnnouncer, and call completed()
 */
var ProgressAnnouncer = /** @class */ (function () {
    function ProgressAnnouncer(options) {
        this._startAnnounced = false;
        this._completed = false;
        this._options = options;
        this._start();
    }
    /**
     * Create a ProgressAnnouncer for a promise that will announce promise start and completion/rejection.
     * @param promise
     * @param options
     */
    ProgressAnnouncer.forPromise = function (promise, options) {
        var announcer = new ProgressAnnouncer(options);
        promise.then(function () {
            announcer.announceCompleted();
        }, function () {
            announcer.announceError();
        });
        return announcer;
    };
    /**
     * Call this method when the operation has completed. This will cause the end message to be
     * announced if the start message was announced.
     */
    ProgressAnnouncer.prototype.announceCompleted = function () {
        if (!this._completed) {
            this._completed = true;
            if (this._startAnnounced) {
                announce(this._options.announceEndMessage);
            }
        }
    };
    /**
     * Call this method if the operation completes with an error. This will cause the error message
     * to be announced regardless of whether or not the start message was announced.
     */
    ProgressAnnouncer.prototype.announceError = function () {
        if (!this._completed) {
            this._completed = true;
            announce(this._options.announceErrorMessage);
        }
    };
    /**
     * Call this method to stop any announcements from being made
     */
    ProgressAnnouncer.prototype.cancel = function () {
        this._completed = true;
    };
    ProgressAnnouncer.prototype._start = function () {
        var _this = this;
        // this._announceDelay = Utils_Core.delay(this, this._options.announceStartDelay !== undefined ? this._options.announceStartDelay : DefaultAnnounceDelay, () => {
        window.setTimeout(function () {
            if (!_this._completed) {
                announce(_this._options.announceStartMessage);
            }
            _this._startAnnounced = true;
        }, this._options.announceStartDelay !== undefined ? this._options.announceStartDelay : DefaultAnnounceDelay);
    };
    return ProgressAnnouncer;
}());



/***/ }),

/***/ "./node_modules/azure-devops-ui/Core/Util/Culture.js":
/*!***********************************************************!*\
  !*** ./node_modules/azure-devops-ui/Core/Util/Culture.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getCurrentCulture: () => (/* binding */ getCurrentCulture),
/* harmony export */   getCurrentCultureName: () => (/* binding */ getCurrentCultureName),
/* harmony export */   getInvariantCulture: () => (/* binding */ getInvariantCulture),
/* harmony export */   getNumberFormat: () => (/* binding */ getNumberFormat),
/* harmony export */   getNumberShortForm: () => (/* binding */ getNumberShortForm)
/* harmony export */ });
var currentCulture;
var invariantCulture;
/**
 * Get culture settings for the invariant culture
 */
function getInvariantCulture() {
    if (!invariantCulture) {
        invariantCulture = {
            name: "en-US",
            numberFormat: {
                CurrencyDecimalDigits: 2,
                CurrencyDecimalSeparator: ".",
                CurrencyGroupSizes: [3],
                NumberGroupSizes: [3],
                PercentGroupSizes: [3],
                CurrencyGroupSeparator: ",",
                CurrencySymbol: "$",
                NaNSymbol: "NaN",
                CurrencyNegativePattern: 0,
                NumberNegativePattern: 1,
                PercentPositivePattern: 0,
                PercentNegativePattern: 0,
                NegativeInfinitySymbol: "-Infinity",
                NegativeSign: "-",
                NumberDecimalDigits: 2,
                NumberDecimalSeparator: ".",
                NumberGroupSeparator: ",",
                CurrencyPositivePattern: 0,
                PositiveInfinitySymbol: "Infinity",
                PositiveSign: "+",
                PercentDecimalDigits: 2,
                PercentDecimalSeparator: ".",
                PercentGroupSeparator: ",",
                PercentSymbol: "%",
                PerMilleSymbol: "\u2030",
                NativeDigits: ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9"],
                DigitSubstitution: 1
            },
            numberShortForm: {
                QuantitySymbols: ["K", "M", "B"],
                NumberGroupSize: 1000,
                ThousandSymbol: "K"
            },
            dateTimeFormat: {
                AMDesignator: "AM",
                Calendar: {
                    MinSupportedDateTime: "@-62135568000000@",
                    MaxSupportedDateTime: "@253402300799999@",
                    AlgorithmType: 1,
                    CalendarType: 1,
                    Eras: [1],
                    TwoDigitYearMax: 2029
                },
                DateSeparator: "/",
                FirstDayOfWeek: 0,
                CalendarWeekRule: 0,
                FullDateTimePattern: "dddd, MMMM dd, yyyy h:mm:ss tt",
                LongDatePattern: "dddd, MMMM dd, yyyy",
                LongTimePattern: "h:mm:ss tt",
                MonthDayPattern: "MMMM dd",
                PMDesignator: "PM",
                RFC1123Pattern: "ddd, dd MMM yyyy HH':'mm':'ss 'GMT'",
                ShortDatePattern: "M/d/yyyy",
                ShortTimePattern: "h:mm tt",
                SortableDateTimePattern: "yyyy'-'MM'-'dd'T'HH':'mm':'ss",
                TimeSeparator: ":",
                UniversalSortableDateTimePattern: "yyyy'-'MM'-'dd HH':'mm':'ss'Z'",
                YearMonthPattern: "MMMM, yyyy",
                AbbreviatedDayNames: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
                ShortestDayNames: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"],
                DayNames: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
                AbbreviatedMonthNames: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""],
                MonthNames: [
                    "January",
                    "February",
                    "March",
                    "April",
                    "May",
                    "June",
                    "July",
                    "August",
                    "September",
                    "October",
                    "November",
                    "December",
                    ""
                ],
                NativeCalendarName: "Gregorian Calendar",
                AbbreviatedMonthGenitiveNames: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""],
                MonthGenitiveNames: [
                    "January",
                    "February",
                    "March",
                    "April",
                    "May",
                    "June",
                    "July",
                    "August",
                    "September",
                    "October",
                    "November",
                    "December",
                    ""
                ],
                eras: [1, "A.D.", null, 0]
            }
        };
    }
    return invariantCulture;
}
/**
 * Get culture settings for the current user's preferred culture
 */
function getCurrentCulture() {
    if (!currentCulture) {
        currentCulture = getInvariantCulture();
    }
    return currentCulture;
}
/**
 * Get the name of the current culture being used on this page
 */
function getCurrentCultureName() {
    return getCurrentCulture().name;
}
/**
 * Get the number format settings for the current culture
 */
function getNumberFormat() {
    return getCurrentCulture().numberFormat;
}
/**
 * Get the Number Short Form setting for the current culture
 */
function getNumberShortForm() {
    return getCurrentCulture().numberShortForm;
}


/***/ }),

/***/ "./node_modules/azure-devops-ui/Core/Util/Screen.js":
/*!**********************************************************!*\
  !*** ./node_modules/azure-devops-ui/Core/Util/Screen.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ScreenBreakpoints: () => (/* binding */ ScreenBreakpoints),
/* harmony export */   ScreenContext: () => (/* binding */ ScreenContext),
/* harmony export */   ScreenSize: () => (/* binding */ ScreenSize)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _Core_Observable__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../Core/Observable */ "./node_modules/azure-devops-ui/Core/Observable.js");


var ScreenBreakpoints;
(function (ScreenBreakpoints) {
    /**
     * Smallest breakpoint used to react which usually corresponds to a mobile screen < 600px.
     */
    ScreenBreakpoints[ScreenBreakpoints["xsmall"] = 1] = "xsmall";
    /**
     * Medium breakpoint used to react when the screen size >= 600px and less than
     * the next breakpoint if exists.
     */
    ScreenBreakpoints[ScreenBreakpoints["small"] = 600] = "small";
    /**
     * Medium breakpoint used to react when the screen size >= 1024px and less than
     * the next breakpoint if exists.
     */
    ScreenBreakpoints[ScreenBreakpoints["medium"] = 1024] = "medium";
    /**
     * Large breakpoint used to react when the screen size >= 1366px and less than
     * the next breakpoint if exists.
     */
    ScreenBreakpoints[ScreenBreakpoints["large"] = 1366] = "large";
    /**
     * Largest breakpoint used to react when the screen size >= 1920px and less than
     * the next breakpoint if exists.
     */
    ScreenBreakpoints[ScreenBreakpoints["xlarge"] = 1920] = "xlarge";
})(ScreenBreakpoints || (ScreenBreakpoints = {}));
var ScreenSize;
(function (ScreenSize) {
    ScreenSize[ScreenSize["xsmall"] = 0] = "xsmall";
    ScreenSize[ScreenSize["small"] = 1] = "small";
    ScreenSize[ScreenSize["medium"] = 2] = "medium";
    ScreenSize[ScreenSize["large"] = 3] = "large";
    ScreenSize[ScreenSize["xlarge"] = 4] = "xlarge";
})(ScreenSize || (ScreenSize = {}));
var ScreenContextImp = /** @class */ (function () {
    function ScreenContextImp() {
        var _this = this;
        this.onResize = function () {
            var size = _this.getCurrentSize();
            if (_this.size.value !== size) {
                _this.size.value = size;
            }
        };
        this.size = new _Core_Observable__WEBPACK_IMPORTED_MODULE_1__.ObservableValue(this.getCurrentSize());
        window.addEventListener("resize", this.onResize);
    }
    ScreenContextImp.prototype.getCurrentSize = function () {
        if (window.innerWidth >= ScreenBreakpoints.xlarge) {
            return ScreenSize.xlarge;
        }
        else if (window.innerWidth >= ScreenBreakpoints.large) {
            return ScreenSize.large;
        }
        else if (window.innerWidth >= ScreenBreakpoints.medium) {
            return ScreenSize.medium;
        }
        else if (window.innerWidth >= ScreenBreakpoints.small) {
            return ScreenSize.small;
        }
        else {
            return ScreenSize.xsmall;
        }
    };
    return ScreenContextImp;
}());
var ScreenContext = react__WEBPACK_IMPORTED_MODULE_0__.createContext(new ScreenContextImp());


/***/ }),

/***/ "./node_modules/azure-devops-ui/Core/Util/String.js":
/*!**********************************************************!*\
  !*** ./node_modules/azure-devops-ui/Core/Util/String.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   EmptyGuidString: () => (/* binding */ EmptyGuidString),
/* harmony export */   caseInsensitiveContains: () => (/* binding */ caseInsensitiveContains),
/* harmony export */   containsControlChars: () => (/* binding */ containsControlChars),
/* harmony export */   containsMismatchedSurrogateChars: () => (/* binding */ containsMismatchedSurrogateChars),
/* harmony export */   dateToString: () => (/* binding */ dateToString),
/* harmony export */   endsWith: () => (/* binding */ endsWith),
/* harmony export */   equals: () => (/* binding */ equals),
/* harmony export */   equalsNullable: () => (/* binding */ equalsNullable),
/* harmony export */   format: () => (/* binding */ format),
/* harmony export */   isGuid: () => (/* binding */ isGuid),
/* harmony export */   localeComparer: () => (/* binding */ localeComparer),
/* harmony export */   localeFormat: () => (/* binding */ localeFormat),
/* harmony export */   localeIgnoreCaseComparer: () => (/* binding */ localeIgnoreCaseComparer),
/* harmony export */   newGuid: () => (/* binding */ newGuid),
/* harmony export */   numberToString: () => (/* binding */ numberToString),
/* harmony export */   safeSubstring: () => (/* binding */ safeSubstring),
/* harmony export */   startsWith: () => (/* binding */ startsWith)
/* harmony export */ });
/* harmony import */ var _Core_Util_Culture__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../Core/Util/Culture */ "./node_modules/azure-devops-ui/Core/Util/Culture.js");

function prepareForComparison(value, upperCase) {
    return value ? (upperCase ? value.toLocaleUpperCase() : value) : "";
}
function comparer(a, b, ignoreCase) {
    // Optimization: if the strings are equal no need to convert and perform a locale compare.
    if (a === b) {
        return 0;
    }
    return prepareForComparison(a, ignoreCase).localeCompare(prepareForComparison(b, ignoreCase), navigator.language);
}
/**
 * String comparer (to use for sorting) which is case-sensitive
 *
 * @param a First string to compare
 * @param b Second string to compare
 */
function localeComparer(a, b) {
    return comparer(a, b, false);
}
/**
 * String comparer (to use for sorting) which is case-insensitive
 *
 * @param a First string to compare
 * @param b Second string to compare
 */
function localeIgnoreCaseComparer(a, b) {
    return comparer(a, b, true);
}
/**
 * Compares 2 strings for equality.
 *
 * @param a First string to compare
 * @param b Second string to compare
 * @param ignoreCase If true, do a case-insensitive comparison.
 */
function equals(a, b, ignoreCase) {
    if (ignoreCase) {
        return localeIgnoreCaseComparer(a, b) === 0;
    }
    else {
        return localeComparer(a, b) === 0;
    }
}
/**
 * Compares 2 strings for equality.
 * @param a First string to compare
 * @param b Second string to compare
 * @param ignoreCase If true, do a case-insensitive comparison.
 * @returns True if both strings are equal, false otherwise. Only explicit equality is considered for null and undefined values.
 */
function equalsNullable(a, b, ignoreCase) {
    if (a === b) {
        return true;
    }
    if (a === null || a === undefined || b === null || b === undefined) {
        return false;
    }
    return equals(a, b, ignoreCase);
}
/**
 * Checks whether the given string starts with the specified prefix.
 *
 * @param str String to check
 * @param prefix Substring that the {str} argument must start with in order to return true
 * @param ignoreCase If true, do a case insensitive comparison
 */
function startsWith(str, prefix, ignoreCase) {
    var comparer = ignoreCase ? localeIgnoreCaseComparer : localeComparer;
    return comparer(prefix, str.substr(0, prefix.length)) === 0;
}
/**
 * Checks whether the given string ends with the specified suffix.
 *
 * @param str String to check
 * @param suffix Substring that the {str} argument must end with in order to return true
 * @param ignoreCase If true, do a case insensitive comparison
 */
function endsWith(str, suffix, ignoreCase) {
    var comparer = ignoreCase ? localeIgnoreCaseComparer : localeComparer;
    return comparer(suffix, str.substr(str.length - suffix.length, suffix.length)) === 0;
}
/**
 * Performs a case-insensitive contains operation
 *
 * @param str String to check if it contains {subStr}
 * @param subStr The string that the {str} argument must contain in order to return true
 */
function caseInsensitiveContains(str, subStr) {
    return str.toLocaleLowerCase().indexOf(subStr.toLocaleLowerCase()) !== -1;
}
/**
 * Generate a string using a format string and arguments.
 *
 * @param format Format string
 * @param args Arguments to use as replacements
 */
function format(format) {
    var args = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        args[_i - 1] = arguments[_i];
    }
    return _stringFormat(false, format, args);
}
/**
 * Generate a string using a format string and arguments, using locale-aware argument replacements.
 *
 * @param format Format string
 * @param args Arguments to use as replacements
 */
function localeFormat(format) {
    var args = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        args[_i - 1] = arguments[_i];
    }
    return _stringFormat(true, format, args);
}
function _stringFormat(useLocale, format, args) {
    var result = "";
    for (var i = 0;;) {
        var open_1 = format.indexOf("{", i);
        var close_1 = format.indexOf("}", i);
        if (open_1 < 0 && close_1 < 0) {
            result += format.slice(i);
            break;
        }
        if (close_1 > 0 && (close_1 < open_1 || open_1 < 0)) {
            if (format.charAt(close_1 + 1) !== "}") {
                throw new Error("The format string contains an unmatched opening or closing brace.");
            }
            result += format.slice(i, close_1 + 1);
            i = close_1 + 2;
            continue;
        }
        result += format.slice(i, open_1);
        i = open_1 + 1;
        if (format.charAt(i) === "{") {
            result += "{";
            i++;
            continue;
        }
        if (close_1 < 0) {
            throw new Error("The format string contains an unmatched opening or closing brace.");
        }
        var brace = format.substring(i, close_1);
        var colonIndex = brace.indexOf(":");
        var argNumber = parseInt(colonIndex < 0 ? brace : brace.substring(0, colonIndex), 10);
        if (isNaN(argNumber)) {
            throw new Error("The format string is invalid.");
        }
        var argFormat = colonIndex < 0 ? "" : brace.substring(colonIndex + 1);
        var arg = args[argNumber];
        if (typeof arg === "undefined" || arg === null) {
            arg = "";
        }
        if (arg.toFormattedString) {
            result += arg.toFormattedString(argFormat);
        }
        else if (typeof arg === "number") {
            result += numberToString(arg, useLocale, argFormat);
        }
        else if (arg instanceof Date) {
            result += dateToString(arg, useLocale);
        }
        else if (arg.format) {
            result += arg.format(argFormat);
        }
        else {
            result += arg.toString();
        }
        i = close_1 + 1;
    }
    return result;
}
var localeFormatters = ("Intl" in window) ? {
    date: new Intl.DateTimeFormat(),
    dateTime: new Intl.DateTimeFormat(undefined, {
        year: "numeric",
        month: "numeric",
        day: "numeric",
        hour: "numeric",
        minute: "numeric",
        second: "numeric"
    })
} : {};
/**
 * Converts a date to a string, optionally using the locale formatter
 *
 * @param value date to convert to a string
 * @param useLocale use the locale formatter when converting to a string
 */
function dateToString(value, useLocale) {
    var localeKey = typeof useLocale === "string" ? useLocale : "dateTime";
    if (useLocale) {
        var formatter = localeFormatters[localeKey];
        if (!formatter) {
            if (false) // removed by dead control flow
{}
            else {
                formatter = localeFormatters["dateTime"];
            }
        }
        return formatter.format(value);
    }
    else {
        return value.toString();
    }
}
/**
 * String representation of the empty guid
 */
var EmptyGuidString = "00000000-0000-0000-0000-000000000000";
/**
 * Is the given string in the format of a GUID
 *
 * @param str String to check
 */
function isGuid(str) {
    return /^\{?([\dA-F]{8})-?([\dA-F]{4})-?([\dA-F]{4})-?([\dA-F]{4})-?([\dA-F]{12})\}?$/i.test(str);
}
/**
 * Returns a GUID such as xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx.
 * @return New GUID.(UUID version 4 = xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx)
 * @notes Disclaimer: This implementation uses non-cryptographic random number generator so absolute uniqueness is not guarantee.
 */
function newGuid() {
    // c.f. rfc4122 (UUID version 4 = xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx)
    // "Set the two most significant bits (bits 6 and 7) of the clock_seq_hi_and_reserved to zero and one, respectively"
    var clockSequenceHi = (128 + Math.floor(Math.random() * 64)).toString(16);
    return oct(8) + "-" + oct(4) + "-4" + oct(3) + "-" + clockSequenceHi + oct(2) + "-" + oct(12);
}
var controlChars = /[\u0000-\u0008\u000B\u000C\u000E-\u001F\u007F-\u009F]/;
function containsControlChars(str) {
    return controlChars.test(str);
}
var surrogateChars = /(^[\uD800-\uDFFF]$)|[^\uD800-\uDBFF](?=[\uDC00-\uDFFF])|[\uD800-\uDBFF](?![\uDC00-\uDFFF])/;
function containsMismatchedSurrogateChars(str) {
    return surrogateChars.test(str);
}
function numberToString(value, useLocale, format) {
    if (!format || (format.length === 0) || (format === "i")) {
        if (useLocale) {
            return value.toLocaleString();
        }
        else {
            return value.toString();
        }
    }
    var percentPositivePattern = ["n %", "n%", "%n"];
    var percentNegativePattern = ["-n %", "-n%", "-%n"];
    var numberNegativePattern = ["(n)", "-n", "- n", "n-", "n -"];
    var currencyPositivePattern = ["$n", "n$", "$ n", "n $"];
    var currencyNegativePattern = ["($n)", "-$n", "$-n", "$n-", "(n$)", "-n$", "n-$", "n$-", "-n $", "-$ n", "n $-", "$ n-", "$ -n", "n- $", "($ n)", "(n $)"];
    function zeroPad(str, count, left) {
        for (var l = str.length; l < count; l++) {
            str = (left ? ('0' + str) : (str + '0'));
        }
        return str;
    }
    function expandNumber(numToExpand, precision, groupSizes, separator, decimalChar) {
        var currentSize = groupSizes[0];
        var currentGroupIndex = 1;
        var factor = Math.pow(10, precision);
        var rounded = (Math.round(numToExpand * factor) / factor);
        if (!isFinite(rounded)) {
            rounded = numToExpand;
        }
        numToExpand = rounded;
        var numberString = numToExpand.toString();
        var right = "";
        var exponent;
        var split = numberString.split(/e/i);
        numberString = split[0];
        exponent = (split.length > 1 ? parseInt(split[1]) : 0);
        split = numberString.split('.');
        numberString = split[0];
        right = split.length > 1 ? split[1] : "";
        if (exponent > 0) {
            right = zeroPad(right, exponent, false);
            numberString += right.slice(0, exponent);
            right = right.substr(exponent);
        }
        else if (exponent < 0) {
            exponent = -exponent;
            numberString = zeroPad(numberString, exponent + 1, true);
            right = numberString.slice(-exponent, numberString.length) + right;
            numberString = numberString.slice(0, -exponent);
        }
        if (precision > 0) {
            if (right.length > precision) {
                right = right.slice(0, precision);
            }
            else {
                right = zeroPad(right, precision, false);
            }
            right = decimalChar + right;
        }
        else {
            right = "";
        }
        var stringIndex = numberString.length - 1;
        var ret = "";
        while (stringIndex >= 0) {
            if (currentSize === 0 || currentSize > stringIndex) {
                if (ret.length > 0) {
                    return numberString.slice(0, stringIndex + 1) + separator + ret + right;
                }
                else {
                    return numberString.slice(0, stringIndex + 1) + right;
                }
            }
            if (ret.length > 0) {
                ret = numberString.slice(stringIndex - currentSize + 1, stringIndex + 1) + separator + ret;
            }
            else {
                ret = numberString.slice(stringIndex - currentSize + 1, stringIndex + 1);
            }
            stringIndex -= currentSize;
            if (currentGroupIndex < groupSizes.length) {
                currentSize = groupSizes[currentGroupIndex];
                currentGroupIndex++;
            }
        }
        return numberString.slice(0, stringIndex + 1) + separator + ret + right;
    }
    var numberFormat = useLocale ? _Core_Util_Culture__WEBPACK_IMPORTED_MODULE_0__.getCurrentCulture().numberFormat : _Core_Util_Culture__WEBPACK_IMPORTED_MODULE_0__.getInvariantCulture().numberFormat;
    var num;
    if (!format) {
        format = "D";
    }
    var precision = -1;
    if (format.length > 1)
        precision = parseInt(format.slice(1), 10);
    var pattern;
    switch (format.charAt(0)) {
        case "d":
        case "D":
            pattern = 'n';
            if (precision !== -1) {
                num = zeroPad("" + Math.abs(value), precision, true);
                if (value < 0) {
                    num = "-" + num;
                }
            }
            else {
                num = "" + value;
            }
            break;
        case "c":
        case "C":
            if (value < 0) {
                pattern = currencyNegativePattern[numberFormat.CurrencyNegativePattern];
            }
            else {
                pattern = currencyPositivePattern[numberFormat.CurrencyPositivePattern];
            }
            if (precision === -1) {
                precision = numberFormat.CurrencyDecimalDigits;
            }
            num = expandNumber(Math.abs(value), precision, numberFormat.CurrencyGroupSizes, numberFormat.CurrencyGroupSeparator, numberFormat.CurrencyDecimalSeparator);
            break;
        case "n":
        case "N":
            if (value < 0) {
                pattern = numberNegativePattern[numberFormat.NumberNegativePattern];
            }
            else {
                pattern = 'n';
            }
            if (precision === -1) {
                precision = numberFormat.NumberDecimalDigits;
            }
            num = expandNumber(Math.abs(value), precision, numberFormat.NumberGroupSizes, numberFormat.NumberGroupSeparator, numberFormat.NumberDecimalSeparator);
            break;
        case "p":
        case "P":
            if (value < 0) {
                pattern = percentNegativePattern[numberFormat.PercentNegativePattern];
            }
            else {
                pattern = percentPositivePattern[numberFormat.PercentPositivePattern];
            }
            if (precision === -1) {
                precision = numberFormat.PercentDecimalDigits;
            }
            num = expandNumber(Math.abs(value) * 100, precision, numberFormat.PercentGroupSizes, numberFormat.PercentGroupSeparator, numberFormat.PercentDecimalSeparator);
            break;
        default:
            throw new Error("Format specifier was invalid.");
    }
    var regex = /n|\$|-|%/g;
    var ret = "";
    for (;;) {
        var index = regex.lastIndex;
        var ar = regex.exec(pattern);
        ret += pattern.slice(index, ar ? ar.index : pattern.length);
        if (!ar)
            break;
        switch (ar[0]) {
            case "n":
                ret += num;
                break;
            case "$":
                ret += numberFormat.CurrencySymbol;
                break;
            case "-":
                if (/[1-9]/.test(num)) {
                    ret += numberFormat.NegativeSign;
                }
                break;
            case "%":
                ret += numberFormat.PercentSymbol;
                break;
            default:
                throw new Error("Invalid number format pattern");
        }
    }
    return ret;
}
/**
 * Generated non-zero octet sequences for use with GUID generation.
 *
 * @param length Length required.
 * @return Non-Zero hex sequences.
 */
function oct(length) {
    var result = "";
    for (var i = 0; i < length; i++) {
        result += Math.floor(Math.random() * 0x10).toString(16);
    }
    return result;
}
/**
 * This method returns the part of the str string without breaking surrogate characters
 *  from the start index up to and excluding the end index, or to the end of the string if no end index is supplied,
 * @param str A source string
 * @param start - The index of the first character to include in the returned substring.
 * @param end - The index of the first character to exclude from the returned substring.
 */
function safeSubstring(str, start, end) {
    // Ensure start and end are within the bounds of the string
    start = Math.max(0, Math.min(start, str.length));
    end = Math.min(str.length, Math.max(end, 0));
    // Adjust start and end positions to not break surrogate pairs
    while (start < end && (str.charCodeAt(start) & 0xFC00) === 0xDC00) {
        start++;
    }
    while (start < end && (str.charCodeAt(end - 1) & 0xFC00) === 0xD800) {
        end--;
    }
    return str.substring(start, end);
}


/***/ }),

/***/ "./node_modules/azure-devops-ui/Core/_platformCommon.scss":
/*!****************************************************************!*\
  !*** ./node_modules/azure-devops-ui/Core/_platformCommon.scss ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !../../style-loader/dist/runtime/styleDomAPI.js */ "./node_modules/style-loader/dist/runtime/styleDomAPI.js");
/* harmony import */ var _style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !../../style-loader/dist/runtime/insertBySelector.js */ "./node_modules/style-loader/dist/runtime/insertBySelector.js");
/* harmony import */ var _style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! !../../style-loader/dist/runtime/setAttributesWithoutAttributes.js */ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js");
/* harmony import */ var _style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! !../../style-loader/dist/runtime/insertStyleElement.js */ "./node_modules/style-loader/dist/runtime/insertStyleElement.js");
/* harmony import */ var _style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! !../../style-loader/dist/runtime/styleTagTransform.js */ "./node_modules/style-loader/dist/runtime/styleTagTransform.js");
/* harmony import */ var _style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _css_loader_dist_cjs_js_sass_loader_dist_cjs_js_platformCommon_scss__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! !!../../css-loader/dist/cjs.js!../../sass-loader/dist/cjs.js!./_platformCommon.scss */ "./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/azure-devops-ui/Core/_platformCommon.scss");

      
      
      
      
      
      
      
      
      

var options = {};

options.styleTagTransform = (_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default());
options.setAttributes = (_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default());
options.insert = _style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(null, "head");
options.domAPI = (_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default());
options.insertStyleElement = (_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default());

var update = _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_css_loader_dist_cjs_js_sass_loader_dist_cjs_js_platformCommon_scss__WEBPACK_IMPORTED_MODULE_6__["default"], options);




       /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_css_loader_dist_cjs_js_sass_loader_dist_cjs_js_platformCommon_scss__WEBPACK_IMPORTED_MODULE_6__["default"] && _css_loader_dist_cjs_js_sass_loader_dist_cjs_js_platformCommon_scss__WEBPACK_IMPORTED_MODULE_6__["default"].locals ? _css_loader_dist_cjs_js_sass_loader_dist_cjs_js_platformCommon_scss__WEBPACK_IMPORTED_MODULE_6__["default"].locals : undefined);


/***/ }),

/***/ "./node_modules/azure-devops-ui/Core/core.css":
/*!****************************************************!*\
  !*** ./node_modules/azure-devops-ui/Core/core.css ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !../../style-loader/dist/runtime/styleDomAPI.js */ "./node_modules/style-loader/dist/runtime/styleDomAPI.js");
/* harmony import */ var _style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !../../style-loader/dist/runtime/insertBySelector.js */ "./node_modules/style-loader/dist/runtime/insertBySelector.js");
/* harmony import */ var _style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! !../../style-loader/dist/runtime/setAttributesWithoutAttributes.js */ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js");
/* harmony import */ var _style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! !../../style-loader/dist/runtime/insertStyleElement.js */ "./node_modules/style-loader/dist/runtime/insertStyleElement.js");
/* harmony import */ var _style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! !../../style-loader/dist/runtime/styleTagTransform.js */ "./node_modules/style-loader/dist/runtime/styleTagTransform.js");
/* harmony import */ var _style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _css_loader_dist_cjs_js_core_css__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! !!../../css-loader/dist/cjs.js!./core.css */ "./node_modules/css-loader/dist/cjs.js!./node_modules/azure-devops-ui/Core/core.css");

      
      
      
      
      
      
      
      
      

var options = {};

options.styleTagTransform = (_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default());
options.setAttributes = (_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default());
options.insert = _style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(null, "head");
options.domAPI = (_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default());
options.insertStyleElement = (_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default());

var update = _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_css_loader_dist_cjs_js_core_css__WEBPACK_IMPORTED_MODULE_6__["default"], options);




       /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_css_loader_dist_cjs_js_core_css__WEBPACK_IMPORTED_MODULE_6__["default"] && _css_loader_dist_cjs_js_core_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals ? _css_loader_dist_cjs_js_core_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals : undefined);


/***/ }),

/***/ "./node_modules/azure-devops-ui/Core/find.js":
/*!***************************************************!*\
  !*** ./node_modules/azure-devops-ui/Core/find.js ***!
  \***************************************************/
/***/ (() => {


// Polyfill Array.findIndex
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex
if (!Array.prototype.findIndex) {
    Object.defineProperty(Array.prototype, 'findIndex', {
        value: function (predicate) {
            // 1. Let O be ? ToObject(this value).
            if (this == null) {
                throw new TypeError('"this" is null or not defined');
            }

            var o = Object(this);

            // 2. Let len be ? ToLength(? Get(O, "length")).
            var len = o.length >>> 0;

            // 3. If IsCallable(predicate) is false, throw a TypeError exception.
            if (typeof predicate !== 'function') {
                throw new TypeError('predicate must be a function');
            }

            // 4. If thisArg was supplied, let T be thisArg; else let T be undefined.
            var thisArg = arguments[1];

            // 5. Let k be 0.
            var k = 0;

            // 6. Repeat, while k < len
            while (k < len) {
                // a. Let Pk be ! ToString(k).
                // b. Let kValue be ? Get(O, Pk).
                // c. Let testResult be ToBoolean(? Call(predicate, T, « kValue, k, O »)).
                // d. If testResult is true, return k.
                var kValue = o[k];
                if (predicate.call(thisArg, kValue, k, o)) {
                    return k;
                }
                // e. Increase k by 1.
                k++;
            }

            // 7. Return -1.
            return -1;
        }
    });
}

// Polyfill Array.find
if (!Array.prototype.find) {
    Object.defineProperty(Array.prototype, 'find', {
        value: function (predicate) {
            if (this == null) {
                throw new TypeError('"this" is null or not defined');
            }

            var i = this.findIndex(predicate);
            if (i === -1) {
                return undefined;
            }
            else {
                return this[i];
            }
        }
    });
}


/***/ }),

/***/ "./node_modules/azure-devops-ui/Expandable.js":
/*!****************************************************!*\
  !*** ./node_modules/azure-devops-ui/Expandable.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Expandable: () => (/* reexport safe */ _Components_Expandable_Expandable__WEBPACK_IMPORTED_MODULE_0__.Expandable),
/* harmony export */   ExpandableContainer: () => (/* reexport safe */ _Components_Expandable_Expandable__WEBPACK_IMPORTED_MODULE_0__.ExpandableContainer)
/* harmony export */ });
/* harmony import */ var _Components_Expandable_Expandable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Components/Expandable/Expandable */ "./node_modules/azure-devops-ui/Components/Expandable/Expandable.js");
/* harmony import */ var _Components_Expandable_Expandable_Props__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Components/Expandable/Expandable.Props */ "./node_modules/azure-devops-ui/Components/Expandable/Expandable.Props.js");




/***/ }),

/***/ "./node_modules/azure-devops-ui/FocusGroup.js":
/*!****************************************************!*\
  !*** ./node_modules/azure-devops-ui/FocusGroup.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   FocusGroup: () => (/* reexport safe */ _Components_FocusGroup_FocusGroup__WEBPACK_IMPORTED_MODULE_0__.FocusGroup),
/* harmony export */   FocusGroupContext: () => (/* reexport safe */ _Components_FocusGroup_FocusGroup__WEBPACK_IMPORTED_MODULE_0__.FocusGroupContext)
/* harmony export */ });
/* harmony import */ var _Components_FocusGroup_FocusGroup__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Components/FocusGroup/FocusGroup */ "./node_modules/azure-devops-ui/Components/FocusGroup/FocusGroup.js");
/* harmony import */ var _Components_FocusGroup_FocusGroup_Props__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Components/FocusGroup/FocusGroup.Props */ "./node_modules/azure-devops-ui/Components/FocusGroup/FocusGroup.Props.js");

// @NOTE: Explicit export list due to typescript compiler bug 18644 where a require is generated for export * when const enum's are present



/***/ }),

/***/ "./node_modules/azure-devops-ui/FocusWithin.js":
/*!*****************************************************!*\
  !*** ./node_modules/azure-devops-ui/FocusWithin.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   FocusWithin: () => (/* reexport safe */ _Components_FocusWithin_FocusWithin__WEBPACK_IMPORTED_MODULE_0__.FocusWithin)
/* harmony export */ });
/* harmony import */ var _Components_FocusWithin_FocusWithin__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Components/FocusWithin/FocusWithin */ "./node_modules/azure-devops-ui/Components/FocusWithin/FocusWithin.js");
/* harmony import */ var _Components_FocusWithin_FocusWithin_Props__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Components/FocusWithin/FocusWithin.Props */ "./node_modules/azure-devops-ui/Components/FocusWithin/FocusWithin.Props.js");

// @NOTE: Explicit export list due to typescript compiler bug 18644 where a require is generated for export * when const enum's are present



/***/ }),

/***/ "./node_modules/azure-devops-ui/FocusZone.js":
/*!***************************************************!*\
  !*** ./node_modules/azure-devops-ui/FocusZone.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   FocusZone: () => (/* reexport safe */ _Components_FocusZone_FocusZone__WEBPACK_IMPORTED_MODULE_0__.FocusZone),
/* harmony export */   FocusZoneContext: () => (/* reexport safe */ _Components_FocusZone_FocusZone__WEBPACK_IMPORTED_MODULE_0__.FocusZoneContext),
/* harmony export */   FocusZoneDirection: () => (/* reexport safe */ _Components_FocusZone_FocusZone_Props__WEBPACK_IMPORTED_MODULE_1__.FocusZoneDirection),
/* harmony export */   FocusZoneKeyStroke: () => (/* reexport safe */ _Components_FocusZone_FocusZone_Props__WEBPACK_IMPORTED_MODULE_1__.FocusZoneKeyStroke)
/* harmony export */ });
/* harmony import */ var _Components_FocusZone_FocusZone__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Components/FocusZone/FocusZone */ "./node_modules/azure-devops-ui/Components/FocusZone/FocusZone.js");
/* harmony import */ var _Components_FocusZone_FocusZone_Props__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Components/FocusZone/FocusZone.Props */ "./node_modules/azure-devops-ui/Components/FocusZone/FocusZone.Props.js");

// @NOTE: Explicit export list due to typescript compiler bug 18644 where a require is generated for export * when const enum's are present



/***/ }),

/***/ "./node_modules/azure-devops-ui/Header.js":
/*!************************************************!*\
  !*** ./node_modules/azure-devops-ui/Header.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CustomHeader: () => (/* reexport safe */ _Components_Header_CustomHeader__WEBPACK_IMPORTED_MODULE_0__.CustomHeader),
/* harmony export */   Header: () => (/* reexport safe */ _Components_Header_Header__WEBPACK_IMPORTED_MODULE_1__.Header),
/* harmony export */   HeaderBackButton: () => (/* reexport safe */ _Components_Header_HeaderBackButton__WEBPACK_IMPORTED_MODULE_2__.HeaderBackButton),
/* harmony export */   HeaderDescription: () => (/* reexport safe */ _Components_Header_HeaderDescription__WEBPACK_IMPORTED_MODULE_3__.HeaderDescription),
/* harmony export */   HeaderIcon: () => (/* reexport safe */ _Components_Header_HeaderIcon__WEBPACK_IMPORTED_MODULE_4__.HeaderIcon),
/* harmony export */   HeaderTitle: () => (/* reexport safe */ _Components_Header_HeaderTitle__WEBPACK_IMPORTED_MODULE_5__.HeaderTitle),
/* harmony export */   HeaderTitleArea: () => (/* reexport safe */ _Components_Header_HeaderTitleArea__WEBPACK_IMPORTED_MODULE_6__.HeaderTitleArea),
/* harmony export */   HeaderTitleRow: () => (/* reexport safe */ _Components_Header_HeaderTitleRow__WEBPACK_IMPORTED_MODULE_7__.HeaderTitleRow),
/* harmony export */   TitleSize: () => (/* reexport safe */ _Components_Header_Header_Props__WEBPACK_IMPORTED_MODULE_8__.TitleSize)
/* harmony export */ });
/* harmony import */ var _Components_Header_CustomHeader__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Components/Header/CustomHeader */ "./node_modules/azure-devops-ui/Components/Header/CustomHeader.js");
/* harmony import */ var _Components_Header_Header__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Components/Header/Header */ "./node_modules/azure-devops-ui/Components/Header/Header.js");
/* harmony import */ var _Components_Header_HeaderBackButton__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Components/Header/HeaderBackButton */ "./node_modules/azure-devops-ui/Components/Header/HeaderBackButton.js");
/* harmony import */ var _Components_Header_HeaderDescription__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Components/Header/HeaderDescription */ "./node_modules/azure-devops-ui/Components/Header/HeaderDescription.js");
/* harmony import */ var _Components_Header_HeaderIcon__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Components/Header/HeaderIcon */ "./node_modules/azure-devops-ui/Components/Header/HeaderIcon.js");
/* harmony import */ var _Components_Header_HeaderTitle__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Components/Header/HeaderTitle */ "./node_modules/azure-devops-ui/Components/Header/HeaderTitle.js");
/* harmony import */ var _Components_Header_HeaderTitleArea__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Components/Header/HeaderTitleArea */ "./node_modules/azure-devops-ui/Components/Header/HeaderTitleArea.js");
/* harmony import */ var _Components_Header_HeaderTitleRow__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./Components/Header/HeaderTitleRow */ "./node_modules/azure-devops-ui/Components/Header/HeaderTitleRow.js");
/* harmony import */ var _Components_Header_Header_Props__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./Components/Header/Header.Props */ "./node_modules/azure-devops-ui/Components/Header/Header.Props.js");











/***/ }),

/***/ "./node_modules/azure-devops-ui/HeaderCommandBar.js":
/*!**********************************************************!*\
  !*** ./node_modules/azure-devops-ui/HeaderCommandBar.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CustomHeaderCommandBar: () => (/* reexport safe */ _Components_HeaderCommandBar_CustomHeaderCommandBar__WEBPACK_IMPORTED_MODULE_0__.CustomHeaderCommandBar),
/* harmony export */   HeaderCommandBar: () => (/* reexport safe */ _Components_HeaderCommandBar_HeaderCommandBar__WEBPACK_IMPORTED_MODULE_1__.HeaderCommandBar),
/* harmony export */   HeaderCommandBarWithFilter: () => (/* reexport safe */ _Components_HeaderCommandBar_HeaderCommandBar__WEBPACK_IMPORTED_MODULE_1__.HeaderCommandBarWithFilter),
/* harmony export */   getFilterItem: () => (/* reexport safe */ _Components_HeaderCommandBar_Items__WEBPACK_IMPORTED_MODULE_3__.getFilterItem),
/* harmony export */   getFilterItemIconProps: () => (/* reexport safe */ _Components_HeaderCommandBar_Items__WEBPACK_IMPORTED_MODULE_3__.getFilterItemIconProps),
/* harmony export */   getFullScreenItem: () => (/* reexport safe */ _Components_HeaderCommandBar_Items__WEBPACK_IMPORTED_MODULE_3__.getFullScreenItem),
/* harmony export */   toggleFullScreen: () => (/* reexport safe */ _Components_HeaderCommandBar_Items__WEBPACK_IMPORTED_MODULE_3__.toggleFullScreen)
/* harmony export */ });
/* harmony import */ var _Components_HeaderCommandBar_CustomHeaderCommandBar__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Components/HeaderCommandBar/CustomHeaderCommandBar */ "./node_modules/azure-devops-ui/Components/HeaderCommandBar/CustomHeaderCommandBar.js");
/* harmony import */ var _Components_HeaderCommandBar_HeaderCommandBar__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Components/HeaderCommandBar/HeaderCommandBar */ "./node_modules/azure-devops-ui/Components/HeaderCommandBar/HeaderCommandBar.js");
/* harmony import */ var _Components_HeaderCommandBar_HeaderCommandBar_Props__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Components/HeaderCommandBar/HeaderCommandBar.Props */ "./node_modules/azure-devops-ui/Components/HeaderCommandBar/HeaderCommandBar.Props.js");
/* harmony import */ var _Components_HeaderCommandBar_Items__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Components/HeaderCommandBar/Items */ "./node_modules/azure-devops-ui/Components/HeaderCommandBar/Items.js");






/***/ }),

/***/ "./node_modules/azure-devops-ui/Icon.js":
/*!**********************************************!*\
  !*** ./node_modules/azure-devops-ui/Icon.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Icon: () => (/* reexport safe */ _Components_Icon_Icon__WEBPACK_IMPORTED_MODULE_0__.Icon),
/* harmony export */   IconSize: () => (/* reexport safe */ _Components_Icon_Icon_Props__WEBPACK_IMPORTED_MODULE_1__.IconSize)
/* harmony export */ });
/* harmony import */ var _Components_Icon_Icon__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Components/Icon/Icon */ "./node_modules/azure-devops-ui/Components/Icon/Icon.js");
/* harmony import */ var _Components_Icon_Icon_Props__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Components/Icon/Icon.Props */ "./node_modules/azure-devops-ui/Components/Icon/Icon.Props.js");




/***/ }),

/***/ "./node_modules/azure-devops-ui/Intersection.js":
/*!******************************************************!*\
  !*** ./node_modules/azure-devops-ui/Intersection.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Intersection: () => (/* reexport safe */ _Components_Intersection_Intersection__WEBPACK_IMPORTED_MODULE_0__.Intersection),
/* harmony export */   IntersectionContext: () => (/* reexport safe */ _Components_Intersection_Intersection__WEBPACK_IMPORTED_MODULE_0__.IntersectionContext)
/* harmony export */ });
/* harmony import */ var _Components_Intersection_Intersection__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Components/Intersection/Intersection */ "./node_modules/azure-devops-ui/Components/Intersection/Intersection.js");
/* harmony import */ var _Components_Intersection_Intersection_Props__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Components/Intersection/Intersection.Props */ "./node_modules/azure-devops-ui/Components/Intersection/Intersection.Props.js");




/***/ }),

/***/ "./node_modules/azure-devops-ui/Link.js":
/*!**********************************************!*\
  !*** ./node_modules/azure-devops-ui/Link.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Link: () => (/* reexport safe */ _Components_Link_Link__WEBPACK_IMPORTED_MODULE_0__.Link),
/* harmony export */   getDefaultAnchorProps: () => (/* reexport safe */ _Components_Link_Utilities__WEBPACK_IMPORTED_MODULE_2__.getDefaultAnchorProps),
/* harmony export */   getDefaultLinkProps: () => (/* reexport safe */ _Components_Link_Utilities__WEBPACK_IMPORTED_MODULE_2__.getDefaultLinkProps)
/* harmony export */ });
/* harmony import */ var _Components_Link_Link__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Components/Link/Link */ "./node_modules/azure-devops-ui/Components/Link/Link.js");
/* harmony import */ var _Components_Link_Link_Props__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Components/Link/Link.Props */ "./node_modules/azure-devops-ui/Components/Link/Link.Props.js");
/* harmony import */ var _Components_Link_Utilities__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Components/Link/Utilities */ "./node_modules/azure-devops-ui/Components/Link/Utilities.js");





/***/ }),

/***/ "./node_modules/azure-devops-ui/List.js":
/*!**********************************************!*\
  !*** ./node_modules/azure-devops-ui/List.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DropdownList: () => (/* reexport safe */ _Components_List_DropdownList__WEBPACK_IMPORTED_MODULE_9__.DropdownList),
/* harmony export */   DropdownListItem: () => (/* reexport safe */ _Components_List_DropdownList__WEBPACK_IMPORTED_MODULE_9__.DropdownListItem),
/* harmony export */   FilteredListSelection: () => (/* reexport safe */ _Components_List_ListSelection__WEBPACK_IMPORTED_MODULE_8__.FilteredListSelection),
/* harmony export */   FixedHeightList: () => (/* reexport safe */ _Components_List_FixedHeightList__WEBPACK_IMPORTED_MODULE_0__.FixedHeightList),
/* harmony export */   List: () => (/* reexport safe */ _Components_List_List__WEBPACK_IMPORTED_MODULE_2__.List),
/* harmony export */   ListDragDropBehavior: () => (/* reexport safe */ _Components_List_ListDragDropBehavior__WEBPACK_IMPORTED_MODULE_4__.ListDragDropBehavior),
/* harmony export */   ListDragImage: () => (/* reexport safe */ _Components_List_ListDragImage__WEBPACK_IMPORTED_MODULE_5__.ListDragImage),
/* harmony export */   ListDragSourceBehavior: () => (/* reexport safe */ _Components_List_ListDragSourceBehavior__WEBPACK_IMPORTED_MODULE_6__.ListDragSourceBehavior),
/* harmony export */   ListDropTargetBehavior: () => (/* reexport safe */ _Components_List_ListDropTargetBehavior__WEBPACK_IMPORTED_MODULE_7__.ListDropTargetBehavior),
/* harmony export */   ListItem: () => (/* reexport safe */ _Components_List_List__WEBPACK_IMPORTED_MODULE_2__.ListItem),
/* harmony export */   ListSelection: () => (/* reexport safe */ _Components_List_ListSelection__WEBPACK_IMPORTED_MODULE_8__.ListSelection),
/* harmony export */   ScrollableList: () => (/* reexport safe */ _Components_List_List__WEBPACK_IMPORTED_MODULE_2__.ScrollableList),
/* harmony export */   SimpleList: () => (/* reexport safe */ _Components_List_List__WEBPACK_IMPORTED_MODULE_2__.SimpleList),
/* harmony export */   cellFromElement: () => (/* reexport safe */ _Components_List_List__WEBPACK_IMPORTED_MODULE_2__.cellFromElement),
/* harmony export */   cellFromEvent: () => (/* reexport safe */ _Components_List_List__WEBPACK_IMPORTED_MODULE_2__.cellFromEvent),
/* harmony export */   renderListCell: () => (/* reexport safe */ _Components_List_List__WEBPACK_IMPORTED_MODULE_2__.renderListCell),
/* harmony export */   renderListItem: () => (/* reexport safe */ _Components_List_List__WEBPACK_IMPORTED_MODULE_2__.renderListItem),
/* harmony export */   rowFromElement: () => (/* reexport safe */ _Components_List_FixedHeightList__WEBPACK_IMPORTED_MODULE_0__.rowFromElement),
/* harmony export */   rowFromEvent: () => (/* reexport safe */ _Components_List_FixedHeightList__WEBPACK_IMPORTED_MODULE_0__.rowFromEvent)
/* harmony export */ });
/* harmony import */ var _Components_List_FixedHeightList__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Components/List/FixedHeightList */ "./node_modules/azure-devops-ui/Components/List/FixedHeightList.js");
/* harmony import */ var _Components_List_FixedHeightList_Props__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Components/List/FixedHeightList.Props */ "./node_modules/azure-devops-ui/Components/List/FixedHeightList.Props.js");
/* harmony import */ var _Components_List_List__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Components/List/List */ "./node_modules/azure-devops-ui/Components/List/List.js");
/* harmony import */ var _Components_List_List_Props__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Components/List/List.Props */ "./node_modules/azure-devops-ui/Components/List/List.Props.js");
/* harmony import */ var _Components_List_ListDragDropBehavior__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Components/List/ListDragDropBehavior */ "./node_modules/azure-devops-ui/Components/List/ListDragDropBehavior.js");
/* harmony import */ var _Components_List_ListDragImage__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Components/List/ListDragImage */ "./node_modules/azure-devops-ui/Components/List/ListDragImage.js");
/* harmony import */ var _Components_List_ListDragSourceBehavior__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Components/List/ListDragSourceBehavior */ "./node_modules/azure-devops-ui/Components/List/ListDragSourceBehavior.js");
/* harmony import */ var _Components_List_ListDropTargetBehavior__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./Components/List/ListDropTargetBehavior */ "./node_modules/azure-devops-ui/Components/List/ListDropTargetBehavior.js");
/* harmony import */ var _Components_List_ListSelection__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./Components/List/ListSelection */ "./node_modules/azure-devops-ui/Components/List/ListSelection.js");
/* harmony import */ var _Components_List_DropdownList__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./Components/List/DropdownList */ "./node_modules/azure-devops-ui/Components/List/DropdownList.js");












/***/ }),

/***/ "./node_modules/azure-devops-ui/Menu.js":
/*!**********************************************!*\
  !*** ./node_modules/azure-devops-ui/Menu.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ContextMenuBehavior: () => (/* reexport safe */ _Components_Menu_ContextMenuBehavior__WEBPACK_IMPORTED_MODULE_0__.ContextMenuBehavior),
/* harmony export */   ContextualMenu: () => (/* reexport safe */ _Components_Menu_Menu__WEBPACK_IMPORTED_MODULE_1__.ContextualMenu),
/* harmony export */   Menu: () => (/* reexport safe */ _Components_Menu_Menu__WEBPACK_IMPORTED_MODULE_1__.Menu),
/* harmony export */   MenuButton: () => (/* reexport safe */ _Components_Menu_MenuButton__WEBPACK_IMPORTED_MODULE_3__.MenuButton),
/* harmony export */   MenuCell: () => (/* reexport safe */ _Components_Menu_Menu_Props__WEBPACK_IMPORTED_MODULE_2__.MenuCell),
/* harmony export */   MenuDivider: () => (/* reexport safe */ _Components_Menu_Menu__WEBPACK_IMPORTED_MODULE_1__.MenuDivider),
/* harmony export */   MenuHeader: () => (/* reexport safe */ _Components_Menu_Menu__WEBPACK_IMPORTED_MODULE_1__.MenuHeader),
/* harmony export */   MenuItem: () => (/* reexport safe */ _Components_Menu_Menu__WEBPACK_IMPORTED_MODULE_1__.MenuItem),
/* harmony export */   MenuItemType: () => (/* reexport safe */ _Components_Menu_Menu_Props__WEBPACK_IMPORTED_MODULE_2__.MenuItemType),
/* harmony export */   MoreButton: () => (/* reexport safe */ _Components_Menu_MoreButton__WEBPACK_IMPORTED_MODULE_5__.MoreButton),
/* harmony export */   groupMenuItems: () => (/* reexport safe */ _Components_Menu_Menu__WEBPACK_IMPORTED_MODULE_1__.groupMenuItems)
/* harmony export */ });
/* harmony import */ var _Components_Menu_ContextMenuBehavior__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Components/Menu/ContextMenuBehavior */ "./node_modules/azure-devops-ui/Components/Menu/ContextMenuBehavior.js");
/* harmony import */ var _Components_Menu_Menu__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Components/Menu/Menu */ "./node_modules/azure-devops-ui/Components/Menu/Menu.js");
/* harmony import */ var _Components_Menu_Menu_Props__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Components/Menu/Menu.Props */ "./node_modules/azure-devops-ui/Components/Menu/Menu.Props.js");
/* harmony import */ var _Components_Menu_MenuButton__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Components/Menu/MenuButton */ "./node_modules/azure-devops-ui/Components/Menu/MenuButton.js");
/* harmony import */ var _Components_Menu_MenuButton_Props__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Components/Menu/MenuButton.Props */ "./node_modules/azure-devops-ui/Components/Menu/MenuButton.Props.js");
/* harmony import */ var _Components_Menu_MoreButton__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Components/Menu/MoreButton */ "./node_modules/azure-devops-ui/Components/Menu/MoreButton.js");








/***/ }),

/***/ "./node_modules/azure-devops-ui/MessageBar.js":
/*!****************************************************!*\
  !*** ./node_modules/azure-devops-ui/MessageBar.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   MessageBar: () => (/* reexport safe */ _Components_MessageBar_MessageBar__WEBPACK_IMPORTED_MODULE_0__.MessageBar),
/* harmony export */   MessageBarSeverity: () => (/* reexport safe */ _Components_MessageBar_MessageBar_Props__WEBPACK_IMPORTED_MODULE_1__.MessageBarSeverity)
/* harmony export */ });
/* harmony import */ var _Components_MessageBar_MessageBar__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Components/MessageBar/MessageBar */ "./node_modules/azure-devops-ui/Components/MessageBar/MessageBar.js");
/* harmony import */ var _Components_MessageBar_MessageBar_Props__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Components/MessageBar/MessageBar.Props */ "./node_modules/azure-devops-ui/Components/MessageBar/MessageBar.Props.js");




/***/ }),

/***/ "./node_modules/azure-devops-ui/MouseWithin.js":
/*!*****************************************************!*\
  !*** ./node_modules/azure-devops-ui/MouseWithin.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   MouseWithin: () => (/* reexport safe */ _Components_MouseWithin_MouseWithin__WEBPACK_IMPORTED_MODULE_0__.MouseWithin)
/* harmony export */ });
/* harmony import */ var _Components_MouseWithin_MouseWithin__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Components/MouseWithin/MouseWithin */ "./node_modules/azure-devops-ui/Components/MouseWithin/MouseWithin.js");
/* harmony import */ var _Components_MouseWithin_MouseWithin_Props__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Components/MouseWithin/MouseWithin.Props */ "./node_modules/azure-devops-ui/Components/MouseWithin/MouseWithin.Props.js");

// @NOTE: Explicit export list due to typescript compiler bug 18644 where a require is generated for export * when const enum's are present



/***/ }),

/***/ "./node_modules/azure-devops-ui/Observer.js":
/*!**************************************************!*\
  !*** ./node_modules/azure-devops-ui/Observer.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ItemsObserver: () => (/* reexport safe */ _Components_Observer_ItemsObserver__WEBPACK_IMPORTED_MODULE_0__.ItemsObserver),
/* harmony export */   Observer: () => (/* reexport safe */ _Components_Observer_Observer__WEBPACK_IMPORTED_MODULE_2__.Observer),
/* harmony export */   ReadyableArrayObserver: () => (/* reexport safe */ _Components_Observer_ReadyableArrayObserver__WEBPACK_IMPORTED_MODULE_4__.ReadyableArrayObserver),
/* harmony export */   SelectionObserver: () => (/* reexport safe */ _Components_Observer_SelectionObserver__WEBPACK_IMPORTED_MODULE_6__.SelectionObserver),
/* harmony export */   UncheckedObserver: () => (/* reexport safe */ _Components_Observer_Observer__WEBPACK_IMPORTED_MODULE_2__.UncheckedObserver)
/* harmony export */ });
/* harmony import */ var _Components_Observer_ItemsObserver__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Components/Observer/ItemsObserver */ "./node_modules/azure-devops-ui/Components/Observer/ItemsObserver.js");
/* harmony import */ var _Components_Observer_ItemsObserver_Props__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Components/Observer/ItemsObserver.Props */ "./node_modules/azure-devops-ui/Components/Observer/ItemsObserver.Props.js");
/* harmony import */ var _Components_Observer_Observer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Components/Observer/Observer */ "./node_modules/azure-devops-ui/Components/Observer/Observer.js");
/* harmony import */ var _Components_Observer_Observer_Props__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Components/Observer/Observer.Props */ "./node_modules/azure-devops-ui/Components/Observer/Observer.Props.js");
/* harmony import */ var _Components_Observer_ReadyableArrayObserver__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Components/Observer/ReadyableArrayObserver */ "./node_modules/azure-devops-ui/Components/Observer/ReadyableArrayObserver.js");
/* harmony import */ var _Components_Observer_ReadyableArrayObserver_Props__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Components/Observer/ReadyableArrayObserver.Props */ "./node_modules/azure-devops-ui/Components/Observer/ReadyableArrayObserver.Props.js");
/* harmony import */ var _Components_Observer_SelectionObserver__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Components/Observer/SelectionObserver */ "./node_modules/azure-devops-ui/Components/Observer/SelectionObserver.js");
/* harmony import */ var _Components_Observer_SelectionObserver_Props__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./Components/Observer/SelectionObserver.Props */ "./node_modules/azure-devops-ui/Components/Observer/SelectionObserver.Props.js");










/***/ }),

/***/ "./node_modules/azure-devops-ui/Pill.js":
/*!**********************************************!*\
  !*** ./node_modules/azure-devops-ui/Pill.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Pill: () => (/* reexport safe */ _Components_Pill_Pill__WEBPACK_IMPORTED_MODULE_0__.Pill),
/* harmony export */   PillSize: () => (/* reexport safe */ _Components_Pill_Pill_Props__WEBPACK_IMPORTED_MODULE_1__.PillSize),
/* harmony export */   PillVariant: () => (/* reexport safe */ _Components_Pill_Pill_Props__WEBPACK_IMPORTED_MODULE_1__.PillVariant)
/* harmony export */ });
/* harmony import */ var _Components_Pill_Pill__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Components/Pill/Pill */ "./node_modules/azure-devops-ui/Components/Pill/Pill.js");
/* harmony import */ var _Components_Pill_Pill_Props__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Components/Pill/Pill.Props */ "./node_modules/azure-devops-ui/Components/Pill/Pill.Props.js");




/***/ }),

/***/ "./node_modules/azure-devops-ui/Portal.js":
/*!************************************************!*\
  !*** ./node_modules/azure-devops-ui/Portal.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Portal: () => (/* reexport safe */ _Components_Portal_Portal__WEBPACK_IMPORTED_MODULE_0__.Portal)
/* harmony export */ });
/* harmony import */ var _Components_Portal_Portal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Components/Portal/Portal */ "./node_modules/azure-devops-ui/Components/Portal/Portal.js");
/* harmony import */ var _Components_Portal_Portal_Props__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Components/Portal/Portal.Props */ "./node_modules/azure-devops-ui/Components/Portal/Portal.Props.js");




/***/ }),

/***/ "./node_modules/azure-devops-ui/ResizeGroup.js":
/*!*****************************************************!*\
  !*** ./node_modules/azure-devops-ui/ResizeGroup.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   OverflowButton: () => (/* reexport safe */ _Components_ResizeGroup_OverflowButton__WEBPACK_IMPORTED_MODULE_2__.OverflowButton),
/* harmony export */   ResizeGroup: () => (/* reexport safe */ _Components_ResizeGroup_ResizeGroup__WEBPACK_IMPORTED_MODULE_0__.ResizeGroup),
/* harmony export */   ResizeGroupContext: () => (/* reexport safe */ _Components_ResizeGroup_ResizeGroup__WEBPACK_IMPORTED_MODULE_0__.ResizeGroupContext)
/* harmony export */ });
/* harmony import */ var _Components_ResizeGroup_ResizeGroup__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Components/ResizeGroup/ResizeGroup */ "./node_modules/azure-devops-ui/Components/ResizeGroup/ResizeGroup.js");
/* harmony import */ var _Components_ResizeGroup_ResizeGroup_Props__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Components/ResizeGroup/ResizeGroup.Props */ "./node_modules/azure-devops-ui/Components/ResizeGroup/ResizeGroup.Props.js");
/* harmony import */ var _Components_ResizeGroup_OverflowButton__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Components/ResizeGroup/OverflowButton */ "./node_modules/azure-devops-ui/Components/ResizeGroup/OverflowButton.js");





/***/ }),

/***/ "./node_modules/azure-devops-ui/Resources.Card.js":
/*!********************************************************!*\
  !*** ./node_modules/azure-devops-ui/Resources.Card.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CollapseButtonAriaLabel: () => (/* binding */ CollapseButtonAriaLabel),
/* harmony export */   ExpandButtonAriaLabel: () => (/* binding */ ExpandButtonAriaLabel)
/* harmony export */ });
var CollapseButtonAriaLabel = "Collapse";
var ExpandButtonAriaLabel = "Expand";


/***/ }),

/***/ "./node_modules/azure-devops-ui/Resources.Core.js":
/*!********************************************************!*\
  !*** ./node_modules/azure-devops-ui/Resources.Core.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AgoHours: () => (/* binding */ AgoHours),
/* harmony export */   AgoMinutes: () => (/* binding */ AgoMinutes),
/* harmony export */   Collapsed: () => (/* binding */ Collapsed),
/* harmony export */   DayAtTimeFormat: () => (/* binding */ DayAtTimeFormat),
/* harmony export */   DaysHoursMinutes: () => (/* binding */ DaysHoursMinutes),
/* harmony export */   Expanded: () => (/* binding */ Expanded),
/* harmony export */   FriendlyNumberBillionsFormat: () => (/* binding */ FriendlyNumberBillionsFormat),
/* harmony export */   FriendlyNumberMillionsFormat: () => (/* binding */ FriendlyNumberMillionsFormat),
/* harmony export */   FriendlyNumberThousandsFormat: () => (/* binding */ FriendlyNumberThousandsFormat),
/* harmony export */   HoursMinutesSeconds: () => (/* binding */ HoursMinutesSeconds),
/* harmony export */   JustNow: () => (/* binding */ JustNow),
/* harmony export */   LessThanASecond: () => (/* binding */ LessThanASecond),
/* harmony export */   MinutesSeconds: () => (/* binding */ MinutesSeconds),
/* harmony export */   Seconds: () => (/* binding */ Seconds),
/* harmony export */   Today: () => (/* binding */ Today),
/* harmony export */   Yesterday: () => (/* binding */ Yesterday)
/* harmony export */ });
var AgoHours = "{0}h ago";
var AgoMinutes = "{0}m ago";
var Collapsed = "Collapsed";
var DayAtTimeFormat = "{0} at {1}";
var DaysHoursMinutes = "{0}d {1}h {2}m";
var Expanded = "Expanded";
var FriendlyNumberBillionsFormat = "{0}B+";
var FriendlyNumberMillionsFormat = "{0}M+";
var FriendlyNumberThousandsFormat = "{0}K+";
var HoursMinutesSeconds = "{0}h {1}m {2}s";
var JustNow = "Just now";
var LessThanASecond = "<1s";
var MinutesSeconds = "{0}m {1}s";
var Seconds = "{0}s";
var Today = "Today";
var Yesterday = "Yesterday";


/***/ }),

/***/ "./node_modules/azure-devops-ui/Resources.MessageBar.js":
/*!**************************************************************!*\
  !*** ./node_modules/azure-devops-ui/Resources.MessageBar.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DismissButtonLabel: () => (/* binding */ DismissButtonLabel),
/* harmony export */   Error: () => (/* binding */ Error),
/* harmony export */   Info: () => (/* binding */ Info),
/* harmony export */   Success: () => (/* binding */ Success),
/* harmony export */   Warning: () => (/* binding */ Warning)
/* harmony export */ });
var DismissButtonLabel = "Dismiss {0} message";
var Error = "error";
var Info = "info";
var Success = "success";
var Warning = "warning";


/***/ }),

/***/ "./node_modules/azure-devops-ui/Resources.Page.js":
/*!********************************************************!*\
  !*** ./node_modules/azure-devops-ui/Resources.Page.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Back: () => (/* binding */ Back),
/* harmony export */   EnterFullScreen: () => (/* binding */ EnterFullScreen),
/* harmony export */   ExitFullScreen: () => (/* binding */ ExitFullScreen),
/* harmony export */   Filter: () => (/* binding */ Filter)
/* harmony export */ });
var Back = "Back";
var EnterFullScreen = "Enter full-screen mode";
var ExitFullScreen = "Exit full-screen mode";
var Filter = "Filter";


/***/ }),

/***/ "./node_modules/azure-devops-ui/Resources.Widgets.js":
/*!***********************************************************!*\
  !*** ./node_modules/azure-devops-ui/Resources.Widgets.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AllRowsSelectedMessage: () => (/* binding */ AllRowsSelectedMessage),
/* harmony export */   AllRowsUnselectedMessage: () => (/* binding */ AllRowsUnselectedMessage),
/* harmony export */   ClickableRowAnnouncement: () => (/* binding */ ClickableRowAnnouncement),
/* harmony export */   ClickableRowAnnouncementWithSize: () => (/* binding */ ClickableRowAnnouncementWithSize),
/* harmony export */   ColumnButtonSizerLeft: () => (/* binding */ ColumnButtonSizerLeft),
/* harmony export */   ColumnButtonSizerLeftAriaLabel: () => (/* binding */ ColumnButtonSizerLeftAriaLabel),
/* harmony export */   ColumnButtonSizerRight: () => (/* binding */ ColumnButtonSizerRight),
/* harmony export */   ColumnButtonSizerRightAriaLabel: () => (/* binding */ ColumnButtonSizerRightAriaLabel),
/* harmony export */   ColumnSizerLabel: () => (/* binding */ ColumnSizerLabel),
/* harmony export */   ColumnSortedAscendingAnnouncement: () => (/* binding */ ColumnSortedAscendingAnnouncement),
/* harmony export */   ColumnSortedDescendingAnnouncement: () => (/* binding */ ColumnSortedDescendingAnnouncement),
/* harmony export */   DropdownSelection: () => (/* binding */ DropdownSelection),
/* harmony export */   EmptyColumnHeaderLabel: () => (/* binding */ EmptyColumnHeaderLabel),
/* harmony export */   ListItem: () => (/* binding */ ListItem),
/* harmony export */   MoreActions: () => (/* binding */ MoreActions),
/* harmony export */   MoreTooltip: () => (/* binding */ MoreTooltip),
/* harmony export */   NoMoreActions: () => (/* binding */ NoMoreActions),
/* harmony export */   RemovePillLabel: () => (/* binding */ RemovePillLabel),
/* harmony export */   RowAnnouncement: () => (/* binding */ RowAnnouncement),
/* harmony export */   RowAnnouncementWithSize: () => (/* binding */ RowAnnouncementWithSize),
/* harmony export */   SelectAllRowsLabel: () => (/* binding */ SelectAllRowsLabel),
/* harmony export */   SelectRowLabel: () => (/* binding */ SelectRowLabel),
/* harmony export */   SelectionColumnLabel: () => (/* binding */ SelectionColumnLabel),
/* harmony export */   ShowLess: () => (/* binding */ ShowLess),
/* harmony export */   ShowMore: () => (/* binding */ ShowMore),
/* harmony export */   SizerAnnouncement: () => (/* binding */ SizerAnnouncement),
/* harmony export */   Started: () => (/* binding */ Started),
/* harmony export */   VirtualizationDisabled: () => (/* binding */ VirtualizationDisabled),
/* harmony export */   VirtualizedListLabelFormat: () => (/* binding */ VirtualizedListLabelFormat)
/* harmony export */ });
var AllRowsSelectedMessage = "All rows got selected";
var AllRowsUnselectedMessage = "All rows got unselected";
var ClickableRowAnnouncement = "Row {0}. Clickable";
var ClickableRowAnnouncementWithSize = "Row {0} of {1}. Clickable";
var ColumnButtonSizerLeft = "Move column sizer left";
var ColumnButtonSizerLeftAriaLabel = "Compress column to the left";
var ColumnButtonSizerRight = "Move column sizer right";
var ColumnButtonSizerRightAriaLabel = "Expand column to the right";
var ColumnSizerLabel = "{0} column sizer";
var ColumnSortedAscendingAnnouncement = "Column sorted ascending";
var ColumnSortedDescendingAnnouncement = "Column sorted descending";
var DropdownSelection = "Dropdown Selection";
var EmptyColumnHeaderLabel = "Blank";
var ListItem = "listitem";
var MoreActions = "More actions";
var MoreTooltip = "More options";
var NoMoreActions = "No actions";
var RemovePillLabel = "Remove {0}";
var RowAnnouncement = "Row {0}";
var RowAnnouncementWithSize = "Row {0} of {1}";
var SelectAllRowsLabel = "Select all rows";
var SelectionColumnLabel = "Selection column";
var SelectRowLabel = "Select row";
var ShowLess = "Show less";
var ShowMore = "Show more";
var SizerAnnouncement = "Drag sizer to resize column. Click to control sizing using buttons.";
var Started = "Started {0}";
var VirtualizationDisabled = "Virtualization disabled";
var VirtualizedListLabelFormat = "{0}. Use ctrl + alt + v to disable list virtualization";


/***/ }),

/***/ "./node_modules/azure-devops-ui/ResponsiveLayout.js":
/*!**********************************************************!*\
  !*** ./node_modules/azure-devops-ui/ResponsiveLayout.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ResponsiveLayout: () => (/* reexport safe */ _Components_ResponsiveLayout_ResponsiveLayout__WEBPACK_IMPORTED_MODULE_0__.ResponsiveLayout),
/* harmony export */   ResponsiveOrientation: () => (/* reexport safe */ _Components_ResponsiveLayout_ResponsiveLayout_Props__WEBPACK_IMPORTED_MODULE_1__.ResponsiveOrientation)
/* harmony export */ });
/* harmony import */ var _Components_ResponsiveLayout_ResponsiveLayout__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Components/ResponsiveLayout/ResponsiveLayout */ "./node_modules/azure-devops-ui/Components/ResponsiveLayout/ResponsiveLayout.js");
/* harmony import */ var _Components_ResponsiveLayout_ResponsiveLayout_Props__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Components/ResponsiveLayout/ResponsiveLayout.Props */ "./node_modules/azure-devops-ui/Components/ResponsiveLayout/ResponsiveLayout.Props.js");




/***/ }),

/***/ "./node_modules/azure-devops-ui/Spinner.js":
/*!*************************************************!*\
  !*** ./node_modules/azure-devops-ui/Spinner.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Spinner: () => (/* reexport safe */ _Components_Spinner_Spinner__WEBPACK_IMPORTED_MODULE_0__.Spinner),
/* harmony export */   SpinnerOrientation: () => (/* reexport safe */ _Components_Spinner_Spinner_Props__WEBPACK_IMPORTED_MODULE_1__.SpinnerOrientation),
/* harmony export */   SpinnerSize: () => (/* reexport safe */ _Components_Spinner_Spinner_Props__WEBPACK_IMPORTED_MODULE_1__.SpinnerSize)
/* harmony export */ });
/* harmony import */ var _Components_Spinner_Spinner__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Components/Spinner/Spinner */ "./node_modules/azure-devops-ui/Components/Spinner/Spinner.js");
/* harmony import */ var _Components_Spinner_Spinner_Props__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Components/Spinner/Spinner.Props */ "./node_modules/azure-devops-ui/Components/Spinner/Spinner.Props.js");




/***/ }),

/***/ "./node_modules/azure-devops-ui/Surface.js":
/*!*************************************************!*\
  !*** ./node_modules/azure-devops-ui/Surface.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Spacing: () => (/* reexport safe */ _Components_Surface_Surface_Props__WEBPACK_IMPORTED_MODULE_1__.Spacing),
/* harmony export */   Surface: () => (/* reexport safe */ _Components_Surface_Surface__WEBPACK_IMPORTED_MODULE_0__.Surface),
/* harmony export */   SurfaceBackground: () => (/* reexport safe */ _Components_Surface_Surface_Props__WEBPACK_IMPORTED_MODULE_1__.SurfaceBackground),
/* harmony export */   SurfaceContext: () => (/* reexport safe */ _Components_Surface_Surface__WEBPACK_IMPORTED_MODULE_0__.SurfaceContext)
/* harmony export */ });
/* harmony import */ var _Components_Surface_Surface__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Components/Surface/Surface */ "./node_modules/azure-devops-ui/Components/Surface/Surface.js");
/* harmony import */ var _Components_Surface_Surface_Props__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Components/Surface/Surface.Props */ "./node_modules/azure-devops-ui/Components/Surface/Surface.Props.js");




/***/ }),

/***/ "./node_modules/azure-devops-ui/Tabs.js":
/*!**********************************************!*\
  !*** ./node_modules/azure-devops-ui/Tabs.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Orientation: () => (/* reexport safe */ _Components_Tabs_Tabs_Props__WEBPACK_IMPORTED_MODULE_0__.Orientation),
/* harmony export */   Tab: () => (/* reexport safe */ _Components_Tabs_Tab__WEBPACK_IMPORTED_MODULE_5__.Tab),
/* harmony export */   TabBadge: () => (/* reexport safe */ _Components_Tabs_TabBadge__WEBPACK_IMPORTED_MODULE_1__.TabBadge),
/* harmony export */   TabBar: () => (/* reexport safe */ _Components_Tabs_TabBar__WEBPACK_IMPORTED_MODULE_2__.TabBar),
/* harmony export */   TabContent: () => (/* reexport safe */ _Components_Tabs_TabContent__WEBPACK_IMPORTED_MODULE_6__.TabContent),
/* harmony export */   TabGroupProvider: () => (/* reexport safe */ _Components_Tabs_TabGroupProviderContext__WEBPACK_IMPORTED_MODULE_8__.TabGroupProvider),
/* harmony export */   TabGroupProviderContext: () => (/* reexport safe */ _Components_Tabs_TabGroupProviderContext__WEBPACK_IMPORTED_MODULE_8__.TabGroupProviderContext),
/* harmony export */   TabList: () => (/* reexport safe */ _Components_Tabs_TabList__WEBPACK_IMPORTED_MODULE_3__.TabList),
/* harmony export */   TabProvider: () => (/* reexport safe */ _Components_Tabs_TabProviderContext__WEBPACK_IMPORTED_MODULE_7__.TabProvider),
/* harmony export */   TabProviderContext: () => (/* reexport safe */ _Components_Tabs_TabProviderContext__WEBPACK_IMPORTED_MODULE_7__.TabProviderContext),
/* harmony export */   TabSize: () => (/* reexport safe */ _Components_Tabs_Tabs_Props__WEBPACK_IMPORTED_MODULE_0__.TabSize),
/* harmony export */   Tabs: () => (/* reexport safe */ _Components_Tabs_Tabs__WEBPACK_IMPORTED_MODULE_4__.Tabs)
/* harmony export */ });
/* harmony import */ var _Components_Tabs_Tabs_Props__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Components/Tabs/Tabs.Props */ "./node_modules/azure-devops-ui/Components/Tabs/Tabs.Props.js");
/* harmony import */ var _Components_Tabs_TabBadge__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Components/Tabs/TabBadge */ "./node_modules/azure-devops-ui/Components/Tabs/TabBadge.js");
/* harmony import */ var _Components_Tabs_TabBar__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Components/Tabs/TabBar */ "./node_modules/azure-devops-ui/Components/Tabs/TabBar.js");
/* harmony import */ var _Components_Tabs_TabList__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Components/Tabs/TabList */ "./node_modules/azure-devops-ui/Components/Tabs/TabList.js");
/* harmony import */ var _Components_Tabs_Tabs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Components/Tabs/Tabs */ "./node_modules/azure-devops-ui/Components/Tabs/Tabs.js");
/* harmony import */ var _Components_Tabs_Tab__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Components/Tabs/Tab */ "./node_modules/azure-devops-ui/Components/Tabs/Tab.js");
/* harmony import */ var _Components_Tabs_TabContent__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Components/Tabs/TabContent */ "./node_modules/azure-devops-ui/Components/Tabs/TabContent.js");
/* harmony import */ var _Components_Tabs_TabProviderContext__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./Components/Tabs/TabProviderContext */ "./node_modules/azure-devops-ui/Components/Tabs/TabProviderContext.js");
/* harmony import */ var _Components_Tabs_TabGroupProviderContext__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./Components/Tabs/TabGroupProviderContext */ "./node_modules/azure-devops-ui/Components/Tabs/TabGroupProviderContext.js");











/***/ }),

/***/ "./node_modules/azure-devops-ui/TooltipEx.js":
/*!***************************************************!*\
  !*** ./node_modules/azure-devops-ui/TooltipEx.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Tooltip: () => (/* reexport safe */ _Components_TooltipEx_Tooltip__WEBPACK_IMPORTED_MODULE_0__.Tooltip),
/* harmony export */   TooltipStatus: () => (/* reexport safe */ _Components_TooltipEx_Tooltip__WEBPACK_IMPORTED_MODULE_0__.TooltipStatus)
/* harmony export */ });
/* harmony import */ var _Components_TooltipEx_Tooltip__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Components/TooltipEx/Tooltip */ "./node_modules/azure-devops-ui/Components/TooltipEx/Tooltip.js");
/* harmony import */ var _Components_TooltipEx_Tooltip_Props__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Components/TooltipEx/Tooltip.Props */ "./node_modules/azure-devops-ui/Components/TooltipEx/Tooltip.Props.js");




/***/ }),

/***/ "./node_modules/azure-devops-ui/Util.js":
/*!**********************************************!*\
  !*** ./node_modules/azure-devops-ui/Util.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ElementRelationship: () => (/* binding */ ElementRelationship),
/* harmony export */   KeyCode: () => (/* binding */ KeyCode),
/* harmony export */   Mouse: () => (/* binding */ Mouse),
/* harmony export */   Pointer: () => (/* binding */ Pointer),
/* harmony export */   Touch: () => (/* binding */ Touch),
/* harmony export */   arrayEquals: () => (/* binding */ arrayEquals),
/* harmony export */   childCount: () => (/* binding */ childCount),
/* harmony export */   convertSpecialSymbols: () => (/* binding */ convertSpecialSymbols),
/* harmony export */   createMergedRef: () => (/* binding */ createMergedRef),
/* harmony export */   css: () => (/* binding */ css),
/* harmony export */   eventTargetContainsNode: () => (/* binding */ eventTargetContainsNode),
/* harmony export */   getFocusVisible: () => (/* binding */ getFocusVisible),
/* harmony export */   getParents: () => (/* binding */ getParents),
/* harmony export */   getPointByEventType: () => (/* binding */ getPointByEventType),
/* harmony export */   getRelationship: () => (/* binding */ getRelationship),
/* harmony export */   getSafeId: () => (/* binding */ getSafeId),
/* harmony export */   getSafeIdSelector: () => (/* binding */ getSafeIdSelector),
/* harmony export */   getSafeIdWithSymbolConversion: () => (/* binding */ getSafeIdWithSymbolConversion),
/* harmony export */   isArrowKey: () => (/* binding */ isArrowKey),
/* harmony export */   isFunctionalChildren: () => (/* binding */ isFunctionalChildren),
/* harmony export */   isSafari: () => (/* binding */ isSafari),
/* harmony export */   noop: () => (/* binding */ noop),
/* harmony export */   preventDefault: () => (/* binding */ preventDefault),
/* harmony export */   setFocusVisible: () => (/* binding */ setFocusVisible),
/* harmony export */   shimRef: () => (/* binding */ shimRef)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");

/**
 * Set of KeyCodes that are used in the platform.
 */
var KeyCode;
(function (KeyCode) {
    KeyCode[KeyCode["backspace"] = 8] = "backspace";
    KeyCode[KeyCode["tab"] = 9] = "tab";
    KeyCode[KeyCode["enter"] = 13] = "enter";
    KeyCode[KeyCode["shift"] = 16] = "shift";
    KeyCode[KeyCode["ctrl"] = 17] = "ctrl";
    KeyCode[KeyCode["alt"] = 18] = "alt";
    KeyCode[KeyCode["pause"] = 19] = "pause";
    KeyCode[KeyCode["capsLock"] = 20] = "capsLock";
    KeyCode[KeyCode["escape"] = 27] = "escape";
    KeyCode[KeyCode["space"] = 32] = "space";
    KeyCode[KeyCode["pageUp"] = 33] = "pageUp";
    KeyCode[KeyCode["pageDown"] = 34] = "pageDown";
    KeyCode[KeyCode["end"] = 35] = "end";
    KeyCode[KeyCode["home"] = 36] = "home";
    KeyCode[KeyCode["leftArrow"] = 37] = "leftArrow";
    KeyCode[KeyCode["upArrow"] = 38] = "upArrow";
    KeyCode[KeyCode["rightArrow"] = 39] = "rightArrow";
    KeyCode[KeyCode["downArrow"] = 40] = "downArrow";
    KeyCode[KeyCode["delete"] = 46] = "delete";
    KeyCode[KeyCode["b"] = 66] = "b";
    KeyCode[KeyCode["i"] = 73] = "i";
    KeyCode[KeyCode["k"] = 75] = "k";
    KeyCode[KeyCode["q"] = 81] = "q";
    KeyCode[KeyCode["t"] = 84] = "t";
    KeyCode[KeyCode["windowsKey"] = 91] = "windowsKey";
    KeyCode[KeyCode["macCommand"] = 91] = "macCommand";
    KeyCode[KeyCode["F10"] = 121] = "F10";
    KeyCode[KeyCode["numLock"] = 144] = "numLock";
    KeyCode[KeyCode["scrollLock"] = 145] = "scrollLock";
    KeyCode[KeyCode["comma"] = 188] = "comma";
})(KeyCode || (KeyCode = {}));
/**
 * Determines whether or not a keystroke is an arrow key or not.
 */
function isArrowKey(event) {
    return (event.which === KeyCode.downArrow ||
        event.which === KeyCode.upArrow ||
        event.which === KeyCode.leftArrow ||
        event.which === KeyCode.rightArrow);
}
/**
 * Type guard function to determine if children are defined as a function
 * @param children (usually from this.props.children)
 */
function isFunctionalChildren(children) {
    return typeof children === "function";
}
/**
 * childCount is used to determine the number of defined renderable children within
 * a standard set of React.Children. This is different than React.Children.length
 * which includes children that are null or undefined.
 */
function childCount(children) {
    var childCount = 0;
    react__WEBPACK_IMPORTED_MODULE_0__.Children.forEach(children, function (child) {
        if (child) {
            childCount++;
        }
    });
    return childCount;
}
/**
 * getSafeId is designed to create a string from the input id that is safe for use
 * as the id attribute of a component. The ids appear in the global javscript namespace.
 * This means if you create an element and assign the "id" property to a value
 * the element is accessible by doing window.<id>. This causes problems when the
 * id of the element collides with other global objects. Using a SafeId adds a prefix
 * intended to avoid conflicts.
 *
 * This should be called anytime a DOM elements property is being set that refers to
 * the components id. This should not be called when passing the id as a prop to a
 * component. It is the components responsibility to make the Id safe when attaching
 * it to an element.
 *
 * This includes but is not limited to properties like:
 *  aria-controls, aria-describedby, aria-labelledby, id, htmlFor, ...
 *
 * @param id The root id that is being made "Safe".
 */
function getSafeId(id) {
    if (false) // removed by dead control flow
{}
    // querySelector won't select id's with .'s in them replace them with '-'.
    return id ? "__bolt-" + id.replace(/[^0-9A-Za-z_]/g, "-") : undefined;
}
/**
 * getSafeIdSelector will return the string that can use used to denote the selector
 * for elements that use this id.
 *
 * @param id The root id that is being made "Safe".
 */
function getSafeIdSelector(id) {
    return "#" + getSafeId(id);
}
/**
 * function that does nothing and accepts any set of arguments.
 */
function noop() { }
/**
 * Basic function for building a css classlist string from and array of classes, where
 * one of more of the arguments may be null or undefined.
 *
 * @param args Array of strings the represents the css class list.
 *
 * @example css("base", "active", x === 42 && "optional") will return "base active optional" if x === 42 or "base active" otherwise
*/
function css() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    var classes = [];
    for (var _a = 0, args_1 = args; _a < args_1.length; _a++) {
        var arg = args_1[_a];
        if (arg) {
            if (typeof arg === 'string') {
                classes.push(arg);
            }
            else if (arg.hasOwnProperty('toString') && typeof arg.toString === 'function') {
                classes.push(arg.toString());
            }
            else {
                for (var key in arg) {
                    if (arg[key]) {
                        classes.push(key);
                    }
                }
            }
        }
    }
    return classes
        .filter(function (c) { return c; })
        .join(" ")
        .trim();
}
/**
 * Returns the set of parent elements with index 0 the root and the last
 * element is either the direct parent or itself based on includeSelf.
 *
 * @param element The element to get the parent element hierarchy from.
 * @param includeSelf Should the element supplied be included in the parent list.
 * @param rootElement Optional root element to stop processing
 * @param includeRoot Should the root element supplied be included in the parent list.
 */
function getParents(element, includeSelf, rootElement, includeRoot) {
    var parentElements = [];
    if (includeSelf) {
        parentElements.push(element);
    }
    while (element.parentElement && element.parentElement !== rootElement) {
        parentElements.splice(0, 0, element.parentElement);
        element = element.parentElement;
    }
    if (element.parentElement && includeRoot) {
        parentElements.splice(0, 0, element.parentElement);
    }
    return parentElements;
}
/**
 * Determines if the target element of an event (or its ancestry) has a particular node name.
 *
 * @param event The initial element is pulled off of this event.
 * @param nodeNames A list of DOM node names ("A", "INPUT", etc.) to check for the presence
 * @param rootAncestor If provided, build a list of ancestors from the event's element, to this element to check. Otherwise,
 * only check the element from the event.
 */
function eventTargetContainsNode(event, nodeNames, rootAncestor) {
    var targetElement = event.target;
    var ancestors = rootAncestor ? getParents(targetElement, true, rootAncestor, true) : [targetElement];
    return ancestors.some(function (element) { return nodeNames.indexOf(element.nodeName) !== -1; });
}
/**
 * ElementRelationship is used to define how two elements in the same
 * document are related in position to each other.
 */
var ElementRelationship;
(function (ElementRelationship) {
    ElementRelationship[ElementRelationship["Unrelated"] = 0] = "Unrelated";
    ElementRelationship[ElementRelationship["Before"] = 1] = "Before";
    ElementRelationship[ElementRelationship["After"] = 2] = "After";
    ElementRelationship[ElementRelationship["Child"] = 3] = "Child";
    ElementRelationship[ElementRelationship["Parent"] = 4] = "Parent";
})(ElementRelationship || (ElementRelationship = {}));
/**
 * getRelationship returns the relationship of the two specified elements.
 *
 * @param element1
 * @param element2
 */
function getRelationship(element1, element2) {
    // If the second element is a child of the first element, then element1 occurs before element2.
    if (element1.contains(element2)) {
        return ElementRelationship.Parent;
    }
    // If the first element is a child of the second element, then element1 occurs after element2.
    if (element2.contains(element1)) {
        return ElementRelationship.Child;
    }
    // Retrieve the parents of both the elements.
    var parents1 = getParents(element1, true);
    var parents2 = getParents(element2, true);
    for (var elementIndex = 0;; elementIndex++) {
        if (parents1[elementIndex] !== parents2[elementIndex]) {
            var siblings = parents1[elementIndex - 1].children;
            for (var siblingIndex = 0; siblingIndex < siblings.length; siblingIndex++) {
                if (siblings[siblingIndex] === parents1[elementIndex]) {
                    return ElementRelationship.Before;
                }
                if (siblings[siblingIndex] === parents2[elementIndex]) {
                    return ElementRelationship.After;
                }
            }
        }
    }
}
/**
 * preventDefault is used as a standard delegate to prevent the default behavior
 * for a given event.
 *
 * @param event Synthetic event that should have its default action prevented.
 */
function preventDefault(event) {
    event.preventDefault();
}
/**
 * shimRef is used to acquire a React Ref from a child component. If the child
 * has an existing ref, it will return the existing ref, if not it will
 * create a new one.
 */
function shimRef(child) {
    // @HACK: This uses an internal property on the created element which is the
    //  forwarded ref property of the element. If React ever changes the implementation
    //  removing this property this code will need to be updated.
    // @NOTE: The ref MUST be a React.createRef if the a ref property is specified,
    //  otherwise we will not be able to share the ref.
    var ref = child.ref;
    // If no ref was created by the element owner we will add one.
    if (!ref) {
        ref = react__WEBPACK_IMPORTED_MODULE_0__.createRef();
    }
    else {
        // @DEBUG: Ensure the ref is a React.createRef by validated the current property
        if (!ref.hasOwnProperty("current")) {
            throw Error("Children of a focus zone MUST use React.createRef to obtain child references");
        }
        // @DEBUG
    }
    return ref;
}
/**
 * Set up a ref resolver function given internal state managed for the ref.
 * Taken from FluentUI v8 and modified to match local style
 * @param local Set
 */
function createResolver(local) {
    return function (newValue) {
        for (var _i = 0, _a = local.refs; _i < _a.length; _i++) {
            var ref = _a[_i];
            if (typeof ref === "function") {
                ref(newValue);
            }
            else if (ref) {
                // work around the immutability of the React.Ref type
                ref.current = newValue;
            }
        }
    };
}
/**
 * Helper to merge refs from within class components.
 * Taken from FluentUI v8 and modified to match local style
 */
function createMergedRef(value) {
    var local = {
        refs: [],
    };
    return function () {
        var newRefs = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            newRefs[_i] = arguments[_i];
        }
        if (!local.resolver || !arrayEquals(local.refs, newRefs)) {
            local.resolver = createResolver(local);
        }
        local.refs = newRefs;
        return local.resolver;
    };
}
var focusVisible = false;
/**
 * Determine whether or not focus is currently visible to the user. This generally
 * means the user is using the keyboard to manage focus instead of the mouse.
 */
function getFocusVisible() {
    return focusVisible;
}
/**
 * Make sure the focus treatment is enabled and disabled based on
 * the state of mouse and keyboard usage.
 */
function setFocusVisible(visible) {
    if ((focusVisible = visible) === true) {
        document.body && document.body.classList.add("bolt-focus-visible");
    }
    else {
        document.body && document.body.classList.remove("bolt-focus-visible");
    }
}
/* Setup the set of non-focus keys, when these are pressed it doesnt start showing focus treatment */
var nonFocusKeys = new Array(255);
nonFocusKeys[KeyCode.alt] = true;
nonFocusKeys[KeyCode.capsLock] = true;
nonFocusKeys[KeyCode.ctrl] = true;
nonFocusKeys[KeyCode.numLock] = true;
nonFocusKeys[KeyCode.pause] = true;
nonFocusKeys[KeyCode.scrollLock] = true;
nonFocusKeys[KeyCode.shift] = true;
nonFocusKeys[KeyCode.windowsKey] = true;
document.addEventListener("keydown", function (event) {
    if (!nonFocusKeys[event.which]) {
        setFocusVisible(true);
    }
}, true);
var mouseCapture;
// MouseCaptureFunction is the global mouse handler we use to trap events and forward
// them to the current capture if one exists.
var mouseCaptureFunction = function (event) {
    // Track the position of the mouse as it moves.
    Mouse.position.x = event.clientX;
    Mouse.position.y = event.clientY;
    // Notify the mouse capture of the mouse movement and mouseup if one is signed up.
    if (mouseCapture && mouseCapture.callback && mouseCapture.button === event.button) {
        mouseCapture.callback(event);
        if (event.type === "mouseup") {
            Mouse.releaseCapture(mouseCapture.callback);
        }
    }
};
var Mouse = {
    position: {
        x: 0,
        y: 0
    },
    releaseCapture: function releaseCapture(callback) {
        if (mouseCapture && mouseCapture.callback === callback) {
            mouseCapture = undefined;
        }
    },
    setCapture: function setCapture(callback, button) {
        if (button === void 0) { button = 0; }
        // Before starting a new capture, we will release the current capture.
        if (mouseCapture) {
            Mouse.releaseCapture(mouseCapture.callback);
        }
        // Update the mouseCapture to the new capture.
        mouseCapture = { button: button, callback: callback };
    }
};
document.addEventListener("mousemove", mouseCaptureFunction);
document.addEventListener("mouseup", mouseCaptureFunction);
document.addEventListener("mousedown", function (event) {
    // Screen readers on scan mode trigger some key strokes as Mouse events.
    // We can easily identify those events because they have no coordinates.
    if (event.button === 0 &&
        event.clientX === 0 &&
        event.clientY === 0 &&
        event.screenX === 0 &&
        event.screenY === 0 &&
        event.pageX === 0 &&
        event.pageY === 0) {
        return;
    }
    setFocusVisible(false);
}, true);
var touchCapture;
// touchCaptureFunction is the global touch handler we use to trap events and forward
// them to the current capture if one exists.
var touchCaptureFunction = function (event) {
    var touch = event.changedTouches && event.changedTouches.length ? event.changedTouches[0] : event.touches[0];
    // Track the position of the touch as it moves.
    Touch.position.x = touch.clientX;
    Touch.position.y = touch.clientY;
    // Notify the touch capture of the touch movement and touchend if one is signed up.
    if (touchCapture && touchCapture.callback) {
        touchCapture.callback(event);
        if (event.type === "touchend") {
            Touch.releaseCapture(touchCapture.callback);
        }
    }
};
/**
 * Currently only basic touch support - assumes a single touch
 * throughout the touch operation.
 */
var Touch = {
    position: {
        x: 0,
        y: 0
    },
    releaseCapture: function releaseCapture(callback) {
        if (touchCapture && touchCapture.callback === callback) {
            touchCapture = undefined;
        }
    },
    setCapture: function setCapture(callback) {
        // Before starting a new capture, we will release the current capture.
        if (touchCapture) {
            Touch.releaseCapture(touchCapture.callback);
        }
        // Update the touchCapture to the new capture.
        touchCapture = { callback: callback };
    }
};
document.addEventListener("touchmove", touchCaptureFunction);
document.addEventListener("touchend", touchCaptureFunction);
document.addEventListener("touchstart", function () { return setFocusVisible(false); }, true);
var pointerCaptures = [];
// PointerCaptureFunction is the global pointer handler we use to trap events and forward
// them to the current capture if one exists.
var pointerCaptureFunction = function (event) {
    // Track the position of the pointer as it moves.
    Pointer.position.x = event.clientX;
    Pointer.position.y = event.clientY;
    // Notify the pointer capture of the pointer movement and pointerup if one is signed up.
    for (var i = pointerCaptures.length - 1; i >= 0; i--) {
        var pointerCapture = pointerCaptures[i];
        if (pointerCapture && pointerCapture.callback) {
            pointerCapture.callback(event);
            if (event.type === "pointerup") {
                Pointer.releaseCapture(pointerCapture.callback);
            }
        }
    }
};
var Pointer = {
    position: {
        x: 0,
        y: 0
    },
    releaseCapture: function releaseCapture(callback) {
        var pointerCaptureIndex = pointerCaptures.findIndex(function (pointerCapture) { return pointerCapture.callback === callback; });
        if (pointerCaptureIndex > -1) {
            pointerCaptures.splice(pointerCaptureIndex, 1);
        }
    },
    setCapture: function setCapture(callback) {
        // Update the pointerCapture to the new capture.
        pointerCaptures.push({ callback: callback });
    }
};
document.addEventListener("pointermove", pointerCaptureFunction);
document.addEventListener("pointerup", pointerCaptureFunction);
document.addEventListener("pointerdown", function (event) {
    // Screen readers on scan mode trigger some key strokes as Pointer events.
    // We can easily identify those events because they have no coordinates.
    if (event.button === 0 &&
        event.clientX === 0 &&
        event.clientY === 0 &&
        event.screenX === 0 &&
        event.screenY === 0 &&
        event.pageX === 0 &&
        event.pageY === 0) {
        return;
    }
    setFocusVisible(false);
}, true);
/**
 * Returns the coordinates of a native event. For mouse / touch events, uses the
 * Mouse/Touch helpers. For a keyboard event, will return undefined.
 * @param event
 */
function getPointByEventType(event) {
    if (event.clientX !== undefined) {
        return { x: Pointer.position.x, y: Pointer.position.y };
    }
    else if (event.changedTouches || event.touches) {
        // If the event has a changedTouches or touches property, it is a touch event.
        return { x: Touch.position.x, y: Touch.position.y };
    }
    else if (event.clientX !== undefined) {
        // If the event has a clientX, it is not a keyboard event, so treat it as a mouse event.
        return { x: Mouse.position.x, y: Mouse.position.y };
    }
    return undefined;
}
/**
 * Checks two arrays to see they contain equal elements in the same order.
 *
 * @param array1 First array to check.
 * @param array2 Second array to check.
 * @param comparer Optional comparer to check whether array items are equal. If not specified, items are compared using strict equals.
 * @returns {boolean}
 */
function arrayEquals(array1, array2, comparer) {
    if (comparer === void 0) { comparer = function (item1, item2) { return item1 === item2; }; }
    if (!array1 && !array2) {
        return true;
    }
    if (!array1 || !array2) {
        return false;
    }
    if (array1.length !== array2.length) {
        return false;
    }
    for (var i = 0; i < array1.length; i++) {
        if (!comparer(array1[i], array2[i])) {
            return false;
        }
    }
    return true;
}
function isSafari() {
    var safari = /Safari\/([\d.]+)/i.exec(window.navigator.userAgent);
    return !!safari && navigator.userAgent.toLowerCase().includes("chrome");
}
function convertSpecialSymbols(value) {
    return value === null || value === void 0 ? void 0 : value.replace(/=/g, "eq").replace(/>/g, "gt").replace(/</g, "lt");
}
/**
 * Returns a safe id with converted "=", ">", and "<" symbols.
 *
 * @param id The root id that is being made "Safe".
 */
function getSafeIdWithSymbolConversion(id) {
    return getSafeId(convertSpecialSymbols(id));
}


/***/ }),

/***/ "./node_modules/azure-devops-ui/Utilities/Color.js":
/*!*********************************************************!*\
  !*** ./node_modules/azure-devops-ui/Utilities/Color.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   darken: () => (/* binding */ darken),
/* harmony export */   generateRandomColor: () => (/* binding */ generateRandomColor),
/* harmony export */   generateRandomColorHex: () => (/* binding */ generateRandomColorHex),
/* harmony export */   getColorString: () => (/* binding */ getColorString),
/* harmony export */   hexToRgb: () => (/* binding */ hexToRgb),
/* harmony export */   isDark: () => (/* binding */ isDark),
/* harmony export */   parseColor: () => (/* binding */ parseColor),
/* harmony export */   rgbToHex: () => (/* binding */ rgbToHex),
/* harmony export */   testForHexString: () => (/* binding */ testForHexString)
/* harmony export */ });
function darken(color, darkenFactor) {
    var darkenMultiplier = 1 - darkenFactor;
    return {
        red: color.red * darkenMultiplier,
        green: color.green * darkenMultiplier,
        blue: color.blue * darkenMultiplier
    };
}
function getColorString(color) {
    return "rgb(".concat(color.red, ", ").concat(color.green, ", ").concat(color.blue, ")");
}
function isDark(color) {
    var luminance = color.red * 0.299 + color.green * 0.587 + color.blue * 0.114;
    return luminance <= 128;
}
function rgbToHex(color) {
    return "#".concat(rgbValueToString(color.red)).concat(rgbValueToString(color.green)).concat(rgbValueToString(color.blue)).toUpperCase();
}
/**
 * Convert a hex color to numeric r g b value
 * @param color Color in format #aabbcc
 */
function hexToRgb(color) {
    if (color.length !== 7 || color[0] !== "#") {
        throw new Error("Expected color in format #AABBCC");
    }
    return {
        red: parseInt(color.substr(1, 2), 16),
        green: parseInt(color.substr(3, 2), 16),
        blue: parseInt(color.substr(5, 2), 16)
    };
}
function generateRandomColor() {
    var blue = Math.floor(Math.random() * 256);
    var green = Math.floor(Math.random() * 256);
    var red = Math.floor(Math.random() * 256);
    return { red: red, blue: blue, green: green };
}
function generateRandomColorHex() {
    return rgbToHex(generateRandomColor());
}
function parseColor(hexString) {
    if (!hexString) {
        return undefined;
    }
    var color = undefined;
    if (hexString.length === 7) {
        try {
            color = hexToRgb(hexString);
        }
        catch (ex) {
            console.log(ex);
            // swallow the exception
        }
    }
    return color;
}
var hexRegex = new RegExp("^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$");
function testForHexString(hexString) {
    return hexString.match(hexRegex);
}
function rgbValueToString(colorCoord) {
    var hexColor = colorCoord.toString(16);
    if (hexColor.length === 1) {
        hexColor = "0" + hexColor;
    }
    return hexColor;
}


/***/ }),

/***/ "./node_modules/azure-devops-ui/Utilities/Dispatch.js":
/*!************************************************************!*\
  !*** ./node_modules/azure-devops-ui/Utilities/Dispatch.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   EventDispatch: () => (/* binding */ EventDispatch)
/* harmony export */ });
var EventDispatch = /** @class */ (function () {
    function EventDispatch() {
        this.listeners = {};
    }
    EventDispatch.prototype.addEventListener = function (eventType, callback) {
        if (!(eventType in this.listeners)) {
            this.listeners[eventType] = [];
        }
        this.listeners[eventType].push(callback);
    };
    EventDispatch.prototype.dispatchEvent = function (event, data, type) {
        var delegates = this.listeners[type || event.type];
        if (delegates) {
            var stack = delegates.slice();
            for (var i = 0, l = stack.length; i < l; i++) {
                stack[i].call(this, event, data);
            }
        }
    };
    EventDispatch.prototype.removeEventListener = function (eventType, callback) {
        if (!(eventType in this.listeners)) {
            return;
        }
        var stack = this.listeners[eventType];
        for (var i = 0, l = stack.length; i < l; i++) {
            if (stack[i] === callback) {
                stack.splice(i, 1);
                return;
            }
        }
    };
    return EventDispatch;
}());



/***/ }),

/***/ "./node_modules/azure-devops-ui/Utilities/Dom.js":
/*!*******************************************************!*\
  !*** ./node_modules/azure-devops-ui/Utilities/Dom.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   elementContains: () => (/* binding */ elementContains),
/* harmony export */   findScrollableParent: () => (/* binding */ findScrollableParent),
/* harmony export */   getWindow: () => (/* binding */ getWindow)
/* harmony export */ });
function elementContains(parent, child) {
    var currentElement = child;
    while (currentElement) {
        if (currentElement === parent) {
            return true;
        }
        currentElement = currentElement.parentElement;
    }
    return false;
}
/**
 * Gets the window or iframe container of the target element
 * @param element
 */
function getWindow(element) {
    if (typeof window === "undefined") {
        return undefined;
    }
    else {
        return element && element.ownerDocument && element.ownerDocument.defaultView ? element.ownerDocument.defaultView : window;
    }
}
/**
 * Finds the nearest parent element of the target that is scrollable on the Y axis
 * @param element
 */
function findScrollableParent(element) {
    var currentElement = element;
    while (currentElement && currentElement !== document.body) {
        var styles = getComputedStyle(currentElement);
        var overflowY = styles ? styles.getPropertyValue("overflow-y") : "";
        if (overflowY && (overflowY === "scroll" || overflowY === "auto")) {
            return currentElement;
        }
        currentElement = currentElement.parentElement;
    }
    return document.body;
}


/***/ }),

/***/ "./node_modules/azure-devops-ui/Utilities/DragDrop.js":
/*!************************************************************!*\
  !*** ./node_modules/azure-devops-ui/Utilities/DragDrop.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DragDropEffect: () => (/* binding */ DragDropEffect),
/* harmony export */   DragImage: () => (/* binding */ DragImage),
/* harmony export */   beginDragOperation: () => (/* binding */ beginDragOperation),
/* harmony export */   dispatchCustomDragEvent: () => (/* binding */ dispatchCustomDragEvent),
/* harmony export */   getDragInProgress: () => (/* binding */ getDragInProgress)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _Core_Observable__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Core/Observable */ "./node_modules/azure-devops-ui/Core/Observable.js");
/* harmony import */ var _Observer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Observer */ "./node_modules/azure-devops-ui/Observer.js");
/* harmony import */ var _Portal__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../Portal */ "./node_modules/azure-devops-ui/Portal.js");
/* harmony import */ var _Util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../Util */ "./node_modules/azure-devops-ui/Util.js");
/* harmony import */ var _Position__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Position */ "./node_modules/azure-devops-ui/Utilities/Position.js");






/**
 * Represents the end result of a drag / drop operation.
 */
var DragDropEffect;
(function (DragDropEffect) {
    /**
     * If the drop where to happen at this point, it would be a no-op.
     */
    DragDropEffect["none"] = "none";
    /**
     * The data should be moved from the drag source to the drop target.
     */
    DragDropEffect["move"] = "move";
    /**
     * The data should be copied from the drag source to the drop target.
     */
    DragDropEffect["copy"] = "copy";
})(DragDropEffect || (DragDropEffect = {}));
var DragDropManager = /** @class */ (function () {
    function DragDropManager() {
        var _this = this;
        this.onEventCaptured = function (event) {
            // Handle the pointerup and pointermove events
            var type = event.type;
            if (type === "pointermove") {
                // For pointermove events, if there is no drag in progress, we need to check to see if the pointer
                // has moved far enough to meet our threshold for triggering a drag/drop operation.
                if (!_this.dragInProgress) {
                    if (_this.potentialDragInProgress) {
                        var coordinates = (0,_Util__WEBPACK_IMPORTED_MODULE_4__.getPointByEventType)(event);
                        if ((0,_Position__WEBPACK_IMPORTED_MODULE_5__.distance)(_this.initialCoordinates, coordinates) > _this.minimumPixelsForDrag) {
                            // The position of the pointer is far enough away from our threshold to trigger a drag event.
                            // Fire the dragstart event to give the drag source an opportunity to cancel the operation
                            dispatchCustomDragEvent("dragstart", _this.dragSourceElement, event, _this.dataTransfer);
                            if (_this.dataTransfer.effectAllowed === DragDropEffect.none) {
                                _this.potentialDragInProgress = false;
                                _this.endDrag();
                            }
                            else {
                                _this.dragInProgress = true;
                            }
                            event.preventDefault();
                        }
                    }
                    // If there isn't the potential for a drag, that means a consumer has already
                    // indicated that we should cancel this drag event, so there is no need to continue to
                    // check anything about this event.
                }
                else {
                    // If there is a drag in progress, treat this as a dragover event.
                    var target = _this.getTargetFromEvent(event);
                    if (target) {
                        var coordinates = (0,_Util__WEBPACK_IMPORTED_MODULE_4__.getPointByEventType)(event);
                        _this.operation.x.value = coordinates.x;
                        _this.operation.y.value = coordinates.y;
                        dispatchCustomDragEvent("dragover", target, event, _this.dataTransfer);
                        event.preventDefault();
                    }
                }
            }
            else if (type === "pointerup") {
                if (_this.dragInProgress) {
                    var target = _this.getTargetFromEvent(event);
                    // Always fire the dragend event when we get a pointerup, if there was a drag in progress.
                    dispatchCustomDragEvent("dragend", _this.dragSourceElement, event, _this.dataTransfer);
                    if (target && _this.dataTransfer.dropEffect !== DragDropEffect.none) {
                        // Only fire a drop event if the dropEffect allows it.
                        dispatchCustomDragEvent("drop", target, event, _this.dataTransfer);
                    }
                }
                _this.endDrag();
            }
        };
        this.onPointerLeave = function (event) {
            // The pointer has left the bounds of the body element, so a drop is not
            // viable at this point.
            _this.dataTransfer.dropEffect = DragDropEffect.none;
        };
        this.onPointerOut = function (event) {
            if (event.target) {
                // The pointer has left an element, so we need to set the dropEffect to none.
                // The dragover event will fire, giving a new drop target the chance to
                // reset the effect.
                _this.dataTransfer.dropEffect = DragDropEffect.none;
                dispatchCustomDragEvent("dragexit", event.target, event, _this.dataTransfer);
            }
        };
        this.onPointerOver = function (event) {
            if (event.target) {
                // The pointer has entered an element, so we need to set the dropEffect to none.
                // The dragover event will fire, giving a new drop target the chance to
                // reset the effect.
                _this.dataTransfer.dropEffect = DragDropEffect.none;
                dispatchCustomDragEvent("dragenter", event.target, event, _this.dataTransfer);
            }
        };
    }
    DragDropManager.prototype.beginDragOperation = function (event, dataTransfer, minimumPixelsForDrag) {
        if (minimumPixelsForDrag === void 0) { minimumPixelsForDrag = 4; }
        this.operation = undefined;
        // Something (typically a pointdown on a drag source) has indicated that there is the potential
        // for a drag operation. If there is a drag operation already in progress, do nothing.
        if (!this.dragInProgress) {
            // If there is no drag operation in progress, we should set up the event handlers to detect pointer
            // operations that could lead us to actually start the drag / drop operation.
            if (event.type === "pointerdown") {
                this.startDrag(event, minimumPixelsForDrag, dataTransfer);
                this.initialCoordinates = {
                    x: event.clientX,
                    y: event.clientY
                };
                _Util__WEBPACK_IMPORTED_MODULE_4__.Pointer.setCapture(this.onEventCaptured);
                document.body.addEventListener("pointerout", this.onPointerOut, true);
                document.body.addEventListener("pointerover", this.onPointerOver, true);
                document.body.addEventListener("pointerleave", this.onPointerLeave);
                this.operation = {
                    x: new _Core_Observable__WEBPACK_IMPORTED_MODULE_1__.ObservableValue(undefined),
                    y: new _Core_Observable__WEBPACK_IMPORTED_MODULE_1__.ObservableValue(undefined)
                };
            }
        }
        return this.operation;
    };
    Object.defineProperty(DragDropManager.prototype, "isDragInProgress", {
        get: function () {
            return this.dragInProgress;
        },
        enumerable: false,
        configurable: true
    });
    DragDropManager.prototype.endDrag = function () {
        document.body.removeEventListener("pointerout", this.onPointerOut);
        document.body.removeEventListener("pointerover", this.onPointerOver);
        document.body.removeEventListener("pointerleave", this.onPointerLeave);
        this.dragInProgress = false;
    };
    DragDropManager.prototype.getTargetFromEvent = function (event) {
        return event.target;
    };
    DragDropManager.prototype.startDrag = function (event, minimumPixelsForDrag, dataTransfer) {
        this.potentialDragInProgress = true;
        this.dragSourceElement = event.target;
        this.minimumPixelsForDrag = minimumPixelsForDrag;
        this.dataTransfer = dataTransfer;
    };
    return DragDropManager;
}());
var dragDropManager = new DragDropManager();
function beginDragOperation(event, dataTransfer, minimumPixelsForDrag) {
    return dragDropManager.beginDragOperation(event, dataTransfer, minimumPixelsForDrag);
}
function dispatchCustomDragEvent(eventType, target, event, dataTransfer) {
    var customEvent = new CustomEvent(eventType, {
        bubbles: true,
        detail: { dataTransfer: dataTransfer, nativeEvent: event }
    });
    target.dispatchEvent(customEvent);
    return customEvent;
}
function getDragInProgress() {
    return dragDropManager.isDragInProgress;
}
var DragImage = function (props) {
    var className = props.className, operation = props.operation, _a = props.xOffset, xOffset = _a === void 0 ? 5 : _a, _b = props.yOffset, yOffset = _b === void 0 ? 5 : _b;
    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(_Portal__WEBPACK_IMPORTED_MODULE_3__.Portal, { className: "bolt-drag-image-portal" },
        react__WEBPACK_IMPORTED_MODULE_0__.createElement(_Observer__WEBPACK_IMPORTED_MODULE_2__.Observer, { x: operation.x, y: operation.y }, function (observedProps) {
            return observedProps.x !== undefined && observedProps.y !== undefined ? (react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: (0,_Util__WEBPACK_IMPORTED_MODULE_4__.css)(className, "bolt-drag-image depth-16 absolute flex-row flex-center scroll-hidden justify-center"), style: { left: observedProps.x + xOffset + "px", top: observedProps.y + yOffset + "px" } }, props.children)) : null;
        })));
};


/***/ }),

/***/ "./node_modules/azure-devops-ui/Utilities/DragDropInternal.js":
/*!********************************************************************!*\
  !*** ./node_modules/azure-devops-ui/Utilities/DragDropInternal.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DragImageOptimized: () => (/* binding */ DragImageOptimized),
/* harmony export */   beginDragOperationOptimized: () => (/* binding */ beginDragOperationOptimized)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _Utilities_DragDrop__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Utilities/DragDrop */ "./node_modules/azure-devops-ui/Utilities/DragDrop.js");
/* harmony import */ var _Core_Observable__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Core/Observable */ "./node_modules/azure-devops-ui/Core/Observable.js");
/* harmony import */ var _Portal__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../Portal */ "./node_modules/azure-devops-ui/Portal.js");
/* harmony import */ var _Util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../Util */ "./node_modules/azure-devops-ui/Util.js");
/* harmony import */ var _Position__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Position */ "./node_modules/azure-devops-ui/Utilities/Position.js");






var DragDropManagerOptimized = /** @class */ (function () {
    function DragDropManagerOptimized() {
        var _this = this;
        this.onEventCaptured = function (event) {
            // Handle the pointerup and pointermove events
            var type = event.type;
            if (type === "pointermove") {
                // For pointermove events, if there is no drag in progress, we need to check to see if the pointer
                // has moved far enough to meet our threshold for triggering a drag/drop operation.
                if (!_this.dragInProgress) {
                    if (_this.potentialDragInProgress) {
                        var coordinates = (0,_Util__WEBPACK_IMPORTED_MODULE_4__.getPointByEventType)(event);
                        if ((0,_Position__WEBPACK_IMPORTED_MODULE_5__.distance)(_this.initialCoordinates, coordinates) > _this.minimumPixelsForDrag) {
                            // The position of the pointer is far enough away from our threshold to trigger a drag event.
                            // Fire the dragstart event to give the drag source an opportunity to cancel the operation
                            (0,_Utilities_DragDrop__WEBPACK_IMPORTED_MODULE_1__.dispatchCustomDragEvent)("dragstart", _this.dragSourceElement, event, _this.dataTransfer);
                            if (_this.dataTransfer.effectAllowed === _Utilities_DragDrop__WEBPACK_IMPORTED_MODULE_1__.DragDropEffect.none) {
                                _this.potentialDragInProgress = false;
                                _this.endDrag();
                            }
                            else {
                                _this.dragInProgress = true;
                                if (_this.operation) {
                                    _this.operation.value = { x: coordinates.x, y: coordinates.y };
                                }
                            }
                            event.preventDefault();
                        }
                    }
                    // If there isn't the potential for a drag, that means a consumer has already
                    // indicated that we should cancel this drag event, so there is no need to continue to
                    // check anything about this event.
                }
                else {
                    // If there is a drag in progress, treat this as a dragover event.
                    var target = _this.getTargetFromEvent(event);
                    if (target) {
                        var coordinates = (0,_Util__WEBPACK_IMPORTED_MODULE_4__.getPointByEventType)(event);
                        if (_this.operation) {
                            _this.operation.value = { x: coordinates.x, y: coordinates.y };
                        }
                        (0,_Utilities_DragDrop__WEBPACK_IMPORTED_MODULE_1__.dispatchCustomDragEvent)("dragover", target, event, _this.dataTransfer);
                        event.preventDefault();
                    }
                }
            }
            else if (type === "pointerup") {
                if (_this.dragInProgress) {
                    var target = _this.getTargetFromEvent(event);
                    // Always fire the dragend event when we get a pointerup, if there was a drag in progress.
                    (0,_Utilities_DragDrop__WEBPACK_IMPORTED_MODULE_1__.dispatchCustomDragEvent)("dragend", _this.dragSourceElement, event, _this.dataTransfer);
                    if (target && _this.dataTransfer.dropEffect !== _Utilities_DragDrop__WEBPACK_IMPORTED_MODULE_1__.DragDropEffect.none) {
                        // Only fire a drop event if the dropEffect allows it.
                        (0,_Utilities_DragDrop__WEBPACK_IMPORTED_MODULE_1__.dispatchCustomDragEvent)("drop", target, event, _this.dataTransfer);
                    }
                }
                _this.endDrag();
            }
        };
        this.onPointerLeave = function (event) {
            // The pointer has left the bounds of the body element, so a drop is not
            // viable at this point.
            _this.dataTransfer.dropEffect = _Utilities_DragDrop__WEBPACK_IMPORTED_MODULE_1__.DragDropEffect.none;
        };
        this.onPointerOut = function (event) {
            if (event.target) {
                // The pointer has left an element, so we need to set the dropEffect to none.
                // The dragover event will fire, giving a new drop target the chance to
                // reset the effect.
                _this.dataTransfer.dropEffect = _Utilities_DragDrop__WEBPACK_IMPORTED_MODULE_1__.DragDropEffect.none;
                (0,_Utilities_DragDrop__WEBPACK_IMPORTED_MODULE_1__.dispatchCustomDragEvent)("dragexit", event.target, event, _this.dataTransfer);
            }
        };
        this.onPointerOver = function (event) {
            if (event.target) {
                // The pointer has entered an element, so we need to set the dropEffect to none.
                // The dragover event will fire, giving a new drop target the chance to
                // reset the effect.
                _this.dataTransfer.dropEffect = _Utilities_DragDrop__WEBPACK_IMPORTED_MODULE_1__.DragDropEffect.none;
                (0,_Utilities_DragDrop__WEBPACK_IMPORTED_MODULE_1__.dispatchCustomDragEvent)("dragenter", event.target, event, _this.dataTransfer);
            }
        };
    }
    DragDropManagerOptimized.prototype.beginDragOperationOptimized = function (event, dataTransfer, minimumPixelsForDrag) {
        if (minimumPixelsForDrag === void 0) { minimumPixelsForDrag = 4; }
        this.operation = undefined;
        // Something (typically a pointdown on a drag source) has indicated that there is the potential
        // for a drag operation. If there is a drag operation already in progress, do nothing.
        if (!this.dragInProgress) {
            // If there is no drag operation in progress, we should set up the event handlers to detect pointer
            // operations that could lead us to actually start the drag / drop operation.
            if (event.type === "pointerdown") {
                this.startDrag(event, minimumPixelsForDrag, dataTransfer);
                this.initialCoordinates = {
                    x: event.clientX,
                    y: event.clientY
                };
                _Util__WEBPACK_IMPORTED_MODULE_4__.Pointer.setCapture(this.onEventCaptured);
                document.body.addEventListener("pointerout", this.onPointerOut, true);
                document.body.addEventListener("pointerover", this.onPointerOver, true);
                document.body.addEventListener("pointerleave", this.onPointerLeave);
                this.operation = new _Core_Observable__WEBPACK_IMPORTED_MODULE_2__.ObservableValue({ x: undefined, y: undefined });
            }
        }
        return this.operation;
    };
    Object.defineProperty(DragDropManagerOptimized.prototype, "isDragInProgress", {
        get: function () {
            return this.dragInProgress;
        },
        enumerable: false,
        configurable: true
    });
    DragDropManagerOptimized.prototype.endDrag = function () {
        document.body.removeEventListener("pointerout", this.onPointerOut);
        document.body.removeEventListener("pointerover", this.onPointerOver);
        document.body.removeEventListener("pointerleave", this.onPointerLeave);
        this.dragInProgress = false;
    };
    DragDropManagerOptimized.prototype.getTargetFromEvent = function (event) {
        return event.target;
    };
    DragDropManagerOptimized.prototype.startDrag = function (event, minimumPixelsForDrag, dataTransfer) {
        this.potentialDragInProgress = true;
        this.dragSourceElement = event.target;
        this.minimumPixelsForDrag = minimumPixelsForDrag;
        this.dataTransfer = dataTransfer;
    };
    return DragDropManagerOptimized;
}());
var dragDropManagerOptimized = new DragDropManagerOptimized();
function beginDragOperationOptimized(event, dataTransfer, minimumPixelsForDrag) {
    return dragDropManagerOptimized.beginDragOperationOptimized(event, dataTransfer, minimumPixelsForDrag);
}
var DragImageOptimized = react__WEBPACK_IMPORTED_MODULE_0__.memo(function (props) {
    var className = props.className, operation = props.operation, _a = props.xOffset, xOffset = _a === void 0 ? 5 : _a, _b = props.yOffset, yOffset = _b === void 0 ? 5 : _b;
    var dragImageRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);
    var dragImageFrameId = react__WEBPACK_IMPORTED_MODULE_0__.useRef(0);
    var updatePosition = function () {
        cancelAnimationFrame(dragImageFrameId.current);
        dragImageFrameId.current = requestAnimationFrame(function () {
            var _a;
            if (!((_a = dragImageRef.current) === null || _a === void 0 ? void 0 : _a.style) || !operation.value || !operation.value.x || !operation.value.y) {
                // either the drag image is not mounted or no DnD coordinates are available => can't update position
                return;
            }
            var xOffsetPx = operation.value.x + xOffset;
            var yOffsetPx = operation.value.y + yOffset;
            dragImageRef.current.style.transform = "translate3d(".concat(xOffsetPx, "px, ").concat(yOffsetPx, "px, 0)");
        });
    };
    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(function () {
        operation.subscribe(updatePosition);
        return function () {
            operation.unsubscribe(updatePosition);
        };
    }, []);
    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null,
        react__WEBPACK_IMPORTED_MODULE_0__.createElement(_Portal__WEBPACK_IMPORTED_MODULE_3__.Portal, { className: "bolt-drag-image-portal" },
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: (0,_Util__WEBPACK_IMPORTED_MODULE_4__.css)(className, "bolt-drag-image depth-16 absolute flex-row flex-center scroll-hidden justify-center"), ref: dragImageRef }, props.children))));
});


/***/ }),

/***/ "./node_modules/azure-devops-ui/Utilities/Filter.js":
/*!**********************************************************!*\
  !*** ./node_modules/azure-devops-ui/Utilities/Filter.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   FILTER_APPLIED_EVENT: () => (/* binding */ FILTER_APPLIED_EVENT),
/* harmony export */   FILTER_CHANGE_EVENT: () => (/* binding */ FILTER_CHANGE_EVENT),
/* harmony export */   FILTER_RESET_EVENT: () => (/* binding */ FILTER_RESET_EVENT),
/* harmony export */   Filter: () => (/* binding */ Filter),
/* harmony export */   FilterContext: () => (/* binding */ FilterContext),
/* harmony export */   FilterOperatorType: () => (/* binding */ FilterOperatorType)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _Core_Observable__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Core/Observable */ "./node_modules/azure-devops-ui/Core/Observable.js");



var FilterOperatorType;
(function (FilterOperatorType) {
    /**
     * The filter's value should be treated as having the AND operator
     * e.g. If the value is ['a', 'c', 'd'] any item which does not contain
     * 'a' AND 'c' AND 'd' should not be included
     */
    FilterOperatorType["and"] = "and";
    /**
     * The filter's value should be treated as having the OR operator
     * e.g. If the value is ['a', 'c', 'd'] any item which contains
     * 'a' OR 'c' OR 'd' should be included
     */
    FilterOperatorType["or"] = "or";
})(FilterOperatorType || (FilterOperatorType = {}));
var FILTER_CHANGE_EVENT = "filter-changed";
var FILTER_APPLIED_EVENT = "filter-applied";
var FILTER_RESET_EVENT = "reset-filters";
/**
 * Store for a set of filter values
 *
 * Events:
 *
 *  FILTER_CHANGE_EVENT: IFilterState
 *  Fired whenever a filter value changes. The event object contains the changed items.
 *  When using explicit apply-mode, this event is fired when the filter is changed (i.e. by user action)
 *  but not yet applied.
 *
 *  FILTER_APPLIED_EVENT: IFilterState
 *  Fired when new filter changes have been applied. The event object contains the changed items.
 *  When not using explicit apply-mode, this event is fired on every state change
 */
var Filter = /** @class */ (function () {
    /**
     * Create a new Filter store
     * @param options Options for the filter store
     */
    function Filter(options, observable) {
        if (options === void 0) { options = {}; }
        this.observable = observable || new _Core_Observable__WEBPACK_IMPORTED_MODULE_2__.Observable();
        this.applyMode = !!options.useApplyMode;
        this.defaultState = (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, options.defaultState);
        this.currentState = (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, this.defaultState);
        this.customValueComparers = (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, options.customValueComparers);
        if (this.applyMode) {
            this.appliedState = (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, this.currentState);
        }
        else {
            this.appliedState = this.currentState;
        }
    }
    Filter.prototype.subscribe = function (observer, action) {
        return this.observable.subscribe(observer, action);
    };
    Filter.prototype.unsubscribe = function (observer, action) {
        this.observable.unsubscribe(observer, action);
    };
    /**
     * Gets a dictionary containing the current values of all filter items
     */
    Filter.prototype.getState = function () {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, this.currentState);
    };
    /**
     * Gets a dictionary containing the applied values of all filter items.
     * When useApplyMode is false, this always matches the value returned by getState.
     */
    Filter.prototype.getAppliedState = function () {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, this.appliedState);
    };
    /**
     * Gets a dictionary containing the default values of all filter items
     */
    Filter.prototype.getDefaultState = function () {
        return this.defaultState;
    };
    /**
     * Update what the filter considers as its default state
     * @param defaultState The new default state
     */
    Filter.prototype.setDefaultState = function (defaultState) {
        this.defaultState = defaultState;
    };
    /**
     * Sets the current values of all filter items
     * @param state Dictionary of all current filter item values
     * @param supressChangeEvent If true, don't invoke the onFilterChanged callback at this time
     */
    Filter.prototype.setState = function (state, supressChangeEvent) {
        if (supressChangeEvent === void 0) { supressChangeEvent = false; }
        var prevState = this.currentState;
        this.currentState = (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, state);
        if (!this.applyMode) {
            this.appliedState = this.currentState;
        }
        if (!supressChangeEvent) {
            var changedState = (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, state);
            for (var key in prevState) {
                // Add current filters that are cleared by the new state
                // (i.e. these changed from "something" to "nothing")
                if (!state.hasOwnProperty(key)) {
                    changedState[key] = null;
                }
            }
            this._triggerStateChange(changedState);
        }
    };
    /**
     * Gets the value of the specified filter item
     * @param key Filter item key
     */
    Filter.prototype.getFilterItemState = function (key) {
        return this.currentState[key];
    };
    /**
     * Gets the applied value of the specified filter item. When applyMode is false,
     * this is equivalent to getFilterItemState.
     * @param key Filter item key
     */
    Filter.prototype.getAppliedFilterItemState = function (key) {
        return this.appliedState[key];
    };
    /**
     * Gets the value property for the filter item with the given key.
     * @param key The filter item's key
     */
    Filter.prototype.getFilterItemValue = function (key) {
        var item = this.currentState[key];
        if (item) {
            return item.value;
        }
        else {
            return undefined;
        }
    };
    /**
     * Sets the value of the specified filter item
     * @param key Filter item key
     * @param value Filter value
     */
    Filter.prototype.setFilterItemState = function (key, value) {
        this.currentState[key] = value;
        var changeEvent = {};
        changeEvent[key] = value;
        this._triggerStateChange(changeEvent);
    };
    /**
     * Resets the filter values to their default state
     * @param suppressChangeEvent If true, don't invoke the onFilterChanged callback at this time
     */
    Filter.prototype.reset = function (suppressChangeEvent) {
        if (suppressChangeEvent === void 0) { suppressChangeEvent = false; }
        this.setState(this.defaultState, suppressChangeEvent);
        if (!suppressChangeEvent) {
            this._raiseEventAndCallListeners(FILTER_RESET_EVENT, {});
        }
    };
    Filter.prototype.resetFilterItemState = function (key) {
        var value = this.defaultState[key];
        this.setFilterItemState(key, value);
    };
    Filter.prototype.applyChanges = function () {
        this.appliedState = (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, this.currentState);
        this._raiseEventAndCallListeners(FILTER_APPLIED_EVENT, this.appliedState);
    };
    Filter.prototype.usesApplyMode = function () {
        return this.applyMode;
    };
    Filter.prototype.hasChangesToApply = function () {
        return !this.statesAreEqual(this.appliedState, this.currentState);
    };
    Filter.prototype.hasChangesToReset = function () {
        return !this.statesAreEqual(this.defaultState, this.currentState);
    };
    Filter.prototype.statesAreEqual = function (state1, state2) {
        return this._checkStateEquality(state1, state2) && this._checkStateEquality(state2, state1);
    };
    Filter.prototype.filterItemStatesAreEqual = function (item, state1, state2) {
        return this._checkFilterItemStateEquality(item, state1, state2);
    };
    Filter.prototype._triggerStateChange = function (changedState) {
        this._raiseEventAndCallListeners(FILTER_CHANGE_EVENT, changedState);
        if (!this.applyMode) {
            this._raiseEventAndCallListeners(FILTER_APPLIED_EVENT, changedState);
        }
    };
    Filter.prototype._raiseEventAndCallListeners = function (eventName, changedState) {
        this.observable.notify(changedState, eventName);
    };
    Filter.prototype._checkStateEquality = function (state1, state2) {
        for (var item in state1) {
            var filterItemStateEqual = this._checkFilterItemStateEquality(item, state1[item], state2[item]);
            if (!filterItemStateEqual) {
                return false;
            }
        }
        return true;
    };
    Filter.prototype._checkFilterItemStateEquality = function (item, item1State, item2State) {
        var item1Value = item1State && item1State.value;
        var item2Value = item2State && item2State.value;
        if (Array.isArray(item1Value)) {
            if (Array.isArray(item2Value)) {
                if (item1Value.length !== item2Value.length) {
                    return false;
                }
                for (var index = 0; index < item1Value.length; index++) {
                    if (!this._checkValueEquality(item, item1Value[index], item2Value[index])) {
                        return false;
                    }
                }
            }
            else {
                if (item1Value.length !== 0 || !!item2Value) {
                    return false;
                }
            }
        }
        else if (!this._checkValueEquality(item, item1Value, item2Value)) {
            return false;
        }
        else if (Array.isArray(item2Value)) {
            if (item2Value.length !== 0) {
                return false;
            }
        }
        return true;
    };
    Filter.prototype._checkValueEquality = function (key, item1, item2) {
        if (this.customValueComparers[key]) {
            return this.customValueComparers[key](item1, item2);
        }
        if (item1 && item1 !== item2) {
            return false;
        }
        else if (!!item1 !== !!item2) {
            return false;
        }
        return true;
    };
    return Filter;
}());

var FilterContext = react__WEBPACK_IMPORTED_MODULE_1__.createContext({
    filter: null,
    filterToggled: null
});


/***/ }),

/***/ "./node_modules/azure-devops-ui/Utilities/Focus.js":
/*!*********************************************************!*\
  !*** ./node_modules/azure-devops-ui/Utilities/Focus.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   focusAsync: () => (/* binding */ focusAsync),
/* harmony export */   getTabIndex: () => (/* binding */ getTabIndex)
/* harmony export */ });
/* harmony import */ var _Util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Util */ "./node_modules/azure-devops-ui/Util.js");
/* harmony import */ var _Dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Dom */ "./node_modules/azure-devops-ui/Utilities/Dom.js");


/**
 * getTabIndex takes in a standard set of focus related properties to determine
 * the correct tabIndex for the element.
 */
function getTabIndex(props, focusGroupContext) {
    // Return an explicit tabIndex if one was requested.
    if (props.tabIndex !== undefined) {
        return props.tabIndex;
    }
    // Make element tabbable if:
    //  The element is not disabled,
    //  The element does not have the excludeTabStop property
    //  Optionally, the component is within a focusGroup and is the focused element
    if (!props.disabled &&
        !props.excludeTabStop &&
        (!focusGroupContext || focusGroupContext.onFocus === _Util__WEBPACK_IMPORTED_MODULE_0__.noop || focusGroupContext.focusedElementId === props.id)) {
        return 0;
    }
    // Allow the element to have focus as long as the excludeFocusZone was not supplied.
    if (!props.excludeFocusZone) {
        return -1;
    }
    // The element is not tabbable and wont have a tabIndex, therefore it can't get focus.
    return undefined;
}
var targetToFocusOnNextRepaint = undefined;
/**
 * Sets focus on the next frame OR after setTimeout(0)
 * If you pass an IFocusable instead of an HTMLElement it'll use setTimeout instead of window.requestAnimationFrame
 */
function focusAsync(element) {
    // If we've called this method this frame, re-set the element to focus but don't hook up another handler
    if (targetToFocusOnNextRepaint) {
        targetToFocusOnNextRepaint = element;
        return;
    }
    // If this is the first time we've called this this frame, set an event handler
    // or schedule it async if we can't get the window element
    targetToFocusOnNextRepaint = element;
    var window = (0,_Dom__WEBPACK_IMPORTED_MODULE_1__.getWindow)(element);
    if (window) {
        window.requestAnimationFrame(function () {
            if (targetToFocusOnNextRepaint) {
                targetToFocusOnNextRepaint.focus();
            }
            targetToFocusOnNextRepaint = undefined;
        });
    }
    else {
        setTimeout(function () {
            if (targetToFocusOnNextRepaint) {
                targetToFocusOnNextRepaint.focus();
            }
        });
    }
}


/***/ }),

/***/ "./node_modules/azure-devops-ui/Utilities/FriendlyNumber.js":
/*!******************************************************************!*\
  !*** ./node_modules/azure-devops-ui/Utilities/FriendlyNumber.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getFriendlyDisplayValue: () => (/* binding */ getFriendlyDisplayValue)
/* harmony export */ });
/* harmony import */ var _Core_Util_String__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Core/Util/String */ "./node_modules/azure-devops-ui/Core/Util/String.js");
/* harmony import */ var _Resources_Core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Resources.Core */ "./node_modules/azure-devops-ui/Resources.Core.js");


/**
 * Gets a friendly display value like "15K+" for a given numerical
 * value like 15217.
 *
 * @param value The numerical value to convert to a friendlier text string
 */
function getFriendlyDisplayValue(value) {
    var displayValue = "";
    var negative = false;
    if (isNaN(value)) {
        return "";
    }
    if (value < 0) {
        negative = true;
        value = -value;
    }
    value = Math.floor(value);
    if (value < 1000) {
        displayValue = value.toString();
    }
    else if (value < 1000000) {
        displayValue = (0,_Core_Util_String__WEBPACK_IMPORTED_MODULE_0__.format)(_Resources_Core__WEBPACK_IMPORTED_MODULE_1__.FriendlyNumberThousandsFormat, Math.floor(value / 1000));
    }
    else if (value < 1000000000) {
        displayValue = (0,_Core_Util_String__WEBPACK_IMPORTED_MODULE_0__.format)(_Resources_Core__WEBPACK_IMPORTED_MODULE_1__.FriendlyNumberMillionsFormat, Math.floor(value / 1000000));
    }
    else {
        displayValue = (0,_Core_Util_String__WEBPACK_IMPORTED_MODULE_0__.format)(_Resources_Core__WEBPACK_IMPORTED_MODULE_1__.FriendlyNumberBillionsFormat, Math.floor(value / 1000000000));
    }
    return (negative && value > 0 ? "-" : "") + displayValue;
}


/***/ }),

/***/ "./node_modules/azure-devops-ui/Utilities/Position.js":
/*!************************************************************!*\
  !*** ./node_modules/azure-devops-ui/Utilities/Position.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Location: () => (/* binding */ Location),
/* harmony export */   distance: () => (/* binding */ distance),
/* harmony export */   position: () => (/* binding */ position),
/* harmony export */   updateLayout: () => (/* binding */ updateLayout)
/* harmony export */ });
var LAYOUT_CALCULATION_MAX_TIMES = 5;
var TOOLTIP_OFFSET = 10;
var Location;
(function (Location) {
    Location["start"] = "start";
    Location["center"] = "center";
    Location["end"] = "end";
})(Location || (Location = {}));
/**
 * Calculates the distance between two points
 * @param pointA First point
 * @param pointB Second point
 */
function distance(pointA, pointB) {
    return Math.sqrt(Math.pow(pointA.x - pointB.x, 2) + Math.pow(pointA.y - pointB.y, 2));
}
/**
 * The position method is used to set the location of an absolutely positioned element
 * using the standard positioning properties. The names of these properties conform to
 * the naming patterns used in the Material Popover https://material-ui.com. They
 * are not exact but follow the same pattern.
 *
 * For an example usage, look at the Callout component and how it uses this method to
 * position the element in the page.
 *
 * @param transformElement The element that is being positioned/transformed.
 * @param transformOrigin The origin within the transformed element to align with the
 *  anchor position.
 * @param anchorOffset Offset on the anchorElement that is applied to the computed location
 *  given the element/origin/point.
 * @param anchorElement The element used to anchor the position of the transformed element.
 *  The caller must supply either an anchorElement and anchorOrigin, or anchorPoint.
 * @param anchorOrigin When an anchorElement is supplied the anchorOrigin defines the location
 *  on the anchorElement used for positioning.
 * @param anchorPoint Instead of an anchorElement the caller can use an explicit point
 *  to be used as the basis for the anchorLocation. The anchorOffset will still be applied.
 * @param extraSpaceSize Sets the value of how much the container is larger than the window in all directions.
 */
function position(transformElement, transformOrigin, anchorOffset, anchorElement, anchorOrigin, anchorPoint, extraSpaceSize) {
    if (extraSpaceSize === void 0) { extraSpaceSize = 5000; }
    // Translate the anchor location information to a point on the anchor element
    // if a specific point was not supplied.
    if (!anchorPoint) {
        if (anchorElement && anchorOrigin) {
            anchorPoint = pointFromOrigin(anchorOrigin, anchorElement.getBoundingClientRect());
        }
        else {
            return;
        }
    }
    var xPosition = anchorPoint.x;
    var yPosition = anchorPoint.y;
    var translateXFactor = 0;
    var translateYFactor = 0;
    // Update the anchorPoint by the anchorOffset if one was supplied.
    if (anchorOffset) {
        xPosition += anchorOffset.horizontal;
        yPosition += anchorOffset.vertical;
    }
    // Special case Start/Start since we dont need the parent rect.
    if (transformOrigin.horizontal !== Location.start || transformOrigin.vertical !== Location.start) {
        var windowHeight = document.documentElement.clientHeight;
        var windowWidth = document.documentElement.clientWidth;
        // Compute the effective horizontal position of the element.
        switch (transformOrigin.horizontal) {
            case Location.end:
                xPosition = windowWidth - xPosition;
                break;
            case Location.center:
                translateXFactor = -50;
                break;
            default:
        }
        // Compute the effective vertical position of the element.
        switch (transformOrigin.vertical) {
            case Location.end:
                yPosition = windowHeight - yPosition;
                break;
            case Location.center:
                translateYFactor = -50;
                break;
            default:
        }
    }
    // Update the transform elements position (it needs to be absolutely positioned in the window).
    // Void out other styles in case this is a re-call
    if (transformOrigin.horizontal !== Location.end) {
        transformElement.style.left = xPosition + extraSpaceSize + "px";
        transformElement.style.right = "";
    }
    else {
        transformElement.style.left = "";
        transformElement.style.right = xPosition + extraSpaceSize + "px";
    }
    if (transformOrigin.vertical !== Location.end) {
        transformElement.style.top = yPosition + extraSpaceSize + "px";
        transformElement.style.bottom = "";
    }
    else {
        transformElement.style.top = "";
        transformElement.style.bottom = yPosition + extraSpaceSize + "px";
    }
    // Apply centering as necessary
    if (translateXFactor !== 0 || translateYFactor !== 0) {
        transformElement.style.transform = "translate(".concat(translateXFactor, "%, ").concat(translateYFactor, "%)");
    }
    else {
        transformElement.style.transform = "";
    }
}
/**
 * updateLayout is used to move an element to the "best" location based on it
 * layout. This will look at all the positioning attributes and move the
 * transformElement to a new location based on its size. This is usually done
 * after an initial call to position. After the element is positioned the
 * caller determines if the transformElement is in the desired location, which
 * generally translates to, is it clipped in the window.
 *
 * This is delayed because when position is called the transformElement is
 * frequently not fully laid out and we need to wait other a force reflow will
 * happen and cause performance issues.
 *
 * @param transformElement The element that is being positioned/transformed.
 * @param transformOrigin The origin within the transformed element to align with the
 *  anchor position.
 * @param anchorOffset Offset on the anchorElement that is applied to the computed location
 *  given the element/origin/point.
 * @param anchorElement The element used to anchor the position of the transformed element.
 *  The caller must supply either an anchorElement and anchorOrigin, or anchorPoint.
 * @param anchorOrigin When an anchorElement is supplie the anchorOrigin defines the location
 *  on the anchorElement used for positioning.
 * @param anchorPoint Instead of an anchorElement the caller can use an explicit point
 *  to be used as the basis for the anchorLocation. The anchorOffset will still be applied.
 * @param extraSpaceSize Sets the value of how much the container is larger than the window in all directions.
 * @param recursionControl Use it to avoid infinite loop and call this function LAYOUT_CALCULATION_MAX_TIMES times at most.
 */
function updateLayout(transformElement, transformOrigin, anchorOffset, anchorElement, anchorOrigin, anchorPoint, extraSpaceSize, recursionControl) {
    if (extraSpaceSize === void 0) { extraSpaceSize = 5000; }
    if (recursionControl === void 0) { recursionControl = 0; }
    var windowHeight = document.documentElement.clientHeight;
    var windowWidth = document.documentElement.clientWidth;
    // Get the current layout for the transformElement to determine the best layout.
    var transformElementRect = transformElement.getBoundingClientRect();
    // Determine which edges of the transform element are clipped by the window.
    var clippedBottom = Math.floor(transformElementRect.bottom) > windowHeight;
    var clippedRight = Math.floor(transformElementRect.right) > windowWidth;
    var clippedLeft = Math.floor(transformElementRect.left) < 0;
    var clippedTop = Math.floor(transformElementRect.top) < 0;
    // If any of the edges are clipped we will update the layout to a better layout if available.
    if (clippedBottom || clippedRight || clippedLeft || clippedTop) {
        // If we are positioned based on a point and and offset we will flip over
        // the clipped edge.
        if (anchorPoint) {
            // Flip vertically top/bottom depending on the clipping edges.
            if (clippedTop !== clippedBottom) {
                if (clippedTop) {
                    // Before we flip lets make sure we have at least TOOLTIP_OFFSET more pixels the other direction.
                    if (transformElementRect.bottom < windowHeight / 2 - TOOLTIP_OFFSET) {
                        if (transformOrigin.vertical === Location.end) {
                            transformOrigin.vertical = Location.start;
                        }
                    }
                }
                else {
                    // Before we flip lets make sure we have at least TOOLTIP_OFFSET more pixels the other direction.
                    if (transformElementRect.top > windowHeight / 2 + TOOLTIP_OFFSET) {
                        if (transformOrigin.vertical === Location.start) {
                            transformOrigin.vertical = Location.end;
                        }
                    }
                }
                if (anchorOffset) {
                    anchorOffset.vertical = -anchorOffset.vertical;
                }
            }
            // Flip hoizontally left/right depending on the clipping edges.
            if (clippedLeft !== clippedRight) {
                if (clippedLeft) {
                    // Before we flip lets make sure we have at least TOOLTIP_OFFSET more pixels the other direction.
                    if (transformElementRect.right < windowWidth / 2 - TOOLTIP_OFFSET) {
                        if (transformOrigin.horizontal === Location.end) {
                            transformOrigin.horizontal = Location.start;
                        }
                    }
                }
                else {
                    // Before we flip lets make sure we have at least TOOLTIP_OFFSET more pixels the other direction.
                    if (transformElementRect.left > windowWidth / 2 + TOOLTIP_OFFSET) {
                        if (transformOrigin.horizontal === Location.start) {
                            transformOrigin.horizontal = Location.end;
                        }
                    }
                }
                if (anchorOffset) {
                    anchorOffset.horizontal = -anchorOffset.horizontal;
                }
            }
        }
        // If the element is positioned based on an anchorElement/anchorOrigin
        // we need to look determine if the element can slide along any axis.
        else if (anchorOrigin && anchorElement) {
            // Flip vertically top/bottom depending on the clipping edges.
            if (clippedTop !== clippedBottom) {
                if (clippedTop) {
                    // Before we flip lets make sure we have at least TOOLTIP_OFFSET more pixels the other direction.
                    if (transformElementRect.bottom < windowHeight / 2 - TOOLTIP_OFFSET) {
                        if (transformOrigin.vertical === Location.end && anchorOrigin.vertical === Location.start) {
                            transformOrigin.vertical = Location.start;
                            anchorOrigin.vertical = Location.end;
                        }
                        else if (transformOrigin.vertical === Location.center ||
                            (transformOrigin.vertical === Location.end && anchorOrigin.vertical === Location.end)) {
                            transformOrigin.vertical = Location.start;
                            anchorOrigin.vertical = Location.start;
                        }
                    }
                }
                else {
                    // Before we flip lets make sure we have at least TOOLTIP_OFFSET more pixels the other direction.
                    if (transformElementRect.top > windowHeight / 2 + TOOLTIP_OFFSET) {
                        if (transformOrigin.vertical === Location.start && anchorOrigin.vertical === Location.end) {
                            transformOrigin.vertical = Location.end;
                            anchorOrigin.vertical = Location.start;
                        }
                        else if (transformOrigin.vertical === Location.center ||
                            (transformOrigin.vertical === Location.start && anchorOrigin.vertical === Location.start)) {
                            transformOrigin.vertical = Location.end;
                            anchorOrigin.vertical = Location.end;
                        }
                    }
                }
                if (anchorOffset) {
                    anchorOffset.vertical = -anchorOffset.vertical;
                }
            }
            if (clippedLeft !== clippedRight) {
                // Flip hoizontally left/right depending on the clipping edges.
                if (clippedLeft) {
                    // Before we flip lets make sure we have at least TOOLTIP_OFFSET more pixels the other direction.
                    if (transformElementRect.right < windowWidth / 2 - TOOLTIP_OFFSET) {
                        if (transformOrigin.horizontal === Location.end && anchorOrigin.horizontal === Location.start) {
                            transformOrigin.horizontal = Location.start;
                            anchorOrigin.horizontal = Location.end;
                        }
                        else if (transformOrigin.horizontal === Location.center ||
                            (transformOrigin.horizontal === Location.end && anchorOrigin.horizontal === Location.end)) {
                            transformOrigin.horizontal = Location.start;
                            anchorOrigin.horizontal = Location.start;
                        }
                    }
                }
                else {
                    // Before we flip lets make sure we have at least TOOLTIP_OFFSET more pixels the other direction.
                    if (transformElementRect.left > windowWidth / 2 + TOOLTIP_OFFSET) {
                        if (transformOrigin.horizontal === Location.start && anchorOrigin.horizontal === Location.end) {
                            transformOrigin.horizontal = Location.end;
                            anchorOrigin.horizontal = Location.start;
                        }
                        else if (transformOrigin.horizontal === Location.center ||
                            (transformOrigin.horizontal === Location.start && anchorOrigin.horizontal === Location.start)) {
                            transformOrigin.horizontal = Location.end;
                            anchorOrigin.horizontal = Location.end;
                        }
                    }
                }
                if (anchorOffset) {
                    anchorOffset.horizontal = -anchorOffset.horizontal;
                }
            }
        }
        // Update the position based on the changes made to the location details.
        position(transformElement, transformOrigin, anchorOffset, anchorElement, anchorOrigin, anchorPoint, extraSpaceSize);
        // If the repositioned element doesnt fit, we will put max-height/max-width to
        // force the entire element into the viewport.
        transformElementRect = transformElement.getBoundingClientRect();
        // Determine which edges of the transform element are clipped by the window.
        clippedBottom = Math.floor(transformElementRect.bottom) > windowHeight;
        clippedRight = Math.floor(transformElementRect.right) > windowWidth;
        clippedLeft = Math.floor(transformElementRect.left) < 0;
        clippedTop = Math.floor(transformElementRect.top) < 0;
        // Since we are clipped compute the updated sizes and position a second time.
        if (clippedTop || clippedBottom || clippedLeft || clippedRight) {
            if (clippedTop || clippedBottom) {
                var maxHeight = transformElementRect.height -
                    (clippedTop ? -transformElementRect.top : 0) -
                    (clippedBottom ? transformElementRect.bottom - windowHeight : 0) -
                    5;
                transformElement.style.maxHeight = maxHeight + "px";
            }
            if (clippedLeft || clippedRight) {
                var maxWidth = transformElementRect.width -
                    (clippedLeft ? -transformElementRect.left : 0) -
                    (clippedRight ? transformElementRect.right - windowWidth : 0) -
                    5;
                transformElement.style.maxWidth = maxWidth + "px";
            }
            // Note the change to the component with the overflow className.
            transformElement.classList.add("overflow");
            position(transformElement, transformOrigin, anchorOffset, anchorElement, anchorOrigin, anchorPoint, extraSpaceSize);
            if (recursionControl < LAYOUT_CALCULATION_MAX_TIMES) {
                // Since we changed width/height of the control, let's check if it's cut-off.
                transformElementRect = transformElement.getBoundingClientRect();
                clippedBottom = Math.floor(transformElementRect.bottom) > windowHeight;
                clippedRight = Math.floor(transformElementRect.right) > windowWidth;
                clippedLeft = Math.floor(transformElementRect.left) < 0;
                clippedTop = Math.floor(transformElementRect.top) < 0;
                // Go through all the logic one more time if tooltip doesn't fit in.
                if (clippedBottom || clippedRight || clippedLeft || clippedTop) {
                    updateLayout(transformElement, transformOrigin, anchorOffset, anchorElement, anchorOrigin, anchorPoint, extraSpaceSize, ++recursionControl);
                }
            }
        }
    }
}
function pointFromOrigin(location, rect) {
    var x;
    var y;
    // Compute the horizontal position based on the rectangle.
    switch (location.horizontal) {
        case Location.start:
            x = rect.left;
            break;
        case Location.end:
            x = rect.right;
            break;
        default:
            x = rect.left + rect.width / 2;
    }
    // Compute the vertical position based on the rectangle.
    switch (location.vertical) {
        case Location.start:
            y = rect.top;
            break;
        case Location.end:
            y = rect.bottom;
            break;
        default:
            y = rect.top + rect.height / 2;
    }
    return { x: x, y: y };
}


/***/ }),

/***/ "./node_modules/azure-devops-ui/Utilities/Provider.js":
/*!************************************************************!*\
  !*** ./node_modules/azure-devops-ui/Utilities/Provider.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ArrayItemProvider: () => (/* binding */ ArrayItemProvider),
/* harmony export */   getItemsValue: () => (/* binding */ getItemsValue)
/* harmony export */ });
/**
 * Basic ItemProvider that surfaces an array of items through the IItemProvider
 * interface.
 */
var ArrayItemProvider = /** @class */ (function () {
    function ArrayItemProvider(items) {
        this.items = items;
    }
    Object.defineProperty(ArrayItemProvider.prototype, "length", {
        get: function () {
            return this.items.length;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ArrayItemProvider.prototype, "value", {
        get: function () {
            return this.items;
        },
        enumerable: false,
        configurable: true
    });
    return ArrayItemProvider;
}());

/**
 * Helper function to get the value of a set of items that can be an itemProvider or normal array.
 * @param items the items to retrieve the value from.
 */
function getItemsValue(items) {
    return Array.isArray(items) ? items : items.value;
}


/***/ }),

/***/ "./node_modules/azure-devops-ui/Utilities/ScreenSize.js":
/*!**************************************************************!*\
  !*** ./node_modules/azure-devops-ui/Utilities/ScreenSize.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ScreenSizeConditional: () => (/* binding */ ScreenSizeConditional),
/* harmony export */   ScreenSizeObserver: () => (/* binding */ ScreenSizeObserver)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _Core_Util_Screen__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Core/Util/Screen */ "./node_modules/azure-devops-ui/Core/Util/Screen.js");
/* harmony import */ var _Observer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Observer */ "./node_modules/azure-devops-ui/Observer.js");



var ScreenSizeObserver = function (props) {
    return react__WEBPACK_IMPORTED_MODULE_0__.createElement(_Core_Util_Screen__WEBPACK_IMPORTED_MODULE_1__.ScreenContext.Consumer, null, function (screen) { return react__WEBPACK_IMPORTED_MODULE_0__.createElement(_Observer__WEBPACK_IMPORTED_MODULE_2__.Observer, { screenSize: screen.size }, props.children); });
};
/**
 * Conditionally renders children based on screen size.
 */
var ScreenSizeConditional = function (props) {
    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(ScreenSizeObserver, null, function (screenSizeProps) { return props.condition(screenSizeProps.screenSize) && props.children; }));
};


/***/ }),

/***/ "./node_modules/azure-devops-ui/Utilities/Selection.js":
/*!*************************************************************!*\
  !*** ./node_modules/azure-devops-ui/Utilities/Selection.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Selection: () => (/* binding */ Selection),
/* harmony export */   compareSelectionRanges: () => (/* binding */ compareSelectionRanges),
/* harmony export */   indexWithinRanges: () => (/* binding */ indexWithinRanges)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var _Core_Observable__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Core/Observable */ "./node_modules/azure-devops-ui/Core/Observable.js");


var Selection = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(Selection, _super);
    function Selection(options) {
        var _this = _super.call(this, []) || this;
        _this.selectedRanges = [];
        _this.lockCount = 0;
        _this.unselectableRangesValue = [];
        _this.selectedCount = 0;
        _this.unselectableCount = 0;
        _this.onItemsChanged = function (change, action) {
            var index = change.index;
            var removedUnselectableRange, unselectedRange;
            if (action === "change") {
                return;
            }
            // Unselect any items that were removed from the underlying item collection.
            if (change.removedItems && change.removedItems.length) {
                removedUnselectableRange = _this.removeUnselectableInternal(index, change.removedItems.length);
                unselectedRange = _this.unselectInternal(index, change.removedItems.length);
            }
            // Offset any selection by the items added.
            if (change.addedItems || change.removedItems) {
                var adjustCount = (change.addedItems ? change.addedItems.length : 0) - (change.removedItems ? change.removedItems.length : 0);
                var adjustedSelectionRanges = adjustRanges(index, adjustCount, _this.selectedRanges);
                var adjustedUnselectableRanges = adjustRanges(index, adjustCount, _this.unselectableRanges);
                if (adjustedSelectionRanges.length) {
                    _this.notify(adjustedSelectionRanges, "set");
                }
                if (adjustedUnselectableRanges.length) {
                    _this.notify(adjustedUnselectableRanges, "setUnselectable");
                }
            }
            if (removedUnselectableRange) {
                _this.notify([removedUnselectableRange], "removeUnselectable");
            }
            if (unselectedRange) {
                _this.notify([unselectedRange], "unselect");
            }
        };
        if (typeof options === "boolean" || options === undefined) {
            _this.multiSelect = !!options || false;
        }
        else {
            _this.alwaysMerge = !!options.alwaysMerge;
            _this.multiSelect = !!options.multiSelect;
            _this.unselectableRanges = options.unselectableRanges || [];
            _this.value = options.selectedRanges || [];
        }
        return _this;
    }
    Object.defineProperty(Selection.prototype, "value", {
        get: function () {
            return this.selectedRanges;
        },
        set: function (ranges) {
            var _this = this;
            this.selectedCount = 0;
            this.selectedRanges = ranges.map(function (range) {
                _this.selectedCount += range.endIndex - range.beginIndex + 1;
                return { beginIndex: range.beginIndex, endIndex: range.endIndex };
            });
            this.notify(ranges, "set");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Selection.prototype, "unselectableRanges", {
        get: function () {
            return this.unselectableRangesValue;
        },
        set: function (ranges) {
            var _this = this;
            this.unselectableCount = 0;
            this.unselectableRangesValue = ranges.map(function (range) {
                _this.unselectableCount += range.endIndex - range.beginIndex + 1;
                return { beginIndex: range.beginIndex, endIndex: range.endIndex };
            });
            this.notify(ranges, "setUnselectable");
        },
        enumerable: false,
        configurable: true
    });
    Selection.prototype.clear = function () {
        var selectedRanges = this.clearSelectedRanges();
        if (selectedRanges) {
            // Go through and notify any observers of the change.
            this.notify(selectedRanges, "unselect");
        }
    };
    Selection.prototype.clearUnselectable = function () {
        var unselectableRanges = (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__spreadArray)([], this.unselectableRangesValue, true);
        this.unselectableRanges = [];
        this.unselectableCount = 0;
        this.notify(unselectableRanges, "removeUnselectable");
    };
    Selection.prototype.selectable = function (index) {
        return !indexWithinRanges(index, this.unselectableRanges);
    };
    Selection.prototype.selected = function (index) {
        return indexWithinRanges(index, this.selectedRanges);
    };
    Selection.prototype.addUnselectable = function (index, count) {
        var updatedRanges = false;
        var beginIndex = index;
        var endIndex = index + (count || 1) - 1;
        // If no count is specified we will add a single item.
        count = count || 1;
        for (; count > 0; count--) {
            if (!this.selectable(index)) {
                index++;
                continue;
            }
            var rangeIndex = 0;
            var updatedRange = void 0;
            // Determine if there is a range we can add this unselectable item to.
            for (; rangeIndex < this.unselectableRanges.length; rangeIndex++) {
                var unselectableRange = this.unselectableRanges[rangeIndex];
                // Check if this unselectable item occurs before this unselectableRange.
                if (index < unselectableRange.beginIndex) {
                    if (index === unselectableRange.beginIndex - 1) {
                        updatedRange = unselectableRange;
                        updatedRange.beginIndex--;
                    }
                    break;
                }
                // If this index is directly after this range we will extend it.
                else if (index === unselectableRange.endIndex + 1) {
                    // If there is a gap of 1 number we will merge the two ranges.
                    if (rangeIndex < this.unselectableRanges.length - 1 && index === this.unselectableRanges[rangeIndex + 1].beginIndex - 1) {
                        updatedRange = unselectableRange;
                        updatedRange.endIndex = this.unselectableRanges[rangeIndex + 1].endIndex;
                        // Remove the second range since it is merged into the previous range.
                        this.unselectableRanges.splice(rangeIndex + 1, 1);
                    }
                    else {
                        updatedRange = unselectableRange;
                        updatedRange.endIndex++;
                    }
                    break;
                }
            }
            // If there was no range to merge with, add a new one.
            if (!updatedRange) {
                updatedRange = { beginIndex: index, endIndex: index };
                this.unselectableRanges.splice(rangeIndex, 0, updatedRange);
            }
            updatedRanges = true;
            this.unselectableCount++;
            index++;
        }
        // Notify observers of the added item.
        if (updatedRanges) {
            this.notify([{ beginIndex: beginIndex, endIndex: endIndex }], "addUnselectable");
        }
    };
    Selection.prototype.removeUnselectable = function (index, count) {
        var removedRange = this.removeUnselectableInternal(index, count);
        if (removedRange) {
            this.notify([removedRange], "removeUnselectable");
        }
    };
    Selection.prototype.select = function (index, count, merge, multiSelect) {
        if (merge === void 0) { merge = this.alwaysMerge; }
        if (multiSelect === void 0) { multiSelect = this.multiSelect; }
        if (!this.lockCount) {
            var beginIndex = index;
            var endIndex = beginIndex + (count || 1) - 1;
            var updatedRanges = false;
            var unselectedRanges = void 0;
            if (!multiSelect) {
                if (!this.selected(index) && this.selectable(index)) {
                    unselectedRanges = this.clearSelectedRanges();
                    var updatedRange = { beginIndex: index, endIndex: index };
                    this.selectedRanges.push(updatedRange);
                    this.selectedCount++;
                    updatedRanges = true;
                }
            }
            else {
                if (!merge) {
                    unselectedRanges = this.clearSelectedRanges();
                }
                // If no count is specified we will use a single item selection.
                count = count || 1;
                // @TODO: Implement a more optimal multi-count selection
                for (; count > 0; count--) {
                    if (this.selected(index) || !this.selectable(index)) {
                        index++;
                        continue;
                    }
                    var rangeIndex = 0;
                    var updatedRange = void 0;
                    // Determine if there is a range we can add this selection to.
                    for (; rangeIndex < this.selectedRanges.length; rangeIndex++) {
                        var selectionRange = this.selectedRanges[rangeIndex];
                        // Check if this selection occurs before this selectionRange.
                        if (index < selectionRange.beginIndex) {
                            if (index === selectionRange.beginIndex - 1) {
                                updatedRange = selectionRange;
                                updatedRange.beginIndex--;
                            }
                            break;
                        }
                        // If this index is directly after this range we will extend it.
                        else if (index === selectionRange.endIndex + 1) {
                            // If there is a gap of 1 number we will merge the two ranges.
                            if (rangeIndex < this.selectedRanges.length - 1 && index === this.selectedRanges[rangeIndex + 1].beginIndex - 1) {
                                updatedRange = selectionRange;
                                updatedRange.endIndex = this.selectedRanges[rangeIndex + 1].endIndex;
                                // Remove the second range since it is merged into the previous range.
                                this.selectedRanges.splice(rangeIndex + 1, 1);
                            }
                            else {
                                updatedRange = selectionRange;
                                updatedRange.endIndex++;
                            }
                            break;
                        }
                    }
                    // If there was no range to merge with, add a new one.
                    if (!updatedRange) {
                        updatedRange = { beginIndex: index, endIndex: index };
                        this.selectedRanges.splice(rangeIndex, 0, updatedRange);
                    }
                    this.selectedCount++;
                    index++;
                    updatedRanges = true;
                }
            }
            if (unselectedRanges) {
                this.notify(unselectedRanges, "unselect");
            }
            // Notify observers of the added selection.
            if (updatedRanges) {
                this.notify([{ beginIndex: beginIndex, endIndex: endIndex }], "select");
            }
        }
    };
    Selection.prototype.toggle = function (index, merge, multiSelect) {
        if (merge === void 0) { merge = this.alwaysMerge; }
        if (multiSelect === void 0) { multiSelect = this.multiSelect; }
        if (this.selected(index)) {
            this.unselect(index);
        }
        else {
            this.select(index, 1, merge, multiSelect);
        }
    };
    Selection.prototype.unselect = function (index, count) {
        var unselectedRange = this.unselectInternal(index, count);
        if (unselectedRange) {
            this.notify([unselectedRange], "unselect");
        }
    };
    Selection.prototype.lock = function () {
        this.lockCount++;
    };
    Selection.prototype.unlock = function () {
        this.lockCount--;
    };
    Selection.prototype.removeUnselectableInternal = function (index, count) {
        var beginIndex = index;
        var endIndex = beginIndex + (count || 1) - 1;
        var updatedRanges = false;
        // If no count is specified we will use a single item selection.
        count = count || 1;
        // @TODO: Implement a more optimal multi-count selection
        for (; count > 0; count--) {
            if (this.selectable(index)) {
                index++;
                continue;
            }
            // Determine the range we are unselecting the item from.
            for (var rangeIndex = 0; rangeIndex < this.unselectableRanges.length; rangeIndex++) {
                var unselectableRange = this.unselectableRanges[rangeIndex];
                // If this index if before this range move on to the next one.
                if (index < unselectableRange.beginIndex) {
                    continue;
                }
                // Determine whether or not this index falls into this range.
                if (index >= unselectableRange.beginIndex && index <= unselectableRange.endIndex) {
                    // If the index is on the start or end of the range, we will just shrink it.
                    // Otherwise we will have to split it.
                    if (index === unselectableRange.beginIndex) {
                        unselectableRange.beginIndex++;
                    }
                    else if (index === unselectableRange.endIndex) {
                        unselectableRange.endIndex--;
                    }
                    else {
                        this.unselectableRanges.splice(rangeIndex + 1, 0, {
                            beginIndex: index + 1,
                            endIndex: unselectableRange.endIndex
                        });
                        unselectableRange.endIndex = index - 1;
                    }
                    // Shrinking may have created an empty range, we need to remove it.
                    if (unselectableRange.beginIndex > unselectableRange.endIndex) {
                        this.unselectableRanges.splice(rangeIndex, 1);
                    }
                    this.unselectableCount--;
                    updatedRanges = true;
                    break;
                }
            }
            index++;
        }
        if (updatedRanges) {
            return { beginIndex: beginIndex, endIndex: endIndex };
        }
    };
    Selection.prototype.unselectInternal = function (index, count) {
        var updatedRanges = false;
        var beginIndex = index;
        var endIndex = beginIndex + (count || 1) - 1;
        if (!this.lockCount) {
            // If no count is specified we will use a single item selection.
            count = count || 1;
            // @TODO: Implement a more optimal multi-count selection
            for (; count > 0; count--) {
                if (!this.selected(index)) {
                    index++;
                    continue;
                }
                // Determine the range we are unselecting the item from.
                for (var rangeIndex = 0; rangeIndex < this.selectedRanges.length; rangeIndex++) {
                    var selectionRange = this.selectedRanges[rangeIndex];
                    // If this index if before this range move on to the next one.
                    if (index < selectionRange.beginIndex) {
                        continue;
                    }
                    // Determine whether or not this index falls into this range.
                    if (index >= selectionRange.beginIndex && index <= selectionRange.endIndex) {
                        // If the index is on the start or end of the range, we will just shrink it.
                        // Otherwise we will have to split it.
                        if (index === selectionRange.beginIndex) {
                            selectionRange.beginIndex++;
                        }
                        else if (index === selectionRange.endIndex) {
                            selectionRange.endIndex--;
                        }
                        else {
                            this.selectedRanges.splice(rangeIndex + 1, 0, {
                                beginIndex: index + 1,
                                endIndex: selectionRange.endIndex
                            });
                            selectionRange.endIndex = index - 1;
                        }
                        // Shrinking may have created an empty range, we need to remove it.
                        if (selectionRange.beginIndex > selectionRange.endIndex) {
                            this.selectedRanges.splice(rangeIndex, 1);
                        }
                        this.selectedCount--;
                        updatedRanges = true;
                        break;
                    }
                }
                index++;
            }
        }
        if (updatedRanges) {
            return { beginIndex: beginIndex, endIndex: endIndex };
        }
    };
    Selection.prototype.clearSelectedRanges = function () {
        if (!this.lockCount && this.selectedRanges.length > 0) {
            // Save the current selection ranges for notification.
            var selectedRanges = (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__spreadArray)([], this.selectedRanges, true);
            // Reset the selection to an empty selection.
            this.selectedRanges = [];
            this.selectedCount = 0;
            return selectedRanges;
        }
    };
    return Selection;
}(_Core_Observable__WEBPACK_IMPORTED_MODULE_1__.ObservableValue));

function indexWithinRanges(index, ranges) {
    if (ranges) {
        for (var _i = 0, ranges_1 = ranges; _i < ranges_1.length; _i++) {
            var range = ranges_1[_i];
            if (index >= range.beginIndex && index <= range.endIndex) {
                return true;
            }
        }
    }
    return false;
}
function adjustRanges(index, adjustCount, ranges) {
    var adjustedRanges = [];
    for (var rangeIndex = 0; rangeIndex < ranges.length; rangeIndex++) {
        var range = ranges[rangeIndex];
        // If the added items are before the range shift it down.
        if (index <= range.beginIndex) {
            // If this adjustment will create a continuous range with the previous range
            // we merge the ranges.
            if (rangeIndex > 0 && range.beginIndex + adjustCount === ranges[rangeIndex - 1].endIndex + 1) {
                ranges[rangeIndex - 1].endIndex = range.endIndex + adjustCount;
                ranges.splice(rangeIndex--, 1);
                adjustedRanges.push(ranges[rangeIndex]);
            }
            else {
                range.beginIndex += adjustCount;
                range.endIndex += adjustCount;
                adjustedRanges.push(range);
            }
        }
        else if (index > range.beginIndex && index <= range.endIndex) {
            // Create the new split selection range.
            var splitRange = {
                beginIndex: index + adjustCount,
                endIndex: range.endIndex + adjustCount
            };
            ranges.splice(++rangeIndex, 0, splitRange);
            adjustedRanges.push(splitRange);
            // If the added items are in the middle of range we need to split the range.
            range.endIndex = index - 1;
            adjustedRanges.push(range);
        }
    }
    return adjustedRanges;
}
/**
 * return an array describing the difference of two sets of selection ranges.  Postive values in the array are indices in second
 * that are not in first.  Negative values in the array are indices that are in first that are not in second.
 * @param firstRanges the first set of values to use in the comparison.
 * @param secondRanges the second set of values to use in the comparison.
 */
function compareSelectionRanges(firstRanges, secondRanges) {
    var difference = [];
    for (var rangeIndex = 0; rangeIndex < firstRanges.length; rangeIndex++) {
        var range = firstRanges[rangeIndex];
        for (var selectionIndex = range.beginIndex; selectionIndex <= range.endIndex; selectionIndex++) {
            if (!indexWithinRanges(selectionIndex, secondRanges)) {
                difference.push(selectionIndex * -1);
            }
        }
    }
    for (var rangeIndex = 0; rangeIndex < secondRanges.length; rangeIndex++) {
        var range = secondRanges[rangeIndex];
        for (var selectionIndex = range.beginIndex; selectionIndex <= range.endIndex; selectionIndex++) {
            if (!indexWithinRanges(selectionIndex, firstRanges)) {
                difference.push(selectionIndex);
            }
        }
    }
    return difference;
}


/***/ }),

/***/ "./node_modules/azure-devops-ui/ZeroData.js":
/*!**************************************************!*\
  !*** ./node_modules/azure-devops-ui/ZeroData.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ZeroData: () => (/* reexport safe */ _Components_ZeroData_index__WEBPACK_IMPORTED_MODULE_0__.ZeroData),
/* harmony export */   ZeroDataActionType: () => (/* reexport safe */ _Components_ZeroData_index__WEBPACK_IMPORTED_MODULE_0__.ZeroDataActionType)
/* harmony export */ });
/* harmony import */ var _Components_ZeroData_index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Components/ZeroData/index */ "./node_modules/azure-devops-ui/Components/ZeroData/index.js");



/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./node_modules/azure-devops-ui/Components/Breakpoint/Breakpoint.css":
/*!*****************************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./node_modules/azure-devops-ui/Components/Breakpoint/Breakpoint.css ***!
  \*****************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../css-loader/dist/runtime/noSourceMaps.js */ "./node_modules/css-loader/dist/runtime/noSourceMaps.js");
/* harmony import */ var _css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, `.bolt-breakpoint {
  pointer-events: none;
}

.bolt-breakpoint-container {
  height: 2px;
}

.bolt-breakpoint-observation {
  bottom: 0;
  left: 0;
  top: 0;
}
`, ""]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./node_modules/azure-devops-ui/Components/Button/Button.css":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./node_modules/azure-devops-ui/Components/Button/Button.css ***!
  \*********************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../css-loader/dist/runtime/noSourceMaps.js */ "./node_modules/css-loader/dist/runtime/noSourceMaps.js");
/* harmony import */ var _css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, `.bolt-button {
  align-items: center;
  border-radius: 2px;
  border: 1px solid transparent;
  cursor: pointer;
  display: inline-flex;
  flex-direction: row;
  flex-shrink: 0;
  font-family: inherit;
  font-size: inherit;
  font-weight: 600;
  justify-content: center;
  line-height: inherit;
  outline: none;
  overflow: visible; /* IE11 needs overflow visible for the focus treatment to show up */
  padding: 6px 12px;
  position: relative;
  transition: background 80ms linear;
}
@media (forced-colors: active) {
  .bolt-button {
    border: 1px solid windowtext;
  }
}
body.ms-vss-web-vsts-theme-hc-dark .bolt-button {
  border: 1px solid rgba(0, 120, 212, 1);
  border: 1px solid var(--focus-border-color,rgba(0, 120, 212, 1));
}
body.ms-vss-web-vsts-theme-hc-light .bolt-button {
  border: 1px solid rgba(0, 120, 212, 1);
  border: 1px solid var(--focus-border-color,rgba(0, 120, 212, 1));
}

/* This is here to work around Legacy styles setting the heights of all buttons to 30px */
button.bolt-button {
  height: auto;
}

/* Needed to remove the focus-rectangle from FireFox. */
.bolt-button::-moz-focus-inner {
  border: 0;
}

/* Danger modifiers */
.bolt-button.danger {
  background-color: rgba(232, 17, 35, 1);
  background-color: var(--palette-error,rgba(232, 17, 35, 1));
  color: rgba(255, 255, 255, 1);
  color: var(--text-on-communication-background,rgba(255, 255, 255, 1));
}

.bolt-button.danger:hover {
  background-color: rgba(203, 15, 31, 1);
  background-color: var(--palette-error-6,rgba(203, 15, 31, 1));
}

.bolt-button.danger:active,
.bolt-button.danger.active {
  background-color: rgba(184, 14, 28, 1);
  background-color: var(--palette-error-10,rgba(184, 14, 28, 1));
}

/* Primary modifiers */
.bolt-button.primary {
  background-color: rgba(0, 120, 212, 1);
  background-color: var(--communication-background,rgba(0, 120, 212, 1));
  color: rgba(255, 255, 255, 1);
  color: var(--text-on-communication-background,rgba(255, 255, 255, 1));
}

.bolt-button.primary:hover {
  background-color: rgba( 0, 103, 181 ,  1 );
  background-color: rgba( var(--palette-primary-darkened-6,0, 103, 181) ,  1 );
}

.bolt-button.primary:active,
.bolt-button.primary.active {
  background-color: rgba( 0, 91, 161 ,  1 );
  background-color: rgba( var(--palette-primary-darkened-10,0, 91, 161) ,  1 );
}

@media (forced-colors: active) {
  .bolt-button:not(.disabled):hover {
    color: HighLight;
  }
}

/* Disabled modifiers */
.bolt-button.disabled,
.bolt-button.disabled:hover,
.bolt-button.disabled:focus {
  background-color: rgba(0, 0, 0, 0.06);
  background-color: var(--palette-black-alpha-6,rgba(0, 0, 0, 0.06));
  color: rgba(0, 0, 0, .38);
  color: var(--text-disabled-color,rgba(0, 0, 0, .38));
  cursor: default;
}
@media (forced-colors: active) {
  .bolt-button.disabled,
  .bolt-button.disabled:hover,
  .bolt-button.disabled:focus {
    color: GrayText;
    forced-color-adjust: none;
  }
}

/* Subtle modifiers (before standard for overrides) */
.bolt-button.subtle,
.bolt-button.subtle.disabled:hover,
.bolt-button.subtle.disabled:focus {
  background-color: transparent;
}
@media (forced-colors: active) {
  .bolt-button.subtle,
  .bolt-button.subtle.disabled:hover,
  .bolt-button.subtle.disabled:focus {
    background-color: unset;
  }
}
body.ms-vss-web-vsts-theme-hc-dark .bolt-button.subtle,
body.ms-vss-web-vsts-theme-hc-dark .bolt-button.subtle.disabled:hover,
body.ms-vss-web-vsts-theme-hc-dark .bolt-button.subtle.disabled:focus {
  background-color: unset;
  color: unset;
}
body.ms-vss-web-vsts-theme-hc-light .bolt-button.subtle,
body.ms-vss-web-vsts-theme-hc-light .bolt-button.subtle.disabled:hover,
body.ms-vss-web-vsts-theme-hc-light .bolt-button.subtle.disabled:focus {
  background-color: unset;
  color: unset;
}

body.ms-vss-web-vsts-theme-hc-dark .bolt-button.subtle {
  border-color: none;
}
body.ms-vss-web-vsts-theme-hc-light .bolt-button.subtle {
  border-color: none;
}
body.ms-vss-web-vsts-theme-hc-dark .bolt-button.subtle:focus {
  border: 1px solid rgba(0, 120, 212, 1);
  border: 1px solid var(--focus-border-color,rgba(0, 120, 212, 1));
  outline: 4px solid rgba(0, 90, 158, 1);
  outline: 4px solid var(--communication-foreground,rgba(0, 90, 158, 1));
}
body.ms-vss-web-vsts-theme-hc-light .bolt-button.subtle:focus {
  border: 1px solid rgba(0, 120, 212, 1);
  border: 1px solid var(--focus-border-color,rgba(0, 120, 212, 1));
  outline: 4px solid rgba(0, 90, 158, 1);
  outline: 4px solid var(--communication-foreground,rgba(0, 90, 158, 1));
}
.bolt-button.subtle:hover {
  background-color: rgba(0, 0, 0, 0.06);
  background-color: var(--palette-black-alpha-6,rgba(0, 0, 0, 0.06));
}
.bolt-button.subtle:active {
  background-color: rgba(0, 0, 0, 0.20);
  background-color: var(--palette-black-alpha-20,rgba(0, 0, 0, 0.20));
}

/* Basic button colors */
.bolt-button {
  background-color: rgba(0, 0, 0, 0.06);
  background-color: var(--palette-black-alpha-6,rgba(0, 0, 0, 0.06));
  color: rgba(0, 0, 0, .9);
  color: var(--text-primary-color,rgba(0, 0, 0, .9));
  margin: 0;
}

.bolt-button:focus {
  z-index: 1;
}
body.ms-vss-web-vsts-theme-hc-dark .bolt-button:focus {
  border: 1px solid rgba(0, 120, 212, 1);
  border: 1px solid var(--focus-border-color,rgba(0, 120, 212, 1));
  background-color: rgba(255, 255, 255, 1);
  background-color: var(--background-color,rgba(255, 255, 255, 1));
  outline: 4px solid rgba(0, 90, 158, 1);
  outline: 4px solid var(--communication-foreground,rgba(0, 90, 158, 1));
  color: rgba(0, 120, 212, 1);
  color: var(--focus-border-color,rgba(0, 120, 212, 1));
}
body.ms-vss-web-vsts-theme-hc-light .bolt-button:focus {
  border: 1px solid rgba(0, 120, 212, 1);
  border: 1px solid var(--focus-border-color,rgba(0, 120, 212, 1));
  background-color: rgba(255, 255, 255, 1);
  background-color: var(--background-color,rgba(255, 255, 255, 1));
  outline: 4px solid rgba(0, 90, 158, 1);
  outline: 4px solid var(--communication-foreground,rgba(0, 90, 158, 1));
  color: rgba(0, 120, 212, 1);
  color: var(--focus-border-color,rgba(0, 120, 212, 1));
}

.bolt-button:hover {
  background-color: rgba(0, 0, 0, 0.10);
  background-color: var(--palette-black-alpha-10,rgba(0, 0, 0, 0.10));
}
body.ms-vss-web-vsts-theme-hc-dark .bolt-button:hover {
  background-color: rgba(0, 90, 158, 1);
  background-color: var(--communication-foreground,rgba(0, 90, 158, 1));
  color: rgba(255, 255, 255, 1);
  color: var(--background-color,rgba(255, 255, 255, 1));
}
body.ms-vss-web-vsts-theme-hc-dark .bolt-button:hover .secondary-text {
  color: rgba(255, 255, 255, 1);
  color: var(--background-color,rgba(255, 255, 255, 1));
}
body.ms-vss-web-vsts-theme-hc-light .bolt-button:hover {
  background-color: rgba(0, 90, 158, 1);
  background-color: var(--communication-foreground,rgba(0, 90, 158, 1));
  color: rgba(255, 255, 255, 1);
  color: var(--background-color,rgba(255, 255, 255, 1));
}
body.ms-vss-web-vsts-theme-hc-light .bolt-button:hover .secondary-text {
  color: rgba(255, 255, 255, 1);
  color: var(--background-color,rgba(255, 255, 255, 1));
}

.bolt-button:active,
.bolt-button.active {
  background-color: rgba(0, 0, 0, 0.20);
  background-color: var(--palette-black-alpha-20,rgba(0, 0, 0, 0.20));
}
body.ms-vss-web-vsts-theme-hc-dark .bolt-button:active,
body.ms-vss-web-vsts-theme-hc-dark .bolt-button.active {
  background-color: rgba(0, 90, 158, 1);
  background-color: var(--communication-foreground,rgba(0, 90, 158, 1));
  color: rgba(255, 255, 255, 1);
  color: var(--background-color,rgba(255, 255, 255, 1));
}
body.ms-vss-web-vsts-theme-hc-dark .bolt-button:active .secondary-text,
body.ms-vss-web-vsts-theme-hc-dark .bolt-button.active .secondary-text {
  color: rgba(255, 255, 255, 1);
  color: var(--background-color,rgba(255, 255, 255, 1));
}
body.ms-vss-web-vsts-theme-hc-light .bolt-button:active,
body.ms-vss-web-vsts-theme-hc-light .bolt-button.active {
  background-color: rgba(0, 90, 158, 1);
  background-color: var(--communication-foreground,rgba(0, 90, 158, 1));
  color: rgba(255, 255, 255, 1);
  color: var(--background-color,rgba(255, 255, 255, 1));
}
body.ms-vss-web-vsts-theme-hc-light .bolt-button:active .secondary-text,
body.ms-vss-web-vsts-theme-hc-light .bolt-button.active .secondary-text {
  color: rgba(255, 255, 255, 1);
  color: var(--background-color,rgba(255, 255, 255, 1));
}

.bolt-link-button {
  text-decoration: none;
}

.bolt-button.icon-only {
  padding: 8px 22px;
  font-weight: normal;
}

.bolt-button.icon-only.subtle {
  padding: 8px;
}

.bolt-button:not(.icon-only) > span.fluent-icons-enabled > .left-icon {
  font-weight: normal;
  padding-right: 10px;
  vertical-align: middle;
}

.bolt-button.bolt-link-button {
  color: rgba(0, 0, 0, .9);
  color: var(--text-primary-color,rgba(0, 0, 0, .9));
}
.bolt-button.bolt-link-button:hover {
  color: rgba(0, 0, 0, .9);
  color: var(--text-primary-color,rgba(0, 0, 0, .9));
  text-decoration: none;
}
.bolt-button.bolt-link-button:visited {
  color: rgba(0, 0, 0, .9);
  color: var(--text-primary-color,rgba(0, 0, 0, .9));
}
.bolt-button.bolt-link-button:active, .bolt-button.bolt-link-button.active {
  color: rgba(0, 0, 0, .9);
  color: var(--text-primary-color,rgba(0, 0, 0, .9));
}
.bolt-button.bolt-link-button.disabled {
  color: rgba(0, 0, 0, .38);
  color: var(--text-disabled-color,rgba(0, 0, 0, .38));
}
@media (forced-colors: active) {
  .bolt-button.bolt-link-button.disabled {
    color: GrayText;
    forced-color-adjust: none;
  }
}

.bolt-button.bolt-link-button.primary {
  color: rgba(255, 255, 255, 1);
  color: var(--text-on-communication-background,rgba(255, 255, 255, 1));
}
.bolt-button.bolt-link-button.primary:hover {
  color: rgba(255, 255, 255, 1);
  color: var(--text-on-communication-background,rgba(255, 255, 255, 1));
}
body.ms-vss-web-vsts-theme-hc-dark .bolt-button.bolt-link-button.primary:hover {
  color: rgba(255, 255, 255, 1);
  color: var(--background-color,rgba(255, 255, 255, 1));
}
body.ms-vss-web-vsts-theme-hc-light .bolt-button.bolt-link-button.primary:hover {
  color: rgba(255, 255, 255, 1);
  color: var(--background-color,rgba(255, 255, 255, 1));
}
.bolt-button.bolt-link-button.primary:visited {
  color: rgba(255, 255, 255, 1);
  color: var(--text-on-communication-background,rgba(255, 255, 255, 1));
}
.bolt-button.bolt-link-button.primary:active, .bolt-button.bolt-link-button.primary.active {
  color: rgba(255, 255, 255, 1);
  color: var(--text-on-communication-background,rgba(255, 255, 255, 1));
}
body.ms-vss-web-vsts-theme-hc-dark .bolt-button.bolt-link-button.primary:active, body.ms-vss-web-vsts-theme-hc-dark .bolt-button.bolt-link-button.primary.active {
  color: rgba(255, 255, 255, 1);
  color: var(--background-color,rgba(255, 255, 255, 1));
}
body.ms-vss-web-vsts-theme-hc-light .bolt-button.bolt-link-button.primary:active, body.ms-vss-web-vsts-theme-hc-light .bolt-button.bolt-link-button.primary.active {
  color: rgba(255, 255, 255, 1);
  color: var(--background-color,rgba(255, 255, 255, 1));
}

.bolt-focus-visible .bolt-button.bolt-focus-treatment:focus {
  animation: ms-focus-shadow-pulse 4s ease-in-out infinite;
  box-shadow: 0 0 0 3px rgba(0, 120, 212, 0.23);
  box-shadow: 0 0 0 3px var(--focus-pulse-max-color,rgba(0, 120, 212, 0.23));
  border-color: rgba(0, 120, 212, 1);
  border-color: var(--focus-border-color,rgba(0, 120, 212, 1));
}
@media (forced-colors: active) {
  .bolt-focus-visible .bolt-button.bolt-focus-treatment:focus {
    animation: none;
  }
}
@media (forced-colors: active) {
  .bolt-focus-visible .bolt-button.bolt-focus-treatment:focus {
    forced-color-adjust: none;
    border-color: highlight;
  }
}
@media screen and (forced-colors: active) and (prefers-color-scheme: light) {
  .bolt-focus-visible .bolt-button.bolt-focus-treatment:focus {
    outline: 1px solid highlight;
    outline-offset: 1px;
  }
}
@media (forced-colors: active) {
  .bolt-focus-visible .bolt-button.bolt-focus-treatment:focus {
    background: window;
    color: windowtext;
  }
}
.bolt-focus-visible .bolt-button.bolt-focus-treatment:focus.primary {
  animation: ms-focus-shadow-with-border-pulse 4s ease-in-out infinite;
  box-shadow: 0 0 0 3px rgba(0, 120, 212, 0.23), 0 0 0 1px rgba(0, 120, 212, 1);
  box-shadow: 0 0 0 3px var(--focus-pulse-max-color,rgba(0, 120, 212, 0.23)), 0 0 0 1px var(--focus-border-color,rgba(0, 120, 212, 1));
  border-color: rgba(255, 255, 255, 1);
  border-color: var(--text-on-communication-background,rgba(255, 255, 255, 1));
}
@media (forced-colors: active) {
  .bolt-focus-visible .bolt-button.bolt-focus-treatment:focus.primary {
    animation: none;
  }
}
@media (forced-colors: active) {
  .bolt-focus-visible .bolt-button.bolt-focus-treatment:focus.primary {
    border-color: highlight;
    box-shadow: none;
  }
}
.bolt-focus-visible .bolt-button.bolt-focus-treatment:focus.danger {
  animation: ms-focus-shadow-with-border-pulse 4s ease-in-out infinite;
  box-shadow: 0 0 0 3px rgba(0, 120, 212, 0.23), 0 0 0 1px rgba(0, 120, 212, 1);
  box-shadow: 0 0 0 3px var(--focus-pulse-max-color,rgba(0, 120, 212, 0.23)), 0 0 0 1px var(--focus-border-color,rgba(0, 120, 212, 1));
  border-color: rgba(255, 255, 255, 1);
  border-color: var(--text-on-communication-background,rgba(255, 255, 255, 1));
}
@media (forced-colors: active) {
  .bolt-focus-visible .bolt-button.bolt-focus-treatment:focus.danger {
    animation: none;
  }
}
@media (forced-colors: active) {
  .bolt-focus-visible .bolt-button.bolt-focus-treatment:focus.danger {
    border-color: highlight;
    box-shadow: none;
  }
}
.bolt-focus-visible .bolt-button.bolt-focus-treatment:focus:after {
  content: none !important;
}

.ms-Dialog-action .bolt-button {
  font-size: 0.875rem;
}
`, ""]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./node_modules/azure-devops-ui/Components/Button/ExpandableButton.css":
/*!*******************************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./node_modules/azure-devops-ui/Components/Button/ExpandableButton.css ***!
  \*******************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../css-loader/dist/runtime/noSourceMaps.js */ "./node_modules/css-loader/dist/runtime/noSourceMaps.js");
/* harmony import */ var _css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, `.bolt-expandable-button .icon-right {
  padding-left: 10px;
}

.bolt-expandable-button .subtle.active {
  background-color: rgba(0, 0, 0, 0.20);
  background-color: var(--palette-black-alpha-20,rgba(0, 0, 0, 0.20));
}
`, ""]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./node_modules/azure-devops-ui/Components/ButtonGroup/ButtonGroup.css":
/*!*******************************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./node_modules/azure-devops-ui/Components/ButtonGroup/ButtonGroup.css ***!
  \*******************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../css-loader/dist/runtime/noSourceMaps.js */ "./node_modules/css-loader/dist/runtime/noSourceMaps.js");
/* harmony import */ var _css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, `.bolt-button-group {
  gap: 8px;
}
`, ""]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./node_modules/azure-devops-ui/Components/Callout/Callout.css":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./node_modules/azure-devops-ui/Components/Callout/Callout.css ***!
  \***********************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../css-loader/dist/runtime/noSourceMaps.js */ "./node_modules/css-loader/dist/runtime/noSourceMaps.js");
/* harmony import */ var _css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, `.bolt-callout {
  background-color: transparent;
  pointer-events: auto;
}

/* NOTE: Create a element that overlaps the container by 5000px on all sides.
 * This allows callouts to layout naturally and not be influenced by edges of
 * the window.
 */
.bolt-portal.bolt-layout-relative {
  bottom: -5000px;
  left: -5000px;
  right: -5000px;
  top: -5000px;
}

.bolt-light-dismiss {
  pointer-events: auto;
}

.bolt-callout-modal {
  background-color: rgba(0, 0, 0, 0.20);
  background-color: var(--palette-black-alpha-20,rgba(0, 0, 0, 0.20));
}
@media (forced-colors: active) {
  .bolt-callout-modal {
    background: transparent;
  }
}

.bolt-callout-content {
  background-color: rgba(255, 255, 255, 1);
  background-color: var(--callout-background-color,rgba(255, 255, 255, 1));
  z-index: 1;
}

.bolt-callout-shadow {
  box-shadow: 0px 6px 12px rgba(0, 0, 0, .132);
  box-shadow: 0px 6px 12px var(--callout-shadow-color,rgba(0, 0, 0, .132));
}
body.ms-vss-web-vsts-theme-hc-dark .bolt-callout-shadow {
  box-shadow: none;
  border: 2px solid rgba(0, 120, 212, 1);
  border: 2px solid var(--focus-border-color,rgba(0, 120, 212, 1));
}
body.ms-vss-web-vsts-theme-hc-light .bolt-callout-shadow {
  box-shadow: none;
  border: 2px solid rgba(0, 120, 212, 1);
  border: 2px solid var(--focus-border-color,rgba(0, 120, 212, 1));
}

.bolt-callout-extra-large {
  width: 800px;
}
@media screen and (max-width: 1023px) {
  .bolt-callout-extra-large {
    max-width: 800px;
    min-width: 80%;
    width: auto;
  }
}

.bolt-callout-large {
  width: 640px;
}
@media screen and (max-width: 1023px) {
  .bolt-callout-large {
    max-width: 640px;
    min-width: 80%;
    width: auto;
  }
}

.bolt-callout-medium {
  width: 480px;
}

.bolt-callout-small {
  width: 320px;
}

.bolt-callout-auto {
  width: auto;
}
`, ""]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./node_modules/azure-devops-ui/Components/Card/Card.css":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./node_modules/azure-devops-ui/Components/Card/Card.css ***!
  \*****************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../css-loader/dist/runtime/noSourceMaps.js */ "./node_modules/css-loader/dist/runtime/noSourceMaps.js");
/* harmony import */ var _css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, `.bolt-card {
  border-radius: 4px;
  overflow: hidden;
  padding: 20px 0px;
}
@media screen and (min-width: 0\\0 ) {
  .bolt-card {
    border-radius: 0;
  }
}
@media (forced-colors: active) {
  .bolt-card {
    border: solid 1px;
  }
}
@media screen and (max-width: 599px) {
  .bolt-card {
    border-radius: 0;
  }
}

.bolt-card-with-header {
  padding-top: 0px;
}

.bolt-card-content {
  overflow: auto;
}

.bolt-card-footer {
  padding-top: 12px;
}

.bolt-card-no-vertical-padding {
  padding-top: 0px;
  padding-bottom: 0px;
}

.bolt-card-white {
  background-color: rgba(255, 255, 255, 1);
  background-color: var(--callout-background-color,rgba(255, 255, 255, 1));
}

.bolt-table-card {
  padding-bottom: 0px;
  padding-top: 0px;
}
.bolt-table-card .bolt-card-header {
  padding-bottom: 0px;
}
.bolt-table-card.no-column-headers .bolt-card-header {
  padding-bottom: 20px;
  border-bottom:  1px solid;
  border-bottom-color: rgba( 234, 234, 234 ,  1 );
  border-bottom-color: rgba( var(--palette-neutral-8,234, 234, 234) ,  1 );
}
.bolt-table-card .bolt-card-content {
  padding: 0px;
}
.bolt-table-card .bolt-header-commandbar {
  flex: auto;
  overflow: auto;
}

.bolt-button.bolt-card-expand-button {
  margin-left: 12px;
  margin-top: 16px;
  margin-right: 4px;
}

.bolt-card-header-collapsible {
  padding-left: 8px;
}

.bolt-card-expandable-header.bolt-card-expandable-header {
  padding-left: 8px;
}

.bolt-card-header-collapsed.bolt-card-header-collapsed {
  padding-bottom: 0px;
}
`, ""]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./node_modules/azure-devops-ui/Components/Checkbox/Checkbox.css":
/*!*************************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./node_modules/azure-devops-ui/Components/Checkbox/Checkbox.css ***!
  \*************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../css-loader/dist/runtime/noSourceMaps.js */ "./node_modules/css-loader/dist/runtime/noSourceMaps.js");
/* harmony import */ var _css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, `.bolt-checkbox {
  border-radius: 4px;
  color: rgba(0, 0, 0, .9);
  color: var(--text-primary-color,rgba(0, 0, 0, .9));
  display: inline-flex;
  align-items: center;
}
.bolt-checkbox:focus {
  outline: none;
}
@media (forced-colors: active) {
  .bolt-checkbox:focus {
    border: 2px solid;
    border-color: Highlight;
  }
}
.bolt-checkbox.disabled {
  color: rgba(0, 0, 0, .38);
  color: var(--text-disabled-color,rgba(0, 0, 0, .38));
  cursor: default;
}
@media (forced-colors: active) {
  .bolt-checkbox.disabled {
    forced-color-adjust: none;
    color: graytext;
  }
}
@media (forced-colors: active) {
  .bolt-checkbox.disabled .bolt-checkmark {
    border-color: graytext;
    color: graytext;
  }
}
.bolt-checkbox.disabled.checked .bolt-checkmark {
  background-color: rgba( 200, 200, 200 ,  1 );
  background-color: rgba( var(--palette-neutral-20,200, 200, 200) ,  1 );
}
@media (forced-colors: active) {
  .bolt-checkbox.disabled.checked .bolt-checkmark {
    background-color: transparent;
    border-color: graytext;
  }
}
.bolt-checkbox.disabled:not(.checked) .bolt-checkmark {
  border:  1px solid;
  border-color: rgba( 200, 200, 200 ,  1 );
  border-color: rgba( var(--palette-neutral-20,200, 200, 200) ,  1 );
}
@media (forced-colors: active) {
  .bolt-checkbox.disabled:not(.checked) .bolt-checkmark {
    border-color: graytext;
  }
}
.bolt-checkbox.labelled {
  padding: 2px 4px 2px 5px;
}
.bolt-checkbox:not(.labelled) {
  margin: 2px;
}
.bolt-checkbox.checked .bolt-checkmark {
  border: 1px solid transparent;
  background-color: rgba(0, 120, 212, 1);
  background-color: var(--communication-background,rgba(0, 120, 212, 1));
  color: rgba(255, 255, 255, 1);
  color: var(--text-on-communication-background,rgba(255, 255, 255, 1));
}
@media (forced-colors: active) {
  .bolt-checkbox.checked .bolt-checkmark {
    background-color: transparent;
  }
}
.bolt-checkbox:not(.checked):not(.disabled) .bolt-checkmark {
  border: 1px solid rgba(0, 0, 0, .55);
  border: 1px solid var(--text-secondary-color,rgba(0, 0, 0, .55));
}
@media (forced-colors: active) {
  .bolt-checkbox:not(.checked):not(.disabled) .bolt-checkmark {
    color: windowtext;
    border-color: windowtext;
  }
}
.bolt-checkbox:not(.checked):not(.disabled) .bolt-checkmark > .fabric-icon {
  visibility: hidden;
}

.bolt-checkmark {
  border-radius: 0.25rem;
  color: transparent;
  padding: 1px;
  height: 1rem;
  width: 1rem;
}

.bolt-checkbox-label {
  padding-left: 10px;
  padding-bottom: 1px;
}

.bolt-focus-visible .bolt-checkbox.bolt-focus-treatment:focus {
  animation: ms-focus-shadow-with-border-pulse 4s ease-in-out infinite;
  box-shadow: 0 0 0 3px rgba(0, 120, 212, 0.23), 0 0 0 1px rgba(0, 120, 212, 1);
  box-shadow: 0 0 0 3px var(--focus-pulse-max-color,rgba(0, 120, 212, 0.23)), 0 0 0 1px var(--focus-border-color,rgba(0, 120, 212, 1));
}
@media (forced-colors: active) {
  .bolt-focus-visible .bolt-checkbox.bolt-focus-treatment:focus {
    animation: none;
  }
}
.bolt-focus-visible .bolt-checkbox.bolt-focus-treatment:focus:not(.checked):not(.labelled) .bolt-checkmark {
  border: 1px solid rgba(0, 120, 212, 1);
  border: 1px solid var(--communication-background,rgba(0, 120, 212, 1));
}
@media (forced-colors: active) {
  .bolt-focus-visible .bolt-checkbox.bolt-focus-treatment:focus:not(.checked):not(.labelled) .bolt-checkmark {
    forced-color-adjust: none;
    border-color: highlight;
  }
}
@media screen and (forced-colors: active) and (prefers-color-scheme: light) {
  .bolt-focus-visible .bolt-checkbox.bolt-focus-treatment:focus:not(.checked):not(.labelled) .bolt-checkmark {
    outline: 1px solid highlight;
    outline-offset: 1px;
  }
}
@media (forced-colors: active) {
  .bolt-focus-visible .bolt-checkbox.bolt-focus-treatment:focus:not(.checked):not(.labelled) .bolt-checkmark {
    color: windowtext;
  }
}
.bolt-focus-visible .bolt-checkbox.bolt-focus-treatment:focus.checked:not(.labelled) .bolt-checkmark {
  border: 1px solid rgba(255, 255, 255, 1);
  border: 1px solid var(--background-color,rgba(255, 255, 255, 1));
}
@media (forced-colors: active) {
  .bolt-focus-visible .bolt-checkbox.bolt-focus-treatment:focus.checked:not(.labelled) .bolt-checkmark {
    forced-color-adjust: none;
    border-color: highlight;
  }
}
@media screen and (forced-colors: active) and (prefers-color-scheme: light) {
  .bolt-focus-visible .bolt-checkbox.bolt-focus-treatment:focus.checked:not(.labelled) .bolt-checkmark {
    outline: 1px solid highlight;
    outline-offset: 1px;
  }
}
@media (forced-colors: active) {
  .bolt-focus-visible .bolt-checkbox.bolt-focus-treatment:focus.checked:not(.labelled) .bolt-checkmark {
    color: windowtext;
  }
}
@media (forced-colors: active) {
  .bolt-focus-visible .bolt-checkbox.bolt-focus-treatment:focus .bolt-checkmark {
    forced-color-adjust: none;
    border-color: highlight;
  }
}
@media screen and (forced-colors: active) and (prefers-color-scheme: light) {
  .bolt-focus-visible .bolt-checkbox.bolt-focus-treatment:focus .bolt-checkmark {
    outline: 1px solid highlight;
    outline-offset: 1px;
  }
}
@media (forced-colors: active) {
  .bolt-focus-visible .bolt-checkbox.bolt-focus-treatment:focus .bolt-checkmark {
    color: windowtext;
  }
}
`, ""]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./node_modules/azure-devops-ui/Components/Header/Header.css":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./node_modules/azure-devops-ui/Components/Header/Header.css ***!
  \*********************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../css-loader/dist/runtime/noSourceMaps.js */ "./node_modules/css-loader/dist/runtime/noSourceMaps.js");
/* harmony import */ var _css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, `.bolt-header-no-spacing-defined {
  padding-left: 20px;
  padding-top: 16px;
  padding-right: 20px;
}

.bolt-header-condensed {
  padding-top: 8px;
  padding-bottom: 8px;
}

.bolt-header-default {
  padding-top: 16px;
  padding-bottom: 16px;
}

.bolt-header-relaxed {
  padding-top: 24px;
  padding-bottom: 24px;
}

.bolt-header-with-commandbar.bolt-header-condensed {
  padding-right: 12px;
}

.bolt-header-with-commandbar.bolt-header-default {
  padding-right: 16px;
}

.bolt-header-with-commandbar.bolt-header-relaxed {
  padding-right: 28px;
}

.bolt-header-with-commandbar {
  padding-right: 16px;
}
@media screen and (max-width: 599px) {
  .bolt-header-with-commandbar {
    padding-right: 20px;
  }
}

.bolt-header-with-back-button {
  padding-left: 16px;
}
@media screen and (max-width: 599px) {
  .bolt-header-with-back-button {
    flex-direction: column;
    padding-left: 20px;
  }
}

.bolt-header-title-area {
  flex-shrink: 25;
}

.bolt-header-content-area {
  min-width: 0px;
}
@media screen and (max-width: 599px) {
  .bolt-header-content-area {
    flex-wrap: wrap;
  }
}

.bolt-header-title {
  padding-top: 4px;
  padding-bottom: 4px;
  margin-right: 8px;
}
.bolt-header-title.l {
  padding-top: 0px;
  padding-bottom: 0px;
}
.bolt-header-title.s {
  padding-top: 6px;
  padding-bottom: 6px;
}
@media screen and (max-width: 599px) {
  .bolt-header-title {
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
  }
}

.bolt-header-icon {
  font-size: 1rem;
  margin-right: 8px;
  margin-top: 8px;
}
.bolt-header-icon.l {
  margin-top: 10px;
}
.bolt-header-icon.s {
  margin-top: 6px;
}

.bolt-header-separator {
  height: 1px;
  background-color: rgba( 244, 244, 244 ,  1 );
  background-color: rgba( var(--palette-neutral-4,244, 244, 244) ,  1 );
}

.bolt-button.bolt-header-back-button {
  background-color: transparent;
  font-size: 1rem;
  margin-right: 8px;
}
@media screen and (max-width: 599px) {
  .bolt-button.bolt-header-back-button {
    padding: 0px;
  }
  .bolt-button.bolt-header-back-button .bolt-button-text {
    font-size: 0.75rem;
    color: rgba(0, 0, 0, .55);
    color: var(--text-secondary-color,rgba(0, 0, 0, .55));
    font-weight: normal;
  }
}
`, ""]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./node_modules/azure-devops-ui/Components/HeaderCommandBar/HeaderCommandBar.css":
/*!*****************************************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./node_modules/azure-devops-ui/Components/HeaderCommandBar/HeaderCommandBar.css ***!
  \*****************************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../css-loader/dist/runtime/noSourceMaps.js */ "./node_modules/css-loader/dist/runtime/noSourceMaps.js");
/* harmony import */ var _css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, `.bolt-header-commandbar {
  margin-left: 16px;
  padding-right: 4px;
}
.bolt-header-commandbar .responsive-placeholder {
  margin: 0;
}

.bolt-header-command-item-button {
  margin: 2px;
}

.bolt-header-command-item-button .bolt-button.icon-only {
  padding: 8px;
}

.bolt-header-commandbar-no-right-padding {
  padding-right: 0px;
}

.bolt-header-command-item-separator {
  background-color: rgba(0, 0, 0, 0.20);
  background-color: var(--palette-black-alpha-20,rgba(0, 0, 0, 0.20));
  width: 1px;
  margin: 4px 8px;
}
`, ""]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./node_modules/azure-devops-ui/Components/Icon/FabricIcons.css":
/*!************************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./node_modules/azure-devops-ui/Components/Icon/FabricIcons.css ***!
  \************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../css-loader/dist/runtime/noSourceMaps.js */ "./node_modules/css-loader/dist/runtime/noSourceMaps.js");
/* harmony import */ var _css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../css-loader/dist/runtime/getUrl.js */ "./node_modules/css-loader/dist/runtime/getUrl.js");
/* harmony import */ var _css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2__);
// Imports



var ___CSS_LOADER_URL_IMPORT_0___ = new URL(/* asset import */ __webpack_require__(/*! ./fonts/AzDevMDL2.woff */ "./node_modules/azure-devops-ui/Components/Icon/fonts/AzDevMDL2.woff"), __webpack_require__.b);
var ___CSS_LOADER_EXPORT___ = _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
var ___CSS_LOADER_URL_REPLACEMENT_0___ = _css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_0___);
// Module
___CSS_LOADER_EXPORT___.push([module.id, `@font-face {
  font-family: "AzureDevOpsMDL2Assets";
  src: url(${___CSS_LOADER_URL_REPLACEMENT_0___}) format("woff");
}
.fabric-icon {
  align-self: center;
  display: inline-flex;
  font-family: "AzureDevOpsMDL2Assets";
  -webkit-font-smoothing: antialiased;
}
.fabric-icon.small {
  font-size: 0.75rem;
  line-height: 0.75rem;
}
.fabric-icon.medium {
  font-size: 1rem;
  line-height: 1rem;
}
.fabric-icon.large {
  font-size: 1.5rem;
  line-height: 1.5rem;
}

/**
 * Adjustments to specific icon placements based on their default layout.
 */
.ms-Icon--FabricFolder,
.ms-Icon--FabricFolderFill {
  transform: translateY(1px);
}

.ms-Icon--Tag {
  transform: translateY(1px);
}

/**
 * Your use of the content in the files referenced here is subject to the terms of the license at https://aka.ms/fabric-assets-license
 */
.ms-Icon--WindowsLogo:before {
  font-family: "AzureDevOpsMDL2Assets";
  content: "\\e782";
}

.ms-Icon--Preview:before {
  font-family: "AzureDevOpsMDL2Assets";
  content: "\\e8ff";
}

.ms-Icon--ChevronUpSmall:before {
  font-family: "AzureDevOpsMDL2Assets";
  content: "\\e96d";
}

.ms-Icon--ChevronDownSmall:before {
  font-family: "AzureDevOpsMDL2Assets";
  content: "\\e96e";
}

.ms-Icon--ChevronLeftSmall:before {
  font-family: "AzureDevOpsMDL2Assets";
  content: "\\e96f";
}

.ms-Icon--ChevronRightSmall:before {
  font-family: "AzureDevOpsMDL2Assets";
  content: "\\e970";
}

.ms-Icon--ChevronUpMed:before {
  font-family: "AzureDevOpsMDL2Assets";
  content: "\\e971";
}

.ms-Icon--ChevronDownMed:before {
  font-family: "AzureDevOpsMDL2Assets";
  content: "\\e972";
}

.ms-Icon--ChevronLeftMed:before {
  font-family: "AzureDevOpsMDL2Assets";
  content: "\\e973";
}

.ms-Icon--ChevronRightMed:before {
  font-family: "AzureDevOpsMDL2Assets";
  content: "\\e974";
}

.ms-Icon--PowerBILogo:before {
  font-family: "AzureDevOpsMDL2Assets";
  content: "\\ea1e";
}

.ms-Icon--AzureLogo:before {
  font-family: "AzureDevOpsMDL2Assets";
  content: "\\eb6a";
}

.ms-Icon--OfficeLogo:before {
  font-family: "AzureDevOpsMDL2Assets";
  content: "\\eb6e";
}

.ms-Icon--SkypeLogo:before {
  font-family: "AzureDevOpsMDL2Assets";
  content: "\\eb6f";
}

.ms-Icon--VisualStudioLogo:before {
  font-family: "AzureDevOpsMDL2Assets";
  content: "\\ec22";
}

.ms-Icon--MicrosoftLogo:before {
  font-family: "AzureDevOpsMDL2Assets";
  content: "\\ec6a";
}

.ms-Icon--YammerLogo:before {
  font-family: "AzureDevOpsMDL2Assets";
  content: "\\ed19";
}

.ms-Icon--AADLogo:before {
  font-family: "AzureDevOpsMDL2Assets";
  content: "\\ed68";
}

.ms-Icon--AccessLogo:before {
  font-family: "AzureDevOpsMDL2Assets";
  content: "\\ed69";
}

.ms-Icon--Dynamics365Logo:before {
  font-family: "AzureDevOpsMDL2Assets";
  content: "\\edcc";
}

.ms-Icon--OfflineOneDriveParachute:before {
  font-family: "AzureDevOpsMDL2Assets";
  content: "\\eec8";
}

.ms-Icon--OfflineOneDriveParachuteDisabled:before {
  font-family: "AzureDevOpsMDL2Assets";
  content: "\\eec9";
}

.ms-Icon--ViewAll2:before {
  font-family: "AzureDevOpsMDL2Assets";
  content: "\\ef56";
}

.ms-Icon--ReceiptCheck:before {
  font-family: "AzureDevOpsMDL2Assets";
  content: "\\ef5b";
}

.ms-Icon--Lifesaver:before {
  font-family: "AzureDevOpsMDL2Assets";
  content: "\\ef62";
}

.ms-Icon--ExcelDocument:before {
  font-family: "AzureDevOpsMDL2Assets";
  content: "\\ef73";
}

.ms-Icon--SkypeCircleCheck:before {
  font-family: "AzureDevOpsMDL2Assets";
  content: "\\ef7d";
}

.ms-Icon--SkypeCircleMinus:before {
  font-family: "AzureDevOpsMDL2Assets";
  content: "\\ef7f";
}

.ms-Icon--SkypeMinus:before {
  font-family: "AzureDevOpsMDL2Assets";
  content: "\\ef82";
}

.ms-Icon--ConnectContacts:before {
  font-family: "AzureDevOpsMDL2Assets";
  content: "\\efd4";
}

.ms-Icon--GiftboxOpen:before {
  font-family: "AzureDevOpsMDL2Assets";
  content: "\\f133";
}

.ms-Icon--StatusCircleCheckmark:before {
  font-family: "AzureDevOpsMDL2Assets";
  content: "\\f13e";
}

.ms-Icon--ProgressRingDots:before {
  font-family: "AzureDevOpsMDL2Assets";
  content: "\\f16a";
}

.ms-Icon--WordLogo:before {
  font-family: "AzureDevOpsMDL2Assets";
  content: "\\f1e3";
}

.ms-Icon--ExcelLogo:before {
  font-family: "AzureDevOpsMDL2Assets";
  content: "\\f1e5";
}

.ms-Icon--OneNoteLogo:before {
  font-family: "AzureDevOpsMDL2Assets";
  content: "\\f1e7";
}

.ms-Icon--OutlookLogo:before {
  font-family: "AzureDevOpsMDL2Assets";
  content: "\\f1e9";
}

.ms-Icon--PowerPointLogo:before {
  font-family: "AzureDevOpsMDL2Assets";
  content: "\\f1eb";
}

.ms-Icon--TriggerUser:before {
  font-family: "AzureDevOpsMDL2Assets";
  content: "\\f24b";
}

.ms-Icon--Build:before {
  font-family: "AzureDevOpsMDL2Assets";
  content: "\\f28f";
}

.ms-Icon--BranchCommit:before {
  font-family: "AzureDevOpsMDL2Assets";
  content: "\\f293";
}

.ms-Icon--BranchShelveset:before {
  font-family: "AzureDevOpsMDL2Assets";
  content: "\\f298";
}

.ms-Icon--Deploy:before {
  font-family: "AzureDevOpsMDL2Assets";
  content: "\\f29d";
}

.ms-Icon--VisioLogo:before {
  font-family: "AzureDevOpsMDL2Assets";
  content: "\\f2a7";
}

.ms-Icon--TaskGroup:before {
  font-family: "AzureDevOpsMDL2Assets";
  content: "\\f2ae";
}

.ms-Icon--AutoFillTemplate:before {
  font-family: "AzureDevOpsMDL2Assets";
  content: "\\f313";
}

.ms-Icon--ParachuteSolid:before {
  font-family: "AzureDevOpsMDL2Assets";
  content: "\\f352";
}

.ms-Icon--ReviewRequestSolid:before {
  font-family: "AzureDevOpsMDL2Assets";
  content: "\\f356";
}

.ms-Icon--ReviewResponseSolid:before {
  font-family: "AzureDevOpsMDL2Assets";
  content: "\\f358";
}

.ms-Icon--FeedbackResponseSolid:before {
  font-family: "AzureDevOpsMDL2Assets";
  content: "\\f35b";
}

.ms-Icon--EngineeringGroup:before {
  font-family: "AzureDevOpsMDL2Assets";
  content: "\\f362";
}

.ms-Icon--VSTSLogo:before {
  font-family: "AzureDevOpsMDL2Assets";
  content: "\\f381";
}

.ms-Icon--TestStep:before {
  font-family: "AzureDevOpsMDL2Assets";
  content: "\\f3ac";
}

.ms-Icon--TestParameter:before {
  font-family: "AzureDevOpsMDL2Assets";
  content: "\\f3ad";
}

.ms-Icon--TestSuite:before {
  font-family: "AzureDevOpsMDL2Assets";
  content: "\\f3ae";
}

.ms-Icon--TestCase:before {
  font-family: "AzureDevOpsMDL2Assets";
  content: "\\f3af";
}

.ms-Icon--AzureKeyVault:before {
  font-family: "AzureDevOpsMDL2Assets";
  content: "\\f3b4";
}

.ms-Icon--CRMCustomerInsightsApp:before {
  font-family: "AzureDevOpsMDL2Assets";
  content: "\\f3c8";
}

.ms-Icon--DefectSolid:before {
  font-family: "AzureDevOpsMDL2Assets";
  content: "\\f449";
}

.ms-Icon--LadybugSolid:before {
  font-family: "AzureDevOpsMDL2Assets";
  content: "\\f44a";
}

.ms-Icon--NugetLogo:before {
  font-family: "AzureDevOpsMDL2Assets";
  content: "\\f44c";
}

.ms-Icon--TFVCLogo:before {
  font-family: "AzureDevOpsMDL2Assets";
  content: "\\f44d";
}

.ms-Icon--ProjectLogo32:before {
  font-family: "AzureDevOpsMDL2Assets";
  content: "\\f47e";
}

.ms-Icon--FontColorSwatch:before {
  font-family: "AzureDevOpsMDL2Assets";
  content: "\\f4ed";
}

.ms-Icon--BitbucketLogo32:before {
  font-family: "AzureDevOpsMDL2Assets";
  content: "\\f5d2";
}

.ms-Icon--GradleLogo32:before {
  font-family: "AzureDevOpsMDL2Assets";
  content: "\\f5d4";
}

.ms-Icon--GitLogo:before {
  font-family: "AzureDevOpsMDL2Assets";
  content: "\\f65d" !important;
}

.ms-Icon--GitHubLogo:before {
  font-family: "AzureDevOpsMDL2Assets";
  content: "\\f65e";
}

.ms-Icon--ApacheMavenLogo:before {
  font-family: "AzureDevOpsMDL2Assets";
  content: "\\f65f";
}

.ms-Icon--NPMLogo:before {
  font-family: "AzureDevOpsMDL2Assets";
  content: "\\f660";
}

.ms-Icon--GitFork:before {
  font-family: "AzureDevOpsMDL2Assets";
  content: "\\f661";
}

.ms-Icon--SVNLogo:before {
  font-family: "AzureDevOpsMDL2Assets";
  content: "\\f662";
}

.ms-Icon--JenkinsLogo:before {
  font-family: "AzureDevOpsMDL2Assets";
  content: "\\f663";
}

.ms-Icon--ExternalGit:before {
  font-family: "AzureDevOpsMDL2Assets";
  content: "\\f665";
}

.ms-Icon--QuadColumn:before {
  font-family: "AzureDevOpsMDL2Assets";
  content: "\\f66f";
}

.ms-Icon--AuthenticatorApp:before {
  font-family: "AzureDevOpsMDL2Assets";
  content: "\\f6b1";
}

.ms-Icon--ButtonControl:before {
  font-family: "AzureDevOpsMDL2Assets";
  content: "\\f6c0";
}

.ms-Icon--UserGauge:before {
  font-family: "AzureDevOpsMDL2Assets";
  content: "\\f6ed";
}

.ms-Icon--BulletedListText:before {
  font-family: "AzureDevOpsMDL2Assets";
  content: "\\f792";
}

.ms-Icon--BulletedListBullet:before {
  font-family: "AzureDevOpsMDL2Assets";
  content: "\\f793";
}

.ms-Icon--NumberedListText:before {
  font-family: "AzureDevOpsMDL2Assets";
  content: "\\f796";
}

.ms-Icon--NumberedListNumber:before {
  font-family: "AzureDevOpsMDL2Assets";
  content: "\\f797";
}

.ms-Icon--RemoveLinkChain:before {
  font-family: "AzureDevOpsMDL2Assets";
  content: "\\f79a";
}

.ms-Icon--RemoveLinkX:before {
  font-family: "AzureDevOpsMDL2Assets";
  content: "\\f79b";
}

.ms-Icon--FabricTextHighlight:before {
  font-family: "AzureDevOpsMDL2Assets";
  content: "\\f79c";
}

.ms-Icon--ClearFormattingA:before {
  font-family: "AzureDevOpsMDL2Assets";
  content: "\\f79d";
}

.ms-Icon--ClearFormattingEraser:before {
  font-family: "AzureDevOpsMDL2Assets";
  content: "\\f79e";
}

.ms-Icon--Photo2Fill:before {
  font-family: "AzureDevOpsMDL2Assets";
  content: "\\f79f";
}

.ms-Icon--IncreaseIndentText:before {
  font-family: "AzureDevOpsMDL2Assets";
  content: "\\f7a0";
}

.ms-Icon--IncreaseIndentArrow:before {
  font-family: "AzureDevOpsMDL2Assets";
  content: "\\f7a1";
}

.ms-Icon--DecreaseIndentText:before {
  font-family: "AzureDevOpsMDL2Assets";
  content: "\\f7a2";
}

.ms-Icon--DecreaseIndentArrow:before {
  font-family: "AzureDevOpsMDL2Assets";
  content: "\\f7a3";
}

.ms-Icon--CheckListText:before {
  font-family: "AzureDevOpsMDL2Assets";
  content: "\\f7a8";
}

.ms-Icon--CheckListCheck:before {
  font-family: "AzureDevOpsMDL2Assets";
  content: "\\f7a9";
}

.ms-Icon--ReleaseGateCheck:before {
  font-family: "AzureDevOpsMDL2Assets";
  content: "\\f7bf";
}

.ms-Icon--ReleaseGateError:before {
  font-family: "AzureDevOpsMDL2Assets";
  content: "\\f7c0";
}

.ms-Icon--SkypeCircleSlash:before {
  font-family: "AzureDevOpsMDL2Assets";
  content: "\\f825";
}

.ms-Icon--PythonLogoBlue:before {
  font-family: "AzureDevOpsMDL2Assets";
  content: "\\f84d";
}

.ms-Icon--PythonLogoYellow:before {
  font-family: "AzureDevOpsMDL2Assets";
  content: "\\f84e";
}

.ms-Icon--RustLanguageLogo:before {
  font-family: "AzureDevOpsMDL2Assets";
  content: "\\f84f";
}

.ms-Icon--RubyGemsLogo:before {
  font-family: "AzureDevOpsMDL2Assets";
  content: "\\f850";
}

.ms-Icon--DecreaseIndentLegacy:before {
  font-family: "AzureDevOpsMDL2Assets";
  content: "\\e290";
}

.ms-Icon--IncreaseIndentLegacy:before {
  font-family: "AzureDevOpsMDL2Assets";
  content: "\\e291";
}

.ms-Icon--ImageDiff:before {
  font-family: "AzureDevOpsMDL2Assets";
  content: "\\f30b";
}

.ms-Icon--GitGraph:before {
  font-family: "AzureDevOpsMDL2Assets";
  content: "\\f2ca";
}

.ms-Icon--WordDocument:before {
  font-family: "AzureDevOpsMDL2Assets";
  content: "\\ef71";
}

.ms-Icon--PowerPointDocument:before {
  font-family: "AzureDevOpsMDL2Assets";
  content: "\\ef72";
}

.ms-Icon--PowerShell:before {
  font-family: "AzureDevOpsMDL2Assets";
  content: "\\f1fd";
}

.ms-Icon--FileSQL:before {
  font-family: "AzureDevOpsMDL2Assets";
  content: "\\f2e7";
}

.ms-Icon--FileASPX:before {
  font-family: "AzureDevOpsMDL2Assets";
  content: "\\f2e9";
}

.ms-Icon--FileSass:before {
  font-family: "AzureDevOpsMDL2Assets";
  content: "\\f2eb";
}

.ms-Icon--FileLess:before {
  font-family: "AzureDevOpsMDL2Assets";
  content: "\\f2ec";
}

.ms-Icon--CSharpLanguage:before {
  font-family: "AzureDevOpsMDL2Assets";
  content: "\\f2ef";
}

.ms-Icon--CPlusPlusLanguage:before {
  font-family: "AzureDevOpsMDL2Assets";
  content: "\\f2f3";
}

.ms-Icon--RowsChild:before {
  font-family: "AzureDevOpsMDL2Assets";
  content: "\\f29c";
}

.ms-Icon--FileTypeSolution:before {
  font-family: "AzureDevOpsMDL2Assets";
  content: "\\f387";
}

.ms-Icon--FileYML:before {
  font-family: "AzureDevOpsMDL2Assets";
  content: "\\f5da";
}

.ms-Icon--GripperResize:before {
  font-family: "AzureDevOpsMDL2Assets";
  content: "\\e788";
}

.ms-Icon--UngroupList:before {
  font-family: "AzureDevOpsMDL2Assets";
  content: "\\e61c";
}

.ms-Icon--BugWarning:before {
  font-family: "AzureDevOpsMDL2Assets";
  content: "\\e357";
}
`, ""]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./node_modules/azure-devops-ui/Components/Icon/FluentIcons.css":
/*!************************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./node_modules/azure-devops-ui/Components/Icon/FluentIcons.css ***!
  \************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../css-loader/dist/runtime/noSourceMaps.js */ "./node_modules/css-loader/dist/runtime/noSourceMaps.js");
/* harmony import */ var _css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../css-loader/dist/runtime/getUrl.js */ "./node_modules/css-loader/dist/runtime/getUrl.js");
/* harmony import */ var _css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2__);
// Imports



var ___CSS_LOADER_URL_IMPORT_0___ = new URL(/* asset import */ __webpack_require__(/*! ./fonts/fluent-filled-v1.1.293.woff2 */ "./node_modules/azure-devops-ui/Components/Icon/fonts/fluent-filled-v1.1.293.woff2"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_1___ = new URL(/* asset import */ __webpack_require__(/*! ./fonts/fluent-regular-v1.1.293.woff2 */ "./node_modules/azure-devops-ui/Components/Icon/fonts/fluent-regular-v1.1.293.woff2"), __webpack_require__.b);
var ___CSS_LOADER_EXPORT___ = _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
var ___CSS_LOADER_URL_REPLACEMENT_0___ = _css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_0___);
var ___CSS_LOADER_URL_REPLACEMENT_1___ = _css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_1___);
// Module
___CSS_LOADER_EXPORT___.push([module.id, `@font-face {
  font-family: "FluentFilled";
  src: url(${___CSS_LOADER_URL_REPLACEMENT_0___}) format("woff2");
}
@font-face {
  font-family: "FluentRegular";
  src: url(${___CSS_LOADER_URL_REPLACEMENT_1___}) format("woff2");
}
span.fluent-icons-enabled {
  display: inline-flex;
}

.fluent-icons-enabled {
  /**
  * Adjustments to specific icon placements based on their default layout.
  */
  /**
  * Your use of the content in the files referenced here is subject to the terms of the license at https://aka.ms/fabric-assets-license
  */
}
.fluent-icons-enabled .fabric-icon {
  align-self: center;
  display: inline-flex;
  -webkit-font-smoothing: antialiased;
}
.fluent-icons-enabled .fabric-icon.small {
  font-size: 0.75rem;
  line-height: 0.75rem;
}
.fluent-icons-enabled .fabric-icon.medium {
  font-size: 1rem;
  line-height: 1rem;
}
.fluent-icons-enabled .fabric-icon.large {
  font-size: 1.5rem;
  line-height: 1.5rem;
}
.fluent-icons-enabled .fabric-icon.bolt-breadcrumb-item-icon {
  font-size: 1rem;
}
.fluent-icons-enabled .fabric-icon.bolt-tab-icon {
  font-size: 1rem;
  line-height: 1rem;
}
.fluent-icons-enabled .fabric-icon:not(.bowtie-icon) {
  font-family: "FluentRegular";
}
.fluent-icons-enabled .bolt-menuitem-cell-icon .fabric-icon {
  font-size: 1rem;
}
.fluent-icons-enabled .ms-Icon--FabricFolder,
.fluent-icons-enabled .ms-Icon--FabricFolderFill {
  transform: translateY(1px);
}
.fluent-icons-enabled .ms-Icon--Tag {
  transform: translateY(1px);
}
.fluent-icons-enabled .ms-Icon--Insights:before {
  font-family: "FluentRegular";
  content: "\\f4d9";
}
.fluent-icons-enabled .ms-Icon--GlobalNavButton:before {
  font-family: "FluentRegular";
  content: "\\e85f";
}
.fluent-icons-enabled .ms-Icon--Airplane:before {
  font-family: "FluentRegular";
  content: "\\f068d";
}
.fluent-icons-enabled .ms-Icon--ChevronDown:before {
  font-family: "FluentRegular";
  content: "\\f2a2";
}
.fluent-icons-enabled .ms-Icon--ChevronUp:before {
  font-family: "FluentRegular";
  content: "\\f2b5";
}
.fluent-icons-enabled .ms-Icon--Edit:before {
  font-family: "FluentRegular";
  content: "\\f3dc";
}
.fluent-icons-enabled .ms-Icon--Add:before,
.fluent-icons-enabled .ms-Icon--CalculatorAddition:before {
  font-family: "FluentRegular";
  content: "\\f108";
}
.fluent-icons-enabled .ms-Icon--Cancel:before {
  font-family: "FluentRegular";
  content: "\\f368";
}
.fluent-icons-enabled .ms-Icon--More:before {
  font-family: "FluentRegular";
  content: "\\e823";
}
.fluent-icons-enabled .ms-Icon--Settings:before {
  font-family: "FluentRegular";
  content: "\\f6a8";
}
.fluent-icons-enabled .ms-Icon--Video:before {
  font-family: "FluentRegular";
  content: "\\f84b";
}
.fluent-icons-enabled .ms-Icon--Mail:before {
  font-family: "FluentRegular";
  content: "\\e7a1";
}
.fluent-icons-enabled .ms-Icon--People:before {
  font-family: "FluentRegular";
  content: "\\f5a7";
}
.fluent-icons-enabled .ms-Icon--Phone:before {
  font-family: "FluentRegular";
  content: "\\e26f";
}
.fluent-icons-enabled .ms-Icon--Pin:before,
.fluent-icons-enabled .ms-Icon--Pinned:before {
  font-family: "FluentRegular";
  content: "\\f600";
}
.fluent-icons-enabled .ms-Icon--Shop:before {
  font-family: "FluentRegular";
  content: "\\f76e";
}
.fluent-icons-enabled .ms-Icon--Link:before {
  font-family: "FluentRegular";
  content: "\\f4e3";
}
.fluent-icons-enabled .ms-Icon--Filter:before {
  font-family: "FluentRegular";
  content: "\\e60a";
}
.fluent-icons-enabled .ms-Icon--Zoom:before,
.fluent-icons-enabled .ms-Icon--Search:before {
  font-family: "FluentRegular";
  content: "\\ea7c";
}
.fluent-icons-enabled .ms-Icon--ZoomOut:before {
  font-family: "FluentRegular";
  content: "\\ee8f";
}
.fluent-icons-enabled .ms-Icon--Attach:before {
  font-family: "FluentRegular";
  content: "\\f1a8";
}
.fluent-icons-enabled .ms-Icon--Send:before {
  font-family: "FluentRegular";
  content: "\\ea8e";
}
.fluent-icons-enabled .ms-Icon--FavoriteList:before {
  font-family: "FluentRegular";
  content: "\\ebb1";
}
.fluent-icons-enabled .ms-Icon--Forward:before {
  font-family: "FluentRegular";
  content: "\\e0eb";
}
.fluent-icons-enabled .ms-Icon--Back:before {
  font-family: "FluentRegular";
  content: "\\f184";
}
.fluent-icons-enabled .ms-Icon--Refresh:before {
  font-family: "FluentRegular";
  content: "\\e0aa";
}
.fluent-icons-enabled .ms-Icon--Share:before {
  font-family: "FluentRegular";
  content: "\\eaa6";
}
.fluent-icons-enabled .ms-Icon--Lock:before {
  font-family: "FluentRegular";
  content: "\\e78e";
}
.fluent-icons-enabled .ms-Icon--BlockedSite:before {
  font-family: "FluentRegular";
  content: "\\eacc";
}
.fluent-icons-enabled .ms-Icon--ReportHacked:before {
  font-family: "FluentRegular";
  content: "\\eace";
}
.fluent-icons-enabled .ms-Icon--EMI:before {
  font-family: "FluentRegular";
  content: "\\e20a";
}
.fluent-icons-enabled .ms-Icon--Blocked:before {
  font-family: "FluentRegular";
  content: "\\f618";
}
.fluent-icons-enabled .ms-Icon--FavoriteStar:before {
  font-family: "FluentRegular";
  content: "\\f70e";
}
.fluent-icons-enabled .ms-Icon--FavoriteStarFill:before {
  font-family: "FluentFilled";
  content: "\\f717";
}
.fluent-icons-enabled .ms-Icon--ReadingMode.medium {
  font-size: 1.25rem;
  line-height: 1rem;
}
.fluent-icons-enabled .ms-Icon--ReadingMode:before {
  font-family: "FluentRegular";
  content: "\\f65b";
}
.fluent-icons-enabled .ms-Icon--Remove:before {
  font-family: "FluentRegular";
  content: "\\ebcf";
}
.fluent-icons-enabled .ms-Icon--CheckboxComposite:before {
  font-family: "FluentRegular";
  content: "\\f27c";
}
.fluent-icons-enabled .ms-Icon--CheckboxCompositeReversed:before {
  font-family: "FluentFilled";
  content: "\\f27c";
}
.fluent-icons-enabled .ms-Icon--CheckMark:before,
.fluent-icons-enabled .ms-Icon--Accept:before,
.fluent-icons-enabled .ms-Icon--ReceiptCheck:before,
.fluent-icons-enabled .ms-Icon--StatusCircleCheckmark:before {
  font-family: "FluentRegular";
  content: "\\e305";
}
.fluent-icons-enabled .ms-Icon--BackToWindow:before {
  font-family: "FluentRegular";
  content: "\\f164";
}
.fluent-icons-enabled .ms-Icon--FullScreen:before {
  font-family: "FluentRegular";
  content: "\\f15e";
}
.fluent-icons-enabled .ms-Icon--Print:before {
  font-family: "FluentRegular";
  content: "\\f6fa";
}
.fluent-icons-enabled .ms-Icon--Up:before {
  font-family: "FluentRegular";
  content: "\\f1b4";
}
.fluent-icons-enabled .ms-Icon--Down:before {
  font-family: "FluentRegular";
  content: "\\f147";
}
.fluent-icons-enabled .ms-Icon--OEM:before {
  font-family: "FluentRegular";
  content: "\\f132";
}
.fluent-icons-enabled .ms-Icon--Delete:before {
  font-family: "FluentRegular";
  content: "\\e47b";
}
.fluent-icons-enabled .ms-Icon--Save:before {
  font-family: "FluentRegular";
  content: "\\ea43";
}
.fluent-icons-enabled .ms-Icon--Fingerprint:before {
  font-family: "FluentRegular";
  content: "\\f03f9";
}
.fluent-icons-enabled .ms-Icon--Flashlight:before {
  font-family: "FluentRegular";
  content: "\\e628";
}
.fluent-icons-enabled .ms-Icon--Sad:before {
  font-family: "FluentRegular";
  content: "\\e5d4";
}
.fluent-icons-enabled .ms-Icon--MultiSelect:before {
  font-family: "FluentRegular";
  content: "\\e84b";
}
.fluent-icons-enabled .ms-Icon--KeyboardClassic:before {
  font-family: "FluentRegular";
  content: "\\e74a";
}
.fluent-icons-enabled .ms-Icon--Play:before {
  font-family: "FluentRegular";
  content: "\\e990";
}
.fluent-icons-enabled .ms-Icon--Pause:before {
  font-family: "FluentRegular";
  content: "\\f5a0";
}
.fluent-icons-enabled .ms-Icon--ChevronLeft:before {
  font-family: "FluentRegular";
  content: "\\f2a9";
}
.fluent-icons-enabled .ms-Icon--ChevronRight:before {
  font-family: "FluentRegular";
  content: "\\f2af";
}
.fluent-icons-enabled .ms-Icon--Emoji2:before {
  font-family: "FluentRegular";
  content: "\\f3df";
}
.fluent-icons-enabled .ms-Icon--SearchAndApps.medium {
  font-size: 1.25rem;
  line-height: 1rem;
}
.fluent-icons-enabled .ms-Icon--SearchAndApps:before {
  font-family: "FluentRegular";
  content: "\\f773";
}
.fluent-icons-enabled .ms-Icon--Globe:before {
  font-family: "FluentRegular";
  content: "\\e6b1";
}
.fluent-icons-enabled .ms-Icon--ContactInfo:before {
  font-family: "FluentRegular";
  content: "\\f6d6";
}
.fluent-icons-enabled .ms-Icon--Unpin:before {
  font-family: "FluentRegular";
  content: "\\e985";
}
.fluent-icons-enabled .ms-Icon--Contact:before {
  font-family: "FluentRegular";
  content: "\\f5bc";
}
.fluent-icons-enabled .ms-Icon--Paste:before {
  font-family: "FluentRegular";
  content: "\\e35a";
}
.fluent-icons-enabled .ms-Icon--Error:before {
  font-family: "FluentRegular";
  content: "\\f3f0";
}
.fluent-icons-enabled .ms-Icon--Unlock:before {
  font-family: "FluentRegular";
  content: "\\e794";
}
.fluent-icons-enabled .ms-Icon--Calendar:before {
  font-family: "FluentRegular";
  content: "\\e24d";
}
.fluent-icons-enabled .ms-Icon--Megaphone:before {
  font-family: "FluentRegular";
  content: "\\f536";
}
.fluent-icons-enabled .ms-Icon--Color:before {
  font-family: "FluentRegular";
  content: "\\e3bc";
}
.fluent-icons-enabled .ms-Icon--SaveAs.medium {
  font-size: 1.25rem;
  line-height: 1rem;
}
.fluent-icons-enabled .ms-Icon--SaveAs:before {
  font-family: "FluentRegular";
  content: "\\ea48";
}
.fluent-icons-enabled .ms-Icon--Undo:before {
  font-family: "FluentRegular";
  content: "\\e126";
}
.fluent-icons-enabled .ms-Icon--RedEye:before {
  font-family: "FluentRegular";
  content: "\\e5f1";
}
.fluent-icons-enabled .ms-Icon--Warning:before {
  font-family: "FluentRegular";
  content: "\\f868";
}
.fluent-icons-enabled .ms-Icon--ShoppingCart:before {
  font-family: "FluentRegular";
  content: "\\e2ab";
}
.fluent-icons-enabled .ms-Icon--Flag:before {
  font-family: "FluentRegular";
  content: "\\f40a";
}
.fluent-icons-enabled .ms-Icon--Page:before {
  font-family: "FluentRegular";
  content: "\\e4d7";
}
.fluent-icons-enabled .ms-Icon--Car:before {
  font-family: "FluentRegular";
  content: "\\f847";
}
.fluent-icons-enabled .ms-Icon--EatDrink:before {
  font-family: "FluentRegular";
  content: "\\e666";
}
.fluent-icons-enabled .ms-Icon--Home:before {
  font-family: "FluentRegular";
  content: "\\e70f";
}
.fluent-icons-enabled .ms-Icon--SwitcherStartEnd:before {
  font-family: "FluentRegular";
  content: "\\f1ab";
}
.fluent-icons-enabled .ms-Icon--IncidentTriangle:before {
  font-family: "FluentFilled";
  content: "\\f880";
}
.fluent-icons-enabled .ms-Icon--History:before,
.fluent-icons-enabled .ms-Icon--FullHistory:before {
  font-family: "FluentRegular";
  content: "\\e705";
}
.fluent-icons-enabled .ms-Icon--Work:before {
  font-family: "FluentRegular";
  content: "\\e1e9";
}
.fluent-icons-enabled .ms-Icon--LocationDot.medium {
  font-size: 1.25rem;
  line-height: 1rem;
}
.fluent-icons-enabled .ms-Icon--LocationDot:before {
  font-family: "FluentFilled";
  content: "\\e353";
}
.fluent-icons-enabled .ms-Icon--Dictionary:before {
  font-family: "FluentRegular";
  content: "\\f0388";
}
.fluent-icons-enabled .ms-Icon--RevToggleKey:before {
  font-family: "FluentRegular";
  content: "\\f8dd";
}
.fluent-icons-enabled .ms-Icon--View:before {
  font-family: "FluentRegular";
  content: "\\e5f1";
}
.fluent-icons-enabled .ms-Icon--Previous:before {
  font-family: "FluentRegular";
  content: "\\f627";
}
.fluent-icons-enabled .ms-Icon--Next:before {
  font-family: "FluentRegular";
  content: "\\f568";
}
.fluent-icons-enabled .ms-Icon--Clear:before {
  font-family: "FluentRegular";
  content: "\\f368";
}
.fluent-icons-enabled .ms-Icon--Download:before {
  font-family: "FluentRegular";
  content: "\\f14f";
}
.fluent-icons-enabled .ms-Icon--Help:before {
  font-family: "FluentRegular";
  content: "\\f637";
}
.fluent-icons-enabled .ms-Icon--Upload:before {
  font-family: "FluentRegular";
  content: "\\e131";
}
.fluent-icons-enabled .ms-Icon--Emoji:before {
  font-family: "FluentRegular";
  content: "\\e5d1";
}
.fluent-icons-enabled .ms-Icon--ClosePane:before {
  font-family: "FluentRegular";
  content: "\\e8c1";
}
.fluent-icons-enabled .ms-Icon--OpenPane.medium {
  font-size: 1.25rem;
  line-height: 1rem;
}
.fluent-icons-enabled .ms-Icon--OpenPane:before {
  font-family: "FluentRegular";
  content: "\\e8c4";
}
.fluent-icons-enabled .ms-Icon--PreviewLink:before {
  font-family: "FluentRegular";
  content: "\\f624";
}
.fluent-icons-enabled .ms-Icon--ZoomIn:before {
  font-family: "FluentRegular";
  content: "\\ee8e";
}
.fluent-icons-enabled .ms-Icon--ViewAll:before {
  font-family: "FluentRegular";
  content: "\\e19b";
}
.fluent-icons-enabled .ms-Icon--Switch:before {
  font-family: "FluentRegular";
  content: "\\f02a4";
}
.fluent-icons-enabled .ms-Icon--Rename:before {
  font-family: "FluentRegular";
  content: "\\f668";
}
.fluent-icons-enabled .ms-Icon--Import:before {
  font-family: "FluentRegular";
  content: "\\f0384";
}
.fluent-icons-enabled .ms-Icon--Folder:before {
  font-family: "FluentRegular";
  content: "\\e643";
}
.fluent-icons-enabled .ms-Icon--ChromeClose:before {
  font-family: "FluentRegular";
  content: "\\f368";
}
.fluent-icons-enabled .ms-Icon--ShowResults.medium {
  font-size: 1.25rem;
  line-height: 1rem;
}
.fluent-icons-enabled .ms-Icon--ShowResults:before {
  font-family: "FluentRegular";
  content: "\\e064";
}
.fluent-icons-enabled .ms-Icon--PaymentCard:before {
  font-family: "FluentRegular";
  content: "\\e8d4";
}
.fluent-icons-enabled .ms-Icon--Copy:before {
  font-family: "FluentRegular";
  content: "\\f32a";
}
.fluent-icons-enabled .ms-Icon--FontColor:before {
  font-family: "FluentRegular";
  content: "\\ecf5";
}
.fluent-icons-enabled .ms-Icon--Permissions:before {
  font-family: "FluentRegular";
  content: "\\e740";
}
.fluent-icons-enabled .ms-Icon--Italic:before {
  font-family: "FluentRegular";
  content: "\\ed36";
}
.fluent-icons-enabled .ms-Icon--Underline:before {
  font-family: "FluentRegular";
  content: "\\ed67";
}
.fluent-icons-enabled .ms-Icon--Bold:before {
  font-family: "FluentRegular";
  content: "\\ecd2";
}
.fluent-icons-enabled .ms-Icon--Like:before {
  font-family: "FluentRegular";
  content: "\\ed78";
}
.fluent-icons-enabled .ms-Icon--FontSize:before {
  font-family: "FluentRegular";
  content: "\\ed10";
}
.fluent-icons-enabled .ms-Icon--Tag:before {
  font-family: "FluentRegular";
  content: "\\ec70";
}
.fluent-icons-enabled .ms-Icon--Library:before {
  font-family: "FluentRegular";
  content: "\\e761";
}
.fluent-icons-enabled .ms-Icon--BlockContact:before {
  font-family: "FluentRegular";
  content: "\\e942";
}
.fluent-icons-enabled .ms-Icon--AddFriend:before {
  font-family: "FluentRegular";
  content: "\\e921";
}
.fluent-icons-enabled .ms-Icon--BulletedList:before {
  font-family: "FluentRegular";
  content: "\\ecd8";
}
.fluent-icons-enabled .ms-Icon--Chat:before {
  font-family: "FluentRegular";
  content: "\\e2e4";
}
.fluent-icons-enabled .ms-Icon--Group:before {
  font-family: "FluentRegular";
  content: "\\f5b7";
}
.fluent-icons-enabled .ms-Icon--World:before {
  font-family: "FluentRegular";
  content: "\\f3d9";
}
.fluent-icons-enabled .ms-Icon--Comment:before {
  font-family: "FluentRegular";
  content: "\\f2fe";
}
.fluent-icons-enabled .ms-Icon--Repair:before {
  font-family: "FluentRegular";
  content: "\\ee85";
}
.fluent-icons-enabled .ms-Icon--Accounts:before {
  font-family: "FluentRegular";
  content: "\\f53b";
}
.fluent-icons-enabled .ms-Icon--Stopwatch:before {
  font-family: "FluentRegular";
  content: "\\ed86";
}
.fluent-icons-enabled .ms-Icon--Clock:before,
.fluent-icons-enabled .ms-Icon--Recent:before {
  font-family: "FluentRegular";
  content: "\\f2dc";
}
.fluent-icons-enabled .ms-Icon--WorldClock:before {
  font-family: "FluentRegular";
  content: "\\e6b4";
}
.fluent-icons-enabled .ms-Icon--Completed:before {
  font-family: "FluentRegular";
  content: "\\f297";
}
.fluent-icons-enabled .ms-Icon--MiniExpand:before {
  font-family: "FluentRegular";
  content: "\\f44f";
}
.fluent-icons-enabled .ms-Icon--Code:before {
  font-family: "FluentRegular";
  content: "\\ee90";
}
.fluent-icons-enabled .ms-Icon--Streaming.medium {
  font-size: 1.25rem;
  line-height: 1rem;
}
.fluent-icons-enabled .ms-Icon--Streaming:before {
  font-family: "FluentRegular";
  content: "\\f4f0";
}
.fluent-icons-enabled .ms-Icon--LightningBolt:before {
  font-family: "FluentRegular";
  content: "\\e617";
}
.fluent-icons-enabled .ms-Icon--Info:before {
  font-family: "FluentRegular";
  content: "\\f4a2";
}
.fluent-icons-enabled .ms-Icon--MediaStorageTower:before {
  font-family: "FluentRegular";
  content: "\\f1dd";
}
.fluent-icons-enabled .ms-Icon--PC1:before {
  font-family: "FluentRegular";
  content: "\\f358";
}
.fluent-icons-enabled .ms-Icon--Reply:before {
  font-family: "FluentRegular";
  content: "\\f176";
}
.fluent-icons-enabled .ms-Icon--Chart:before {
  font-family: "FluentRegular";
  content: "\\e45c";
}
.fluent-icons-enabled .ms-Icon--LockSolid:before {
  font-family: "FluentFilled";
  content: "\\e79c";
}
.fluent-icons-enabled .ms-Icon--DashKey:before {
  font-family: "FluentRegular";
  content: "\\ebcf";
}
.fluent-icons-enabled .ms-Icon--CloudWeather:before {
  font-family: "FluentRegular";
  content: "\\e382";
}
.fluent-icons-enabled .ms-Icon--Cloudy.medium {
  font-size: 1.25rem;
  line-height: 1rem;
}
.fluent-icons-enabled .ms-Icon--Cloudy:before {
  font-family: "FluentRegular";
  content: "\\f86e";
}
.fluent-icons-enabled .ms-Icon--Unknown:before {
  font-family: "FluentRegular";
  content: "\\f63c";
}
.fluent-icons-enabled .ms-Icon--SortLines:before {
  font-family: "FluentRegular";
  content: "\\f1ad";
}
.fluent-icons-enabled .ms-Icon--Ribbon:before {
  font-family: "FluentRegular";
  content: "\\ea26";
}
.fluent-icons-enabled .ms-Icon--Assign:before {
  font-family: "FluentRegular";
  content: "\\e344";
}
.fluent-icons-enabled .ms-Icon--FlowChart:before {
  font-family: "FluentRegular";
  content: "\\f04c8";
}
.fluent-icons-enabled .ms-Icon--CheckList.medium {
  font-size: 1.25rem;
  line-height: 1rem;
}
.fluent-icons-enabled .ms-Icon--CheckList:before {
  font-family: "FluentRegular";
  content: "\\ec92";
}
.fluent-icons-enabled .ms-Icon--Diagnostic.medium {
  font-size: 1.25rem;
  line-height: 1rem;
}
.fluent-icons-enabled .ms-Icon--Diagnostic:before {
  font-family: "FluentRegular";
  content: "\\e9e0";
}
.fluent-icons-enabled .ms-Icon--Equalizer:before {
  font-family: "FluentRegular";
  content: "\\f586";
}
.fluent-icons-enabled .ms-Icon--Processing.medium {
  font-size: 1.25rem;
  line-height: 1rem;
}
.fluent-icons-enabled .ms-Icon--Processing:before {
  font-family: "FluentRegular";
  content: "\\f013c";
}
.fluent-icons-enabled .ms-Icon--WorkFlow:before {
  font-family: "FluentRegular";
  content: "\\f0462";
}
.fluent-icons-enabled .ms-Icon--Diamond2Solid:before {
  font-family: "FluentFilled";
  content: "\\e4c6";
}
.fluent-icons-enabled .ms-Icon--Teamwork:before {
  font-family: "FluentRegular";
  content: "\\f5b7";
}
.fluent-icons-enabled .ms-Icon--PeopleAdd:before {
  font-family: "FluentRegular";
  content: "\\f5ab";
}
.fluent-icons-enabled .ms-Icon--DateTime2:before {
  font-family: "FluentRegular";
  content: "\\e243";
}
.fluent-icons-enabled .ms-Icon--Shield:before {
  font-family: "FluentRegular";
  content: "\\eac3";
}
.fluent-icons-enabled .ms-Icon--PageAdd:before {
  font-family: "FluentRegular";
  content: "\\e4da";
}
.fluent-icons-enabled .ms-Icon--NumberedList:before {
  font-family: "FluentRegular";
  content: "\\ed3a";
}
.fluent-icons-enabled .ms-Icon--MusicInCollectionFill:before {
  font-family: "FluentFilled";
  content: "\\e861";
}
.fluent-icons-enabled .ms-Icon--List:before {
  font-family: "FluentRegular";
  content: "\\e779";
}
.fluent-icons-enabled .ms-Icon--ErrorBadge:before {
  font-family: "FluentRegular";
  content: "\\f36c";
}
.fluent-icons-enabled .ms-Icon--CircleRing:before {
  font-family: "FluentRegular";
  content: "\\f2ba";
}
.fluent-icons-enabled .ms-Icon--CircleFill:before {
  font-family: "FluentFilled";
  content: "\\f2ba";
}
.fluent-icons-enabled .ms-Icon--Lightbulb:before {
  font-family: "FluentRegular";
  content: "\\f4d5";
}
.fluent-icons-enabled .ms-Icon--Puzzle:before {
  font-family: "FluentRegular";
  content: "\\e9e8";
}
.fluent-icons-enabled .ms-Icon--Ringer:before {
  font-family: "FluentRegular";
  content: "\\e014";
}
.fluent-icons-enabled .ms-Icon--PDF:before {
  font-family: "FluentRegular";
  content: "\\f3ab";
}
.fluent-icons-enabled .ms-Icon--StockDown:before {
  font-family: "FluentFilled";
  content: "\\edaa";
}
.fluent-icons-enabled .ms-Icon--StockUp:before {
  font-family: "FluentFilled";
  content: "\\eda5";
}
.fluent-icons-enabled .ms-Icon--MSNVideos:before {
  font-family: "FluentRegular";
  content: "\\e993";
}
.fluent-icons-enabled .ms-Icon--Soccer:before {
  font-family: "FluentRegular";
  content: "\\eb70";
}
.fluent-icons-enabled .ms-Icon--CollegeFootball.medium,
.fluent-icons-enabled .ms-Icon--ProFootball.medium {
  font-size: 1.25rem;
  line-height: 1rem;
}
.fluent-icons-enabled .ms-Icon--CollegeFootball:before,
.fluent-icons-enabled .ms-Icon--ProFootball:before {
  font-family: "FluentRegular";
  content: "\\eb68";
}
.fluent-icons-enabled .ms-Icon--Snowflake.medium {
  font-size: 1.25rem;
  line-height: 1rem;
}
.fluent-icons-enabled .ms-Icon--Snowflake:before {
  font-family: "FluentRegular";
  content: "\\f89b";
}
.fluent-icons-enabled .ms-Icon--AirplaneSolid:before {
  font-family: "FluentFilled";
  content: "\\f0708";
}
.fluent-icons-enabled .ms-Icon--Heart:before {
  font-family: "FluentRegular";
  content: "\\f478";
}
.fluent-icons-enabled .ms-Icon--HeartFill:before {
  font-family: "FluentFilled";
  content: "\\f47c";
}
.fluent-icons-enabled .ms-Icon--StatusErrorFull:before {
  font-family: "FluentFilled";
  content: "\\f36c";
}
.fluent-icons-enabled .ms-Icon--Certificate:before {
  font-family: "FluentRegular";
  content: "\\e539";
}
.fluent-icons-enabled .ms-Icon--Rewind:before {
  font-family: "FluentRegular";
  content: "\\ea1d";
}
.fluent-icons-enabled .ms-Icon--Photo2:before {
  font-family: "FluentRegular";
  content: "\\ef61";
}
.fluent-icons-enabled .ms-Icon--OpenSource:before {
  font-family: "FluentRegular";
  content: "\\e1dd";
}
.fluent-icons-enabled .ms-Icon--Project:before {
  font-family: "FluentRegular";
  content: "\\f07e7";
}
.fluent-icons-enabled .ms-Icon--CloudDownload:before {
  font-family: "FluentRegular";
  content: "\\e38c";
}
.fluent-icons-enabled .ms-Icon--CityNext:before {
  font-family: "FluentRegular";
  content: "\\f2c1";
}
.fluent-icons-enabled .ms-Icon--Documentation:before {
  font-family: "FluentRegular";
  content: "\\e51f";
}
.fluent-icons-enabled .ms-Icon--Giftbox:before {
  font-family: "FluentRegular";
  content: "\\e69b";
}
.fluent-icons-enabled .ms-Icon--CompletedSolid:before {
  font-family: "FluentFilled";
  content: "\\f297";
}
.fluent-icons-enabled .ms-Icon--CloudUpload:before {
  font-family: "FluentRegular";
  content: "\\e392";
}
.fluent-icons-enabled .ms-Icon--ScrollUpDown:before {
  font-family: "FluentRegular";
  content: "\\e32e";
}
.fluent-icons-enabled .ms-Icon--Tiles:before {
  font-family: "FluentRegular";
  content: "\\f071";
}
.fluent-icons-enabled .ms-Icon--Org:before {
  font-family: "FluentRegular";
  content: "\\e89b";
}
.fluent-icons-enabled .ms-Icon--PartyLeader:before {
  font-family: "FluentRegular";
  content: "\\eca7";
}
.fluent-icons-enabled .ms-Icon--AppIconDefault:before {
  font-family: "FluentRegular";
  content: "\\f132";
}
.fluent-icons-enabled .ms-Icon--POI:before {
  font-family: "FluentRegular";
  content: "\\f4f7";
}
.fluent-icons-enabled .ms-Icon--AddTo:before,
.fluent-icons-enabled .ms-Icon--CirclePlus:before {
  font-family: "FluentRegular";
  content: "\\e005";
}
.fluent-icons-enabled .ms-Icon--RadioBtnOff:before {
  font-family: "FluentRegular";
  content: "\\f153";
}
.fluent-icons-enabled .ms-Icon--RadioBtnOn:before {
  font-family: "FluentFilled";
  content: "\\f153";
}
.fluent-icons-enabled .ms-Icon--ExploreContent:before {
  font-family: "FluentRegular";
  content: "\\e008";
}
.fluent-icons-enabled .ms-Icon--Embed:before {
  font-family: "FluentRegular";
  content: "\\f339";
}
.fluent-icons-enabled .ms-Icon--Product:before {
  font-family: "FluentRegular";
  content: "\\e1ba";
}
.fluent-icons-enabled .ms-Icon--ProgressLoopOuter:before {
  font-family: "FluentRegular";
  content: "\\f0110";
}
.fluent-icons-enabled .ms-Icon--Blocked2:before {
  font-family: "FluentRegular";
  content: "\\f7a7";
}
.fluent-icons-enabled .ms-Icon--FangBody:before {
  font-family: "FluentRegular";
  content: "\\e04f";
}
.fluent-icons-enabled .ms-Icon--ChatInviteFriend:before {
  font-family: "FluentRegular";
  content: "\\ef51";
}
.fluent-icons-enabled .ms-Icon--Feedback:before {
  font-family: "FluentRegular";
  content: "\\e930";
}
.fluent-icons-enabled .ms-Icon--SecurityGroup.medium {
  font-size: 1.25rem;
  line-height: 1rem;
}
.fluent-icons-enabled .ms-Icon--SecurityGroup:before {
  font-family: "FluentRegular";
  content: "\\e8ff";
}
.fluent-icons-enabled .ms-Icon--Table:before {
  font-family: "FluentRegular";
  content: "\\ebf4";
}
.fluent-icons-enabled .ms-Icon--Waffle.medium,
.fluent-icons-enabled .ms-Icon--WaffleOffice365.medium {
  font-size: 1.25rem;
  line-height: 1rem;
}
.fluent-icons-enabled .ms-Icon--Waffle:before,
.fluent-icons-enabled .ms-Icon--WaffleOffice365:before {
  font-family: "FluentRegular";
  content: "\\e6c4";
}
.fluent-icons-enabled .ms-Icon--RemoveLink:before {
  font-family: "FluentRegular";
  content: "\\e772";
}
.fluent-icons-enabled .ms-Icon--EditNote.medium {
  font-size: 1.25rem;
  line-height: 1rem;
}
.fluent-icons-enabled .ms-Icon--EditNote:before {
  font-family: "FluentRegular";
  content: "\\e86e";
}
.fluent-icons-enabled .ms-Icon--DoubleChevronUp:before {
  font-family: "FluentRegular";
  content: "\\e32c";
}
.fluent-icons-enabled .ms-Icon--DoubleChevronLeft:before {
  font-family: "FluentRegular";
  content: "\\f285";
}
.fluent-icons-enabled .ms-Icon--DoubleChevronRight:before {
  font-family: "FluentRegular";
  content: "\\f2a7";
}
.fluent-icons-enabled .ms-Icon--Ascending:before {
  font-family: "FluentRegular";
  content: "\\ed5a";
}
.fluent-icons-enabled .ms-Icon--Descending:before {
  font-family: "FluentRegular";
  content: "\\ed5c";
}
.fluent-icons-enabled .ms-Icon--TextField:before {
  font-family: "FluentRegular";
  content: "\\f7de";
}
.fluent-icons-enabled .ms-Icon--ClearFormatting:before {
  font-family: "FluentRegular";
  content: "\\ecf3";
}
.fluent-icons-enabled .ms-Icon--Strikethrough:before {
  font-family: "FluentRegular";
  content: "\\ed5e";
}
.fluent-icons-enabled .ms-Icon--Export:before {
  font-family: "FluentRegular";
  content: "\\e0c6";
}
.fluent-icons-enabled .ms-Icon--ExportMirrored:before {
  font-family: "FluentRegular";
  content: "\\e0c9";
}
.fluent-icons-enabled .ms-Icon--DoubleChevronDown:before {
  font-family: "FluentRegular";
  content: "\\f284";
}
.fluent-icons-enabled .ms-Icon--ReplyMirrored:before {
  font-family: "FluentRegular";
  content: "\\f8e1";
}
.fluent-icons-enabled .ms-Icon--AddGroup.medium {
  font-size: 1.25rem;
  line-height: 1rem;
}
.fluent-icons-enabled .ms-Icon--AddGroup:before {
  font-family: "FluentRegular";
  content: "\\e911";
}
.fluent-icons-enabled .ms-Icon--SortUp:before {
  font-family: "FluentRegular";
  content: "\\f1b3";
}
.fluent-icons-enabled .ms-Icon--SortDown:before {
  font-family: "FluentRegular";
  content: "\\f1ac";
}
.fluent-icons-enabled .ms-Icon--AwayStatus:before {
  font-family: "FluentFilled";
  content: "\\f2dc";
}
.fluent-icons-enabled .ms-Icon--MyMoviesTV:before {
  font-family: "FluentRegular";
  content: "\\e82b";
}
.fluent-icons-enabled .ms-Icon--CPU:before {
  font-family: "FluentRegular";
  content: "\\f0d9";
}
.fluent-icons-enabled .ms-Icon--ContactCard:before {
  font-family: "FluentRegular";
  content: "\\f362";
}
.fluent-icons-enabled .ms-Icon--CustomList:before {
  font-family: "FluentRegular";
  content: "\\f01ad";
}
.fluent-icons-enabled .ms-Icon--TriangleSolidUp12:before {
  font-family: "FluentFilled";
  content: "\\eda4";
}
.fluent-icons-enabled .ms-Icon--TriangleSolidDown12:before {
  font-family: "FluentFilled";
  content: "\\eda9";
}
.fluent-icons-enabled .ms-Icon--TriangleSolidRight12:before {
  font-family: "FluentFilled";
  content: "\\edb3";
}
.fluent-icons-enabled .ms-Icon--TriangleRight12:before {
  font-family: "FluentRegular";
  content: "\\edb3";
}
.fluent-icons-enabled .ms-Icon--DocumentSet:before {
  font-family: "FluentRegular";
  content: "\\f0022";
}
.fluent-icons-enabled .ms-Icon--ArrowDownRightMirrored8:before {
  font-family: "FluentRegular";
  content: "\\f8d1";
}
.fluent-icons-enabled .ms-Icon--PlayerSettings:before {
  font-family: "FluentRegular";
  content: "\\e945";
}
.fluent-icons-enabled .ms-Icon--EditStyle:before {
  font-family: "FluentRegular";
  content: "\\f03a3";
}
.fluent-icons-enabled .ms-Icon--DocumentSearch:before {
  font-family: "FluentRegular";
  content: "\\e541";
}
.fluent-icons-enabled .ms-Icon--Starburst:before {
  font-family: "FluentRegular";
  content: "\\f283";
}
.fluent-icons-enabled .ms-Icon--SkypeCircleMinus:before {
  font-family: "FluentFilled";
  content: "\\f7bf";
}
.fluent-icons-enabled .ms-Icon--Hide2:before {
  font-family: "FluentRegular";
  content: "\\e5f4";
}
.fluent-icons-enabled .ms-Icon--EyeShow:before {
  font-family: "FluentRegular";
  content: "\\e5f8";
}
.fluent-icons-enabled .ms-Icon--EyeHide:before {
  font-family: "FluentRegular";
  content: "\\e5fb";
}
.fluent-icons-enabled .ms-Icon--ClearFilter:before {
  font-family: "FluentRegular";
  content: "\\e60c";
}
.fluent-icons-enabled .ms-Icon--TimeEntry.medium {
  font-size: 1.25rem;
  line-height: 1rem;
}
.fluent-icons-enabled .ms-Icon--TimeEntry:before {
  font-family: "FluentRegular";
  content: "\\e559";
}
.fluent-icons-enabled .ms-Icon--PageEdit:before {
  font-family: "FluentRegular";
  content: "\\f385";
}
.fluent-icons-enabled .ms-Icon--PageArrowRight:before {
  font-family: "FluentRegular";
  content: "\\f084b";
}
.fluent-icons-enabled .ms-Icon--Database:before {
  font-family: "FluentRegular";
  content: "\\f0d7";
}
.fluent-icons-enabled .ms-Icon--ConnectContacts:before {
  font-family: "FluentRegular";
  content: "\\f0708";
}
.fluent-icons-enabled .ms-Icon--ActivateOrders:before {
  font-family: "FluentRegular";
  content: "\\f011c";
}
.fluent-icons-enabled .ms-Icon--ZipFolder:before {
  font-family: "FluentRegular";
  content: "\\f434";
}
.fluent-icons-enabled .ms-Icon--Configuration:before {
  font-family: "FluentRegular";
  content: "\\f422";
}
.fluent-icons-enabled .ms-Icon--TextDocument:before {
  font-family: "FluentRegular";
  content: "\\eeed";
}
.fluent-icons-enabled .ms-Icon--Script:before {
  font-family: "FluentRegular";
  content: "\\f1db";
}
.fluent-icons-enabled .ms-Icon--ActivityFeed:before {
  font-family: "FluentRegular";
  content: "\\f8a9";
}
.fluent-icons-enabled .ms-Icon--CaretSolidDown:before {
  font-family: "FluentFilled";
  content: "\\f260";
}
.fluent-icons-enabled .ms-Icon--FabricFolder:before {
  font-family: "FluentRegular";
  content: "\\e643";
}
.fluent-icons-enabled .ms-Icon--FabricFolderFill:before {
  font-family: "FluentFilled";
  content: "\\e650";
}
.fluent-icons-enabled .ms-Icon--FabricNewFolder:before {
  font-family: "FluentRegular";
  content: "\\e645";
}
.fluent-icons-enabled .ms-Icon--PublishContent:before {
  font-family: "FluentRegular";
  content: "\\f0383";
}
.fluent-icons-enabled .ms-Icon--CannedChat:before {
  font-family: "FluentRegular";
  content: "\\e2e4";
}
.fluent-icons-enabled .ms-Icon--SettingsApp:before {
  font-family: "FluentRegular";
  content: "\\f129";
}
.fluent-icons-enabled .ms-Icon--FolderHorizontal:before {
  font-family: "FluentRegular";
  content: "\\e643";
}
.fluent-icons-enabled .ms-Icon--StatusCircleInner:before {
  font-family: "FluentFilled";
  content: "\\f2ba";
}
.fluent-icons-enabled .ms-Icon--StatusCircleRing:before {
  font-family: "FluentRegular";
  content: "\\f2ba";
}
.fluent-icons-enabled .ms-Icon--StatusCircleErrorX:before {
  font-family: "FluentRegular";
  content: "\\f368";
}
.fluent-icons-enabled .ms-Icon--InfoSolid:before {
  font-family: "FluentFilled";
  content: "\\f4a9";
}
.fluent-icons-enabled .ms-Icon--ScheduleEventAction:before {
  font-family: "FluentRegular";
  content: "\\e23f";
}
.fluent-icons-enabled .ms-Icon--FlameSolid:before {
  font-family: "FluentFilled";
  content: "\\ef68";
}
.fluent-icons-enabled .ms-Icon--ServerProcesses.medium {
  font-size: 1.25rem;
  line-height: 1rem;
}
.fluent-icons-enabled .ms-Icon--ServerProcesses:before {
  font-family: "FluentRegular";
  content: "\\ee7d";
}
.fluent-icons-enabled .ms-Icon--Server:before {
  font-family: "FluentRegular";
  content: "\\f1dc";
}
.fluent-icons-enabled .ms-Icon--SaveAll:before {
  font-family: "FluentRegular";
  content: "\\f1d2";
}
.fluent-icons-enabled .ms-Icon--TwoKeys:before {
  font-family: "FluentRegular";
  content: "\\f0274";
}
.fluent-icons-enabled .ms-Icon--GridViewSmall:before {
  font-family: "FluentRegular";
  content: "\\ebf4";
}
.fluent-icons-enabled .ms-Icon--ViewDashboard:before {
  font-family: "FluentRegular";
  content: "\\f02fd";
}
.fluent-icons-enabled .ms-Icon--ViewList:before {
  font-family: "FluentRegular";
  content: "\\f0191";
}
.fluent-icons-enabled .ms-Icon--ViewListGroup:before {
  font-family: "FluentRegular";
  content: "\\f0193";
}
.fluent-icons-enabled .ms-Icon--ViewListTree:before {
  font-family: "FluentRegular";
  content: "\\f0195";
}
.fluent-icons-enabled .ms-Icon--TriggerAuto.medium {
  font-size: 1.25rem;
  line-height: 1rem;
}
.fluent-icons-enabled .ms-Icon--TriggerAuto:before {
  font-family: "FluentRegular";
  content: "\\e626";
}
.fluent-icons-enabled .ms-Icon--StackedBarChart.medium {
  font-size: 1.25rem;
  line-height: 1rem;
}
.fluent-icons-enabled .ms-Icon--StackedBarChart:before {
  font-family: "FluentRegular";
  content: "\\f39b";
}
.fluent-icons-enabled .ms-Icon--StackedLineChart.medium {
  font-size: 1.25rem;
  line-height: 1rem;
}
.fluent-icons-enabled .ms-Icon--StackedLineChart:before {
  font-family: "FluentRegular";
  content: "\\e453";
}
.fluent-icons-enabled .ms-Icon--BuildQueue:before {
  font-family: "FluentRegular";
  content: "\\f78d";
}
.fluent-icons-enabled .ms-Icon--BuildQueueNew:before.medium {
  font-size: 1.25rem;
  line-height: 1rem;
}
.fluent-icons-enabled .ms-Icon--BuildQueueNew:before:before {
  font-family: "FluentRegular";
  content: "\\f0144";
}
.fluent-icons-enabled .ms-Icon--UserFollowed:before {
  font-family: "FluentRegular";
  content: "\\f5c9";
}
.fluent-icons-enabled .ms-Icon--Clicked.medium {
  font-size: 1.25rem;
  line-height: 1rem;
}
.fluent-icons-enabled .ms-Icon--Clicked:before {
  font-family: "FluentRegular";
  content: "\\e445";
}
.fluent-icons-enabled .ms-Icon--Signin:before {
  font-family: "FluentRegular";
  content: "\\e933";
}
.fluent-icons-enabled .ms-Icon--CloneToDesktop:before {
  font-family: "FluentRegular";
  content: "\\f0117";
}
.fluent-icons-enabled .ms-Icon--BranchFork2:before {
  font-family: "FluentRegular";
  content: "\\e1dd";
}
.fluent-icons-enabled .ms-Icon--BranchMerge:before {
  font-family: "FluentRegular";
  content: "\\e1dd";
}
.fluent-icons-enabled .ms-Icon--BranchPullRequest:before {
  font-family: "FluentRegular";
  content: "\\f038a";
}
.fluent-icons-enabled .ms-Icon--BranchRequestClosed:before {
  font-family: "FluentRegular";
  content: "\\f0808";
}
.fluent-icons-enabled .ms-Icon--BranchRequestDraft:before {
  font-family: "FluentRegular";
  content: "\\f080a";
}
.fluent-icons-enabled .ms-Icon--BranchMerged:before {
  font-family: "FluentRegular";
  content: "\\f0a6";
}
.fluent-icons-enabled .ms-Icon--RawSource:before {
  font-family: "FluentRegular";
  content: "\\ef64";
}
.fluent-icons-enabled .ms-Icon--RowsGroup:before {
  font-family: "FluentRegular";
  content: "\\e6ca";
}
.fluent-icons-enabled .ms-Icon--ServerEnviroment:before {
  font-family: "FluentRegular";
  content: "\\f1dd";
}
.fluent-icons-enabled .ms-Icon--Backlog:before,
.fluent-icons-enabled .ms-Icon--BacklogBoard:before {
  font-family: "FluentRegular";
  content: "\\f018c";
}
.fluent-icons-enabled .ms-Icon--TeamFavorite:before {
  font-family: "FluentRegular";
  content: "\\f0f6";
}
.fluent-icons-enabled .ms-Icon--CommentAdd:before {
  font-family: "FluentRegular";
  content: "\\e3d7";
}
.fluent-icons-enabled .ms-Icon--ShopServer.medium {
  font-size: 1.25rem;
  line-height: 1rem;
}
.fluent-icons-enabled .ms-Icon--ShopServer:before {
  font-family: "FluentRegular";
  content: "\\f715";
}
.fluent-icons-enabled .ms-Icon--QueryList:before {
  font-family: "FluentRegular";
  content: "\\f012c";
}
.fluent-icons-enabled .ms-Icon--StreamingOff.medium {
  font-size: 1.25rem;
  line-height: 1rem;
}
.fluent-icons-enabled .ms-Icon--StreamingOff:before {
  font-family: "FluentRegular";
  content: "\\e7aa";
}
.fluent-icons-enabled .ms-Icon--MoreVertical:before {
  font-family: "FluentRegular";
  content: "\\e829";
}
.fluent-icons-enabled .ms-Icon--ArrowTallUpRight:before,
.fluent-icons-enabled .ms-Icon--ArrowUpRight8:before {
  font-family: "FluentRegular";
  content: "\\f8eb";
}
.fluent-icons-enabled .ms-Icon--RingerOff:before {
  font-family: "FluentRegular";
  content: "\\f117";
}
.fluent-icons-enabled .ms-Icon--PlayResume.medium {
  font-size: 1.25rem;
  line-height: 1rem;
}
.fluent-icons-enabled .ms-Icon--PlayResume:before {
  font-family: "FluentRegular";
  content: "\\ee1a";
}
.fluent-icons-enabled .ms-Icon--Repo:before,
.fluent-icons-enabled .ms-Icon--Package:before {
  font-family: "FluentRegular";
  content: "\\f8cc";
}
.fluent-icons-enabled .ms-Icon--FolderQuery:before {
  font-family: "FluentRegular";
  content: "\\f0215";
}
.fluent-icons-enabled .ms-Icon--FolderList:before {
  font-family: "FluentRegular";
  content: "\\f0128";
}
.fluent-icons-enabled .ms-Icon--CirclePauseSolid:before {
  font-family: "FluentFilled";
  content: "\\f07e9";
}
.fluent-icons-enabled .ms-Icon--CirclePause:before {
  font-family: "FluentRegular";
  content: "\\f076c";
}
.fluent-icons-enabled .ms-Icon--MSNVideosSolid:before {
  font-family: "FluentFilled";
  content: "\\e9a5";
}
.fluent-icons-enabled .ms-Icon--CircleStopSolid:before {
  font-family: "FluentFilled";
  content: "\\f771";
}
.fluent-icons-enabled .ms-Icon--CircleStop:before {
  font-family: "FluentRegular";
  content: "\\f759";
}
.fluent-icons-enabled .ms-Icon--NavigateForward:before {
  font-family: "FluentRegular";
  content: "\\e09a";
}
.fluent-icons-enabled .ms-Icon--FileTemplate:before {
  font-family: "FluentRegular";
  content: "\\e543";
}
.fluent-icons-enabled .ms-Icon--FileJAVA:before {
  font-family: "FluentRegular";
  content: "\\f0177";
}
.fluent-icons-enabled .ms-Icon--FileCSS:before {
  font-family: "FluentRegular";
  content: "\\f0dc";
}
.fluent-icons-enabled .ms-Icon--FileSass:before {
  font-family: "FluentRegular";
  content: "\\f017d";
}
.fluent-icons-enabled .ms-Icon--FileHTML.medium,
.fluent-icons-enabled .ms-Icon--FileCode.medium {
  font-size: 1.25rem;
  line-height: 1rem;
}
.fluent-icons-enabled .ms-Icon--FileHTML:before,
.fluent-icons-enabled .ms-Icon--FileCode:before {
  font-family: "FluentRegular";
  content: "\\e4f3";
}
.fluent-icons-enabled .ms-Icon--JavaScriptLanguage:before {
  font-family: "FluentRegular";
  content: "\\f0d0";
}
.fluent-icons-enabled .ms-Icon--CSharpLanguage:before {
  font-family: "FluentRegular";
  content: "\\f0c5";
}
.fluent-icons-enabled .ms-Icon--TypeScriptLanguage:before {
  font-family: "FluentRegular";
  content: "\\f0d0";
}
.fluent-icons-enabled .ms-Icon--MarkDownLanguage.medium {
  font-size: 1.25rem;
  line-height: 1rem;
}
.fluent-icons-enabled .ms-Icon--MarkDownLanguage:before {
  font-family: "FluentRegular";
  content: "\\e7db";
}
.fluent-icons-enabled .ms-Icon--PlugConnected:before {
  font-family: "FluentRegular";
  content: "\\f0393";
}
.fluent-icons-enabled .ms-Icon--PlugDisconnected:before {
  font-family: "FluentRegular";
  content: "\\f0394";
}
.fluent-icons-enabled .ms-Icon--UnlockSolid:before {
  font-family: "FluentFilled";
  content: "\\e7a2";
}
.fluent-icons-enabled .ms-Icon--Variable:before {
  font-family: "FluentRegular";
  content: "\\e7e1";
}
.fluent-icons-enabled .ms-Icon--FileBug:before {
  font-family: "FluentRegular";
  content: "\\f38a";
}
.fluent-icons-enabled .ms-Icon--FileImage:before {
  font-family: "FluentRegular";
  content: "\\f0175";
}
.fluent-icons-enabled .ms-Icon--WorkItem:before {
  font-family: "FluentRegular";
  content: "\\f7f3";
}
.fluent-icons-enabled .ms-Icon--TripleColumnEdit.medium {
  font-size: 1.25rem;
  line-height: 1rem;
}
.fluent-icons-enabled .ms-Icon--TripleColumnEdit:before {
  font-family: "FluentRegular";
  content: "\\e3cf";
}
.fluent-icons-enabled .ms-Icon--AlertSolid:before {
  font-family: "FluentFilled";
  content: "\\f3ef";
}
.fluent-icons-enabled .ms-Icon--MegaphoneSolid:before {
  font-family: "FluentFilled";
  content: "\\f540";
}
.fluent-icons-enabled .ms-Icon--TaskSolid:before {
  font-family: "FluentFilled";
  content: "\\f0bf";
}
.fluent-icons-enabled .ms-Icon--CrownSolid:before {
  font-family: "FluentFilled";
  content: "\\f06e";
}
.fluent-icons-enabled .ms-Icon--Trophy2Solid:before {
  font-family: "FluentFilled";
  content: "\\f84d";
}
.fluent-icons-enabled .ms-Icon--QuickNoteSolid:before {
  font-family: "FluentFilled";
  content: "\\f66d";
}
.fluent-icons-enabled .ms-Icon--ConstructionConeSolid:before {
  font-family: "FluentFilled";
  content: "\\ea39";
}
.fluent-icons-enabled .ms-Icon--PageListSolid:before {
  font-family: "FluentFilled";
  content: "\\f0018";
}
.fluent-icons-enabled .ms-Icon--StarburstSolid:before {
  font-family: "FluentFilled";
  content: "\\f283";
}
.fluent-icons-enabled .ms-Icon--ReadingModeSolid.medium {
  font-size: 1.25rem;
  line-height: 1rem;
}
.fluent-icons-enabled .ms-Icon--ReadingModeSolid:before {
  font-family: "FluentFilled";
  content: "\\f665";
}
.fluent-icons-enabled .ms-Icon--ShieldSolid:before {
  font-family: "FluentFilled";
  content: "\\eacc";
}
.fluent-icons-enabled .ms-Icon--GiftBoxSolid:before {
  font-family: "FluentFilled";
  content: "\\e6a8";
}
.fluent-icons-enabled .ms-Icon--RibbonSolid:before {
  font-family: "FluentFilled";
  content: "\\ea2e";
}
.fluent-icons-enabled .ms-Icon--FinancialSolid.medium {
  font-size: 1.25rem;
  line-height: 1rem;
}
.fluent-icons-enabled .ms-Icon--FinancialSolid:before {
  font-family: "FluentFilled";
  content: "\\e11c";
}
.fluent-icons-enabled .ms-Icon--HeadsetSolid:before {
  font-family: "FluentFilled";
  content: "\\e703";
}
.fluent-icons-enabled .ms-Icon--PermissionsSolid:before {
  font-family: "FluentFilled";
  content: "\\e74e";
}
.fluent-icons-enabled .ms-Icon--ParkingSolid:before {
  font-family: "FluentFilled";
  content: "\\f7e6";
}
.fluent-icons-enabled .ms-Icon--DiamondSolid:before {
  font-family: "FluentFilled";
  content: "\\f61c";
}
.fluent-icons-enabled .ms-Icon--AsteriskSolid:before {
  font-family: "FluentFilled";
  content: "\\f03ba";
}
.fluent-icons-enabled .ms-Icon--OfflineStorageSolid:before {
  font-family: "FluentFilled";
  content: "\\f0d8";
}
.fluent-icons-enabled .ms-Icon--BankSolid:before {
  font-family: "FluentFilled";
  content: "\\e220";
}
.fluent-icons-enabled .ms-Icon--DecisionSolid:before {
  font-family: "FluentFilled";
  content: "\\f0185";
}
.fluent-icons-enabled .ms-Icon--FiltersSolid:before {
  font-family: "FluentFilled";
  content: "\\f59b";
}
.fluent-icons-enabled .ms-Icon--ColorSolid:before {
  font-family: "FluentFilled";
  content: "\\e3d1";
}
.fluent-icons-enabled .ms-Icon--ReviewSolid:before {
  font-family: "FluentFilled";
  content: "\\f8c1";
}
.fluent-icons-enabled .ms-Icon--FeedbackRequestSolid.medium {
  font-size: 1.25rem;
  line-height: 1rem;
}
.fluent-icons-enabled .ms-Icon--FeedbackRequestSolid:before {
  font-family: "FluentFilled";
  content: "\\f220";
}
.fluent-icons-enabled .ms-Icon--NavigateExternalInline:before {
  font-family: "FluentRegular";
  content: "\\f581";
}
.fluent-icons-enabled .ms-Icon--PlanView:before {
  font-family: "FluentRegular";
  content: "\\e24d";
}
.fluent-icons-enabled .ms-Icon--ProjectCollection:before {
  font-family: "FluentRegular";
  content: "\\f0e7";
}
.fluent-icons-enabled .ms-Icon--ChevronUnfold10:before {
  font-family: "FluentRegular";
  content: "\\e32e";
}
.fluent-icons-enabled .ms-Icon--ChevronFold10:before {
  font-family: "FluentRegular";
  content: "\\f016b";
}
.fluent-icons-enabled .ms-Icon--TestBeaker:before {
  font-family: "FluentRegular";
  content: "\\f1d6";
}
.fluent-icons-enabled .ms-Icon--TestBeakerSolid:before {
  font-family: "FluentFilled";
  content: "\\f1d6";
}
.fluent-icons-enabled .ms-Icon--TestAutoSolid:before {
  font-family: "FluentRegular";
  content: "\\f0162";
}
.fluent-icons-enabled .ms-Icon--TestPlan:before {
  font-family: "FluentRegular";
  content: "\\f0179";
}
.fluent-icons-enabled .ms-Icon--Sprint:before {
  font-family: "FluentRegular";
  content: "\\f0160";
}
.fluent-icons-enabled .ms-Icon--TriggerApproval:before {
  font-family: "FluentRegular";
  content: "\\e61d";
}
.fluent-icons-enabled .ms-Icon--Rocket:before {
  font-family: "FluentRegular";
  content: "\\f676";
}
.fluent-icons-enabled .ms-Icon--LikeSolid:before {
  font-family: "FluentFilled";
  content: "\\ed78";
}
.fluent-icons-enabled .ms-Icon--FilterSolid:before {
  font-family: "FluentRegular";
  content: "\\e60a";
}
.fluent-icons-enabled .ms-Icon--Inbox:before {
  font-family: "FluentRegular";
  content: "\\f513";
}
.fluent-icons-enabled .ms-Icon--NotExecuted:before {
  font-family: "FluentRegular";
  content: "\\f0172";
}
.fluent-icons-enabled .ms-Icon--NotImpactedSolid:before {
  font-family: "FluentFilled";
  content: "\\f0186";
}
.fluent-icons-enabled .ms-Icon--IssueSolid:before {
  font-family: "FluentFilled";
  content: "\\f0bc";
}
.fluent-icons-enabled .ms-Icon--FontColorA:before {
  font-family: "FluentRegular";
  content: "\\ecf5";
}
.fluent-icons-enabled .ms-Icon--SemiboldWeight:before {
  font-family: "FluentRegular";
  content: "\\ecd2";
}
.fluent-icons-enabled .ms-Icon--ChartSeries:before {
  font-family: "FluentRegular";
  content: "\\f0174";
}
.fluent-icons-enabled .ms-Icon--AlignJustify.medium {
  font-size: 1.25rem;
  line-height: 1rem;
}
.fluent-icons-enabled .ms-Icon--AlignJustify:before {
  font-family: "FluentRegular";
  content: "\\f79d";
}
.fluent-icons-enabled .ms-Icon--BlockedSolid:before {
  font-family: "FluentFilled";
  content: "\\f70e";
}
.fluent-icons-enabled .ms-Icon--Prohibited:before {
  font-family: "FluentRegular";
  content: "\\f705";
}
.fluent-icons-enabled .ms-Icon--DownloadDocument:before {
  font-family: "FluentRegular";
  content: "\\e4df";
}
.fluent-icons-enabled .ms-Icon--WaitlistConfirm.medium {
  font-size: 1.25rem;
  line-height: 1rem;
}
.fluent-icons-enabled .ms-Icon--WaitlistConfirm:before {
  font-family: "FluentRegular";
  content: "\\ec9f";
}
.fluent-icons-enabled .ms-Icon--LaptopSecure:before {
  font-family: "FluentRegular";
  content: "\\f018f";
}
.fluent-icons-enabled .ms-Icon--EntryView.medium {
  font-size: 1.25rem;
  line-height: 1rem;
}
.fluent-icons-enabled .ms-Icon--EntryView:before {
  font-family: "FluentRegular";
  content: "\\e876";
}
.fluent-icons-enabled .ms-Icon--AccountManagement.medium {
  font-size: 1.25rem;
  line-height: 1rem;
}
.fluent-icons-enabled .ms-Icon--AccountManagement:before {
  font-family: "FluentRegular";
  content: "\\e920";
}
.fluent-icons-enabled .ms-Icon--ExploreData:before {
  font-family: "FluentRegular";
  content: "\\f0564";
}
.fluent-icons-enabled .ms-Icon--PasteAsCode:before {
  font-family: "FluentRegular";
  content: "\\f2cb";
}
.fluent-icons-enabled .ms-Icon--FileYML:before {
  font-family: "FluentRegular";
  content: "\\f017f";
}
.fluent-icons-enabled .ms-Icon--ClipboardSolid:before {
  font-family: "FluentFilled";
  content: "\\e342";
}
.fluent-icons-enabled .ms-Icon--AnalyticsView:before {
  font-family: "FluentRegular";
  content: "\\ee95";
}
.fluent-icons-enabled .ms-Icon--Trending12:before {
  font-family: "FluentRegular";
  content: "\\f196";
}
.fluent-icons-enabled .ms-Icon--CircleShapeSolid:before {
  font-family: "FluentFilled";
  content: "\\f2ba";
}
.fluent-icons-enabled .ms-Icon--DictionaryRemove:before {
  font-family: "FluentRegular";
  content: "\\f0165";
}
.fluent-icons-enabled .ms-Icon--UserRemove:before {
  font-family: "FluentRegular";
  content: "\\f5d0";
}
.fluent-icons-enabled .ms-Icon--OpenInNewTab:before {
  font-family: "FluentRegular";
  content: "\\f581";
}
.fluent-icons-enabled .ms-Icon--VerifiedBrandSolid:before {
  font-family: "FluentFilled";
  content: "\\f283";
}
.fluent-icons-enabled .ms-Icon--BacklogList:before {
  font-family: "FluentRegular";
  content: "\\f0197";
}
.fluent-icons-enabled .ms-Icon--PeopleSettings.medium {
  font-size: 1.25rem;
  line-height: 1rem;
}
.fluent-icons-enabled .ms-Icon--PeopleSettings:before {
  font-family: "FluentRegular";
  content: "\\f5b6";
}
.fluent-icons-enabled .ms-Icon--Blocked2Solid:before {
  font-family: "FluentFilled";
  content: "\\f7bf";
}
.fluent-icons-enabled .ms-Icon--NumberSymbol:before {
  font-family: "FluentRegular";
  content: "\\f57c";
}
.fluent-icons-enabled .ms-Icon--VerifiedBrand:before {
  font-family: "FluentRegular";
  content: "\\f283";
}
.fluent-icons-enabled .ms-Icon--ReleaseGate:before {
  font-family: "FluentRegular";
  content: "\\f015f";
}
.fluent-icons-enabled .ms-Icon--FabricTextHighlightComposite:before {
  font-family: "FluentRegular";
  content: "\\ecf5";
}
.fluent-icons-enabled .ms-Icon--AddReaction:before {
  font-family: "FluentRegular";
  content: "\\e5c7";
}
.fluent-icons-enabled .ms-Icon--SurveyQuestions:before {
  font-family: "FluentRegular";
  content: "\\e530";
}
.fluent-icons-enabled .ms-Icon--BranchCompare:before {
  font-family: "FluentRegular";
  content: "\\e1da";
}
.fluent-icons-enabled .ms-Icon--DiffInline:before {
  font-family: "FluentRegular";
  content: "\\f016e";
}
.fluent-icons-enabled .ms-Icon--DiffSideBySide.medium {
  font-size: 1.25rem;
  line-height: 1rem;
}
.fluent-icons-enabled .ms-Icon--DiffSideBySide:before {
  font-family: "FluentRegular";
  content: "\\e3cb";
}
.fluent-icons-enabled .ms-Icon--FilePDB.medium {
  font-size: 1.25rem;
  line-height: 1rem;
}
.fluent-icons-enabled .ms-Icon--FilePDB:before {
  font-family: "FluentRegular";
  content: "\\f2e5";
}
.fluent-icons-enabled .ms-Icon--VisualBasicLanguage:before {
  font-family: "FluentRegular";
  content: "\\f0d2";
}
.fluent-icons-enabled .ms-Icon--FSharpLanguage:before {
  font-family: "FluentRegular";
  content: "\\f0c7";
}
.fluent-icons-enabled .ms-Icon--PythonLanguage:before {
  font-family: "FluentRegular";
  content: "\\f0cb";
}
.fluent-icons-enabled .ms-Icon--CoffeeScript:before {
  font-family: "FluentRegular";
  content: "\\e585";
}
.fluent-icons-enabled .ms-Icon--SemanticZoom:before {
  font-family: "FluentRegular";
  content: "\\f014b";
}
.fluent-icons-enabled .ms-Icon--Camera:before {
  font-family: "FluentRegular";
  content: "\\e299";
}
.fluent-icons-enabled .ms-Icon--GripperDotsVertical:before {
  font-family: "FluentRegular";
  content: "\\e9f7";
}
.fluent-icons-enabled .ms-Icon--DockRight:before {
  font-family: "FluentRegular";
  content: "\\e8bc";
}
.fluent-icons-enabled .ms-Icon--FolderArrowRight:before {
  font-family: "FluentFilled";
  content: "\\e658";
}
`, ""]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./node_modules/azure-devops-ui/Components/Link/Link.css":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./node_modules/azure-devops-ui/Components/Link/Link.css ***!
  \*****************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../css-loader/dist/runtime/noSourceMaps.js */ "./node_modules/css-loader/dist/runtime/noSourceMaps.js");
/* harmony import */ var _css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, `.bolt-link {
  border-radius: 2px;
  color: rgba(0, 90, 158, 1);
  color: var(--communication-foreground,rgba(0, 90, 158, 1));
  cursor: pointer;
  outline: transparent;
  text-decoration: underline;
  transition: color 80ms cubic-bezier(0.165, 0.84, 0.44, 1), background 80ms linear;
}
.bolt-link:hover {
  color: rgba( 0, 69, 120 ,  1 );
  color: rgba( var(--palette-primary-shade-30,0, 69, 120) ,  1 );
}
.bolt-focus-visible .bolt-link:focus {
  animation: ms-focus-shadow-with-border-pulse 4s ease-in-out infinite;
  box-shadow: 0 0 0 3px rgba(0, 120, 212, 0.23), 0 0 0 1px rgba(0, 120, 212, 1);
  box-shadow: 0 0 0 3px var(--focus-pulse-max-color,rgba(0, 120, 212, 0.23)), 0 0 0 1px var(--focus-border-color,rgba(0, 120, 212, 1));
}
@media (forced-colors: active) {
  .bolt-focus-visible .bolt-link:focus {
    animation: none;
  }
}
.bolt-link.subtle {
  border-radius: 4px;
  color: inherit;
  padding: 3px 6px;
}
.bolt-link.subtle:hover {
  color: rgba(0, 90, 158, 1);
  color: var(--communication-foreground,rgba(0, 90, 158, 1));
  background-color: unset;
}
.bolt-link.disabled {
  cursor: default;
}
.bolt-link.underline {
  text-decoration: underline;
}

.bolt-focus-visible .bolt-link.subtle:focus {
  background-color: unset;
  color: rgba(0, 90, 158, 1);
  color: var(--communication-foreground,rgba(0, 90, 158, 1));
  outline: none;
}
.bolt-focus-visible .bolt-link:focus {
  text-decoration: none !important;
  color: rgba( 0, 69, 120 ,  1 );
  color: rgba( var(--palette-primary-shade-30,0, 69, 120) ,  1 );
}
@media (forced-colors: active) {
  .bolt-focus-visible .bolt-link:focus {
    outline: 1px solid highlight !important;
  }
}

.bolt-link.no-underline-link {
  text-decoration: none !important;
}
.bolt-link.no-underline-link:hover {
  background-color: rgba(0, 0, 0, 0.06);
  background-color: var(--palette-black-alpha-6,rgba(0, 0, 0, 0.06));
}
`, ""]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./node_modules/azure-devops-ui/Components/List/DropdownList.css":
/*!*************************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./node_modules/azure-devops-ui/Components/List/DropdownList.css ***!
  \*************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../css-loader/dist/runtime/noSourceMaps.js */ "./node_modules/css-loader/dist/runtime/noSourceMaps.js");
/* harmony import */ var _css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, `.bolt-table-container ul.bolt-list {
  color: rgba(0, 0, 0, .9);
  color: var(--text-primary-color,rgba(0, 0, 0, .9));
  cursor: default;
  margin: 0;
  user-select: none;
  -ms-user-select: none;
  -moz-user-select: none;
  -webkit-user-select: none;
}
.bolt-table-container ul.bolt-list .bolt-fixed-height-list-row {
  width: 100%;
}
.bolt-table-container ul.bolt-list .bolt-list-row {
  color: inherit;
  display: flex;
  align-items: baseline;
  outline: none;
  padding: 0 20px 0 0;
  text-decoration: none;
  transition: background 80ms linear;
}
body.ms-vss-web-vsts-theme-hc-dark .bolt-table-container ul.bolt-list .bolt-list-row {
  transition: none;
}
body.ms-vss-web-vsts-theme-hc-light .bolt-table-container ul.bolt-list .bolt-list-row {
  transition: none;
}
.bolt-table-container ul.bolt-list .bolt-list-row.bolt-list-box-multi-select-row {
  gap: 10px;
  padding: 0 20px 0 16px;
}
.bolt-table-container ul.bolt-list .bolt-list-row:hover:not(.bolt-list-box-header-row, .bolt-list-box-divider-row) {
  background-color: rgba(0, 0, 0, .02);
  background-color: var(--component-grid-row-hover-color,rgba(0, 0, 0, .02));
}
.bolt-table-container ul.bolt-list .bolt-list-row:hover:not(.bolt-list-box-header-row, .bolt-list-box-divider-row) .bolt-list-cell-content-reveal {
  opacity: 100;
}
@media (forced-colors: active) {
  .bolt-table-container ul.bolt-list .bolt-list-row:hover:not(.bolt-list-box-header-row, .bolt-list-box-divider-row) {
    background: Canvas;
    forced-color-adjust: none;
  }
  .bolt-table-container ul.bolt-list .bolt-list-row:hover:not(.bolt-list-box-header-row, .bolt-list-box-divider-row) td {
    forced-color-adjust: auto;
  }
}
body.ms-vss-web-vsts-theme-hc-dark .bolt-table-container ul.bolt-list .bolt-list-row:hover:not(.bolt-list-box-header-row, .bolt-list-box-divider-row):not(.bolt-menuitem-divider, .comment-item) {
  background: rgba(0, 120, 212, 1);
  background: var(--focus-border-color,rgba(0, 120, 212, 1));
  color: rgba(255, 255, 255, 1);
  color: var(--background-color,rgba(255, 255, 255, 1));
}
body.ms-vss-web-vsts-theme-hc-light .bolt-table-container ul.bolt-list .bolt-list-row:hover:not(.bolt-list-box-header-row, .bolt-list-box-divider-row):not(.bolt-menuitem-divider, .comment-item) {
  background: rgba(0, 120, 212, 1);
  background: var(--focus-border-color,rgba(0, 120, 212, 1));
  color: rgba(255, 255, 255, 1);
  color: var(--background-color,rgba(255, 255, 255, 1));
}
body.ms-vss-web-vsts-theme-hc-dark .bolt-table-container ul.bolt-list .bolt-list-row:hover:not(.bolt-list-box-header-row, .bolt-list-box-divider-row) .secondary-text {
  color: rgba(255, 255, 255, 1);
  color: var(--background-color,rgba(255, 255, 255, 1));
}
body.ms-vss-web-vsts-theme-hc-light .bolt-table-container ul.bolt-list .bolt-list-row:hover:not(.bolt-list-box-header-row, .bolt-list-box-divider-row) .secondary-text {
  color: rgba(255, 255, 255, 1);
  color: var(--background-color,rgba(255, 255, 255, 1));
}
body.ms-vss-web-vsts-theme-hc-dark .bolt-table-container ul.bolt-list .bolt-list-row:hover:not(.bolt-list-box-header-row, .bolt-list-box-divider-row) .list-item-label {
  color: rgba(0, 120, 212, 1);
  color: var(--focus-border-color,rgba(0, 120, 212, 1));
}
body.ms-vss-web-vsts-theme-hc-light .bolt-table-container ul.bolt-list .bolt-list-row:hover:not(.bolt-list-box-header-row, .bolt-list-box-divider-row) .list-item-label {
  color: rgba(0, 120, 212, 1);
  color: var(--focus-border-color,rgba(0, 120, 212, 1));
}
.bolt-table-container ul.bolt-list .bolt-list-row.focused .bolt-list-cell-content-reveal {
  opacity: 100;
}
@media (forced-colors: active) {
  .bolt-table-container ul.bolt-list .bolt-list-row.focused {
    background: Canvas;
    forced-color-adjust: none;
  }
  .bolt-table-container ul.bolt-list .bolt-list-row.focused td {
    forced-color-adjust: auto;
  }
}
body.ms-vss-web-vsts-theme-hc-dark .bolt-table-container ul.bolt-list .bolt-list-row.focused:not(.comment-item) {
  background: rgba(0, 120, 212, 1);
  background: var(--focus-border-color,rgba(0, 120, 212, 1));
  color: rgba(255, 255, 255, 1);
  color: var(--background-color,rgba(255, 255, 255, 1));
}
body.ms-vss-web-vsts-theme-hc-dark .bolt-table-container ul.bolt-list .bolt-list-row.focused:not(.comment-item) .secondary-text {
  color: rgba(255, 255, 255, 1);
  color: var(--background-color,rgba(255, 255, 255, 1));
}
body.ms-vss-web-vsts-theme-hc-light .bolt-table-container ul.bolt-list .bolt-list-row.focused:not(.comment-item) {
  background: rgba(0, 120, 212, 1);
  background: var(--focus-border-color,rgba(0, 120, 212, 1));
  color: rgba(255, 255, 255, 1);
  color: var(--background-color,rgba(255, 255, 255, 1));
}
body.ms-vss-web-vsts-theme-hc-light .bolt-table-container ul.bolt-list .bolt-list-row.focused:not(.comment-item) .secondary-text {
  color: rgba(255, 255, 255, 1);
  color: var(--background-color,rgba(255, 255, 255, 1));
}
.bolt-table-container ul.bolt-list .bolt-list-row.selected {
  background-color: rgba(222, 236, 249, 1);
  background-color: var(--component-grid-selected-row-color,rgba(222, 236, 249, 1));
  outline: none;
}
@media (forced-colors: active) {
  .bolt-table-container ul.bolt-list .bolt-list-row.selected {
    background: Canvas;
    forced-color-adjust: none;
  }
}
body.ms-vss-web-vsts-theme-hc-dark .bolt-table-container ul.bolt-list .bolt-list-row.selected {
  background: rgba(0, 120, 212, 1);
  background: var(--focus-border-color,rgba(0, 120, 212, 1));
  color: rgba(255, 255, 255, 1);
  color: var(--background-color,rgba(255, 255, 255, 1));
}
body.ms-vss-web-vsts-theme-hc-light .bolt-table-container ul.bolt-list .bolt-list-row.selected {
  background: rgba(0, 120, 212, 1);
  background: var(--focus-border-color,rgba(0, 120, 212, 1));
  color: rgba(255, 255, 255, 1);
  color: var(--background-color,rgba(255, 255, 255, 1));
}
@media (forced-colors: active) {
  .bolt-table-container ul.bolt-list .bolt-list-row.selected .bolt-button.bolt-focus-treatment:focus,
  .bolt-table-container ul.bolt-list .bolt-list-row.selected .bolt-checkbox.bolt-focus-treatment:focus .bolt-checkmark {
    border-color: Background;
  }
}
.bolt-table-container ul.bolt-list .bolt-list-row.selected .bolt-list-cell:first-child {
  border-width: 2px;
}
.bolt-table-container ul.bolt-list .bolt-list-row:hover.selected {
  background-color: rgba(222, 236, 249, 1);
  background-color: var(--component-grid-action-selected-cell-hover-color,rgba(222, 236, 249, 1));
}
@media (forced-colors: active) {
  .bolt-table-container ul.bolt-list .bolt-list-row:hover.selected {
    background-color: Canvas;
  }
}
body.ms-vss-web-vsts-theme-hc-dark .bolt-table-container ul.bolt-list .bolt-list-row:hover.selected {
  background: rgba(0, 120, 212, 1);
  background: var(--focus-border-color,rgba(0, 120, 212, 1));
  color: rgba(255, 255, 255, 1);
  color: var(--background-color,rgba(255, 255, 255, 1));
}
body.ms-vss-web-vsts-theme-hc-light .bolt-table-container ul.bolt-list .bolt-list-row:hover.selected {
  background: rgba(0, 120, 212, 1);
  background: var(--focus-border-color,rgba(0, 120, 212, 1));
  color: rgba(255, 255, 255, 1);
  color: var(--background-color,rgba(255, 255, 255, 1));
}
.bolt-table-container ul.bolt-list .bolt-list-row.single-click-activation {
  cursor: pointer;
}
.bolt-table-container ul.bolt-list .bolt-list-row-no-hover:hover {
  background-color: initial;
}
.bolt-table-container ul.bolt-list .bolt-list-row-header:hover,
.bolt-table-container ul.bolt-list .bolt-list-row-loading:hover {
  background-color: initial;
  cursor: default;
}
.bolt-table-container ul.bolt-list .bolt-list-cell {
  border-top: 1px solid transparent;
  border-bottom: 1px solid transparent;
  overflow: hidden;
  padding: 0;
  position: relative;
  text-align: left;
  text-decoration: none;
  white-space: nowrap;
}
.bolt-table-container ul.bolt-list .bolt-list-cell:first-child:not(.bolt-table-cell-select) {
  border-left: 2px solid transparent;
  width: 100%;
  max-width: unset;
  min-width: unset;
}
.bolt-table-container ul.bolt-list .bolt-list-cell:last-child {
  border-right: 1px solid transparent;
}
.bolt-table-container ul.bolt-list .selected .bolt-list-cell:first-child {
  border-left: 2px solid transparent;
}
.bolt-table-container ul.bolt-list .bolt-list-cell-content-reveal {
  opacity: 0;
}
.bolt-table-container ul.bolt-list .bolt-list-cell-text {
  overflow: hidden;
}
.bolt-table-container ul.bolt-list .bolt-focus-visible .bolt-list-row:focus .bolt-list-cell {
  border-color: rgba(0, 120, 212, 1);
  border-color: var(--component-grid-focus-border-color,rgba(0, 120, 212, 1));
}
@media (forced-colors: active) {
  .bolt-table-container ul.bolt-list .bolt-focus-visible .bolt-list-row:focus .bolt-list-cell {
    background-color: highlight;
  }
}
@media (forced-colors: active) {
  .bolt-table-container ul.bolt-list .bolt-focus-visible .bolt-list-row:focus {
    forced-color-adjust: none;
    border-color: highlight;
  }
}
@media screen and (forced-colors: active) and (prefers-color-scheme: light) {
  .bolt-table-container ul.bolt-list .bolt-focus-visible .bolt-list-row:focus {
    outline: 3px double highlight;
    outline-offset: 1px;
  }
}
@media (forced-colors: active) {
  .bolt-table-container ul.bolt-list .bolt-focus-visible .bolt-list-row:focus {
    forced-color-adjust: none;
  }
  .bolt-table-container ul.bolt-list .bolt-focus-visible .bolt-list-row:focus a {
    forced-color-adjust: auto;
  }
  .bolt-table-container ul.bolt-list .bolt-focus-visible .bolt-list-row:focus > td > * {
    forced-color-adjust: auto;
  }
}
.bolt-table-container ul.bolt-list .bolt-list-row-marked .bolt-list-cell:first-child {
  border-left:  2px solid;
  border-left-color: rgba( 43, 136, 216 ,  1 );
  border-left-color: rgba( var(--palette-primary-tint-10,43, 136, 216) ,  1 );
}
.bolt-table-container ul.bolt-list .bolt-list-overlay-container {
  width: 100%;
}
.bolt-table-container ul.bolt-list .bolt-list-overlay {
  pointer-events: none;
  width: 100%;
}
.bolt-table-container ul.bolt-list .bolt-list-drag-source-item {
  background-color: rgba(255, 255, 255, 0.40);
  background-color: var(--component-grid-drag-source-color,rgba(255, 255, 255, 0.40));
}
.bolt-table-container ul.bolt-list .bolt-drag-image-portal {
  z-index: 100;
}
.bolt-table-container ul.bolt-list .bolt-drag-image {
  background-color: rgba(255, 255, 255, 1);
  background-color: var(--callout-background-color,rgba(255, 255, 255, 1));
  height: 40px;
  width: 320px;
  padding: 0px 8px;
}
.bolt-table-container ul.bolt-list .bolt-table-cell-content:not(.favorites-item-list) {
  padding: 0.375rem 0;
  overflow: hidden;
}
.bolt-table-container ul.bolt-list .bolt-table-cell-select {
  align-self: center;
}
.bolt-table-container li.bolt-list-box-loading-row {
  justify-content: center;
}
.bolt-table-container .bolt-list-box-loading-row span {
  max-width: fit-content !important;
}
.bolt-table-container .dropdown-list.artifact-list-item {
  flex-grow: 1;
}
.bolt-table-container .directory-dropdown-content .bolt-list-cell {
  flex-grow: 1;
}
.bolt-table-container span.dropdown-list.bolt-table-cell.bolt-list-cell {
  flex-grow: 1;
}
`, ""]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./node_modules/azure-devops-ui/Components/List/List.css":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./node_modules/azure-devops-ui/Components/List/List.css ***!
  \*****************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../css-loader/dist/runtime/noSourceMaps.js */ "./node_modules/css-loader/dist/runtime/noSourceMaps.js");
/* harmony import */ var _css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, `.bolt-list {
  border-spacing: 0 0;
  color: rgba(0, 0, 0, .9);
  color: var(--text-primary-color,rgba(0, 0, 0, .9));
  cursor: default;
  display: table;
  table-layout: fixed;
  user-select: none;
  -ms-user-select: none;
  -moz-user-select: none;
  -webkit-user-select: none;
  /* IE11: Limit the width of the list to prevent it from growing out of control */
}
@media screen and (min-width: 0\\0 ) {
  .bolt-list {
    max-width: 100vw;
  }
}

.bolt-list.bolt-list {
  border-collapse: separate;
}

.bolt-fixed-height-list-row {
  width: 100%;
}

.bolt-list-row {
  color: inherit;
  display: table-row;
  outline: none;
  text-decoration: none;
  transition: background 80ms linear;
}
body.ms-vss-web-vsts-theme-hc-dark .bolt-list-row {
  transition: none;
}
body.ms-vss-web-vsts-theme-hc-light .bolt-list-row {
  transition: none;
}
.bolt-list-row:hover {
  background-color: rgba(0, 0, 0, .02);
  background-color: var(--component-grid-row-hover-color,rgba(0, 0, 0, .02));
}
.bolt-list-row:hover .bolt-list-cell-content-reveal {
  opacity: 100;
}
@media (forced-colors: active) {
  .bolt-list-row:hover {
    background: Canvas;
    forced-color-adjust: none;
  }
  .bolt-list-row:hover td {
    forced-color-adjust: auto;
  }
}
body.ms-vss-web-vsts-theme-hc-dark .bolt-list-row:hover:not(.bolt-menuitem-divider, .comment-item) {
  background: rgba(0, 120, 212, 1);
  background: var(--focus-border-color,rgba(0, 120, 212, 1));
  color: rgba(255, 255, 255, 1);
  color: var(--background-color,rgba(255, 255, 255, 1));
}
body.ms-vss-web-vsts-theme-hc-light .bolt-list-row:hover:not(.bolt-menuitem-divider, .comment-item) {
  background: rgba(0, 120, 212, 1);
  background: var(--focus-border-color,rgba(0, 120, 212, 1));
  color: rgba(255, 255, 255, 1);
  color: var(--background-color,rgba(255, 255, 255, 1));
}
body.ms-vss-web-vsts-theme-hc-dark .bolt-list-row:hover .secondary-text {
  color: rgba(255, 255, 255, 1);
  color: var(--background-color,rgba(255, 255, 255, 1));
}
body.ms-vss-web-vsts-theme-hc-light .bolt-list-row:hover .secondary-text {
  color: rgba(255, 255, 255, 1);
  color: var(--background-color,rgba(255, 255, 255, 1));
}
body.ms-vss-web-vsts-theme-hc-dark .bolt-list-row:hover .list-item-label {
  color: rgba(0, 120, 212, 1);
  color: var(--focus-border-color,rgba(0, 120, 212, 1));
}
body.ms-vss-web-vsts-theme-hc-light .bolt-list-row:hover .list-item-label {
  color: rgba(0, 120, 212, 1);
  color: var(--focus-border-color,rgba(0, 120, 212, 1));
}
.bolt-list-row.focused .bolt-list-cell-content-reveal {
  opacity: 100;
}
@media (forced-colors: active) {
  .bolt-list-row.focused {
    background: Canvas;
    forced-color-adjust: none;
  }
  .bolt-list-row.focused td {
    forced-color-adjust: auto;
  }
}
body.ms-vss-web-vsts-theme-hc-dark .bolt-list-row.focused:not(.comment-item) {
  background: rgba(0, 120, 212, 1);
  background: var(--focus-border-color,rgba(0, 120, 212, 1));
  color: rgba(255, 255, 255, 1);
  color: var(--background-color,rgba(255, 255, 255, 1));
}
body.ms-vss-web-vsts-theme-hc-dark .bolt-list-row.focused:not(.comment-item) .secondary-text {
  color: rgba(255, 255, 255, 1);
  color: var(--background-color,rgba(255, 255, 255, 1));
}
body.ms-vss-web-vsts-theme-hc-light .bolt-list-row.focused:not(.comment-item) {
  background: rgba(0, 120, 212, 1);
  background: var(--focus-border-color,rgba(0, 120, 212, 1));
  color: rgba(255, 255, 255, 1);
  color: var(--background-color,rgba(255, 255, 255, 1));
}
body.ms-vss-web-vsts-theme-hc-light .bolt-list-row.focused:not(.comment-item) .secondary-text {
  color: rgba(255, 255, 255, 1);
  color: var(--background-color,rgba(255, 255, 255, 1));
}
.bolt-list-row.selected {
  background-color: rgba(222, 236, 249, 1);
  background-color: var(--component-grid-selected-row-color,rgba(222, 236, 249, 1));
  outline: none;
}
@media (forced-colors: active) {
  .bolt-list-row.selected {
    background: Canvas;
    forced-color-adjust: none;
  }
  .bolt-list-row.selected td {
    forced-color-adjust: auto;
  }
}
body.ms-vss-web-vsts-theme-hc-dark .bolt-list-row.selected {
  background: rgba(0, 120, 212, 1);
  background: var(--focus-border-color,rgba(0, 120, 212, 1));
  color: rgba(255, 255, 255, 1);
  color: var(--background-color,rgba(255, 255, 255, 1));
}
body.ms-vss-web-vsts-theme-hc-light .bolt-list-row.selected {
  background: rgba(0, 120, 212, 1);
  background: var(--focus-border-color,rgba(0, 120, 212, 1));
  color: rgba(255, 255, 255, 1);
  color: var(--background-color,rgba(255, 255, 255, 1));
}
@media (forced-colors: active) {
  .bolt-list-row.selected .bolt-button.bolt-focus-treatment:focus,
  .bolt-list-row.selected .bolt-checkbox.bolt-focus-treatment:focus .bolt-checkmark {
    border-color: Background;
  }
}
.bolt-list-row.selected .bolt-list-cell:first-child {
  border-left: 2px solid rgba(0, 120, 212, 1);
  border-left: 2px solid var(--component-grid-focus-border-color,rgba(0, 120, 212, 1));
}
.bolt-list-row:hover.selected {
  background-color: rgba(222, 236, 249, 1);
  background-color: var(--component-grid-action-selected-cell-hover-color,rgba(222, 236, 249, 1));
}
@media (forced-colors: active) {
  .bolt-list-row:hover.selected {
    background-color: Canvas;
  }
}
body.ms-vss-web-vsts-theme-hc-dark .bolt-list-row:hover.selected {
  background: rgba(0, 120, 212, 1);
  background: var(--focus-border-color,rgba(0, 120, 212, 1));
  color: rgba(255, 255, 255, 1);
  color: var(--background-color,rgba(255, 255, 255, 1));
}
body.ms-vss-web-vsts-theme-hc-light .bolt-list-row:hover.selected {
  background: rgba(0, 120, 212, 1);
  background: var(--focus-border-color,rgba(0, 120, 212, 1));
  color: rgba(255, 255, 255, 1);
  color: var(--background-color,rgba(255, 255, 255, 1));
}
.bolt-list-row.single-click-activation {
  cursor: pointer;
}

.bolt-list-row-no-hover:hover {
  background-color: initial;
}

.bolt-list-row-header:hover,
.bolt-list-row-loading:hover {
  background-color: initial;
  cursor: default;
}

.bolt-list-cell {
  border-top: 1px solid transparent;
  border-bottom: 1px solid transparent;
  color: inherit;
  display: table-cell;
  overflow: hidden;
  padding: 0;
  position: relative;
  text-align: left;
  text-decoration: none;
  white-space: nowrap;
}
.bolt-list-cell:first-child {
  border-left: 2px solid transparent;
}
.bolt-list-cell:last-child {
  border-right: 1px solid transparent;
}

.bolt-list-cell-content-reveal {
  opacity: 0;
}

.bolt-list-cell-spacer {
  padding: 0;
}

.bolt-list-cell-text {
  overflow: hidden;
}

.bolt-focus-visible .bolt-list-row:focus .bolt-list-cell {
  border-color: rgba(0, 120, 212, 1);
  border-color: var(--component-grid-focus-border-color,rgba(0, 120, 212, 1));
}

@media (forced-colors: active) {
  .bolt-focus-visible .bolt-list-row:focus .bolt-list-cell {
    background-color: highlight;
  }
}

@media (forced-colors: active) {
  .bolt-focus-visible .bolt-list-row:focus {
    forced-color-adjust: none;
    border-color: highlight;
  }
}
@media screen and (forced-colors: active) and (prefers-color-scheme: light) {
  .bolt-focus-visible .bolt-list-row:focus {
    outline: 3px double highlight;
    outline-offset: 1px;
  }
}
@media (forced-colors: active) {
  .bolt-focus-visible .bolt-list-row:focus {
    forced-color-adjust: none;
  }
  .bolt-focus-visible .bolt-list-row:focus a {
    forced-color-adjust: auto;
  }
  .bolt-focus-visible .bolt-list-row:focus > td > * {
    forced-color-adjust: auto;
  }
}

.bolt-list-row-marked .bolt-list-cell:first-child {
  border-left:  2px solid;
  border-left-color: rgba( 43, 136, 216 ,  1 );
  border-left-color: rgba( var(--palette-primary-tint-10,43, 136, 216) ,  1 );
}

.bolt-list-overlay-container {
  width: 100%;
}

.bolt-list-overlay {
  pointer-events: none;
  width: 100%;
}
.bolt-list-overlay .bolt-list-drop-additional-indicator {
  background-color: rgba(223, 246, 221, 1);
  background-color: var(--status-success-background,rgba(223, 246, 221, 1));
}

.bolt-list-drag-source-item {
  background-color: rgba(255, 255, 255, 0.40);
  background-color: var(--component-grid-drag-source-color,rgba(255, 255, 255, 0.40));
}

.bolt-drag-image-portal {
  z-index: 100;
}

.bolt-drag-image {
  background-color: rgba(255, 255, 255, 1);
  background-color: var(--callout-background-color,rgba(255, 255, 255, 1));
  height: 40px;
  width: 320px;
  padding: 0px 8px;
}
`, ""]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./node_modules/azure-devops-ui/Components/List/ListDropIndicator.css":
/*!******************************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./node_modules/azure-devops-ui/Components/List/ListDropIndicator.css ***!
  \******************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../css-loader/dist/runtime/noSourceMaps.js */ "./node_modules/css-loader/dist/runtime/noSourceMaps.js");
/* harmony import */ var _css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, `.bolt-list-drop-indicator-circle {
  background-color: rgba( 43, 136, 216 ,  1 );
  background-color: rgba( var(--palette-primary-tint-10,43, 136, 216) ,  1 );
  border-radius: 50%;
  height: 9px;
  width: 9px;
}
.bolt-list-drop-indicator-circle.top {
  top: -4px;
}
.bolt-list-drop-indicator-circle.bottom {
  bottom: -4px;
}

.bolt-list-drop-indicator-line {
  background-color: rgba( 199, 224, 244 ,  1 );
  background-color: rgba( var(--palette-primary-tint-20,199, 224, 244) ,  1 );
  height: 3px;
  right: 0px;
}
.bolt-list-drop-indicator-line.top {
  top: -1px;
}
.bolt-list-drop-indicator-line.bottom {
  bottom: -1px;
}
.bolt-list-drop-indicator-line.left {
  height: 100%;
  width: 3px;
}
.bolt-list-drop-indicator-line.right {
  height: 100%;
  width: 3px;
}

.bolt-list-tree-drop-target {
  border: 1px solid rgba(0, 120, 212, 1);
  border: 1px solid var(--component-grid-focus-border-color,rgba(0, 120, 212, 1));
}
`, ""]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./node_modules/azure-devops-ui/Components/Menu/Menu.css":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./node_modules/azure-devops-ui/Components/Menu/Menu.css ***!
  \*****************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../css-loader/dist/runtime/noSourceMaps.js */ "./node_modules/css-loader/dist/runtime/noSourceMaps.js");
/* harmony import */ var _css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, `.bolt-contextual-menu {
  border-radius: 4px;
  max-width: 320px;
  overflow-x: hidden;
  overflow-y: auto;
}
@media (forced-colors: active) {
  .bolt-contextual-menu {
    border: 1px solid;
  }
}

@media screen and (max-width: 599px) {
  .bolt-contextual-submenu {
    min-width: 200px;
  }
}

.overflow .bolt-contextual-menu {
  overflow-y: scroll;
}

.bolt-menu {
  border-collapse: separate;
  color: rgba(0, 0, 0, .9);
  color: var(--text-primary-color,rgba(0, 0, 0, .9));
  display: table;
  table-layout: auto;
  font-size: 0.875rem;
}

.bolt-menuitem-row {
  background-color: transparent;
  border-radius: 3px;
  color: inherit;
  display: table-row;
  outline: none;
  overflow: hidden;
  text-decoration: none;
  white-space: nowrap;
}
@media (forced-colors: active) {
  .bolt-menuitem-row {
    border: 1px solid transparent;
  }
}
.bolt-menuitem-row.focused {
  background-color: transparent;
  outline: none;
}
@media (forced-colors: active) {
  .bolt-menuitem-row.focused {
    border-color: windowtext;
    color: windowtext;
  }
}
.bolt-menuitem-row:hover, .bolt-menuitem-row.expanded {
  background-color: rgba(0, 0, 0, 0.04);
  background-color: var(--palette-black-alpha-4,rgba(0, 0, 0, 0.04));
}
@media (forced-colors: active) {
  .bolt-menuitem-row.expanded {
    border-color: windowtext;
  }
  .bolt-menuitem-row:hover {
    background-color: highlight;
  }
}
.bolt-menuitem-row.disabled {
  color: rgba(0, 0, 0, .38);
  color: var(--text-disabled-color,rgba(0, 0, 0, .38));
}
@media (forced-colors: active) {
  .bolt-menuitem-row.disabled {
    color: grayText;
  }
}
.bolt-menuitem-row.disabled:hover {
  background-color: transparent;
}

body.ms-vss-web-vsts-theme-hc-dark .bolt-menuitem-row:not(.bolt-menuitem-divider, .bolt-menuitem-header):hover, body.ms-vss-web-vsts-theme-hc-dark .bolt-menuitem-row:not(.bolt-menuitem-divider, .bolt-menuitem-header):focus {
  background-color: rgba(0, 120, 212, 1);
  background-color: var(--focus-border-color,rgba(0, 120, 212, 1));
  color: rgba(255, 255, 255, 1);
  color: var(--background-color,rgba(255, 255, 255, 1));
}
body.ms-vss-web-vsts-theme-hc-light .bolt-menuitem-row:not(.bolt-menuitem-divider, .bolt-menuitem-header):hover, body.ms-vss-web-vsts-theme-hc-light .bolt-menuitem-row:not(.bolt-menuitem-divider, .bolt-menuitem-header):focus {
  background-color: rgba(0, 120, 212, 1);
  background-color: var(--focus-border-color,rgba(0, 120, 212, 1));
  color: rgba(255, 255, 255, 1);
  color: var(--background-color,rgba(255, 255, 255, 1));
}

.bolt-focus-visible .bolt-menuitem-row.focused {
  animation: focus-shadow-pulse-inset 4s ease-in-out infinite;
  background-color: rgba(0, 0, 0, 0.04);
  background-color: var(--palette-black-alpha-4,rgba(0, 0, 0, 0.04));
  outline: none;
}

a.bolt-menuitem-row:not(.ms-Button),
a.bolt-menuitem-row:not(.ms-Button):visited,
a.bolt-menuitem-row:not(.ms-Button):hover {
  color: rgba(0, 0, 0, .9);
  color: var(--text-primary-color,rgba(0, 0, 0, .9));
  text-decoration: none;
}
@media (forced-colors: active) {
  a.bolt-menuitem-row:not(.ms-Button),
  a.bolt-menuitem-row:not(.ms-Button):visited,
  a.bolt-menuitem-row:not(.ms-Button):hover {
    color: windowtext;
  }
}

@media (forced-colors: active) {
  a.bolt-menuitem-row:not(.ms-Button):hover {
    color: highlighttext;
  }
}

@media (forced-colors: active) {
  a.bolt-menuitem-row .bolt-list-cell {
    border-color: transparent;
  }
}

@media (forced-colors: active) {
  a.bolt-menuitem-row:hover .bolt-list-cell {
    border-color: highlight;
  }
}

@media (forced-colors: active) {
  .bolt-focus-visible a.bolt-menuitem-row:focus .bolt-list-cell {
    border-color: highlight;
  }
}

.bolt-menuitem-header {
  font-weight: 600;
}

.bolt-menuitem-divider:hover,
.bolt-menuitem-header:hover {
  background-color: transparent;
}
@media (forced-colors: active) {
  .bolt-menuitem-divider:hover,
  .bolt-menuitem-header:hover {
    border: 1px solid transparent;
  }
}

.bolt-menuitem-cell {
  padding: 0;
  vertical-align: middle;
}
.bolt-menuitem-cell:first-child .bolt-menuitem-cell-content {
  padding-right: 0px;
}
.bolt-menuitem-cell:last-child .bolt-menuitem-cell-content {
  padding-left: 0px;
}

.bolt-menuitem-cell-content {
  justify-content: center;
  padding: 6px;
}

.bolt-menuitem-cell-text {
  justify-content: flex-start;
  max-width: 225px;
  min-width: 180px;
  white-space: normal;
  word-break: break-word;
}

.bolt-menuitem-cell-secondary {
  color: rgba(0, 0, 0, .55);
  color: var(--text-secondary-color,rgba(0, 0, 0, .55));
}

.bolt-menuitem-divider-content {
  background-color: rgba(0, 0, 0, 0.20);
  background-color: var(--palette-black-alpha-20,rgba(0, 0, 0, 0.20));
  height: 1px;
  margin: 6px 6px;
  padding: 0px;
}

.bolt-menu-spacer {
  padding: 4px;
}

body.ms-vss-web-vsts-theme-hc-dark .bolt-menuitem-row:hover .bolt-toggle-button-pill,
body.ms-vss-web-vsts-theme-hc-dark .bolt-menuitem-row:focus .bolt-toggle-button-pill {
  border-color: rgba(255, 255, 255, 1);
  border-color: var(--background-color,rgba(255, 255, 255, 1));
}
body.ms-vss-web-vsts-theme-hc-light .bolt-menuitem-row:hover .bolt-toggle-button-pill,
body.ms-vss-web-vsts-theme-hc-light .bolt-menuitem-row:focus .bolt-toggle-button-pill {
  border-color: rgba(255, 255, 255, 1);
  border-color: var(--background-color,rgba(255, 255, 255, 1));
}
body.ms-vss-web-vsts-theme-hc-dark .bolt-menuitem-row:hover .bolt-toggle-button-icon,
body.ms-vss-web-vsts-theme-hc-dark .bolt-menuitem-row:focus .bolt-toggle-button-icon {
  background-color: rgba(255, 255, 255, 1);
  background-color: var(--background-color,rgba(255, 255, 255, 1));
}
body.ms-vss-web-vsts-theme-hc-light .bolt-menuitem-row:hover .bolt-toggle-button-icon,
body.ms-vss-web-vsts-theme-hc-light .bolt-menuitem-row:focus .bolt-toggle-button-icon {
  background-color: rgba(255, 255, 255, 1);
  background-color: var(--background-color,rgba(255, 255, 255, 1));
}
body.ms-vss-web-vsts-theme-hc-dark .bolt-menuitem-row:hover .bolt-toggle-button-text,
body.ms-vss-web-vsts-theme-hc-dark .bolt-menuitem-row:focus .bolt-toggle-button-text {
  color: rgba(255, 255, 255, 1);
  color: var(--background-color,rgba(255, 255, 255, 1));
}
body.ms-vss-web-vsts-theme-hc-light .bolt-menuitem-row:hover .bolt-toggle-button-text,
body.ms-vss-web-vsts-theme-hc-light .bolt-menuitem-row:focus .bolt-toggle-button-text {
  color: rgba(255, 255, 255, 1);
  color: var(--background-color,rgba(255, 255, 255, 1));
}
`, ""]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./node_modules/azure-devops-ui/Components/Menu/MenuButton.css":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./node_modules/azure-devops-ui/Components/Menu/MenuButton.css ***!
  \***********************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../css-loader/dist/runtime/noSourceMaps.js */ "./node_modules/css-loader/dist/runtime/noSourceMaps.js");
/* harmony import */ var _css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, `/**
 * Dropdown button styles
 */
.bolt-dropdown-button {
  display: inline-flex;
}

.bolt-dropdown-button .icon-right {
  font-size: 0.75rem;
  padding-left: 10px;
}
`, ""]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./node_modules/azure-devops-ui/Components/MessageBar/MessageBar.css":
/*!*****************************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./node_modules/azure-devops-ui/Components/MessageBar/MessageBar.css ***!
  \*****************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../css-loader/dist/runtime/noSourceMaps.js */ "./node_modules/css-loader/dist/runtime/noSourceMaps.js");
/* harmony import */ var _css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, `.bolt-messagebar {
  padding: 8px 16px;
}
.bolt-messagebar.severity-info {
  background-color: rgba(0, 0, 0, 0.02);
  background-color: var(--palette-black-alpha-2,rgba(0, 0, 0, 0.02));
}
.bolt-messagebar.severity-success {
  background-color: rgba(223, 246, 221, 1);
  background-color: var(--status-success-background,rgba(223, 246, 221, 1));
}
body.ms-vss-web-vsts-theme-hc-dark .bolt-messagebar.severity-success {
  color: rgba(255, 255, 255, 1);
  color: var(--background-color,rgba(255, 255, 255, 1));
}
.bolt-messagebar.severity-warning {
  background-color: rgba(251, 242, 236, 1);
  background-color: var(--status-warning-background,rgba(251, 242, 236, 1));
}
body.ms-vss-web-vsts-theme-hc-dark .bolt-messagebar.severity-warning {
  color: rgba(255, 255, 255, 1);
  color: var(--background-color,rgba(255, 255, 255, 1));
}
.bolt-messagebar.severity-error {
  background-color: rgba(249, 235, 235, 1);
  background-color: var(--status-error-background,rgba(249, 235, 235, 1));
}

.bolt-messagebar-icons,
.bolt-messagebar-buttons {
  max-height: 50px;
}

.bolt-messagebar-icon {
  margin-left: 8px;
  margin-right: 16px;
}
.severity-info .bolt-messagebar-icon {
  color: rgba(0, 120, 212, 1);
  color: var(--status-info-foreground,rgba(0, 120, 212, 1));
}
.severity-success .bolt-messagebar-icon {
  color: rgba(16, 124, 16, 1);
  color: var(--status-success-foreground,rgba(16, 124, 16, 1));
}
.severity-warning .bolt-messagebar-icon {
  color: rgba(177, 133, 37, 1);
  color: var(--status-warning-icon-foreground,rgba(177, 133, 37, 1));
}
.severity-error .bolt-messagebar-icon {
  color: rgba(205, 74, 69, 1);
  color: var(--status-error-foreground,rgba(205, 74, 69, 1));
}

.bolt-messagebar-message {
  align-items: center;
  min-height: 32px;
}
.bolt-messagebar-message:not(:last-child) {
  margin-right: 90px;
}

.bolt-messagebar-buttons {
  margin-left: auto;
}
.bolt-messagebar-buttons .bolt-button:first-child {
  margin-left: 8px;
}
.bolt-messagebar-buttons .bolt-button:not(:last-child) {
  margin-right: 8px;
}

.bolt-messagebar-close-button.bolt-button.icon-only {
  font-size: 1rem;
  padding: 0px;
  margin-right: -4px;
}

.bolt-messagebar.mobile .bolt-messagebar-content {
  padding: 10px 20px 10px 10px;
}
.bolt-messagebar.mobile .bolt-messagebar-icon {
  align-self: flex-start;
  margin: 0px;
  padding: 6px 8px;
}
.bolt-messagebar.mobile .bolt-messagebar-message {
  margin: 0px 0px 6px 8px;
  min-height: 0px;
}
.bolt-messagebar.mobile .bolt-messagebar-buttons {
  margin-bottom: 6px;
  margin-top: 2px;
}
.bolt-messagebar.mobile .bolt-messagebar-close-button {
  margin-left: 8px;
  margin-right: -10px;
}
`, ""]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./node_modules/azure-devops-ui/Components/Pill/Pill.css":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./node_modules/azure-devops-ui/Components/Pill/Pill.css ***!
  \*****************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../css-loader/dist/runtime/noSourceMaps.js */ "./node_modules/css-loader/dist/runtime/noSourceMaps.js");
/* harmony import */ var _css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, `/* 
    We're using absolute height and negative margins in this file
    this is because borders make a lot of this logic weird, and the spec calls for overlap of borders
    between what are logically parent and child elements

    eg. in Outlined pills, the button focus circle should exactly overlap the pill's outline

    Using negative margin means we need to do less padding management of the container based on
    what elements it happens to contain, and elements can just intrude on the left-right padding of the parent
    */
.bolt-pill {
  border-radius: 120px;
  border: 1px solid transparent;
  white-space: nowrap;
}
.bolt-pill.clickable {
  cursor: pointer;
}
.bolt-pill.count .bolt-pill-content {
  font-weight: 600;
}
.bolt-pill .bolt-pill-content {
  margin: 0px 0.5rem;
  padding: 2px 0;
}
.bolt-pill .bolt-pill-icon {
  margin-left: 0.25rem;
  margin-right: 0.375rem;
}
.bolt-pill.compact.has-filled-visual .bolt-pill-content, .bolt-pill.compact.has-icon .bolt-pill-content, .bolt-pill.regular.has-filled-visual .bolt-pill-content, .bolt-pill.regular.has-icon .bolt-pill-content, .bolt-pill.large.has-filled-visual .bolt-pill-content, .bolt-pill.large.has-icon .bolt-pill-content {
  margin-left: 0;
}
.bolt-pill.compact.has-remove-button .bolt-pill-content, .bolt-pill.regular.has-remove-button .bolt-pill-content, .bolt-pill.large.has-remove-button .bolt-pill-content {
  margin-right: 0.375rem;
}
.bolt-pill.compact {
  font-size: 0.6875rem;
}
.bolt-pill.regular {
  font-size: 0.75rem;
}
.bolt-pill.regular .bolt-pill-filled-visual {
  width: 1.25rem;
}
.bolt-pill.large {
  font-size: 0.875rem;
}
.bolt-pill.large .bolt-pill-filled-visual {
  width: 1.5rem;
}
.bolt-pill.standard {
  background-color: rgba(0, 0, 0, 0.06);
  background-color: var(--palette-black-alpha-6,rgba(0, 0, 0, 0.06));
}
.bolt-pill.standard.clickable.hover {
  background-color: rgba(0, 0, 0, 0.10);
  background-color: var(--palette-black-alpha-10,rgba(0, 0, 0, 0.10));
}
.bolt-pill.themed-standard {
  background-color: rgba( 222, 236, 249 ,  1 );
  background-color: rgba( var(--palette-primary-tint-30,222, 236, 249) ,  1 );
  color: rgba(0, 0, 0, .9);
  color: var(--text-primary-color,rgba(0, 0, 0, .9));
}
.bolt-pill.themed-standard.clickable.hover {
  background-color: rgba( 239, 246, 252 ,  1 );
  background-color: rgba( var(--palette-primary-tint-40,239, 246, 252) ,  1 );
}
.bolt-pill.outlined {
  background-color: transparent;
  border-color: rgba(0, 0, 0, 0.20);
  border-color: var(--palette-black-alpha-20,rgba(0, 0, 0, 0.20));
}
.bolt-pill.outlined.clickable.hover {
  background-color: rgba(0, 0, 0, 0.06);
  background-color: var(--palette-black-alpha-6,rgba(0, 0, 0, 0.06));
}
.bolt-pill.outlined .bolt-pill-button {
  border: 1px solid transparent;
}
.bolt-pill.colored.dark {
  color: white;
}
.bolt-pill.colored.light {
  color: black;
}

.bolt-focus-visible .bolt-pill:focus {
  border-color: rgba(0, 120, 212, 1);
  border-color: var(--communication-background,rgba(0, 120, 212, 1));
  animation: ms-focus-shadow-pulse 4s ease-in-out infinite;
  box-shadow: 0 0 0 3px rgba(0, 120, 212, 0.23);
  box-shadow: 0 0 0 3px var(--focus-pulse-max-color,rgba(0, 120, 212, 0.23));
  outline: none;
}
@media (forced-colors: active) {
  .bolt-focus-visible .bolt-pill:focus {
    animation: none;
  }
}
@media (forced-colors: active) {
  .bolt-focus-visible .bolt-pill:focus {
    forced-color-adjust: none;
    border-color: highlight;
  }
}
@media screen and (forced-colors: active) and (prefers-color-scheme: light) {
  .bolt-focus-visible .bolt-pill:focus {
    outline: 1px solid highlight;
    outline-offset: 1px;
  }
}
@media (forced-colors: active) {
  .bolt-focus-visible .bolt-pill:focus {
    background: transparent !important;
    color: windowtext;
  }
}

.bolt-pill-icon {
  padding: 2px;
}

.bolt-pill-filled-visual {
  overflow: hidden;
  border-radius: 50%;
  margin-right: 4px;
}

button.bolt-pill-button.bolt-button.icon-only {
  border-radius: 50%;
  color: inherit;
  margin-left: auto;
  padding: 2px;
}
button.bolt-pill-button.bolt-button.icon-only:hover {
  background-color: rgba(0, 0, 0, 0.06);
  background-color: var(--palette-black-alpha-6,rgba(0, 0, 0, 0.06));
}
`, ""]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./node_modules/azure-devops-ui/Components/Portal/Portal.css":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./node_modules/azure-devops-ui/Components/Portal/Portal.css ***!
  \*********************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../css-loader/dist/runtime/noSourceMaps.js */ "./node_modules/css-loader/dist/runtime/noSourceMaps.js");
/* harmony import */ var _css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, `.bolt-portal-host {
  position: fixed;
  /* 1 million used because OF used it and the product has built around this number */
  z-index: 1000000;
}

.bolt-portal {
  overflow: hidden;
  pointer-events: none;
  z-index: 10;
}
`, ""]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./node_modules/azure-devops-ui/Components/Spinner/Spinner.css":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./node_modules/azure-devops-ui/Components/Spinner/Spinner.css ***!
  \***********************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../css-loader/dist/runtime/noSourceMaps.js */ "./node_modules/css-loader/dist/runtime/noSourceMaps.js");
/* harmony import */ var _css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, `.bolt-spinner {
  align-items: center;
  justify-content: center;
}

@keyframes spinner-anim {
  0% {
    transform: rotate(0deg);
  }
  100% {
    transform: rotate(360deg);
  }
}
.bolt-spinner-circle {
  border:  1.5px solid;
  border-color: rgba( 200, 200, 200 ,  1 );
  border-color: rgba( var(--palette-neutral-20,200, 200, 200) ,  1 );
  border-top-color: rgba(0, 90, 158, 1);
  border-top-color: var(--communication-foreground,rgba(0, 90, 158, 1));
  border-radius: 50%;
  animation-name: spinner-anim;
  animation-duration: 1.3s;
  animation-iteration-count: infinite;
  animation-timing-function: cubic-bezier(0.53, 0.21, 0.29, 0.67);
}
.bolt-spinner-circle.xsmall {
  width: 0.75rem;
  height: 0.75rem;
}
.bolt-spinner-circle.small {
  width: 1rem;
  height: 1rem;
}
.bolt-spinner-circle.medium {
  width: 1.25rem;
  height: 1.25rem;
}
.bolt-spinner-circle.large {
  width: 1.75rem;
  height: 1.75rem;
}

.bolt-spinner-label {
  color: rgba(0, 90, 158, 1);
  color: var(--communication-foreground,rgba(0, 90, 158, 1));
}
`, ""]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./node_modules/azure-devops-ui/Components/Surface/Surface.css":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./node_modules/azure-devops-ui/Components/Surface/Surface.css ***!
  \***********************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../css-loader/dist/runtime/noSourceMaps.js */ "./node_modules/css-loader/dist/runtime/noSourceMaps.js");
/* harmony import */ var _css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, `.bolt-condensed-horizontal-spacing {
  padding-left: 16px;
  padding-right: 16px;
}

.bolt-default-horizontal-spacing {
  padding-left: 20px;
  padding-right: 20px;
}

.bolt-relaxed-horizontal-spacing {
  padding-left: 32px;
  padding-right: 32px;
}
`, ""]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./node_modules/azure-devops-ui/Components/Tabs/Tabs.css":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./node_modules/azure-devops-ui/Components/Tabs/Tabs.css ***!
  \*****************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../css-loader/dist/runtime/noSourceMaps.js */ "./node_modules/css-loader/dist/runtime/noSourceMaps.js");
/* harmony import */ var _css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, `/**
 * Generalized focus treatment for components 
 */
.focus-treatment:focus {
  outline: none;
}

body.ms-vss-web-vsts-theme-hc-dark.bolt-focus-visible .bolt-tab.focus-treatment:focus, body.ms-vss-web-vsts-theme-hc-dark.bolt-focus-visible .bolt-tab.focus-treatment.focused,
body.ms-vss-web-vsts-theme-hc-light.bolt-focus-visible .bolt-tab.focus-treatment:focus,
body.ms-vss-web-vsts-theme-hc-light.bolt-focus-visible .bolt-tab.focus-treatment.focused {
  border: 2px solid rgba(0, 120, 212, 1);
  border: 2px solid var(--focus-border-color,rgba(0, 120, 212, 1));
  outline: 2px solid rgba(0, 90, 158, 1);
  outline: 2px solid var(--communication-foreground,rgba(0, 90, 158, 1));
}

.bolt-focus-visible .bolt-tab.focus-treatment:focus, .bolt-focus-visible .bolt-tab.focus-treatment.focused {
  border-radius: 3px;
  animation: ms-focus-shadow-with-border-pulse 4s ease-in-out infinite;
  box-shadow: 0 0 0 3px rgba(0, 120, 212, 0.23), 0 0 0 1px rgba(0, 120, 212, 1);
  box-shadow: 0 0 0 3px var(--focus-pulse-max-color,rgba(0, 120, 212, 0.23)), 0 0 0 1px var(--focus-border-color,rgba(0, 120, 212, 1));
}
@media (forced-colors: active) {
  .bolt-focus-visible .bolt-tab.focus-treatment:focus, .bolt-focus-visible .bolt-tab.focus-treatment.focused {
    animation: none;
  }
}
@media (forced-colors: active) {
  .bolt-focus-visible .bolt-tab.focus-treatment:focus, .bolt-focus-visible .bolt-tab.focus-treatment.focused {
    border: 1px solid Highlight;
    forced-color-adjust: none;
    color: windowtext;
  }
  .bolt-focus-visible .bolt-tab.focus-treatment:focus > *, .bolt-focus-visible .bolt-tab.focus-treatment.focused > * {
    forced-color-adjust: auto;
  }
}

.bolt-tab {
  color: inherit;
}

.bolt-tabbar .vss-FilterBar {
  margin-top: 0px;
  margin-bottom: 0px;
  margin-left: 8px;
  height: 32px;
}
.bolt-tabbar .vss-FilterBar .vss-FilterBar--list {
  align-items: center;
}
.bolt-tabbar .vss-FilterBar .vss-FilterBar--list .vss-FilterBar--item.vss-FilterBar--item-keyword-container {
  margin-right: 0px;
}
.bolt-tabbar .vss-FilterBar .vss-FilterBar--list .vss-FilterBar--right-items .vss-FilterBar--action {
  display: none;
}

.bolt-tabbar.sticky {
  position: sticky;
  background-color: rgba(255, 255, 255, 1);
  background-color: var(--background-color,rgba(255, 255, 255, 1));
  z-index: 2;
  top: 0px;
}

.bolt-tabbar-grey.sticky {
  background-color: rgba( 248, 248, 248 ,  1 );
  background-color: rgba( var(--palette-neutral-2,248, 248, 248) ,  1 );
}
body.ms-vss-web-vsts-theme-hc-dark .bolt-tabbar-grey.sticky {
  background-color: rgba(255, 255, 255, 1);
  background-color: var(--background-color,rgba(255, 255, 255, 1));
}
body.ms-vss-web-vsts-theme-hc-light .bolt-tabbar-grey.sticky {
  background-color: rgba(255, 255, 255, 1);
  background-color: var(--background-color,rgba(255, 255, 255, 1));
}

.bolt-tabbar-on-callout.sticky {
  background-color: rgba(255, 255, 255, 1);
  background-color: var(--callout-background-color,rgba(255, 255, 255, 1));
}

@supports (-ms-ime-align: auto) {
  .bolt-tabbar.sticky.sticky {
    position: relative;
  }
}
@media screen and (max-width: 600px) {
  .bolt-tabbar-tabs {
    overflow-x: auto;
  }
}
.bolt-tabbar-tabs.compact .bolt-tab {
  height: 2rem;
  text-decoration: none;
  cursor: pointer;
  background-color: transparent;
  color: rgba(0, 0, 0, .9);
  color: var(--text-primary-color,rgba(0, 0, 0, .9));
  display: inline-block;
  margin-right: 0px;
  padding: 0 8px;
  text-align: center;
  position: relative;
  border: 0;
  overflow: visible;
}
.bolt-tabbar-tabs.compact .bolt-tab .bolt-tab-text {
  overflow: hidden;
  white-space: nowrap;
  text-overflow: ellipsis;
}
.bolt-tabbar-tabs.compact .bolt-tab .bolt-tab-inner-container {
  height: 100%;
  display: flex;
  align-items: center;
}
.bolt-tabbar-tabs.compact .bolt-tab .bolt-tab-badge {
  margin-left: 4px;
  max-width: 80px;
  cursor: pointer;
}
.bolt-tabbar-tabs.compact .bolt-tab .bolt-tab-badge .bolt-pill-focusable {
  overflow: hidden;
}
.bolt-tabbar-tabs.compact .bolt-tab:last-child {
  margin-right: 0;
}
@media (forced-colors: active) {
  .bolt-tabbar-tabs.compact .bolt-tab {
    border: 1px solid transparent;
  }
}
.bolt-tabbar-tabs.compact .bolt-tab:hover {
  color: inherit;
}
@media (forced-colors: active) {
  .bolt-tabbar-tabs.compact .bolt-tab:hover {
    border-color: Highlight;
  }
}
body.ms-vss-web-vsts-theme-hc-dark .bolt-tabbar-tabs.compact .bolt-tab:hover {
  border-color: rgba(0, 90, 158, 1);
  border-color: var(--communication-foreground,rgba(0, 90, 158, 1));
}
body.ms-vss-web-vsts-theme-hc-light .bolt-tabbar-tabs.compact .bolt-tab:hover {
  border-color: rgba(0, 90, 158, 1);
  border-color: var(--communication-foreground,rgba(0, 90, 158, 1));
}
.bolt-tabbar-tabs.compact .bolt-tab .bolt-tab-text::before {
  content: attr(data-content);
  display: block;
  font-weight: normal;
  height: 0px;
  visibility: hidden;
}
.bolt-tabbar-tabs.compact .bolt-tab .bolt-tab-text::after {
  content: attr(data-content);
  display: block;
  font-weight: 600;
  height: 0px;
  visibility: hidden;
}
.bolt-tabbar-tabs.compact .bolt-tab .bolt-tab-icon + .bolt-tab-text {
  margin-left: 4px;
}
.bolt-tabbar-tabs.compact .bolt-tab.selected .bolt-tab-inner-container {
  font-weight: 600;
  padding-top: 2px;
  border-bottom: 2px solid rgba(0, 120, 212, 1);
  border-bottom: 2px solid var(--communication-background,rgba(0, 120, 212, 1));
}
body.ms-vss-web-vsts-theme-hc-dark .bolt-tabbar-tabs.compact .bolt-tab.selected {
  border-bottom: 2px solid rgba(0, 90, 158, 1);
  border-bottom: 2px solid var(--communication-foreground,rgba(0, 90, 158, 1));
}
body.ms-vss-web-vsts-theme-hc-light .bolt-tabbar-tabs.compact .bolt-tab.selected {
  border-bottom: 2px solid rgba(0, 90, 158, 1);
  border-bottom: 2px solid var(--communication-foreground,rgba(0, 90, 158, 1));
}
.bolt-tabbar-tabs.tall .bolt-tab {
  height: 3rem;
  text-decoration: none;
  cursor: pointer;
  background-color: transparent;
  color: rgba(0, 0, 0, .9);
  color: var(--text-primary-color,rgba(0, 0, 0, .9));
  display: inline-block;
  margin-right: 0px;
  padding: 0 8px;
  text-align: center;
  position: relative;
  border: 0;
  overflow: visible;
}
.bolt-tabbar-tabs.tall .bolt-tab .bolt-tab-text {
  overflow: hidden;
  white-space: nowrap;
  text-overflow: ellipsis;
}
.bolt-tabbar-tabs.tall .bolt-tab .bolt-tab-inner-container {
  height: 100%;
  display: flex;
  align-items: center;
}
.bolt-tabbar-tabs.tall .bolt-tab .bolt-tab-badge {
  margin-left: 4px;
  max-width: 80px;
  cursor: pointer;
}
.bolt-tabbar-tabs.tall .bolt-tab .bolt-tab-badge .bolt-pill-focusable {
  overflow: hidden;
}
.bolt-tabbar-tabs.tall .bolt-tab:last-child {
  margin-right: 0;
}
@media (forced-colors: active) {
  .bolt-tabbar-tabs.tall .bolt-tab {
    border: 1px solid transparent;
  }
}
.bolt-tabbar-tabs.tall .bolt-tab:hover {
  color: inherit;
}
@media (forced-colors: active) {
  .bolt-tabbar-tabs.tall .bolt-tab:hover {
    border-color: Highlight;
  }
}
body.ms-vss-web-vsts-theme-hc-dark .bolt-tabbar-tabs.tall .bolt-tab:hover {
  border-color: rgba(0, 90, 158, 1);
  border-color: var(--communication-foreground,rgba(0, 90, 158, 1));
}
body.ms-vss-web-vsts-theme-hc-light .bolt-tabbar-tabs.tall .bolt-tab:hover {
  border-color: rgba(0, 90, 158, 1);
  border-color: var(--communication-foreground,rgba(0, 90, 158, 1));
}
.bolt-tabbar-tabs.tall .bolt-tab .bolt-tab-text::before {
  content: attr(data-content);
  display: block;
  font-weight: normal;
  height: 0px;
  visibility: hidden;
}
.bolt-tabbar-tabs.tall .bolt-tab .bolt-tab-text::after {
  content: attr(data-content);
  display: block;
  font-weight: 600;
  height: 0px;
  visibility: hidden;
}
.bolt-tabbar-tabs.tall .bolt-tab .bolt-tab-icon + .bolt-tab-text {
  margin-left: 4px;
}
.bolt-tabbar-tabs.tall .bolt-tab.selected .bolt-tab-inner-container {
  font-weight: 600;
  padding-top: 2px;
  border-bottom: 2px solid rgba(0, 120, 212, 1);
  border-bottom: 2px solid var(--communication-background,rgba(0, 120, 212, 1));
}
body.ms-vss-web-vsts-theme-hc-dark .bolt-tabbar-tabs.tall .bolt-tab.selected {
  border-bottom: 2px solid rgba(0, 90, 158, 1);
  border-bottom: 2px solid var(--communication-foreground,rgba(0, 90, 158, 1));
}
body.ms-vss-web-vsts-theme-hc-light .bolt-tabbar-tabs.tall .bolt-tab.selected {
  border-bottom: 2px solid rgba(0, 90, 158, 1);
  border-bottom: 2px solid var(--communication-foreground,rgba(0, 90, 158, 1));
}
.bolt-tabbar-tabs.large-link .bolt-tab {
  height: 2.5rem;
  text-decoration: none;
  cursor: pointer;
  background-color: transparent;
  color: rgba(0, 0, 0, .9);
  color: var(--text-primary-color,rgba(0, 0, 0, .9));
  display: inline-block;
  margin-right: 0px;
  padding: 0 8px;
  text-align: center;
  position: relative;
  border: 0;
  overflow: visible;
}
.bolt-tabbar-tabs.large-link .bolt-tab .bolt-tab-text {
  overflow: hidden;
  white-space: nowrap;
  text-overflow: ellipsis;
}
.bolt-tabbar-tabs.large-link .bolt-tab .bolt-tab-inner-container {
  height: 100%;
  display: flex;
  align-items: center;
}
.bolt-tabbar-tabs.large-link .bolt-tab .bolt-tab-badge {
  margin-left: 4px;
  max-width: 80px;
  cursor: pointer;
}
.bolt-tabbar-tabs.large-link .bolt-tab .bolt-tab-badge .bolt-pill-focusable {
  overflow: hidden;
}
.bolt-tabbar-tabs.large-link .bolt-tab:last-child {
  margin-right: 0;
}
@media (forced-colors: active) {
  .bolt-tabbar-tabs.large-link .bolt-tab {
    border: 1px solid transparent;
  }
}
.bolt-tabbar-tabs.large-link .bolt-tab:hover {
  color: inherit;
}
@media (forced-colors: active) {
  .bolt-tabbar-tabs.large-link .bolt-tab:hover {
    border-color: Highlight;
  }
}
body.ms-vss-web-vsts-theme-hc-dark .bolt-tabbar-tabs.large-link .bolt-tab:hover {
  border-color: rgba(0, 90, 158, 1);
  border-color: var(--communication-foreground,rgba(0, 90, 158, 1));
}
body.ms-vss-web-vsts-theme-hc-light .bolt-tabbar-tabs.large-link .bolt-tab:hover {
  border-color: rgba(0, 90, 158, 1);
  border-color: var(--communication-foreground,rgba(0, 90, 158, 1));
}
.bolt-tabbar-tabs.large-link .bolt-tab .bolt-tab-text::before {
  content: attr(data-content);
  display: block;
  font-weight: normal;
  height: 0px;
  visibility: hidden;
}
.bolt-tabbar-tabs.large-link .bolt-tab .bolt-tab-text::after {
  content: attr(data-content);
  display: block;
  font-weight: 600;
  height: 0px;
  visibility: hidden;
}
.bolt-tabbar-tabs.large-link .bolt-tab .bolt-tab-icon + .bolt-tab-text {
  margin-left: 4px;
}
.bolt-tabbar-tabs.large-link .bolt-tab.selected .bolt-tab-inner-container {
  font-weight: 600;
  padding-top: 2px;
  border-bottom: 2px solid rgba(0, 120, 212, 1);
  border-bottom: 2px solid var(--communication-background,rgba(0, 120, 212, 1));
}
body.ms-vss-web-vsts-theme-hc-dark .bolt-tabbar-tabs.large-link .bolt-tab.selected {
  border-bottom: 2px solid rgba(0, 90, 158, 1);
  border-bottom: 2px solid var(--communication-foreground,rgba(0, 90, 158, 1));
}
body.ms-vss-web-vsts-theme-hc-light .bolt-tabbar-tabs.large-link .bolt-tab.selected {
  border-bottom: 2px solid rgba(0, 90, 158, 1);
  border-bottom: 2px solid var(--communication-foreground,rgba(0, 90, 158, 1));
}

.bolt-tablist {
  border-right: 1px solid rgba(0, 0, 0, 0.20);
  border-right: 1px solid var(--palette-black-alpha-20,rgba(0, 0, 0, 0.20));
  overflow: auto;
}

.bolt-tablist-tabs .bolt-tab {
  height: 32px;
  text-decoration: none;
  cursor: pointer;
  background-color: transparent;
  color: rgba(0, 0, 0, .9);
  color: var(--text-primary-color,rgba(0, 0, 0, .9));
  display: inline-block;
  padding-left: 32px;
}
.bolt-tablist-tabs .bolt-tab .bolt-tab-text {
  overflow: hidden;
  white-space: nowrap;
  text-overflow: ellipsis;
}
.bolt-tablist-tabs .bolt-tab .bolt-tab-inner-container {
  height: 100%;
  display: flex;
  align-items: center;
}
.bolt-tablist-tabs .bolt-tab .bolt-tab-badge {
  margin-left: 4px;
  max-width: 80px;
  cursor: pointer;
}
.bolt-tablist-tabs .bolt-tab .bolt-tab-badge .bolt-pill-focusable {
  overflow: hidden;
}
.bolt-tablist-tabs .bolt-tab.selected {
  background-color: rgba( 234, 234, 234 ,  1 );
  background-color: rgba( var(--palette-neutral-8,234, 234, 234) ,  1 );
}
@media (forced-colors: active) {
  .bolt-tablist-tabs .bolt-tab.selected {
    background: highlight;
    forced-color-adjust: none;
  }
  .bolt-tablist-tabs .bolt-tab.selected .bolt-tab-text {
    color: windowtext;
    background: window;
  }
}
.bolt-tablist-tabs a.bolt-tab {
  color: inherit;
}

.bolt-tablist-heading {
  align-items: center;
  height: 32px;
  margin-top: 16px;
  padding-left: 32px;
}

.bolt-tablist-title {
  height: 48px;
  align-items: center;
  display: flex;
  padding-left: 32px;
}

.bolt-tablist-subtitle {
  padding-left: 32px;
}
`, ""]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./node_modules/azure-devops-ui/Components/TooltipEx/Tooltip.css":
/*!*************************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./node_modules/azure-devops-ui/Components/TooltipEx/Tooltip.css ***!
  \*************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../css-loader/dist/runtime/noSourceMaps.js */ "./node_modules/css-loader/dist/runtime/noSourceMaps.js");
/* harmony import */ var _css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, `.bolt-tooltip {
  max-width: 320px;
  animation: tooltip-fade-in 300ms ease-in;
}
.bolt-tooltip .bolt-callout-content {
  background-color: transparent;
}

.bolt-tooltip-content {
  background-color: rgba( 51, 51, 51 ,  0.95 );
  background-color: rgba( var(--palette-neutral-80,51, 51, 51) ,  0.95 );
  border-radius: 2px;
  color: rgba( 255, 255, 255 ,  1 );
  color: rgba( var(--palette-neutral-0,255, 255, 255) ,  1 );
  padding: 8px 12px;
  text-align: left;
  word-break: break-word;
}
body.ms-vss-web-vsts-theme-hc-dark .bolt-tooltip-content {
  background-color: rgba(255, 255, 255, 1);
  background-color: var(--background-color,rgba(255, 255, 255, 1));
  border: 2px solid rgba(0, 120, 212, 1);
  border: 2px solid var(--focus-border-color,rgba(0, 120, 212, 1));
}
body.ms-vss-web-vsts-theme-hc-light .bolt-tooltip-content {
  background-color: rgba(255, 255, 255, 1);
  background-color: var(--background-color,rgba(255, 255, 255, 1));
  border: 2px solid rgba(0, 120, 212, 1);
  border: 2px solid var(--focus-border-color,rgba(0, 120, 212, 1));
}

.bolt-tooltip-fade-out {
  animation: tooltip-fade-out 300ms ease-in;
}
.bolt-tooltip-fade-out.bolt-callout {
  pointer-events: none;
}

@keyframes tooltip-fade-in {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}
@keyframes tooltip-fade-out {
  from {
    opacity: 1;
  }
  to {
    opacity: 0;
  }
}
`, ""]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./node_modules/azure-devops-ui/Components/ZeroData/ZeroData.css":
/*!*************************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./node_modules/azure-devops-ui/Components/ZeroData/ZeroData.css ***!
  \*************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../css-loader/dist/runtime/noSourceMaps.js */ "./node_modules/css-loader/dist/runtime/noSourceMaps.js");
/* harmony import */ var _css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, `.vss-ZeroData {
  flex-wrap: wrap;
  margin-top: 35px;
}
.vss-ZeroData .vss-ZeroDataItem {
  text-align: center;
}
.vss-ZeroData .vss-ZeroDataItem .vss-ZeroDataItem--image,
.vss-ZeroData .vss-ZeroDataItem .vss-ZeroDataItem--primary,
.vss-ZeroData .vss-ZeroDataItem .vss-ZeroDataItem--secondary {
  margin-bottom: 15px;
  /* IE is not smart enough to keep flex items within the bounds of their flex container. */
  max-width: 100%;
}
.vss-ZeroData .vss-ZeroDataItem .vss-ZeroDataItem--image:last-child,
.vss-ZeroData .vss-ZeroDataItem .vss-ZeroDataItem--primary:last-child,
.vss-ZeroData .vss-ZeroDataItem .vss-ZeroDataItem--secondary:last-child {
  margin-bottom: 0;
}
.vss-ZeroData.single .vss-ZeroDataItem {
  max-width: 520px;
  /* IE does not respect our max-width unless we also set a min-width. Because reasons. */
  min-width: 10px;
}
.vss-ZeroData.single .vss-ZeroDataItem .vss-ZeroDataItem--image {
  height: 160px;
}
.vss-ZeroData.single .vss-ZeroDataItem .vss-ZeroDataItem--icon-image {
  font-size: 160px;
}
.vss-ZeroData.multiple .vss-ZeroDataItem {
  max-width: 235px;
  margin: 0 20px;
}
.vss-ZeroData.multiple .vss-ZeroDataItem .vss-ZeroDataItem--image {
  height: 75px;
}
.vss-ZeroData.multiple .vss-ZeroDataItem .vss-ZeroDataItem--action {
  margin-top: auto;
}
`, ""]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./node_modules/azure-devops-ui/Core/core.css":
/*!******************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./node_modules/azure-devops-ui/Core/core.css ***!
  \******************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../css-loader/dist/runtime/noSourceMaps.js */ "./node_modules/css-loader/dist/runtime/noSourceMaps.js");
/* harmony import */ var _css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, `/**
 * User-agent style overrides required for the components to function correctly.
 */
* {
  box-sizing: inherit;
}

body {
  box-sizing: border-box;
}

/* Layout styles */
.absolute-fill {
  position: absolute;
  bottom: 0;
  left: 0;
  right: 0;
  top: 0;
}

.absolute {
  position: absolute;
}

.relative {
  position: relative;
}

.no-events {
  pointer-events: none;
}

.scroll-hidden {
  overflow: hidden;
}

.v-scroll-hidden {
  overflow-y: hidden;
}

.h-scroll-hidden {
  overflow-x: hidden;
}

.scroll-auto {
  overflow: auto;
}
@media screen and (max-width: 599px) {
  .scroll-auto {
    -webkit-overflow-scrolling: touch;
  }
}

.v-scroll-auto {
  overflow-y: auto;
}
@media screen and (max-width: 599px) {
  .v-scroll-auto {
    -webkit-overflow-scrolling: touch;
  }
}

.h-scroll-auto {
  overflow-x: auto;
}
@media screen and (max-width: 599px) {
  .h-scroll-auto {
    -webkit-overflow-scrolling: touch;
  }
}

.full-height {
  height: 100%;
}

.full-size {
  display: flex;
  flex-grow: 1;
  overflow: hidden;
}

.full-width {
  width: 100%;
}

/*
 * Flex styles - applied to the flexbox (flex container).
 */
.flex-column {
  display: flex;
  flex-direction: column;
}

.flex-row {
  display: flex;
  flex-direction: row;
}

@media screen and (max-width: 599px) {
  .flex-column\\@xsmall {
    display: flex;
    flex-direction: column;
  }
}

@media screen and (max-width: 1023px) {
  .flex-column\\@small {
    display: flex;
    flex-direction: column;
  }
}

@media screen and (max-width: 1365px) {
  .flex-column\\@medium {
    display: flex;
    flex-direction: column;
  }
}

@media screen and (max-width: 599px) {
  .flex-row\\@xsmall {
    display: flex;
    flex-direction: row;
  }
}

@media screen and (max-width: 1023px) {
  .flex-row\\@small {
    display: flex;
    flex-direction: row;
  }
}

@media screen and (max-width: 1365px) {
  .flex-row\\@medium {
    display: flex;
    flex-direction: row;
  }
}

.inline-flex-column {
  display: inline-flex;
  flex-direction: column;
}

.inline-flex-row {
  display: inline-flex;
  flex-direction: row;
}

.flex-center {
  align-items: center;
}

.flex-end {
  align-items: flex-end;
}

.flex-start {
  align-items: flex-start;
}

.flex-stretch {
  align-items: stretch;
}

.flex-baseline {
  align-items: baseline;
}

.justify-start {
  justify-content: flex-start;
}

.justify-center {
  justify-content: center;
}

.justify-end {
  justify-content: flex-end;
}

.justify-space-between {
  justify-content: space-between;
}

.flex-wrap {
  flex-wrap: wrap;
}

/*
 * Flex styles - appled to the flex-items (flexbox children).
 */
.flex-grow {
  flex-grow: 1;
}

.flex-noshrink {
  flex-shrink: 0;
}

.flex-self-center {
  align-self: center;
}

.flex-self-end {
  align-self: flex-end;
}

.flex-self-start {
  align-self: flex-start;
}

.flex-self-stretch {
  align-self: stretch;
}

/*
 * FlexBox semantic styles.
 */
.flex-cell {
  align-items: center;
  align-self: stretch;
  display: flex;
  flex-direction: row;
  margin: 0;
  padding: 0;
  position: relative;
}

/* Typography styles */
.title-l {
  font-size: 1.75rem;
  font-weight: bold;
  letter-spacing: -0.04em;
}

.title-m {
  font-size: 1.3125rem;
  font-weight: 600;
  letter-spacing: -0.02em;
}

.title-s {
  font-size: 1.0625rem;
  font-weight: 600;
}

.title-xs {
  font-size: 0.9375rem;
  font-weight: 600;
}

.body-xl {
  font-size: 1.0625rem;
}

.body-l {
  font-size: 0.9375rem;
}

.body-m {
  font-size: 0.875rem;
}

.body-s {
  font-size: 0.75rem;
}

.body-xs {
  font-size: 0.6875rem;
}

.monospaced-m {
  font-family: Menlo, Consolas, Courier New, monospace;
  font-size: 0.8125rem;
}

.monospaced-s {
  font-family: Menlo, Consolas, Courier New, monospace;
  font-size: 0.75rem;
}

.monospaced-xs {
  font-family: Menlo, Consolas, Courier New, monospace;
  font-size: 0.6875rem;
}

/* Font size styles - these can be used to override typography styles */
.font-size-xxs {
  font-size: 0.5625rem;
}

.font-size-xs {
  font-size: 0.625rem;
}

.font-size-s {
  font-size: 0.6875rem;
}

.font-size {
  font-size: 0.75rem;
}

.font-size-ms {
  font-size: 0.8125rem;
}

.font-size-m {
  font-size: 0.875rem;
}

.font-size-mm {
  font-size: 0.9375rem;
}

.font-size-ml {
  font-size: 1rem;
}

.font-size-l {
  font-size: 1.125rem;
}

.font-size-ll {
  font-size: 1.5rem;
}

.font-size-lll {
  font-size: 1.75rem;
}

.font-size-xl {
  font-size: 2.25rem;
}

.font-size-xxl {
  font-size: 2.5rem;
}

.font-size-xxxl {
  font-size: 3.5rem;
}

.font-size-xxxxl {
  font-size: 4.5rem;
}

/* Font weight styles - these can be used to override typography styles */
.font-weight-light {
  font-weight: 200;
}

.font-weight-normal {
  font-weight: normal;
}

.font-weight-semibold {
  font-weight: 600;
}

.font-weight-heavy {
  font-weight: bold;
}

.secondary-text {
  color: rgba(0, 0, 0, .55);
  color: var(--text-secondary-color,rgba(0, 0, 0, .55));
}
@media (forced-colors: active) {
  .secondary-text {
    color: graytext;
  }
}

.monospaced-text {
  font-family: Menlo, Consolas, Courier New, monospace;
}

.error-text {
  color: rgba(218, 10, 0, 1);
  color: var(--status-error-text,rgba(218, 10, 0, 1));
}

.error-text-important {
  color: rgba(218, 10, 0, 1) !important;
  color: var(--status-error-text,rgba(218, 10, 0, 1)) !important;
}

/* Theme-related styles */
.themed {
  background-color: rgba(255, 255, 255, 1);
  background-color: var(--background-color,rgba(255, 255, 255, 1));
  color: rgba(0, 0, 0, .9);
  color: var(--text-primary-color,rgba(0, 0, 0, .9));
}

.v-align-middle {
  vertical-align: middle;
}

/* Depth styles */
.depth-0 {
  box-shadow: 0 0 0 0 transparent;
}

.depth-4 {
  box-shadow: 0 1.6px 3.6px 0 rgba(0, 0, 0, .132), 0 0.3px 0.9px 0 rgba(0, 0, 0, .108);
  box-shadow: 0 1.6px 3.6px 0 var(--callout-shadow-color,rgba(0, 0, 0, .132)), 0 0.3px 0.9px 0 var(--callout-shadow-secondary-color,rgba(0, 0, 0, .108));
}
body.ms-vss-web-vsts-theme-hc-dark .depth-4 {
  box-shadow: none;
  border: 1px solid rgba(0, 0, 0, .132);
  border: 1px solid var(--callout-shadow-color,rgba(0, 0, 0, .132));
}
body.ms-vss-web-vsts-theme-hc-light .depth-4 {
  box-shadow: none;
  border: 1px solid rgba(0, 0, 0, .132);
  border: 1px solid var(--callout-shadow-color,rgba(0, 0, 0, .132));
}

.depth-8 {
  box-shadow: 0 3.2px 7.2px 0 rgba(0, 0, 0, .132), 0 0.6px 1.8px 0 rgba(0, 0, 0, .108);
  box-shadow: 0 3.2px 7.2px 0 var(--callout-shadow-color,rgba(0, 0, 0, .132)), 0 0.6px 1.8px 0 var(--callout-shadow-secondary-color,rgba(0, 0, 0, .108));
}
body.ms-vss-web-vsts-theme-hc-dark .depth-8 {
  box-shadow: none;
  border: 2px solid rgba(0, 0, 0, .132);
  border: 2px solid var(--callout-shadow-color,rgba(0, 0, 0, .132));
}
body.ms-vss-web-vsts-theme-hc-light .depth-8 {
  box-shadow: none;
  border: 2px solid rgba(0, 0, 0, .132);
  border: 2px solid var(--callout-shadow-color,rgba(0, 0, 0, .132));
}

.depth-16 {
  box-shadow: 0 6.4px 14.4px 0 rgba(0, 0, 0, .132), 0 1.2px 3.6px 0 rgba(0, 0, 0, .108);
  box-shadow: 0 6.4px 14.4px 0 var(--callout-shadow-color,rgba(0, 0, 0, .132)), 0 1.2px 3.6px 0 var(--callout-shadow-secondary-color,rgba(0, 0, 0, .108));
}

.depth-64 {
  box-shadow: 0 25.6px 57.6px 0 rgba(0, 0, 0, .132), 0 4.8px 14.4px 0 rgba(0, 0, 0, .108);
  box-shadow: 0 25.6px 57.6px 0 var(--callout-shadow-color,rgba(0, 0, 0, .132)), 0 4.8px 14.4px 0 var(--callout-shadow-secondary-color,rgba(0, 0, 0, .108));
}

/* Sub layer styles */
.sub-layer {
  z-index: 10;
}

/* General cursor styles */
.cursor-default {
  cursor: default;
}

.cursor-pointer {
  cursor: pointer;
}

/* General text styles */
.text-ellipsis {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

.text-left {
  text-align: left;
}

.text-center {
  text-align: center;
}

.text-right {
  text-align: right;
}

.white-space-nowrap {
  white-space: nowrap;
}

.word-break {
  word-break: break-all;
  word-break: break-word;
}

.selectable-text {
  user-select: text;
  cursor: text;
}

/* General link styles */
.link-icon {
  padding: 2px 2px;
}

.link-text {
  padding: 0 2px;
}

.no-outline {
  outline: none;
}

/* General icon styles */
.icon-margin {
  margin-right: 6px;
}

.icon-large-margin {
  margin-right: 12px;
}

.contributed-icon-image {
  background-size: contain;
}
.contributed-icon-image.non-themed {
  filter: none;
  filter: var(--third-party-icon-filter,none);
}

/*
    Padding / Margin styles

    The no/-0 styles have !important because they are intended to remove padding / Margin.
    They shouldn't be added as the default case, only when trying to reset the padding / Margin
    that a different selector with a single level of selectivity has added.
*/
.shadow-padding {
  margin: -4px;
  padding: 4px;
}

.margin-0,
.no-margin {
  margin: 0px !important;
}

.margin-4 {
  margin: 4px;
}

.margin-8 {
  margin: 8px;
}

.margin-16 {
  margin: 16px;
}

.margin-bottom-4 {
  margin-bottom: 4px;
}

.margin-bottom-8 {
  margin-bottom: 8px;
}

.margin-bottom-16 {
  margin-bottom: 16px;
}

.margin-horizontal-0,
.no-h-margin {
  margin-left: 0px !important;
  margin-right: 0px !important;
}

.margin-horizontal-4 {
  margin-left: 4px;
  margin-right: 4px;
}

.margin-horizontal-8 {
  margin-left: 8px;
  margin-right: 8px;
}

.margin-horizontal-16 {
  margin-left: 16px;
  margin-right: 16px;
}

.margin-horizontal-20 {
  margin-left: 20px;
  margin-right: 20px;
}

.margin-left-4 {
  margin-left: 4px;
}

.margin-left-8 {
  margin-left: 8px;
}

.margin-left-16 {
  margin-left: 16px;
}

.margin-right-4 {
  margin-right: 4px;
}

.margin-right-8 {
  margin-right: 8px;
}

.margin-right-16 {
  margin-right: 16px;
}

.margin-top-4 {
  margin-top: 4px;
}

.margin-top-8 {
  margin-top: 8px;
}

.margin-top-16 {
  margin-top: 16px;
}

.margin-vertical-0,
.no-v-margin {
  margin-bottom: 0px !important;
  margin-top: 0px !important;
}

.margin-vertical-4 {
  margin-bottom: 4px;
  margin-top: 4px;
}

.margin-vertical-8 {
  margin-bottom: 8px;
  margin-top: 8px;
}

.margin-vertical-16 {
  margin-bottom: 16px;
  margin-top: 16px;
}

.margin-vertical-20 {
  margin-bottom: 20px;
  margin-top: 20px;
}

.padding-0,
.no-padding {
  padding: 0px !important;
}

.padding-4 {
  padding: 4px;
}

.padding-8 {
  padding: 8px;
}

.padding-16 {
  padding: 16px;
}

.padding-bottom-0,
.no-bottom-padding {
  padding-bottom: 0px !important;
}

.padding-bottom-4 {
  padding-bottom: 4px;
}

.padding-bottom-8 {
  padding-bottom: 8px;
}

.padding-bottom-16 {
  padding-bottom: 16px;
}

.padding-horizontal-0,
.no-h-padding {
  padding-left: 0px !important;
  padding-right: 0px !important;
}

.padding-horizontal-4 {
  padding-left: 4px;
  padding-right: 4px;
}

.padding-horizontal-8 {
  padding-left: 8px;
  padding-right: 8px;
}

.padding-horizontal-16 {
  padding-left: 16px;
  padding-right: 16px;
}

.padding-horizontal-20 {
  padding-left: 20px;
  padding-right: 20px;
}

.padding-left-4 {
  padding-left: 4px;
}

.padding-left-8 {
  padding-left: 8px;
}

.padding-left-16 {
  padding-left: 16px;
}

.padding-right-4 {
  padding-right: 4px;
}

.padding-right-8 {
  padding-right: 8px;
}

.padding-right-16 {
  padding-right: 16px;
}

.padding-top-0,
.no-top-padding {
  padding-top: 0px !important;
}

.padding-top-4 {
  padding-top: 4px;
}

.padding-top-8 {
  padding-top: 8px;
}

.padding-top-16 {
  padding-top: 16px;
}

.padding-vertical-0,
.no-v-padding {
  padding-bottom: 0px !important;
  padding-top: 0px !important;
}

.padding-vertical-4 {
  padding-bottom: 4px;
  padding-top: 4px;
}

.padding-vertical-8 {
  padding-bottom: 8px;
  padding-top: 8px;
}

.padding-vertical-16 {
  padding-bottom: 16px;
  padding-top: 16px;
}

.padding-vertical-20 {
  padding-bottom: 20px;
  padding-top: 20px;
}

/* Rhythm styles */
.rhythm-horizontal-4 > :not(:first-child) {
  margin-left: 4px;
}

.rhythm-horizontal-8 > :not(:first-child) {
  margin-left: 8px;
}

.rhythm-horizontal-16 > :not(:first-child) {
  margin-left: 16px;
}

.rhythm-vertical-4 > :not(:first-child) {
  margin-top: 4px;
}

.rhythm-vertical-8 > :not(:first-child) {
  margin-top: 8px;
}

.rhythm-vertical-16 > :not(:first-child) {
  margin-top: 16px;
}

.rhythm-vertical-20 > :not(:first-child) {
  margin-top: 20px;
}

.rhythm-vertical-24 > :not(:first-child) {
  margin-top: 24px;
}

.rhythm-vertical-32 > :not(:first-child) {
  margin-top: 32px;
}

/*
    Visibility styles
    NOTE - leave at the end of the file so they will override the general layout styles above.
*/
.visually-hidden {
  border: 0;
  clip: rect(0 0 0 0);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: 1px;
}

.hidden {
  display: none;
}

.invisible {
  visibility: hidden;
}

.rotate-180 {
  transform: rotate(180deg);
}

.separator-line-top {
  border-top:  1px solid;
  border-top-color: rgba( 234, 234, 234 ,  1 );
  border-top-color: rgba( var(--palette-neutral-8,234, 234, 234) ,  1 );
}

.separator-line-bottom {
  border-bottom:  1px solid;
  border-bottom-color: rgba( 234, 234, 234 ,  1 );
  border-bottom-color: rgba( var(--palette-neutral-8,234, 234, 234) ,  1 );
}

.subtle-border {
  border:  1px solid;
  border-color: rgba( 234, 234, 234 ,  1 );
  border-color: rgba( var(--palette-neutral-8,234, 234, 234) ,  1 );
}

.suggestion-text {
  color: rgba( 214, 127, 60 ,  1 );
  color: rgba( var(--palette-accent3,214, 127, 60) ,  1 );
}
.suggestion-text .text-underlined {
  text-decoration: underline;
}

/*
    Custom styles for shimmer effects on elements.
*/
.shimmer {
  animation-duration: 4s;
  animation-timing-function: ease-in-out;
  animation-direction: normal;
  animation-iteration-count: infinite;
  background: linear-gradient(to right, rgba( 244, 244, 244 ,  1 ) 0%, rgba( 234, 234, 234 ,  1 ) 50%, rgba( 244, 244, 244 ,  1 ) 100%) 0px 0px/90% 100% no-repeat rgba( 244, 244, 244 ,  1 );
  background: linear-gradient(to right, rgba( var(--palette-neutral-4,244, 244, 244) ,  1 ) 0%, rgba( var(--palette-neutral-8,234, 234, 234) ,  1 ) 50%, rgba( var(--palette-neutral-4,244, 244, 244) ,  1 ) 100%) 0px 0px/90% 100% no-repeat rgba( var(--palette-neutral-4,244, 244, 244) ,  1 );
  transition: opacity 200ms ease 0s;
}

@keyframes shimmer-wide {
  0% {
    background-position: -500px;
  }
  100% {
    background-position: 500px;
  }
}
@keyframes shimmer-thin {
  0% {
    background-position: -200px;
  }
  100% {
    background-position: 200px;
  }
}
.shimmer-line {
  animation-name: shimmer-wide;
  border-radius: 0.5em;
}

.shimmer-circle-small {
  animation-name: shimmer-thin;
  border-radius: 50%;
  height: 1.3em;
  margin-right: 4px;
  width: 1.3em;
}

.shimmer-circle-large {
  animation-name: shimmer-thin;
  border-radius: 50%;
  height: 2.3em;
  margin-right: 4px;
  width: 2.3em;
}

/*
    Custom scrollbar support (only on Chrome)
*/
.custom-scrollbar {
  scrollbar-color: rgba(0, 0, 0, 0.20) transparent;
  scrollbar-color: var(--palette-black-alpha-20,rgba(0, 0, 0, 0.20)) transparent;
  scrollbar-width: thin;
}
.custom-scrollbar.scroll-auto-hide {
  scrollbar-color: transparent transparent;
}
.custom-scrollbar.scroll-auto-hide:hover {
  scrollbar-color: rgba(0, 0, 0, 0.20) transparent;
  scrollbar-color: var(--palette-black-alpha-20,rgba(0, 0, 0, 0.20)) transparent;
}

.custom-scrollbar::-webkit-scrollbar {
  width: 18px;
  height: 18px;
}

.custom-scrollbar::-webkit-scrollbar-thumb {
  border: 6px solid transparent;
  background: rgba(0, 0, 0, 0.20);
  background: var(--palette-black-alpha-20,rgba(0, 0, 0, 0.20));
  border-radius: 10px;
  background-clip: padding-box;
}

.custom-scrollbar::-webkit-scrollbar-corner {
  background: transparent;
}

.custom-scrollbar::-webkit-scrollbar-thumb:vertical {
  min-height: 30px;
}

.custom-scrollbar::-webkit-scrollbar-thumb:horizontal {
  min-width: 30px;
}

.custom-scrollbar.scroll-auto-hide::-webkit-scrollbar-thumb {
  background: transparent;
  background-clip: padding-box;
}

.custom-scrollbar.scroll-auto-hide:hover::-webkit-scrollbar-thumb {
  background: rgba(0, 0, 0, 0.20);
  background: var(--palette-black-alpha-20,rgba(0, 0, 0, 0.20));
  background-clip: padding-box;
}

.custom-scrollbar::-webkit-scrollbar-thumb:hover {
  background: rgba(0, 0, 0, 0.30);
  background: var(--palette-black-alpha-30,rgba(0, 0, 0, 0.30));
  background-clip: padding-box;
  border: 4px solid transparent;
}

.custom-scrollbar-hidden {
  -ms-overflow-style: none;
  scrollbar-width: none;
}

.custom-scrollbar-hidden::-webkit-scrollbar {
  width: 0;
}

.grayscale {
  filter: grayscale(100%);
}

.screen-reader-only {
  user-select: none;
  position: absolute;
  height: 1px;
  width: 1px;
  clip: rect(1px, 1px, 1px, 1px);
  clip-path: inset(50%);
  -webkit-clip-path: inset(50%);
  overflow: hidden !important;
  white-space: nowrap;
  padding: 0 !important;
  margin: 0 !important;
}
`, ""]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/azure-devops-ui/Core/_platformCommon.scss":
/*!*********************************************************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/azure-devops-ui/Core/_platformCommon.scss ***!
  \*********************************************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../css-loader/dist/runtime/noSourceMaps.js */ "./node_modules/css-loader/dist/runtime/noSourceMaps.js");
/* harmony import */ var _css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, ``, ""]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/api.js":
/*!*****************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/api.js ***!
  \*****************************************************/
/***/ ((module) => {

"use strict";


/*
  MIT License http://www.opensource.org/licenses/mit-license.php
  Author Tobias Koppers @sokra
*/
module.exports = function (cssWithMappingToString) {
  var list = [];

  // return the list of modules as css string
  list.toString = function toString() {
    return this.map(function (item) {
      var content = "";
      var needLayer = typeof item[5] !== "undefined";
      if (item[4]) {
        content += "@supports (".concat(item[4], ") {");
      }
      if (item[2]) {
        content += "@media ".concat(item[2], " {");
      }
      if (needLayer) {
        content += "@layer".concat(item[5].length > 0 ? " ".concat(item[5]) : "", " {");
      }
      content += cssWithMappingToString(item);
      if (needLayer) {
        content += "}";
      }
      if (item[2]) {
        content += "}";
      }
      if (item[4]) {
        content += "}";
      }
      return content;
    }).join("");
  };

  // import a list of modules into the list
  list.i = function i(modules, media, dedupe, supports, layer) {
    if (typeof modules === "string") {
      modules = [[null, modules, undefined]];
    }
    var alreadyImportedModules = {};
    if (dedupe) {
      for (var k = 0; k < this.length; k++) {
        var id = this[k][0];
        if (id != null) {
          alreadyImportedModules[id] = true;
        }
      }
    }
    for (var _k = 0; _k < modules.length; _k++) {
      var item = [].concat(modules[_k]);
      if (dedupe && alreadyImportedModules[item[0]]) {
        continue;
      }
      if (typeof layer !== "undefined") {
        if (typeof item[5] === "undefined") {
          item[5] = layer;
        } else {
          item[1] = "@layer".concat(item[5].length > 0 ? " ".concat(item[5]) : "", " {").concat(item[1], "}");
          item[5] = layer;
        }
      }
      if (media) {
        if (!item[2]) {
          item[2] = media;
        } else {
          item[1] = "@media ".concat(item[2], " {").concat(item[1], "}");
          item[2] = media;
        }
      }
      if (supports) {
        if (!item[4]) {
          item[4] = "".concat(supports);
        } else {
          item[1] = "@supports (".concat(item[4], ") {").concat(item[1], "}");
          item[4] = supports;
        }
      }
      list.push(item);
    }
  };
  return list;
};

/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/getUrl.js":
/*!********************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/getUrl.js ***!
  \********************************************************/
/***/ ((module) => {

"use strict";


module.exports = function (url, options) {
  if (!options) {
    options = {};
  }
  if (!url) {
    return url;
  }
  url = String(url.__esModule ? url.default : url);

  // If url is already wrapped in quotes, remove them
  if (/^['"].*['"]$/.test(url)) {
    url = url.slice(1, -1);
  }
  if (options.hash) {
    url += options.hash;
  }

  // Should url be wrapped?
  // See https://drafts.csswg.org/css-values-3/#urls
  if (/["'() \t\n]|(%20)/.test(url) || options.needQuotes) {
    return "\"".concat(url.replace(/"/g, '\\"').replace(/\n/g, "\\n"), "\"");
  }
  return url;
};

/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/noSourceMaps.js":
/*!**************************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/noSourceMaps.js ***!
  \**************************************************************/
/***/ ((module) => {

"use strict";


module.exports = function (i) {
  return i[1];
};

/***/ }),

/***/ "./node_modules/es6-object-assign/auto.js":
/*!************************************************!*\
  !*** ./node_modules/es6-object-assign/auto.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


(__webpack_require__(/*! ./index */ "./node_modules/es6-object-assign/index.js").polyfill)();


/***/ }),

/***/ "./node_modules/es6-object-assign/index.js":
/*!*************************************************!*\
  !*** ./node_modules/es6-object-assign/index.js ***!
  \*************************************************/
/***/ ((module) => {

"use strict";
/**
 * Code refactored from Mozilla Developer Network:
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign
 */



function assign(target, firstSource) {
  if (target === undefined || target === null) {
    throw new TypeError('Cannot convert first argument to object');
  }

  var to = Object(target);
  for (var i = 1; i < arguments.length; i++) {
    var nextSource = arguments[i];
    if (nextSource === undefined || nextSource === null) {
      continue;
    }

    var keysArray = Object.keys(Object(nextSource));
    for (var nextIndex = 0, len = keysArray.length; nextIndex < len; nextIndex++) {
      var nextKey = keysArray[nextIndex];
      var desc = Object.getOwnPropertyDescriptor(nextSource, nextKey);
      if (desc !== undefined && desc.enumerable) {
        to[nextKey] = nextSource[nextKey];
      }
    }
  }
  return to;
}

function polyfill() {
  if (!Object.assign) {
    Object.defineProperty(Object, 'assign', {
      enumerable: false,
      configurable: true,
      writable: true,
      value: assign
    });
  }
}

module.exports = {
  assign: assign,
  polyfill: polyfill
};


/***/ }),

/***/ "./node_modules/es6-promise/auto.js":
/*!******************************************!*\
  !*** ./node_modules/es6-promise/auto.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
// This file can be required in Browserify and Node.js for automatic polyfill
// To use it:  require('es6-promise/auto');

module.exports = (__webpack_require__(/*! ./ */ "./node_modules/es6-promise/dist/es6-promise.js").polyfill)();


/***/ }),

/***/ "./node_modules/es6-promise/dist/es6-promise.js":
/*!******************************************************!*\
  !*** ./node_modules/es6-promise/dist/es6-promise.js ***!
  \******************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

/*!
 * @overview es6-promise - a tiny implementation of Promises/A+.
 * @copyright Copyright (c) 2014 Yehuda Katz, Tom Dale, Stefan Penner and contributors (Conversion to ES6 API by Jake Archibald)
 * @license   Licensed under MIT license
 *            See https://raw.githubusercontent.com/stefanpenner/es6-promise/master/LICENSE
 * @version   v4.2.8+1e68dce6
 */

(function (global, factory) {
	 true ? module.exports = factory() :
	0;
}(this, (function () { 'use strict';

function objectOrFunction(x) {
  var type = typeof x;
  return x !== null && (type === 'object' || type === 'function');
}

function isFunction(x) {
  return typeof x === 'function';
}



var _isArray = void 0;
if (Array.isArray) {
  _isArray = Array.isArray;
} else {
  _isArray = function (x) {
    return Object.prototype.toString.call(x) === '[object Array]';
  };
}

var isArray = _isArray;

var len = 0;
var vertxNext = void 0;
var customSchedulerFn = void 0;

var asap = function asap(callback, arg) {
  queue[len] = callback;
  queue[len + 1] = arg;
  len += 2;
  if (len === 2) {
    // If len is 2, that means that we need to schedule an async flush.
    // If additional callbacks are queued before the queue is flushed, they
    // will be processed by this flush that we are scheduling.
    if (customSchedulerFn) {
      customSchedulerFn(flush);
    } else {
      scheduleFlush();
    }
  }
};

function setScheduler(scheduleFn) {
  customSchedulerFn = scheduleFn;
}

function setAsap(asapFn) {
  asap = asapFn;
}

var browserWindow = typeof window !== 'undefined' ? window : undefined;
var browserGlobal = browserWindow || {};
var BrowserMutationObserver = browserGlobal.MutationObserver || browserGlobal.WebKitMutationObserver;
var isNode = typeof self === 'undefined' && typeof process !== 'undefined' && {}.toString.call(process) === '[object process]';

// test for web worker but not in IE10
var isWorker = typeof Uint8ClampedArray !== 'undefined' && typeof importScripts !== 'undefined' && typeof MessageChannel !== 'undefined';

// node
function useNextTick() {
  // node version 0.10.x displays a deprecation warning when nextTick is used recursively
  // see https://github.com/cujojs/when/issues/410 for details
  return function () {
    return process.nextTick(flush);
  };
}

// vertx
function useVertxTimer() {
  if (typeof vertxNext !== 'undefined') {
    return function () {
      vertxNext(flush);
    };
  }

  return useSetTimeout();
}

function useMutationObserver() {
  var iterations = 0;
  var observer = new BrowserMutationObserver(flush);
  var node = document.createTextNode('');
  observer.observe(node, { characterData: true });

  return function () {
    node.data = iterations = ++iterations % 2;
  };
}

// web worker
function useMessageChannel() {
  var channel = new MessageChannel();
  channel.port1.onmessage = flush;
  return function () {
    return channel.port2.postMessage(0);
  };
}

function useSetTimeout() {
  // Store setTimeout reference so es6-promise will be unaffected by
  // other code modifying setTimeout (like sinon.useFakeTimers())
  var globalSetTimeout = setTimeout;
  return function () {
    return globalSetTimeout(flush, 1);
  };
}

var queue = new Array(1000);
function flush() {
  for (var i = 0; i < len; i += 2) {
    var callback = queue[i];
    var arg = queue[i + 1];

    callback(arg);

    queue[i] = undefined;
    queue[i + 1] = undefined;
  }

  len = 0;
}

function attemptVertx() {
  try {
    var vertx = Function('return this')().require('vertx');
    vertxNext = vertx.runOnLoop || vertx.runOnContext;
    return useVertxTimer();
  } catch (e) {
    return useSetTimeout();
  }
}

var scheduleFlush = void 0;
// Decide what async method to use to triggering processing of queued callbacks:
if (isNode) {
  scheduleFlush = useNextTick();
} else if (BrowserMutationObserver) {
  scheduleFlush = useMutationObserver();
} else if (isWorker) {
  scheduleFlush = useMessageChannel();
} else if (browserWindow === undefined && "function" === 'function') {
  scheduleFlush = attemptVertx();
} else {
  scheduleFlush = useSetTimeout();
}

function then(onFulfillment, onRejection) {
  var parent = this;

  var child = new this.constructor(noop);

  if (child[PROMISE_ID] === undefined) {
    makePromise(child);
  }

  var _state = parent._state;


  if (_state) {
    var callback = arguments[_state - 1];
    asap(function () {
      return invokeCallback(_state, child, callback, parent._result);
    });
  } else {
    subscribe(parent, child, onFulfillment, onRejection);
  }

  return child;
}

/**
  `Promise.resolve` returns a promise that will become resolved with the
  passed `value`. It is shorthand for the following:

  ```javascript
  let promise = new Promise(function(resolve, reject){
    resolve(1);
  });

  promise.then(function(value){
    // value === 1
  });
  ```

  Instead of writing the above, your code now simply becomes the following:

  ```javascript
  let promise = Promise.resolve(1);

  promise.then(function(value){
    // value === 1
  });
  ```

  @method resolve
  @static
  @param {Any} value value that the returned promise will be resolved with
  Useful for tooling.
  @return {Promise} a promise that will become fulfilled with the given
  `value`
*/
function resolve$1(object) {
  /*jshint validthis:true */
  var Constructor = this;

  if (object && typeof object === 'object' && object.constructor === Constructor) {
    return object;
  }

  var promise = new Constructor(noop);
  resolve(promise, object);
  return promise;
}

var PROMISE_ID = Math.random().toString(36).substring(2);

function noop() {}

var PENDING = void 0;
var FULFILLED = 1;
var REJECTED = 2;

function selfFulfillment() {
  return new TypeError("You cannot resolve a promise with itself");
}

function cannotReturnOwn() {
  return new TypeError('A promises callback cannot return that same promise.');
}

function tryThen(then$$1, value, fulfillmentHandler, rejectionHandler) {
  try {
    then$$1.call(value, fulfillmentHandler, rejectionHandler);
  } catch (e) {
    return e;
  }
}

function handleForeignThenable(promise, thenable, then$$1) {
  asap(function (promise) {
    var sealed = false;
    var error = tryThen(then$$1, thenable, function (value) {
      if (sealed) {
        return;
      }
      sealed = true;
      if (thenable !== value) {
        resolve(promise, value);
      } else {
        fulfill(promise, value);
      }
    }, function (reason) {
      if (sealed) {
        return;
      }
      sealed = true;

      reject(promise, reason);
    }, 'Settle: ' + (promise._label || ' unknown promise'));

    if (!sealed && error) {
      sealed = true;
      reject(promise, error);
    }
  }, promise);
}

function handleOwnThenable(promise, thenable) {
  if (thenable._state === FULFILLED) {
    fulfill(promise, thenable._result);
  } else if (thenable._state === REJECTED) {
    reject(promise, thenable._result);
  } else {
    subscribe(thenable, undefined, function (value) {
      return resolve(promise, value);
    }, function (reason) {
      return reject(promise, reason);
    });
  }
}

function handleMaybeThenable(promise, maybeThenable, then$$1) {
  if (maybeThenable.constructor === promise.constructor && then$$1 === then && maybeThenable.constructor.resolve === resolve$1) {
    handleOwnThenable(promise, maybeThenable);
  } else {
    if (then$$1 === undefined) {
      fulfill(promise, maybeThenable);
    } else if (isFunction(then$$1)) {
      handleForeignThenable(promise, maybeThenable, then$$1);
    } else {
      fulfill(promise, maybeThenable);
    }
  }
}

function resolve(promise, value) {
  if (promise === value) {
    reject(promise, selfFulfillment());
  } else if (objectOrFunction(value)) {
    var then$$1 = void 0;
    try {
      then$$1 = value.then;
    } catch (error) {
      reject(promise, error);
      return;
    }
    handleMaybeThenable(promise, value, then$$1);
  } else {
    fulfill(promise, value);
  }
}

function publishRejection(promise) {
  if (promise._onerror) {
    promise._onerror(promise._result);
  }

  publish(promise);
}

function fulfill(promise, value) {
  if (promise._state !== PENDING) {
    return;
  }

  promise._result = value;
  promise._state = FULFILLED;

  if (promise._subscribers.length !== 0) {
    asap(publish, promise);
  }
}

function reject(promise, reason) {
  if (promise._state !== PENDING) {
    return;
  }
  promise._state = REJECTED;
  promise._result = reason;

  asap(publishRejection, promise);
}

function subscribe(parent, child, onFulfillment, onRejection) {
  var _subscribers = parent._subscribers;
  var length = _subscribers.length;


  parent._onerror = null;

  _subscribers[length] = child;
  _subscribers[length + FULFILLED] = onFulfillment;
  _subscribers[length + REJECTED] = onRejection;

  if (length === 0 && parent._state) {
    asap(publish, parent);
  }
}

function publish(promise) {
  var subscribers = promise._subscribers;
  var settled = promise._state;

  if (subscribers.length === 0) {
    return;
  }

  var child = void 0,
      callback = void 0,
      detail = promise._result;

  for (var i = 0; i < subscribers.length; i += 3) {
    child = subscribers[i];
    callback = subscribers[i + settled];

    if (child) {
      invokeCallback(settled, child, callback, detail);
    } else {
      callback(detail);
    }
  }

  promise._subscribers.length = 0;
}

function invokeCallback(settled, promise, callback, detail) {
  var hasCallback = isFunction(callback),
      value = void 0,
      error = void 0,
      succeeded = true;

  if (hasCallback) {
    try {
      value = callback(detail);
    } catch (e) {
      succeeded = false;
      error = e;
    }

    if (promise === value) {
      reject(promise, cannotReturnOwn());
      return;
    }
  } else {
    value = detail;
  }

  if (promise._state !== PENDING) {
    // noop
  } else if (hasCallback && succeeded) {
    resolve(promise, value);
  } else if (succeeded === false) {
    reject(promise, error);
  } else if (settled === FULFILLED) {
    fulfill(promise, value);
  } else if (settled === REJECTED) {
    reject(promise, value);
  }
}

function initializePromise(promise, resolver) {
  try {
    resolver(function resolvePromise(value) {
      resolve(promise, value);
    }, function rejectPromise(reason) {
      reject(promise, reason);
    });
  } catch (e) {
    reject(promise, e);
  }
}

var id = 0;
function nextId() {
  return id++;
}

function makePromise(promise) {
  promise[PROMISE_ID] = id++;
  promise._state = undefined;
  promise._result = undefined;
  promise._subscribers = [];
}

function validationError() {
  return new Error('Array Methods must be provided an Array');
}

var Enumerator = function () {
  function Enumerator(Constructor, input) {
    this._instanceConstructor = Constructor;
    this.promise = new Constructor(noop);

    if (!this.promise[PROMISE_ID]) {
      makePromise(this.promise);
    }

    if (isArray(input)) {
      this.length = input.length;
      this._remaining = input.length;

      this._result = new Array(this.length);

      if (this.length === 0) {
        fulfill(this.promise, this._result);
      } else {
        this.length = this.length || 0;
        this._enumerate(input);
        if (this._remaining === 0) {
          fulfill(this.promise, this._result);
        }
      }
    } else {
      reject(this.promise, validationError());
    }
  }

  Enumerator.prototype._enumerate = function _enumerate(input) {
    for (var i = 0; this._state === PENDING && i < input.length; i++) {
      this._eachEntry(input[i], i);
    }
  };

  Enumerator.prototype._eachEntry = function _eachEntry(entry, i) {
    var c = this._instanceConstructor;
    var resolve$$1 = c.resolve;


    if (resolve$$1 === resolve$1) {
      var _then = void 0;
      var error = void 0;
      var didError = false;
      try {
        _then = entry.then;
      } catch (e) {
        didError = true;
        error = e;
      }

      if (_then === then && entry._state !== PENDING) {
        this._settledAt(entry._state, i, entry._result);
      } else if (typeof _then !== 'function') {
        this._remaining--;
        this._result[i] = entry;
      } else if (c === Promise$1) {
        var promise = new c(noop);
        if (didError) {
          reject(promise, error);
        } else {
          handleMaybeThenable(promise, entry, _then);
        }
        this._willSettleAt(promise, i);
      } else {
        this._willSettleAt(new c(function (resolve$$1) {
          return resolve$$1(entry);
        }), i);
      }
    } else {
      this._willSettleAt(resolve$$1(entry), i);
    }
  };

  Enumerator.prototype._settledAt = function _settledAt(state, i, value) {
    var promise = this.promise;


    if (promise._state === PENDING) {
      this._remaining--;

      if (state === REJECTED) {
        reject(promise, value);
      } else {
        this._result[i] = value;
      }
    }

    if (this._remaining === 0) {
      fulfill(promise, this._result);
    }
  };

  Enumerator.prototype._willSettleAt = function _willSettleAt(promise, i) {
    var enumerator = this;

    subscribe(promise, undefined, function (value) {
      return enumerator._settledAt(FULFILLED, i, value);
    }, function (reason) {
      return enumerator._settledAt(REJECTED, i, reason);
    });
  };

  return Enumerator;
}();

/**
  `Promise.all` accepts an array of promises, and returns a new promise which
  is fulfilled with an array of fulfillment values for the passed promises, or
  rejected with the reason of the first passed promise to be rejected. It casts all
  elements of the passed iterable to promises as it runs this algorithm.

  Example:

  ```javascript
  let promise1 = resolve(1);
  let promise2 = resolve(2);
  let promise3 = resolve(3);
  let promises = [ promise1, promise2, promise3 ];

  Promise.all(promises).then(function(array){
    // The array here would be [ 1, 2, 3 ];
  });
  ```

  If any of the `promises` given to `all` are rejected, the first promise
  that is rejected will be given as an argument to the returned promises's
  rejection handler. For example:

  Example:

  ```javascript
  let promise1 = resolve(1);
  let promise2 = reject(new Error("2"));
  let promise3 = reject(new Error("3"));
  let promises = [ promise1, promise2, promise3 ];

  Promise.all(promises).then(function(array){
    // Code here never runs because there are rejected promises!
  }, function(error) {
    // error.message === "2"
  });
  ```

  @method all
  @static
  @param {Array} entries array of promises
  @param {String} label optional string for labeling the promise.
  Useful for tooling.
  @return {Promise} promise that is fulfilled when all `promises` have been
  fulfilled, or rejected if any of them become rejected.
  @static
*/
function all(entries) {
  return new Enumerator(this, entries).promise;
}

/**
  `Promise.race` returns a new promise which is settled in the same way as the
  first passed promise to settle.

  Example:

  ```javascript
  let promise1 = new Promise(function(resolve, reject){
    setTimeout(function(){
      resolve('promise 1');
    }, 200);
  });

  let promise2 = new Promise(function(resolve, reject){
    setTimeout(function(){
      resolve('promise 2');
    }, 100);
  });

  Promise.race([promise1, promise2]).then(function(result){
    // result === 'promise 2' because it was resolved before promise1
    // was resolved.
  });
  ```

  `Promise.race` is deterministic in that only the state of the first
  settled promise matters. For example, even if other promises given to the
  `promises` array argument are resolved, but the first settled promise has
  become rejected before the other promises became fulfilled, the returned
  promise will become rejected:

  ```javascript
  let promise1 = new Promise(function(resolve, reject){
    setTimeout(function(){
      resolve('promise 1');
    }, 200);
  });

  let promise2 = new Promise(function(resolve, reject){
    setTimeout(function(){
      reject(new Error('promise 2'));
    }, 100);
  });

  Promise.race([promise1, promise2]).then(function(result){
    // Code here never runs
  }, function(reason){
    // reason.message === 'promise 2' because promise 2 became rejected before
    // promise 1 became fulfilled
  });
  ```

  An example real-world use case is implementing timeouts:

  ```javascript
  Promise.race([ajax('foo.json'), timeout(5000)])
  ```

  @method race
  @static
  @param {Array} promises array of promises to observe
  Useful for tooling.
  @return {Promise} a promise which settles in the same way as the first passed
  promise to settle.
*/
function race(entries) {
  /*jshint validthis:true */
  var Constructor = this;

  if (!isArray(entries)) {
    return new Constructor(function (_, reject) {
      return reject(new TypeError('You must pass an array to race.'));
    });
  } else {
    return new Constructor(function (resolve, reject) {
      var length = entries.length;
      for (var i = 0; i < length; i++) {
        Constructor.resolve(entries[i]).then(resolve, reject);
      }
    });
  }
}

/**
  `Promise.reject` returns a promise rejected with the passed `reason`.
  It is shorthand for the following:

  ```javascript
  let promise = new Promise(function(resolve, reject){
    reject(new Error('WHOOPS'));
  });

  promise.then(function(value){
    // Code here doesn't run because the promise is rejected!
  }, function(reason){
    // reason.message === 'WHOOPS'
  });
  ```

  Instead of writing the above, your code now simply becomes the following:

  ```javascript
  let promise = Promise.reject(new Error('WHOOPS'));

  promise.then(function(value){
    // Code here doesn't run because the promise is rejected!
  }, function(reason){
    // reason.message === 'WHOOPS'
  });
  ```

  @method reject
  @static
  @param {Any} reason value that the returned promise will be rejected with.
  Useful for tooling.
  @return {Promise} a promise rejected with the given `reason`.
*/
function reject$1(reason) {
  /*jshint validthis:true */
  var Constructor = this;
  var promise = new Constructor(noop);
  reject(promise, reason);
  return promise;
}

function needsResolver() {
  throw new TypeError('You must pass a resolver function as the first argument to the promise constructor');
}

function needsNew() {
  throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.");
}

/**
  Promise objects represent the eventual result of an asynchronous operation. The
  primary way of interacting with a promise is through its `then` method, which
  registers callbacks to receive either a promise's eventual value or the reason
  why the promise cannot be fulfilled.

  Terminology
  -----------

  - `promise` is an object or function with a `then` method whose behavior conforms to this specification.
  - `thenable` is an object or function that defines a `then` method.
  - `value` is any legal JavaScript value (including undefined, a thenable, or a promise).
  - `exception` is a value that is thrown using the throw statement.
  - `reason` is a value that indicates why a promise was rejected.
  - `settled` the final resting state of a promise, fulfilled or rejected.

  A promise can be in one of three states: pending, fulfilled, or rejected.

  Promises that are fulfilled have a fulfillment value and are in the fulfilled
  state.  Promises that are rejected have a rejection reason and are in the
  rejected state.  A fulfillment value is never a thenable.

  Promises can also be said to *resolve* a value.  If this value is also a
  promise, then the original promise's settled state will match the value's
  settled state.  So a promise that *resolves* a promise that rejects will
  itself reject, and a promise that *resolves* a promise that fulfills will
  itself fulfill.


  Basic Usage:
  ------------

  ```js
  let promise = new Promise(function(resolve, reject) {
    // on success
    resolve(value);

    // on failure
    reject(reason);
  });

  promise.then(function(value) {
    // on fulfillment
  }, function(reason) {
    // on rejection
  });
  ```

  Advanced Usage:
  ---------------

  Promises shine when abstracting away asynchronous interactions such as
  `XMLHttpRequest`s.

  ```js
  function getJSON(url) {
    return new Promise(function(resolve, reject){
      let xhr = new XMLHttpRequest();

      xhr.open('GET', url);
      xhr.onreadystatechange = handler;
      xhr.responseType = 'json';
      xhr.setRequestHeader('Accept', 'application/json');
      xhr.send();

      function handler() {
        if (this.readyState === this.DONE) {
          if (this.status === 200) {
            resolve(this.response);
          } else {
            reject(new Error('getJSON: `' + url + '` failed with status: [' + this.status + ']'));
          }
        }
      };
    });
  }

  getJSON('/posts.json').then(function(json) {
    // on fulfillment
  }, function(reason) {
    // on rejection
  });
  ```

  Unlike callbacks, promises are great composable primitives.

  ```js
  Promise.all([
    getJSON('/posts'),
    getJSON('/comments')
  ]).then(function(values){
    values[0] // => postsJSON
    values[1] // => commentsJSON

    return values;
  });
  ```

  @class Promise
  @param {Function} resolver
  Useful for tooling.
  @constructor
*/

var Promise$1 = function () {
  function Promise(resolver) {
    this[PROMISE_ID] = nextId();
    this._result = this._state = undefined;
    this._subscribers = [];

    if (noop !== resolver) {
      typeof resolver !== 'function' && needsResolver();
      this instanceof Promise ? initializePromise(this, resolver) : needsNew();
    }
  }

  /**
  The primary way of interacting with a promise is through its `then` method,
  which registers callbacks to receive either a promise's eventual value or the
  reason why the promise cannot be fulfilled.
   ```js
  findUser().then(function(user){
    // user is available
  }, function(reason){
    // user is unavailable, and you are given the reason why
  });
  ```
   Chaining
  --------
   The return value of `then` is itself a promise.  This second, 'downstream'
  promise is resolved with the return value of the first promise's fulfillment
  or rejection handler, or rejected if the handler throws an exception.
   ```js
  findUser().then(function (user) {
    return user.name;
  }, function (reason) {
    return 'default name';
  }).then(function (userName) {
    // If `findUser` fulfilled, `userName` will be the user's name, otherwise it
    // will be `'default name'`
  });
   findUser().then(function (user) {
    throw new Error('Found user, but still unhappy');
  }, function (reason) {
    throw new Error('`findUser` rejected and we're unhappy');
  }).then(function (value) {
    // never reached
  }, function (reason) {
    // if `findUser` fulfilled, `reason` will be 'Found user, but still unhappy'.
    // If `findUser` rejected, `reason` will be '`findUser` rejected and we're unhappy'.
  });
  ```
  If the downstream promise does not specify a rejection handler, rejection reasons will be propagated further downstream.
   ```js
  findUser().then(function (user) {
    throw new PedagogicalException('Upstream error');
  }).then(function (value) {
    // never reached
  }).then(function (value) {
    // never reached
  }, function (reason) {
    // The `PedgagocialException` is propagated all the way down to here
  });
  ```
   Assimilation
  ------------
   Sometimes the value you want to propagate to a downstream promise can only be
  retrieved asynchronously. This can be achieved by returning a promise in the
  fulfillment or rejection handler. The downstream promise will then be pending
  until the returned promise is settled. This is called *assimilation*.
   ```js
  findUser().then(function (user) {
    return findCommentsByAuthor(user);
  }).then(function (comments) {
    // The user's comments are now available
  });
  ```
   If the assimliated promise rejects, then the downstream promise will also reject.
   ```js
  findUser().then(function (user) {
    return findCommentsByAuthor(user);
  }).then(function (comments) {
    // If `findCommentsByAuthor` fulfills, we'll have the value here
  }, function (reason) {
    // If `findCommentsByAuthor` rejects, we'll have the reason here
  });
  ```
   Simple Example
  --------------
   Synchronous Example
   ```javascript
  let result;
   try {
    result = findResult();
    // success
  } catch(reason) {
    // failure
  }
  ```
   Errback Example
   ```js
  findResult(function(result, err){
    if (err) {
      // failure
    } else {
      // success
    }
  });
  ```
   Promise Example;
   ```javascript
  findResult().then(function(result){
    // success
  }, function(reason){
    // failure
  });
  ```
   Advanced Example
  --------------
   Synchronous Example
   ```javascript
  let author, books;
   try {
    author = findAuthor();
    books  = findBooksByAuthor(author);
    // success
  } catch(reason) {
    // failure
  }
  ```
   Errback Example
   ```js
   function foundBooks(books) {
   }
   function failure(reason) {
   }
   findAuthor(function(author, err){
    if (err) {
      failure(err);
      // failure
    } else {
      try {
        findBoooksByAuthor(author, function(books, err) {
          if (err) {
            failure(err);
          } else {
            try {
              foundBooks(books);
            } catch(reason) {
              failure(reason);
            }
          }
        });
      } catch(error) {
        failure(err);
      }
      // success
    }
  });
  ```
   Promise Example;
   ```javascript
  findAuthor().
    then(findBooksByAuthor).
    then(function(books){
      // found books
  }).catch(function(reason){
    // something went wrong
  });
  ```
   @method then
  @param {Function} onFulfilled
  @param {Function} onRejected
  Useful for tooling.
  @return {Promise}
  */

  /**
  `catch` is simply sugar for `then(undefined, onRejection)` which makes it the same
  as the catch block of a try/catch statement.
  ```js
  function findAuthor(){
  throw new Error('couldn't find that author');
  }
  // synchronous
  try {
  findAuthor();
  } catch(reason) {
  // something went wrong
  }
  // async with promises
  findAuthor().catch(function(reason){
  // something went wrong
  });
  ```
  @method catch
  @param {Function} onRejection
  Useful for tooling.
  @return {Promise}
  */


  Promise.prototype.catch = function _catch(onRejection) {
    return this.then(null, onRejection);
  };

  /**
    `finally` will be invoked regardless of the promise's fate just as native
    try/catch/finally behaves
  
    Synchronous example:
  
    ```js
    findAuthor() {
      if (Math.random() > 0.5) {
        throw new Error();
      }
      return new Author();
    }
  
    try {
      return findAuthor(); // succeed or fail
    } catch(error) {
      return findOtherAuther();
    } finally {
      // always runs
      // doesn't affect the return value
    }
    ```
  
    Asynchronous example:
  
    ```js
    findAuthor().catch(function(reason){
      return findOtherAuther();
    }).finally(function(){
      // author was either found, or not
    });
    ```
  
    @method finally
    @param {Function} callback
    @return {Promise}
  */


  Promise.prototype.finally = function _finally(callback) {
    var promise = this;
    var constructor = promise.constructor;

    if (isFunction(callback)) {
      return promise.then(function (value) {
        return constructor.resolve(callback()).then(function () {
          return value;
        });
      }, function (reason) {
        return constructor.resolve(callback()).then(function () {
          throw reason;
        });
      });
    }

    return promise.then(callback, callback);
  };

  return Promise;
}();

Promise$1.prototype.then = then;
Promise$1.all = all;
Promise$1.race = race;
Promise$1.resolve = resolve$1;
Promise$1.reject = reject$1;
Promise$1._setScheduler = setScheduler;
Promise$1._setAsap = setAsap;
Promise$1._asap = asap;

/*global self*/
function polyfill() {
  var local = void 0;

  if (typeof __webpack_require__.g !== 'undefined') {
    local = __webpack_require__.g;
  } else if (typeof self !== 'undefined') {
    local = self;
  } else {
    try {
      local = Function('return this')();
    } catch (e) {
      throw new Error('polyfill failed because global object is unavailable in this environment');
    }
  }

  var P = local.Promise;

  if (P) {
    var promiseToString = null;
    try {
      promiseToString = Object.prototype.toString.call(P.resolve());
    } catch (e) {
      // silently ignored
    }

    if (promiseToString === '[object Promise]' && !P.cast) {
      return;
    }
  }

  local.Promise = Promise$1;
}

// Strange compat..
Promise$1.polyfill = polyfill;
Promise$1.Promise = Promise$1;

return Promise$1;

})));



//# sourceMappingURL=es6-promise.map


/***/ }),

/***/ "./node_modules/es6-string-polyfills/polyfill.min.js":
/*!***********************************************************!*\
  !*** ./node_modules/es6-string-polyfills/polyfill.min.js ***!
  \***********************************************************/
/***/ (() => {

!function(){"use strict";function r(r){for(var t=[],e=0;e<r.length;e++)t.push(r[e]);return t}String.prototype.codePointAt||!function(){var r=function(){try{var r={},t=Object.defineProperty,e=t(r,r,r)&&t}catch(r){}return e}(),t=function(r){if(null==this)throw TypeError();var t=this+"",e=t.length,n=r?+r:0;if(n!=n&&(n=0),!(n<0||n>=e)){var o,i=t.charCodeAt(n);return i>=55296&&i<=56319&&e>n+1&&(o=t.charCodeAt(n+1),o>=56320&&o<=57343)?1024*(i-55296)+o-56320+65536:i}};r?r(String.prototype,"codePointAt",{value:t,configurable:!0,writable:!0}):String.prototype.codePointAt=t}(),String.prototype.repeat||!function(){var r=function(){try{var r={},t=Object.defineProperty,e=t(r,r,r)&&t}catch(r){}return e}(),t=function(r){if(null==this)throw TypeError();var t=this+"",e=r?+r:0;if(e!=e&&(e=0),e<0||e==1/0)throw RangeError();for(var n="";e;)e%2==1&&(n+=t),e>1&&(t+=t),e>>=1;return n};r?r(String.prototype,"repeat",{value:t,configurable:!0,writable:!0}):String.prototype.repeat=t}(),String.prototype.includes||!function(){var r={}.toString,t=function(){try{var r={},t=Object.defineProperty,e=t(r,r,r)&&t}catch(r){}return e}(),e="".indexOf,n=function(t){if(null==this)throw TypeError();var n=this+"";if(t&&"[object RegExp]"==r.call(t))throw TypeError();var o=n.length,i=t+"",a=i.length,c=arguments.length>1?arguments[1]:void 0,u=c?+c:0;return u!=u&&(u=0),!(a+Math.min(Math.max(u,0),o)>o)&&e.call(n,i,u)!=-1};t?t(String.prototype,"includes",{value:n,configurable:!0,writable:!0}):String.prototype.includes=n}(),String.prototype.startsWith||!function(){var r=function(){try{var r={},t=Object.defineProperty,e=t(r,r,r)&&t}catch(r){}return e}(),t={}.toString,e=function(r){if(null==this)throw TypeError();var e=this+"";if(r&&"[object RegExp]"==t.call(r))throw TypeError();var n=e.length,o=r+"",i=o.length,a=arguments.length>1?arguments[1]:void 0,c=a?+a:0;c!=c&&(c=0);var u=Math.min(Math.max(c,0),n);if(i+u>n)return!1;for(var l=-1;++l<i;)if(e.charCodeAt(u+l)!=o.charCodeAt(l))return!1;return!0};r?r(String.prototype,"startsWith",{value:e,configurable:!0,writable:!0}):String.prototype.startsWith=e}(),String.prototype.endsWith||!function(){var r=function(){try{var r={},t=Object.defineProperty,e=t(r,r,r)&&t}catch(r){}return e}(),t={}.toString,e=function(r){if(null==this)throw TypeError();var e=this+"";if(r&&"[object RegExp]"==t.call(r))throw TypeError();var n=e.length,o=r+"",i=o.length,a=n;if(arguments.length>1){var c=arguments[1];void 0!==c&&(a=c?+c:0,a!=a&&(a=0))}var u=Math.min(Math.max(a,0),n),l=u-i;if(l<0)return!1;for(var h=-1;++h<i;)if(e.charCodeAt(l+h)!=o.charCodeAt(h))return!1;return!0};r?r(String.prototype,"endsWith",{value:e,configurable:!0,writable:!0}):String.prototype.endsWith=e}(),String.fromCodePoint||!function(){var r=function(){try{var r={},t=Object.defineProperty,e=t(r,r,r)&&t}catch(r){}return e}(),t=String.fromCharCode,e=Math.floor,n=function(r){var n,o,i=16384,a=[],c=-1,u=arguments.length;if(!u)return"";for(var l="";++c<u;){var h=+arguments[c];if(!isFinite(h)||h<0||h>1114111||e(h)!=h)throw RangeError("Invalid code point: "+h);h<=65535?a.push(h):(h-=65536,n=(h>>10)+55296,o=h%1024+56320,a.push(n,o)),(c+1==u||a.length>i)&&(l+=t.apply(null,a),a.length=0)}return l};r?r(String,"fromCodePoint",{value:n,configurable:!0,writable:!0}):String.fromCodePoint=n}(),Object.defineProperty(String,"raw",{configurable:!0,enumerable:!1,writable:!0,value:function(t,e){var n;t=null!=t?t:{},e=arguments.length>1?r(arguments).slice(1):[];try{n=r(t.raw)}catch(r){throw new TypeError("Cannot convert undefined or null to object")}return n.map(function(r,n){return t.raw.length<=n?r:null!=e[n-1]?e[n-1]+r:r}).join("")}})}();


/***/ }),

/***/ "./node_modules/intersection-observer/intersection-observer.js":
/*!*********************************************************************!*\
  !*** ./node_modules/intersection-observer/intersection-observer.js ***!
  \*********************************************************************/
/***/ (() => {

/**
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the W3C SOFTWARE AND DOCUMENT NOTICE AND LICENSE.
 *
 *  https://www.w3.org/Consortium/Legal/2015/copyright-software-and-document
 *
 */

(function(window, document) {
'use strict';


// Exits early if all IntersectionObserver and IntersectionObserverEntry
// features are natively supported.
if ('IntersectionObserver' in window &&
    'IntersectionObserverEntry' in window &&
    'intersectionRatio' in window.IntersectionObserverEntry.prototype) {

  // Minimal polyfill for Edge 15's lack of `isIntersecting`
  // See: https://github.com/w3c/IntersectionObserver/issues/211
  if (!('isIntersecting' in window.IntersectionObserverEntry.prototype)) {
    Object.defineProperty(window.IntersectionObserverEntry.prototype,
      'isIntersecting', {
      get: function () {
        return this.intersectionRatio > 0;
      }
    });
  }
  return;
}


/**
 * An IntersectionObserver registry. This registry exists to hold a strong
 * reference to IntersectionObserver instances currently observing a target
 * element. Without this registry, instances without another reference may be
 * garbage collected.
 */
var registry = [];


/**
 * Creates the global IntersectionObserverEntry constructor.
 * https://w3c.github.io/IntersectionObserver/#intersection-observer-entry
 * @param {Object} entry A dictionary of instance properties.
 * @constructor
 */
function IntersectionObserverEntry(entry) {
  this.time = entry.time;
  this.target = entry.target;
  this.rootBounds = entry.rootBounds;
  this.boundingClientRect = entry.boundingClientRect;
  this.intersectionRect = entry.intersectionRect || getEmptyRect();
  this.isIntersecting = !!entry.intersectionRect;

  // Calculates the intersection ratio.
  var targetRect = this.boundingClientRect;
  var targetArea = targetRect.width * targetRect.height;
  var intersectionRect = this.intersectionRect;
  var intersectionArea = intersectionRect.width * intersectionRect.height;

  // Sets intersection ratio.
  if (targetArea) {
    // Round the intersection ratio to avoid floating point math issues:
    // https://github.com/w3c/IntersectionObserver/issues/324
    this.intersectionRatio = Number((intersectionArea / targetArea).toFixed(4));
  } else {
    // If area is zero and is intersecting, sets to 1, otherwise to 0
    this.intersectionRatio = this.isIntersecting ? 1 : 0;
  }
}


/**
 * Creates the global IntersectionObserver constructor.
 * https://w3c.github.io/IntersectionObserver/#intersection-observer-interface
 * @param {Function} callback The function to be invoked after intersection
 *     changes have queued. The function is not invoked if the queue has
 *     been emptied by calling the `takeRecords` method.
 * @param {Object=} opt_options Optional configuration options.
 * @constructor
 */
function IntersectionObserver(callback, opt_options) {

  var options = opt_options || {};

  if (typeof callback != 'function') {
    throw new Error('callback must be a function');
  }

  if (options.root && options.root.nodeType != 1) {
    throw new Error('root must be an Element');
  }

  // Binds and throttles `this._checkForIntersections`.
  this._checkForIntersections = throttle(
      this._checkForIntersections.bind(this), this.THROTTLE_TIMEOUT);

  // Private properties.
  this._callback = callback;
  this._observationTargets = [];
  this._queuedEntries = [];
  this._rootMarginValues = this._parseRootMargin(options.rootMargin);

  // Public properties.
  this.thresholds = this._initThresholds(options.threshold);
  this.root = options.root || null;
  this.rootMargin = this._rootMarginValues.map(function(margin) {
    return margin.value + margin.unit;
  }).join(' ');
}


/**
 * The minimum interval within which the document will be checked for
 * intersection changes.
 */
IntersectionObserver.prototype.THROTTLE_TIMEOUT = 100;


/**
 * The frequency in which the polyfill polls for intersection changes.
 * this can be updated on a per instance basis and must be set prior to
 * calling `observe` on the first target.
 */
IntersectionObserver.prototype.POLL_INTERVAL = null;

/**
 * Use a mutation observer on the root element
 * to detect intersection changes.
 */
IntersectionObserver.prototype.USE_MUTATION_OBSERVER = true;


/**
 * Starts observing a target element for intersection changes based on
 * the thresholds values.
 * @param {Element} target The DOM element to observe.
 */
IntersectionObserver.prototype.observe = function(target) {
  var isTargetAlreadyObserved = this._observationTargets.some(function(item) {
    return item.element == target;
  });

  if (isTargetAlreadyObserved) {
    return;
  }

  if (!(target && target.nodeType == 1)) {
    throw new Error('target must be an Element');
  }

  this._registerInstance();
  this._observationTargets.push({element: target, entry: null});
  this._monitorIntersections();
  this._checkForIntersections();
};


/**
 * Stops observing a target element for intersection changes.
 * @param {Element} target The DOM element to observe.
 */
IntersectionObserver.prototype.unobserve = function(target) {
  this._observationTargets =
      this._observationTargets.filter(function(item) {

    return item.element != target;
  });
  if (!this._observationTargets.length) {
    this._unmonitorIntersections();
    this._unregisterInstance();
  }
};


/**
 * Stops observing all target elements for intersection changes.
 */
IntersectionObserver.prototype.disconnect = function() {
  this._observationTargets = [];
  this._unmonitorIntersections();
  this._unregisterInstance();
};


/**
 * Returns any queue entries that have not yet been reported to the
 * callback and clears the queue. This can be used in conjunction with the
 * callback to obtain the absolute most up-to-date intersection information.
 * @return {Array} The currently queued entries.
 */
IntersectionObserver.prototype.takeRecords = function() {
  var records = this._queuedEntries.slice();
  this._queuedEntries = [];
  return records;
};


/**
 * Accepts the threshold value from the user configuration object and
 * returns a sorted array of unique threshold values. If a value is not
 * between 0 and 1 and error is thrown.
 * @private
 * @param {Array|number=} opt_threshold An optional threshold value or
 *     a list of threshold values, defaulting to [0].
 * @return {Array} A sorted list of unique and valid threshold values.
 */
IntersectionObserver.prototype._initThresholds = function(opt_threshold) {
  var threshold = opt_threshold || [0];
  if (!Array.isArray(threshold)) threshold = [threshold];

  return threshold.sort().filter(function(t, i, a) {
    if (typeof t != 'number' || isNaN(t) || t < 0 || t > 1) {
      throw new Error('threshold must be a number between 0 and 1 inclusively');
    }
    return t !== a[i - 1];
  });
};


/**
 * Accepts the rootMargin value from the user configuration object
 * and returns an array of the four margin values as an object containing
 * the value and unit properties. If any of the values are not properly
 * formatted or use a unit other than px or %, and error is thrown.
 * @private
 * @param {string=} opt_rootMargin An optional rootMargin value,
 *     defaulting to '0px'.
 * @return {Array<Object>} An array of margin objects with the keys
 *     value and unit.
 */
IntersectionObserver.prototype._parseRootMargin = function(opt_rootMargin) {
  var marginString = opt_rootMargin || '0px';
  var margins = marginString.split(/\s+/).map(function(margin) {
    var parts = /^(-?\d*\.?\d+)(px|%)$/.exec(margin);
    if (!parts) {
      throw new Error('rootMargin must be specified in pixels or percent');
    }
    return {value: parseFloat(parts[1]), unit: parts[2]};
  });

  // Handles shorthand.
  margins[1] = margins[1] || margins[0];
  margins[2] = margins[2] || margins[0];
  margins[3] = margins[3] || margins[1];

  return margins;
};


/**
 * Starts polling for intersection changes if the polling is not already
 * happening, and if the page's visibility state is visible.
 * @private
 */
IntersectionObserver.prototype._monitorIntersections = function() {
  if (!this._monitoringIntersections) {
    this._monitoringIntersections = true;

    // If a poll interval is set, use polling instead of listening to
    // resize and scroll events or DOM mutations.
    if (this.POLL_INTERVAL) {
      this._monitoringInterval = setInterval(
          this._checkForIntersections, this.POLL_INTERVAL);
    }
    else {
      addEvent(window, 'resize', this._checkForIntersections, true);
      addEvent(document, 'scroll', this._checkForIntersections, true);

      if (this.USE_MUTATION_OBSERVER && 'MutationObserver' in window) {
        this._domObserver = new MutationObserver(this._checkForIntersections);
        this._domObserver.observe(document, {
          attributes: true,
          childList: true,
          characterData: true,
          subtree: true
        });
      }
    }
  }
};


/**
 * Stops polling for intersection changes.
 * @private
 */
IntersectionObserver.prototype._unmonitorIntersections = function() {
  if (this._monitoringIntersections) {
    this._monitoringIntersections = false;

    clearInterval(this._monitoringInterval);
    this._monitoringInterval = null;

    removeEvent(window, 'resize', this._checkForIntersections, true);
    removeEvent(document, 'scroll', this._checkForIntersections, true);

    if (this._domObserver) {
      this._domObserver.disconnect();
      this._domObserver = null;
    }
  }
};


/**
 * Scans each observation target for intersection changes and adds them
 * to the internal entries queue. If new entries are found, it
 * schedules the callback to be invoked.
 * @private
 */
IntersectionObserver.prototype._checkForIntersections = function() {
  var rootIsInDom = this._rootIsInDom();
  var rootRect = rootIsInDom ? this._getRootRect() : getEmptyRect();

  this._observationTargets.forEach(function(item) {
    var target = item.element;
    var targetRect = getBoundingClientRect(target);
    var rootContainsTarget = this._rootContainsTarget(target);
    var oldEntry = item.entry;
    var intersectionRect = rootIsInDom && rootContainsTarget &&
        this._computeTargetAndRootIntersection(target, rootRect);

    var newEntry = item.entry = new IntersectionObserverEntry({
      time: now(),
      target: target,
      boundingClientRect: targetRect,
      rootBounds: rootRect,
      intersectionRect: intersectionRect
    });

    if (!oldEntry) {
      this._queuedEntries.push(newEntry);
    } else if (rootIsInDom && rootContainsTarget) {
      // If the new entry intersection ratio has crossed any of the
      // thresholds, add a new entry.
      if (this._hasCrossedThreshold(oldEntry, newEntry)) {
        this._queuedEntries.push(newEntry);
      }
    } else {
      // If the root is not in the DOM or target is not contained within
      // root but the previous entry for this target had an intersection,
      // add a new record indicating removal.
      if (oldEntry && oldEntry.isIntersecting) {
        this._queuedEntries.push(newEntry);
      }
    }
  }, this);

  if (this._queuedEntries.length) {
    this._callback(this.takeRecords(), this);
  }
};


/**
 * Accepts a target and root rect computes the intersection between then
 * following the algorithm in the spec.
 * TODO(philipwalton): at this time clip-path is not considered.
 * https://w3c.github.io/IntersectionObserver/#calculate-intersection-rect-algo
 * @param {Element} target The target DOM element
 * @param {Object} rootRect The bounding rect of the root after being
 *     expanded by the rootMargin value.
 * @return {?Object} The final intersection rect object or undefined if no
 *     intersection is found.
 * @private
 */
IntersectionObserver.prototype._computeTargetAndRootIntersection =
    function(target, rootRect) {

  // If the element isn't displayed, an intersection can't happen.
  if (window.getComputedStyle(target).display == 'none') return;

  var targetRect = getBoundingClientRect(target);
  var intersectionRect = targetRect;
  var parent = getParentNode(target);
  var atRoot = false;

  while (!atRoot) {
    var parentRect = null;
    var parentComputedStyle = parent.nodeType == 1 ?
        window.getComputedStyle(parent) : {};

    // If the parent isn't displayed, an intersection can't happen.
    if (parentComputedStyle.display == 'none') return;

    if (parent == this.root || parent == document) {
      atRoot = true;
      parentRect = rootRect;
    } else {
      // If the element has a non-visible overflow, and it's not the <body>
      // or <html> element, update the intersection rect.
      // Note: <body> and <html> cannot be clipped to a rect that's not also
      // the document rect, so no need to compute a new intersection.
      if (parent != document.body &&
          parent != document.documentElement &&
          parentComputedStyle.overflow != 'visible') {
        parentRect = getBoundingClientRect(parent);
      }
    }

    // If either of the above conditionals set a new parentRect,
    // calculate new intersection data.
    if (parentRect) {
      intersectionRect = computeRectIntersection(parentRect, intersectionRect);

      if (!intersectionRect) break;
    }
    parent = getParentNode(parent);
  }
  return intersectionRect;
};


/**
 * Returns the root rect after being expanded by the rootMargin value.
 * @return {Object} The expanded root rect.
 * @private
 */
IntersectionObserver.prototype._getRootRect = function() {
  var rootRect;
  if (this.root) {
    rootRect = getBoundingClientRect(this.root);
  } else {
    // Use <html>/<body> instead of window since scroll bars affect size.
    var html = document.documentElement;
    var body = document.body;
    rootRect = {
      top: 0,
      left: 0,
      right: html.clientWidth || body.clientWidth,
      width: html.clientWidth || body.clientWidth,
      bottom: html.clientHeight || body.clientHeight,
      height: html.clientHeight || body.clientHeight
    };
  }
  return this._expandRectByRootMargin(rootRect);
};


/**
 * Accepts a rect and expands it by the rootMargin value.
 * @param {Object} rect The rect object to expand.
 * @return {Object} The expanded rect.
 * @private
 */
IntersectionObserver.prototype._expandRectByRootMargin = function(rect) {
  var margins = this._rootMarginValues.map(function(margin, i) {
    return margin.unit == 'px' ? margin.value :
        margin.value * (i % 2 ? rect.width : rect.height) / 100;
  });
  var newRect = {
    top: rect.top - margins[0],
    right: rect.right + margins[1],
    bottom: rect.bottom + margins[2],
    left: rect.left - margins[3]
  };
  newRect.width = newRect.right - newRect.left;
  newRect.height = newRect.bottom - newRect.top;

  return newRect;
};


/**
 * Accepts an old and new entry and returns true if at least one of the
 * threshold values has been crossed.
 * @param {?IntersectionObserverEntry} oldEntry The previous entry for a
 *    particular target element or null if no previous entry exists.
 * @param {IntersectionObserverEntry} newEntry The current entry for a
 *    particular target element.
 * @return {boolean} Returns true if a any threshold has been crossed.
 * @private
 */
IntersectionObserver.prototype._hasCrossedThreshold =
    function(oldEntry, newEntry) {

  // To make comparing easier, an entry that has a ratio of 0
  // but does not actually intersect is given a value of -1
  var oldRatio = oldEntry && oldEntry.isIntersecting ?
      oldEntry.intersectionRatio || 0 : -1;
  var newRatio = newEntry.isIntersecting ?
      newEntry.intersectionRatio || 0 : -1;

  // Ignore unchanged ratios
  if (oldRatio === newRatio) return;

  for (var i = 0; i < this.thresholds.length; i++) {
    var threshold = this.thresholds[i];

    // Return true if an entry matches a threshold or if the new ratio
    // and the old ratio are on the opposite sides of a threshold.
    if (threshold == oldRatio || threshold == newRatio ||
        threshold < oldRatio !== threshold < newRatio) {
      return true;
    }
  }
};


/**
 * Returns whether or not the root element is an element and is in the DOM.
 * @return {boolean} True if the root element is an element and is in the DOM.
 * @private
 */
IntersectionObserver.prototype._rootIsInDom = function() {
  return !this.root || containsDeep(document, this.root);
};


/**
 * Returns whether or not the target element is a child of root.
 * @param {Element} target The target element to check.
 * @return {boolean} True if the target element is a child of root.
 * @private
 */
IntersectionObserver.prototype._rootContainsTarget = function(target) {
  return containsDeep(this.root || document, target);
};


/**
 * Adds the instance to the global IntersectionObserver registry if it isn't
 * already present.
 * @private
 */
IntersectionObserver.prototype._registerInstance = function() {
  if (registry.indexOf(this) < 0) {
    registry.push(this);
  }
};


/**
 * Removes the instance from the global IntersectionObserver registry.
 * @private
 */
IntersectionObserver.prototype._unregisterInstance = function() {
  var index = registry.indexOf(this);
  if (index != -1) registry.splice(index, 1);
};


/**
 * Returns the result of the performance.now() method or null in browsers
 * that don't support the API.
 * @return {number} The elapsed time since the page was requested.
 */
function now() {
  return window.performance && performance.now && performance.now();
}


/**
 * Throttles a function and delays its execution, so it's only called at most
 * once within a given time period.
 * @param {Function} fn The function to throttle.
 * @param {number} timeout The amount of time that must pass before the
 *     function can be called again.
 * @return {Function} The throttled function.
 */
function throttle(fn, timeout) {
  var timer = null;
  return function () {
    if (!timer) {
      timer = setTimeout(function() {
        fn();
        timer = null;
      }, timeout);
    }
  };
}


/**
 * Adds an event handler to a DOM node ensuring cross-browser compatibility.
 * @param {Node} node The DOM node to add the event handler to.
 * @param {string} event The event name.
 * @param {Function} fn The event handler to add.
 * @param {boolean} opt_useCapture Optionally adds the even to the capture
 *     phase. Note: this only works in modern browsers.
 */
function addEvent(node, event, fn, opt_useCapture) {
  if (typeof node.addEventListener == 'function') {
    node.addEventListener(event, fn, opt_useCapture || false);
  }
  else if (typeof node.attachEvent == 'function') {
    node.attachEvent('on' + event, fn);
  }
}


/**
 * Removes a previously added event handler from a DOM node.
 * @param {Node} node The DOM node to remove the event handler from.
 * @param {string} event The event name.
 * @param {Function} fn The event handler to remove.
 * @param {boolean} opt_useCapture If the event handler was added with this
 *     flag set to true, it should be set to true here in order to remove it.
 */
function removeEvent(node, event, fn, opt_useCapture) {
  if (typeof node.removeEventListener == 'function') {
    node.removeEventListener(event, fn, opt_useCapture || false);
  }
  else if (typeof node.detatchEvent == 'function') {
    node.detatchEvent('on' + event, fn);
  }
}


/**
 * Returns the intersection between two rect objects.
 * @param {Object} rect1 The first rect.
 * @param {Object} rect2 The second rect.
 * @return {?Object} The intersection rect or undefined if no intersection
 *     is found.
 */
function computeRectIntersection(rect1, rect2) {
  var top = Math.max(rect1.top, rect2.top);
  var bottom = Math.min(rect1.bottom, rect2.bottom);
  var left = Math.max(rect1.left, rect2.left);
  var right = Math.min(rect1.right, rect2.right);
  var width = right - left;
  var height = bottom - top;

  return (width >= 0 && height >= 0) && {
    top: top,
    bottom: bottom,
    left: left,
    right: right,
    width: width,
    height: height
  };
}


/**
 * Shims the native getBoundingClientRect for compatibility with older IE.
 * @param {Element} el The element whose bounding rect to get.
 * @return {Object} The (possibly shimmed) rect of the element.
 */
function getBoundingClientRect(el) {
  var rect;

  try {
    rect = el.getBoundingClientRect();
  } catch (err) {
    // Ignore Windows 7 IE11 "Unspecified error"
    // https://github.com/w3c/IntersectionObserver/pull/205
  }

  if (!rect) return getEmptyRect();

  // Older IE
  if (!(rect.width && rect.height)) {
    rect = {
      top: rect.top,
      right: rect.right,
      bottom: rect.bottom,
      left: rect.left,
      width: rect.right - rect.left,
      height: rect.bottom - rect.top
    };
  }
  return rect;
}


/**
 * Returns an empty rect object. An empty rect is returned when an element
 * is not in the DOM.
 * @return {Object} The empty rect.
 */
function getEmptyRect() {
  return {
    top: 0,
    bottom: 0,
    left: 0,
    right: 0,
    width: 0,
    height: 0
  };
}

/**
 * Checks to see if a parent element contains a child element (including inside
 * shadow DOM).
 * @param {Node} parent The parent element.
 * @param {Node} child The child element.
 * @return {boolean} True if the parent node contains the child node.
 */
function containsDeep(parent, child) {
  var node = child;
  while (node) {
    if (node == parent) return true;

    node = getParentNode(node);
  }
  return false;
}


/**
 * Gets the parent node of an element or its host element if the parent node
 * is a shadow root.
 * @param {Node} node The node whose parent to get.
 * @return {Node|null} The parent node or null if no parent exists.
 */
function getParentNode(node) {
  var parent = node.parentNode;

  if (parent && parent.nodeType == 11 && parent.host) {
    // If the parent is a shadow root, return the host element.
    return parent.host;
  }
  return parent;
}


// Exposes the constructors globally.
window.IntersectionObserver = IntersectionObserver;
window.IntersectionObserverEntry = IntersectionObserverEntry;

}(window, document));


/***/ }),

/***/ "./node_modules/object-assign/index.js":
/*!*********************************************!*\
  !*** ./node_modules/object-assign/index.js ***!
  \*********************************************/
/***/ ((module) => {

"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/


/* eslint-disable no-unused-vars */
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;

function toObject(val) {
	if (val === null || val === undefined) {
		throw new TypeError('Object.assign cannot be called with null or undefined');
	}

	return Object(val);
}

function shouldUseNative() {
	try {
		if (!Object.assign) {
			return false;
		}

		// Detect buggy property enumeration order in older V8 versions.

		// https://bugs.chromium.org/p/v8/issues/detail?id=4118
		var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
		test1[5] = 'de';
		if (Object.getOwnPropertyNames(test1)[0] === '5') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test2 = {};
		for (var i = 0; i < 10; i++) {
			test2['_' + String.fromCharCode(i)] = i;
		}
		var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
			return test2[n];
		});
		if (order2.join('') !== '0123456789') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test3 = {};
		'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
			test3[letter] = letter;
		});
		if (Object.keys(Object.assign({}, test3)).join('') !==
				'abcdefghijklmnopqrst') {
			return false;
		}

		return true;
	} catch (err) {
		// We don't expect any of the above to throw, but better to be safe.
		return false;
	}
}

module.exports = shouldUseNative() ? Object.assign : function (target, source) {
	var from;
	var to = toObject(target);
	var symbols;

	for (var s = 1; s < arguments.length; s++) {
		from = Object(arguments[s]);

		for (var key in from) {
			if (hasOwnProperty.call(from, key)) {
				to[key] = from[key];
			}
		}

		if (getOwnPropertySymbols) {
			symbols = getOwnPropertySymbols(from);
			for (var i = 0; i < symbols.length; i++) {
				if (propIsEnumerable.call(from, symbols[i])) {
					to[symbols[i]] = from[symbols[i]];
				}
			}
		}
	}

	return to;
};


/***/ }),

/***/ "./node_modules/prop-types/checkPropTypes.js":
/*!***************************************************!*\
  !*** ./node_modules/prop-types/checkPropTypes.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



var printWarning = function() {};

if (true) {
  var ReactPropTypesSecret = __webpack_require__(/*! ./lib/ReactPropTypesSecret */ "./node_modules/prop-types/lib/ReactPropTypesSecret.js");
  var loggedTypeFailures = {};
  var has = __webpack_require__(/*! ./lib/has */ "./node_modules/prop-types/lib/has.js");

  printWarning = function(text) {
    var message = 'Warning: ' + text;
    if (typeof console !== 'undefined') {
      console.error(message);
    }
    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      throw new Error(message);
    } catch (x) { /**/ }
  };
}

/**
 * Assert that the values match with the type specs.
 * Error messages are memorized and will only be shown once.
 *
 * @param {object} typeSpecs Map of name to a ReactPropType
 * @param {object} values Runtime values that need to be type-checked
 * @param {string} location e.g. "prop", "context", "child context"
 * @param {string} componentName Name of the component for error messages.
 * @param {?Function} getStack Returns the component stack.
 * @private
 */
function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
  if (true) {
    for (var typeSpecName in typeSpecs) {
      if (has(typeSpecs, typeSpecName)) {
        var error;
        // Prop type validation may throw. In case they do, we don't want to
        // fail the render phase where it didn't fail before. So we log it.
        // After these have been cleaned up, we'll let them throw.
        try {
          // This is intentionally an invariant that gets caught. It's the same
          // behavior as without this statement except with a better message.
          if (typeof typeSpecs[typeSpecName] !== 'function') {
            var err = Error(
              (componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' +
              'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' +
              'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.'
            );
            err.name = 'Invariant Violation';
            throw err;
          }
          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
        } catch (ex) {
          error = ex;
        }
        if (error && !(error instanceof Error)) {
          printWarning(
            (componentName || 'React class') + ': type specification of ' +
            location + ' `' + typeSpecName + '` is invalid; the type checker ' +
            'function must return `null` or an `Error` but returned a ' + typeof error + '. ' +
            'You may have forgotten to pass an argument to the type checker ' +
            'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' +
            'shape all require an argument).'
          );
        }
        if (error instanceof Error && !(error.message in loggedTypeFailures)) {
          // Only monitor this failure once because there tends to be a lot of the
          // same error.
          loggedTypeFailures[error.message] = true;

          var stack = getStack ? getStack() : '';

          printWarning(
            'Failed ' + location + ' type: ' + error.message + (stack != null ? stack : '')
          );
        }
      }
    }
  }
}

/**
 * Resets warning cache when testing.
 *
 * @private
 */
checkPropTypes.resetWarningCache = function() {
  if (true) {
    loggedTypeFailures = {};
  }
}

module.exports = checkPropTypes;


/***/ }),

/***/ "./node_modules/prop-types/lib/ReactPropTypesSecret.js":
/*!*************************************************************!*\
  !*** ./node_modules/prop-types/lib/ReactPropTypesSecret.js ***!
  \*************************************************************/
/***/ ((module) => {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

module.exports = ReactPropTypesSecret;


/***/ }),

/***/ "./node_modules/prop-types/lib/has.js":
/*!********************************************!*\
  !*** ./node_modules/prop-types/lib/has.js ***!
  \********************************************/
/***/ ((module) => {

module.exports = Function.call.bind(Object.prototype.hasOwnProperty);


/***/ }),

/***/ "./node_modules/react-dom/cjs/react-dom.development.js":
/*!*************************************************************!*\
  !*** ./node_modules/react-dom/cjs/react-dom.development.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
/** @license React v16.14.0
 * react-dom.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */





if (true) {
  (function() {
'use strict';

var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");
var _assign = __webpack_require__(/*! object-assign */ "./node_modules/object-assign/index.js");
var Scheduler = __webpack_require__(/*! scheduler */ "./node_modules/scheduler/index.js");
var checkPropTypes = __webpack_require__(/*! prop-types/checkPropTypes */ "./node_modules/prop-types/checkPropTypes.js");
var tracing = __webpack_require__(/*! scheduler/tracing */ "./node_modules/scheduler/tracing.js");

var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED; // Prevent newer renderers from RTE when used with older react package versions.
// Current owner and dispatcher used to share the same ref,
// but PR #14548 split them out to better support the react-debug-tools package.

if (!ReactSharedInternals.hasOwnProperty('ReactCurrentDispatcher')) {
  ReactSharedInternals.ReactCurrentDispatcher = {
    current: null
  };
}

if (!ReactSharedInternals.hasOwnProperty('ReactCurrentBatchConfig')) {
  ReactSharedInternals.ReactCurrentBatchConfig = {
    suspense: null
  };
}

// by calls to these methods by a Babel plugin.
//
// In PROD (or in packages without access to React internals),
// they are left as they are instead.

function warn(format) {
  {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    printWarning('warn', format, args);
  }
}
function error(format) {
  {
    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
      args[_key2 - 1] = arguments[_key2];
    }

    printWarning('error', format, args);
  }
}

function printWarning(level, format, args) {
  // When changing this logic, you might want to also
  // update consoleWithStackDev.www.js as well.
  {
    var hasExistingStack = args.length > 0 && typeof args[args.length - 1] === 'string' && args[args.length - 1].indexOf('\n    in') === 0;

    if (!hasExistingStack) {
      var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
      var stack = ReactDebugCurrentFrame.getStackAddendum();

      if (stack !== '') {
        format += '%s';
        args = args.concat([stack]);
      }
    }

    var argsWithFormat = args.map(function (item) {
      return '' + item;
    }); // Careful: RN currently depends on this prefix

    argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it
    // breaks IE9: https://github.com/facebook/react/issues/13610
    // eslint-disable-next-line react-internal/no-production-logging

    Function.prototype.apply.call(console[level], console, argsWithFormat);

    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      var argIndex = 0;
      var message = 'Warning: ' + format.replace(/%s/g, function () {
        return args[argIndex++];
      });
      throw new Error(message);
    } catch (x) {}
  }
}

if (!React) {
  {
    throw Error( "ReactDOM was loaded before React. Make sure you load the React package before loading ReactDOM." );
  }
}

var invokeGuardedCallbackImpl = function (name, func, context, a, b, c, d, e, f) {
  var funcArgs = Array.prototype.slice.call(arguments, 3);

  try {
    func.apply(context, funcArgs);
  } catch (error) {
    this.onError(error);
  }
};

{
  // In DEV mode, we swap out invokeGuardedCallback for a special version
  // that plays more nicely with the browser's DevTools. The idea is to preserve
  // "Pause on exceptions" behavior. Because React wraps all user-provided
  // functions in invokeGuardedCallback, and the production version of
  // invokeGuardedCallback uses a try-catch, all user exceptions are treated
  // like caught exceptions, and the DevTools won't pause unless the developer
  // takes the extra step of enabling pause on caught exceptions. This is
  // unintuitive, though, because even though React has caught the error, from
  // the developer's perspective, the error is uncaught.
  //
  // To preserve the expected "Pause on exceptions" behavior, we don't use a
  // try-catch in DEV. Instead, we synchronously dispatch a fake event to a fake
  // DOM node, and call the user-provided callback from inside an event handler
  // for that fake event. If the callback throws, the error is "captured" using
  // a global event handler. But because the error happens in a different
  // event loop context, it does not interrupt the normal program flow.
  // Effectively, this gives us try-catch behavior without actually using
  // try-catch. Neat!
  // Check that the browser supports the APIs we need to implement our special
  // DEV version of invokeGuardedCallback
  if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {
    var fakeNode = document.createElement('react');

    var invokeGuardedCallbackDev = function (name, func, context, a, b, c, d, e, f) {
      // If document doesn't exist we know for sure we will crash in this method
      // when we call document.createEvent(). However this can cause confusing
      // errors: https://github.com/facebookincubator/create-react-app/issues/3482
      // So we preemptively throw with a better message instead.
      if (!(typeof document !== 'undefined')) {
        {
          throw Error( "The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous." );
        }
      }

      var evt = document.createEvent('Event'); // Keeps track of whether the user-provided callback threw an error. We
      // set this to true at the beginning, then set it to false right after
      // calling the function. If the function errors, `didError` will never be
      // set to false. This strategy works even if the browser is flaky and
      // fails to call our global error handler, because it doesn't rely on
      // the error event at all.

      var didError = true; // Keeps track of the value of window.event so that we can reset it
      // during the callback to let user code access window.event in the
      // browsers that support it.

      var windowEvent = window.event; // Keeps track of the descriptor of window.event to restore it after event
      // dispatching: https://github.com/facebook/react/issues/13688

      var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, 'event'); // Create an event handler for our fake event. We will synchronously
      // dispatch our fake event using `dispatchEvent`. Inside the handler, we
      // call the user-provided callback.

      var funcArgs = Array.prototype.slice.call(arguments, 3);

      function callCallback() {
        // We immediately remove the callback from event listeners so that
        // nested `invokeGuardedCallback` calls do not clash. Otherwise, a
        // nested call would trigger the fake event handlers of any call higher
        // in the stack.
        fakeNode.removeEventListener(evtType, callCallback, false); // We check for window.hasOwnProperty('event') to prevent the
        // window.event assignment in both IE <= 10 as they throw an error
        // "Member not found" in strict mode, and in Firefox which does not
        // support window.event.

        if (typeof window.event !== 'undefined' && window.hasOwnProperty('event')) {
          window.event = windowEvent;
        }

        func.apply(context, funcArgs);
        didError = false;
      } // Create a global error event handler. We use this to capture the value
      // that was thrown. It's possible that this error handler will fire more
      // than once; for example, if non-React code also calls `dispatchEvent`
      // and a handler for that event throws. We should be resilient to most of
      // those cases. Even if our error event handler fires more than once, the
      // last error event is always used. If the callback actually does error,
      // we know that the last error event is the correct one, because it's not
      // possible for anything else to have happened in between our callback
      // erroring and the code that follows the `dispatchEvent` call below. If
      // the callback doesn't error, but the error event was fired, we know to
      // ignore it because `didError` will be false, as described above.


      var error; // Use this to track whether the error event is ever called.

      var didSetError = false;
      var isCrossOriginError = false;

      function handleWindowError(event) {
        error = event.error;
        didSetError = true;

        if (error === null && event.colno === 0 && event.lineno === 0) {
          isCrossOriginError = true;
        }

        if (event.defaultPrevented) {
          // Some other error handler has prevented default.
          // Browsers silence the error report if this happens.
          // We'll remember this to later decide whether to log it or not.
          if (error != null && typeof error === 'object') {
            try {
              error._suppressLogging = true;
            } catch (inner) {// Ignore.
            }
          }
        }
      } // Create a fake event type.


      var evtType = "react-" + (name ? name : 'invokeguardedcallback'); // Attach our event handlers

      window.addEventListener('error', handleWindowError);
      fakeNode.addEventListener(evtType, callCallback, false); // Synchronously dispatch our fake event. If the user-provided function
      // errors, it will trigger our global error handler.

      evt.initEvent(evtType, false, false);
      fakeNode.dispatchEvent(evt);

      if (windowEventDescriptor) {
        Object.defineProperty(window, 'event', windowEventDescriptor);
      }

      if (didError) {
        if (!didSetError) {
          // The callback errored, but the error event never fired.
          error = new Error('An error was thrown inside one of your components, but React ' + "doesn't know what it was. This is likely due to browser " + 'flakiness. React does its best to preserve the "Pause on ' + 'exceptions" behavior of the DevTools, which requires some ' + "DEV-mode only tricks. It's possible that these don't work in " + 'your browser. Try triggering the error in production mode, ' + 'or switching to a modern browser. If you suspect that this is ' + 'actually an issue with React, please file an issue.');
        } else if (isCrossOriginError) {
          error = new Error("A cross-origin error was thrown. React doesn't have access to " + 'the actual error object in development. ' + 'See https://fb.me/react-crossorigin-error for more information.');
        }

        this.onError(error);
      } // Remove our event listeners


      window.removeEventListener('error', handleWindowError);
    };

    invokeGuardedCallbackImpl = invokeGuardedCallbackDev;
  }
}

var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;

var hasError = false;
var caughtError = null; // Used by event system to capture/rethrow the first error.

var hasRethrowError = false;
var rethrowError = null;
var reporter = {
  onError: function (error) {
    hasError = true;
    caughtError = error;
  }
};
/**
 * Call a function while guarding against errors that happens within it.
 * Returns an error if it throws, otherwise null.
 *
 * In production, this is implemented using a try-catch. The reason we don't
 * use a try-catch directly is so that we can swap out a different
 * implementation in DEV mode.
 *
 * @param {String} name of the guard to use for logging or debugging
 * @param {Function} func The function to invoke
 * @param {*} context The context to use when calling the function
 * @param {...*} args Arguments for function
 */

function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
  hasError = false;
  caughtError = null;
  invokeGuardedCallbackImpl$1.apply(reporter, arguments);
}
/**
 * Same as invokeGuardedCallback, but instead of returning an error, it stores
 * it in a global so it can be rethrown by `rethrowCaughtError` later.
 * TODO: See if caughtError and rethrowError can be unified.
 *
 * @param {String} name of the guard to use for logging or debugging
 * @param {Function} func The function to invoke
 * @param {*} context The context to use when calling the function
 * @param {...*} args Arguments for function
 */

function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
  invokeGuardedCallback.apply(this, arguments);

  if (hasError) {
    var error = clearCaughtError();

    if (!hasRethrowError) {
      hasRethrowError = true;
      rethrowError = error;
    }
  }
}
/**
 * During execution of guarded functions we will capture the first error which
 * we will rethrow to be handled by the top level error handler.
 */

function rethrowCaughtError() {
  if (hasRethrowError) {
    var error = rethrowError;
    hasRethrowError = false;
    rethrowError = null;
    throw error;
  }
}
function hasCaughtError() {
  return hasError;
}
function clearCaughtError() {
  if (hasError) {
    var error = caughtError;
    hasError = false;
    caughtError = null;
    return error;
  } else {
    {
      {
        throw Error( "clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue." );
      }
    }
  }
}

var getFiberCurrentPropsFromNode = null;
var getInstanceFromNode = null;
var getNodeFromInstance = null;
function setComponentTree(getFiberCurrentPropsFromNodeImpl, getInstanceFromNodeImpl, getNodeFromInstanceImpl) {
  getFiberCurrentPropsFromNode = getFiberCurrentPropsFromNodeImpl;
  getInstanceFromNode = getInstanceFromNodeImpl;
  getNodeFromInstance = getNodeFromInstanceImpl;

  {
    if (!getNodeFromInstance || !getInstanceFromNode) {
      error('EventPluginUtils.setComponentTree(...): Injected ' + 'module is missing getNodeFromInstance or getInstanceFromNode.');
    }
  }
}
var validateEventDispatches;

{
  validateEventDispatches = function (event) {
    var dispatchListeners = event._dispatchListeners;
    var dispatchInstances = event._dispatchInstances;
    var listenersIsArr = Array.isArray(dispatchListeners);
    var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;
    var instancesIsArr = Array.isArray(dispatchInstances);
    var instancesLen = instancesIsArr ? dispatchInstances.length : dispatchInstances ? 1 : 0;

    if (instancesIsArr !== listenersIsArr || instancesLen !== listenersLen) {
      error('EventPluginUtils: Invalid `event`.');
    }
  };
}
/**
 * Dispatch the event to the listener.
 * @param {SyntheticEvent} event SyntheticEvent to handle
 * @param {function} listener Application-level callback
 * @param {*} inst Internal component instance
 */


function executeDispatch(event, listener, inst) {
  var type = event.type || 'unknown-event';
  event.currentTarget = getNodeFromInstance(inst);
  invokeGuardedCallbackAndCatchFirstError(type, listener, undefined, event);
  event.currentTarget = null;
}
/**
 * Standard/simple iteration through an event's collected dispatches.
 */

function executeDispatchesInOrder(event) {
  var dispatchListeners = event._dispatchListeners;
  var dispatchInstances = event._dispatchInstances;

  {
    validateEventDispatches(event);
  }

  if (Array.isArray(dispatchListeners)) {
    for (var i = 0; i < dispatchListeners.length; i++) {
      if (event.isPropagationStopped()) {
        break;
      } // Listeners and Instances are two parallel arrays that are always in sync.


      executeDispatch(event, dispatchListeners[i], dispatchInstances[i]);
    }
  } else if (dispatchListeners) {
    executeDispatch(event, dispatchListeners, dispatchInstances);
  }

  event._dispatchListeners = null;
  event._dispatchInstances = null;
}

var FunctionComponent = 0;
var ClassComponent = 1;
var IndeterminateComponent = 2; // Before we know whether it is function or class

var HostRoot = 3; // Root of a host tree. Could be nested inside another node.

var HostPortal = 4; // A subtree. Could be an entry point to a different renderer.

var HostComponent = 5;
var HostText = 6;
var Fragment = 7;
var Mode = 8;
var ContextConsumer = 9;
var ContextProvider = 10;
var ForwardRef = 11;
var Profiler = 12;
var SuspenseComponent = 13;
var MemoComponent = 14;
var SimpleMemoComponent = 15;
var LazyComponent = 16;
var IncompleteClassComponent = 17;
var DehydratedFragment = 18;
var SuspenseListComponent = 19;
var FundamentalComponent = 20;
var ScopeComponent = 21;
var Block = 22;

/**
 * Injectable ordering of event plugins.
 */
var eventPluginOrder = null;
/**
 * Injectable mapping from names to event plugin modules.
 */

var namesToPlugins = {};
/**
 * Recomputes the plugin list using the injected plugins and plugin ordering.
 *
 * @private
 */

function recomputePluginOrdering() {
  if (!eventPluginOrder) {
    // Wait until an `eventPluginOrder` is injected.
    return;
  }

  for (var pluginName in namesToPlugins) {
    var pluginModule = namesToPlugins[pluginName];
    var pluginIndex = eventPluginOrder.indexOf(pluginName);

    if (!(pluginIndex > -1)) {
      {
        throw Error( "EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `" + pluginName + "`." );
      }
    }

    if (plugins[pluginIndex]) {
      continue;
    }

    if (!pluginModule.extractEvents) {
      {
        throw Error( "EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `" + pluginName + "` does not." );
      }
    }

    plugins[pluginIndex] = pluginModule;
    var publishedEvents = pluginModule.eventTypes;

    for (var eventName in publishedEvents) {
      if (!publishEventForPlugin(publishedEvents[eventName], pluginModule, eventName)) {
        {
          throw Error( "EventPluginRegistry: Failed to publish event `" + eventName + "` for plugin `" + pluginName + "`." );
        }
      }
    }
  }
}
/**
 * Publishes an event so that it can be dispatched by the supplied plugin.
 *
 * @param {object} dispatchConfig Dispatch configuration for the event.
 * @param {object} PluginModule Plugin publishing the event.
 * @return {boolean} True if the event was successfully published.
 * @private
 */


function publishEventForPlugin(dispatchConfig, pluginModule, eventName) {
  if (!!eventNameDispatchConfigs.hasOwnProperty(eventName)) {
    {
      throw Error( "EventPluginRegistry: More than one plugin attempted to publish the same event name, `" + eventName + "`." );
    }
  }

  eventNameDispatchConfigs[eventName] = dispatchConfig;
  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;

  if (phasedRegistrationNames) {
    for (var phaseName in phasedRegistrationNames) {
      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
        var phasedRegistrationName = phasedRegistrationNames[phaseName];
        publishRegistrationName(phasedRegistrationName, pluginModule, eventName);
      }
    }

    return true;
  } else if (dispatchConfig.registrationName) {
    publishRegistrationName(dispatchConfig.registrationName, pluginModule, eventName);
    return true;
  }

  return false;
}
/**
 * Publishes a registration name that is used to identify dispatched events.
 *
 * @param {string} registrationName Registration name to add.
 * @param {object} PluginModule Plugin publishing the event.
 * @private
 */


function publishRegistrationName(registrationName, pluginModule, eventName) {
  if (!!registrationNameModules[registrationName]) {
    {
      throw Error( "EventPluginRegistry: More than one plugin attempted to publish the same registration name, `" + registrationName + "`." );
    }
  }

  registrationNameModules[registrationName] = pluginModule;
  registrationNameDependencies[registrationName] = pluginModule.eventTypes[eventName].dependencies;

  {
    var lowerCasedName = registrationName.toLowerCase();
    possibleRegistrationNames[lowerCasedName] = registrationName;

    if (registrationName === 'onDoubleClick') {
      possibleRegistrationNames.ondblclick = registrationName;
    }
  }
}
/**
 * Registers plugins so that they can extract and dispatch events.
 */

/**
 * Ordered list of injected plugins.
 */


var plugins = [];
/**
 * Mapping from event name to dispatch config
 */

var eventNameDispatchConfigs = {};
/**
 * Mapping from registration name to plugin module
 */

var registrationNameModules = {};
/**
 * Mapping from registration name to event name
 */

var registrationNameDependencies = {};
/**
 * Mapping from lowercase registration names to the properly cased version,
 * used to warn in the case of missing event handlers. Available
 * only in true.
 * @type {Object}
 */

var possibleRegistrationNames =  {} ; // Trust the developer to only use possibleRegistrationNames in true

/**
 * Injects an ordering of plugins (by plugin name). This allows the ordering
 * to be decoupled from injection of the actual plugins so that ordering is
 * always deterministic regardless of packaging, on-the-fly injection, etc.
 *
 * @param {array} InjectedEventPluginOrder
 * @internal
 */

function injectEventPluginOrder(injectedEventPluginOrder) {
  if (!!eventPluginOrder) {
    {
      throw Error( "EventPluginRegistry: Cannot inject event plugin ordering more than once. You are likely trying to load more than one copy of React." );
    }
  } // Clone the ordering so it cannot be dynamically mutated.


  eventPluginOrder = Array.prototype.slice.call(injectedEventPluginOrder);
  recomputePluginOrdering();
}
/**
 * Injects plugins to be used by plugin event system. The plugin names must be
 * in the ordering injected by `injectEventPluginOrder`.
 *
 * Plugins can be injected as part of page initialization or on-the-fly.
 *
 * @param {object} injectedNamesToPlugins Map from names to plugin modules.
 * @internal
 */

function injectEventPluginsByName(injectedNamesToPlugins) {
  var isOrderingDirty = false;

  for (var pluginName in injectedNamesToPlugins) {
    if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
      continue;
    }

    var pluginModule = injectedNamesToPlugins[pluginName];

    if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== pluginModule) {
      if (!!namesToPlugins[pluginName]) {
        {
          throw Error( "EventPluginRegistry: Cannot inject two different event plugins using the same name, `" + pluginName + "`." );
        }
      }

      namesToPlugins[pluginName] = pluginModule;
      isOrderingDirty = true;
    }
  }

  if (isOrderingDirty) {
    recomputePluginOrdering();
  }
}

var canUseDOM = !!(typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined');

var PLUGIN_EVENT_SYSTEM = 1;
var IS_REPLAYED = 1 << 5;
var IS_FIRST_ANCESTOR = 1 << 6;

var restoreImpl = null;
var restoreTarget = null;
var restoreQueue = null;

function restoreStateOfTarget(target) {
  // We perform this translation at the end of the event loop so that we
  // always receive the correct fiber here
  var internalInstance = getInstanceFromNode(target);

  if (!internalInstance) {
    // Unmounted
    return;
  }

  if (!(typeof restoreImpl === 'function')) {
    {
      throw Error( "setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue." );
    }
  }

  var stateNode = internalInstance.stateNode; // Guard against Fiber being unmounted.

  if (stateNode) {
    var _props = getFiberCurrentPropsFromNode(stateNode);

    restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
  }
}

function setRestoreImplementation(impl) {
  restoreImpl = impl;
}
function enqueueStateRestore(target) {
  if (restoreTarget) {
    if (restoreQueue) {
      restoreQueue.push(target);
    } else {
      restoreQueue = [target];
    }
  } else {
    restoreTarget = target;
  }
}
function needsStateRestore() {
  return restoreTarget !== null || restoreQueue !== null;
}
function restoreStateIfNeeded() {
  if (!restoreTarget) {
    return;
  }

  var target = restoreTarget;
  var queuedTargets = restoreQueue;
  restoreTarget = null;
  restoreQueue = null;
  restoreStateOfTarget(target);

  if (queuedTargets) {
    for (var i = 0; i < queuedTargets.length; i++) {
      restoreStateOfTarget(queuedTargets[i]);
    }
  }
}

var enableProfilerTimer = true; // Trace which interactions trigger each commit.

var enableDeprecatedFlareAPI = false; // Experimental Host Component support.

var enableFundamentalAPI = false; // Experimental Scope support.
var warnAboutStringRefs = false;

// the renderer. Such as when we're dispatching events or if third party
// libraries need to call batchedUpdates. Eventually, this API will go away when
// everything is batched by default. We'll then have a similar API to opt-out of
// scheduled work and instead do synchronous work.
// Defaults

var batchedUpdatesImpl = function (fn, bookkeeping) {
  return fn(bookkeeping);
};

var discreteUpdatesImpl = function (fn, a, b, c, d) {
  return fn(a, b, c, d);
};

var flushDiscreteUpdatesImpl = function () {};

var batchedEventUpdatesImpl = batchedUpdatesImpl;
var isInsideEventHandler = false;
var isBatchingEventUpdates = false;

function finishEventHandler() {
  // Here we wait until all updates have propagated, which is important
  // when using controlled components within layers:
  // https://github.com/facebook/react/issues/1698
  // Then we restore state of any controlled component.
  var controlledComponentsHavePendingUpdates = needsStateRestore();

  if (controlledComponentsHavePendingUpdates) {
    // If a controlled event was fired, we may need to restore the state of
    // the DOM node back to the controlled value. This is necessary when React
    // bails out of the update without touching the DOM.
    flushDiscreteUpdatesImpl();
    restoreStateIfNeeded();
  }
}

function batchedUpdates(fn, bookkeeping) {
  if (isInsideEventHandler) {
    // If we are currently inside another batch, we need to wait until it
    // fully completes before restoring state.
    return fn(bookkeeping);
  }

  isInsideEventHandler = true;

  try {
    return batchedUpdatesImpl(fn, bookkeeping);
  } finally {
    isInsideEventHandler = false;
    finishEventHandler();
  }
}
function batchedEventUpdates(fn, a, b) {
  if (isBatchingEventUpdates) {
    // If we are currently inside another batch, we need to wait until it
    // fully completes before restoring state.
    return fn(a, b);
  }

  isBatchingEventUpdates = true;

  try {
    return batchedEventUpdatesImpl(fn, a, b);
  } finally {
    isBatchingEventUpdates = false;
    finishEventHandler();
  }
} // This is for the React Flare event system
function discreteUpdates(fn, a, b, c, d) {
  var prevIsInsideEventHandler = isInsideEventHandler;
  isInsideEventHandler = true;

  try {
    return discreteUpdatesImpl(fn, a, b, c, d);
  } finally {
    isInsideEventHandler = prevIsInsideEventHandler;

    if (!isInsideEventHandler) {
      finishEventHandler();
    }
  }
}
function flushDiscreteUpdatesIfNeeded(timeStamp) {
  // event.timeStamp isn't overly reliable due to inconsistencies in
  // how different browsers have historically provided the time stamp.
  // Some browsers provide high-resolution time stamps for all events,
  // some provide low-resolution time stamps for all events. FF < 52
  // even mixes both time stamps together. Some browsers even report
  // negative time stamps or time stamps that are 0 (iOS9) in some cases.
  // Given we are only comparing two time stamps with equality (!==),
  // we are safe from the resolution differences. If the time stamp is 0
  // we bail-out of preventing the flush, which can affect semantics,
  // such as if an earlier flush removes or adds event listeners that
  // are fired in the subsequent flush. However, this is the same
  // behaviour as we had before this change, so the risks are low.
  if (!isInsideEventHandler && (!enableDeprecatedFlareAPI  )) {
    flushDiscreteUpdatesImpl();
  }
}
function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushDiscreteUpdatesImpl, _batchedEventUpdatesImpl) {
  batchedUpdatesImpl = _batchedUpdatesImpl;
  discreteUpdatesImpl = _discreteUpdatesImpl;
  flushDiscreteUpdatesImpl = _flushDiscreteUpdatesImpl;
  batchedEventUpdatesImpl = _batchedEventUpdatesImpl;
}

var DiscreteEvent = 0;
var UserBlockingEvent = 1;
var ContinuousEvent = 2;

// A reserved attribute.
// It is handled by React separately and shouldn't be written to the DOM.
var RESERVED = 0; // A simple string attribute.
// Attributes that aren't in the whitelist are presumed to have this type.

var STRING = 1; // A string attribute that accepts booleans in React. In HTML, these are called
// "enumerated" attributes with "true" and "false" as possible values.
// When true, it should be set to a "true" string.
// When false, it should be set to a "false" string.

var BOOLEANISH_STRING = 2; // A real boolean attribute.
// When true, it should be present (set either to an empty string or its name).
// When false, it should be omitted.

var BOOLEAN = 3; // An attribute that can be used as a flag as well as with a value.
// When true, it should be present (set either to an empty string or its name).
// When false, it should be omitted.
// For any other value, should be present with that value.

var OVERLOADED_BOOLEAN = 4; // An attribute that must be numeric or parse as a numeric.
// When falsy, it should be removed.

var NUMERIC = 5; // An attribute that must be positive numeric or parse as a positive numeric.
// When falsy, it should be removed.

var POSITIVE_NUMERIC = 6;

/* eslint-disable max-len */
var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
/* eslint-enable max-len */

var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
var ROOT_ATTRIBUTE_NAME = 'data-reactroot';
var VALID_ATTRIBUTE_NAME_REGEX = new RegExp('^[' + ATTRIBUTE_NAME_START_CHAR + '][' + ATTRIBUTE_NAME_CHAR + ']*$');
var hasOwnProperty = Object.prototype.hasOwnProperty;
var illegalAttributeNameCache = {};
var validatedAttributeNameCache = {};
function isAttributeNameSafe(attributeName) {
  if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) {
    return true;
  }

  if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) {
    return false;
  }

  if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
    validatedAttributeNameCache[attributeName] = true;
    return true;
  }

  illegalAttributeNameCache[attributeName] = true;

  {
    error('Invalid attribute name: `%s`', attributeName);
  }

  return false;
}
function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
  if (propertyInfo !== null) {
    return propertyInfo.type === RESERVED;
  }

  if (isCustomComponentTag) {
    return false;
  }

  if (name.length > 2 && (name[0] === 'o' || name[0] === 'O') && (name[1] === 'n' || name[1] === 'N')) {
    return true;
  }

  return false;
}
function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
  if (propertyInfo !== null && propertyInfo.type === RESERVED) {
    return false;
  }

  switch (typeof value) {
    case 'function': // $FlowIssue symbol is perfectly valid here

    case 'symbol':
      // eslint-disable-line
      return true;

    case 'boolean':
      {
        if (isCustomComponentTag) {
          return false;
        }

        if (propertyInfo !== null) {
          return !propertyInfo.acceptsBooleans;
        } else {
          var prefix = name.toLowerCase().slice(0, 5);
          return prefix !== 'data-' && prefix !== 'aria-';
        }
      }

    default:
      return false;
  }
}
function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
  if (value === null || typeof value === 'undefined') {
    return true;
  }

  if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) {
    return true;
  }

  if (isCustomComponentTag) {
    return false;
  }

  if (propertyInfo !== null) {
    switch (propertyInfo.type) {
      case BOOLEAN:
        return !value;

      case OVERLOADED_BOOLEAN:
        return value === false;

      case NUMERIC:
        return isNaN(value);

      case POSITIVE_NUMERIC:
        return isNaN(value) || value < 1;
    }
  }

  return false;
}
function getPropertyInfo(name) {
  return properties.hasOwnProperty(name) ? properties[name] : null;
}

function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL) {
  this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
  this.attributeName = attributeName;
  this.attributeNamespace = attributeNamespace;
  this.mustUseProperty = mustUseProperty;
  this.propertyName = name;
  this.type = type;
  this.sanitizeURL = sanitizeURL;
} // When adding attributes to this list, be sure to also add them to
// the `possibleStandardNames` module to ensure casing and incorrect
// name warnings.


var properties = {}; // These props are reserved by React. They shouldn't be written to the DOM.

var reservedProps = ['children', 'dangerouslySetInnerHTML', // TODO: This prevents the assignment of defaultValue to regular
// elements (not just inputs). Now that ReactDOMInput assigns to the
// defaultValue property -- do we need this?
'defaultValue', 'defaultChecked', 'innerHTML', 'suppressContentEditableWarning', 'suppressHydrationWarning', 'style'];

reservedProps.forEach(function (name) {
  properties[name] = new PropertyInfoRecord(name, RESERVED, false, // mustUseProperty
  name, // attributeName
  null, // attributeNamespace
  false);
}); // A few React string attributes have a different name.
// This is a mapping from React prop names to the attribute names.

[['acceptCharset', 'accept-charset'], ['className', 'class'], ['htmlFor', 'for'], ['httpEquiv', 'http-equiv']].forEach(function (_ref) {
  var name = _ref[0],
      attributeName = _ref[1];
  properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
  attributeName, // attributeName
  null, // attributeNamespace
  false);
}); // These are "enumerated" HTML attributes that accept "true" and "false".
// In React, we let users pass `true` and `false` even though technically
// these aren't boolean attributes (they are coerced to strings).

['contentEditable', 'draggable', 'spellCheck', 'value'].forEach(function (name) {
  properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, // mustUseProperty
  name.toLowerCase(), // attributeName
  null, // attributeNamespace
  false);
}); // These are "enumerated" SVG attributes that accept "true" and "false".
// In React, we let users pass `true` and `false` even though technically
// these aren't boolean attributes (they are coerced to strings).
// Since these are SVG attributes, their attribute names are case-sensitive.

['autoReverse', 'externalResourcesRequired', 'focusable', 'preserveAlpha'].forEach(function (name) {
  properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, // mustUseProperty
  name, // attributeName
  null, // attributeNamespace
  false);
}); // These are HTML boolean attributes.

['allowFullScreen', 'async', // Note: there is a special case that prevents it from being written to the DOM
// on the client side because the browsers are inconsistent. Instead we call focus().
'autoFocus', 'autoPlay', 'controls', 'default', 'defer', 'disabled', 'disablePictureInPicture', 'formNoValidate', 'hidden', 'loop', 'noModule', 'noValidate', 'open', 'playsInline', 'readOnly', 'required', 'reversed', 'scoped', 'seamless', // Microdata
'itemScope'].forEach(function (name) {
  properties[name] = new PropertyInfoRecord(name, BOOLEAN, false, // mustUseProperty
  name.toLowerCase(), // attributeName
  null, // attributeNamespace
  false);
}); // These are the few React props that we set as DOM properties
// rather than attributes. These are all booleans.

['checked', // Note: `option.selected` is not updated if `select.multiple` is
// disabled with `removeAttribute`. We have special logic for handling this.
'multiple', 'muted', 'selected' // NOTE: if you add a camelCased prop to this list,
// you'll need to set attributeName to name.toLowerCase()
// instead in the assignment below.
].forEach(function (name) {
  properties[name] = new PropertyInfoRecord(name, BOOLEAN, true, // mustUseProperty
  name, // attributeName
  null, // attributeNamespace
  false);
}); // These are HTML attributes that are "overloaded booleans": they behave like
// booleans, but can also accept a string value.

['capture', 'download' // NOTE: if you add a camelCased prop to this list,
// you'll need to set attributeName to name.toLowerCase()
// instead in the assignment below.
].forEach(function (name) {
  properties[name] = new PropertyInfoRecord(name, OVERLOADED_BOOLEAN, false, // mustUseProperty
  name, // attributeName
  null, // attributeNamespace
  false);
}); // These are HTML attributes that must be positive numbers.

['cols', 'rows', 'size', 'span' // NOTE: if you add a camelCased prop to this list,
// you'll need to set attributeName to name.toLowerCase()
// instead in the assignment below.
].forEach(function (name) {
  properties[name] = new PropertyInfoRecord(name, POSITIVE_NUMERIC, false, // mustUseProperty
  name, // attributeName
  null, // attributeNamespace
  false);
}); // These are HTML attributes that must be numbers.

['rowSpan', 'start'].forEach(function (name) {
  properties[name] = new PropertyInfoRecord(name, NUMERIC, false, // mustUseProperty
  name.toLowerCase(), // attributeName
  null, // attributeNamespace
  false);
});
var CAMELIZE = /[\-\:]([a-z])/g;

var capitalize = function (token) {
  return token[1].toUpperCase();
}; // This is a list of all SVG attributes that need special casing, namespacing,
// or boolean value assignment. Regular attributes that just accept strings
// and have the same names are omitted, just like in the HTML whitelist.
// Some of these attributes can be hard to find. This list was created by
// scraping the MDN documentation.


['accent-height', 'alignment-baseline', 'arabic-form', 'baseline-shift', 'cap-height', 'clip-path', 'clip-rule', 'color-interpolation', 'color-interpolation-filters', 'color-profile', 'color-rendering', 'dominant-baseline', 'enable-background', 'fill-opacity', 'fill-rule', 'flood-color', 'flood-opacity', 'font-family', 'font-size', 'font-size-adjust', 'font-stretch', 'font-style', 'font-variant', 'font-weight', 'glyph-name', 'glyph-orientation-horizontal', 'glyph-orientation-vertical', 'horiz-adv-x', 'horiz-origin-x', 'image-rendering', 'letter-spacing', 'lighting-color', 'marker-end', 'marker-mid', 'marker-start', 'overline-position', 'overline-thickness', 'paint-order', 'panose-1', 'pointer-events', 'rendering-intent', 'shape-rendering', 'stop-color', 'stop-opacity', 'strikethrough-position', 'strikethrough-thickness', 'stroke-dasharray', 'stroke-dashoffset', 'stroke-linecap', 'stroke-linejoin', 'stroke-miterlimit', 'stroke-opacity', 'stroke-width', 'text-anchor', 'text-decoration', 'text-rendering', 'underline-position', 'underline-thickness', 'unicode-bidi', 'unicode-range', 'units-per-em', 'v-alphabetic', 'v-hanging', 'v-ideographic', 'v-mathematical', 'vector-effect', 'vert-adv-y', 'vert-origin-x', 'vert-origin-y', 'word-spacing', 'writing-mode', 'xmlns:xlink', 'x-height' // NOTE: if you add a camelCased prop to this list,
// you'll need to set attributeName to name.toLowerCase()
// instead in the assignment below.
].forEach(function (attributeName) {
  var name = attributeName.replace(CAMELIZE, capitalize);
  properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
  attributeName, null, // attributeNamespace
  false);
}); // String SVG attributes with the xlink namespace.

['xlink:actuate', 'xlink:arcrole', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type' // NOTE: if you add a camelCased prop to this list,
// you'll need to set attributeName to name.toLowerCase()
// instead in the assignment below.
].forEach(function (attributeName) {
  var name = attributeName.replace(CAMELIZE, capitalize);
  properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
  attributeName, 'http://www.w3.org/1999/xlink', false);
}); // String SVG attributes with the xml namespace.

['xml:base', 'xml:lang', 'xml:space' // NOTE: if you add a camelCased prop to this list,
// you'll need to set attributeName to name.toLowerCase()
// instead in the assignment below.
].forEach(function (attributeName) {
  var name = attributeName.replace(CAMELIZE, capitalize);
  properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
  attributeName, 'http://www.w3.org/XML/1998/namespace', false);
}); // These attribute exists both in HTML and SVG.
// The attribute name is case-sensitive in SVG so we can't just use
// the React name like we do for attributes that exist only in HTML.

['tabIndex', 'crossOrigin'].forEach(function (attributeName) {
  properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, // mustUseProperty
  attributeName.toLowerCase(), // attributeName
  null, // attributeNamespace
  false);
}); // These attributes accept URLs. These must not allow javascript: URLS.
// These will also need to accept Trusted Types object in the future.

var xlinkHref = 'xlinkHref';
properties[xlinkHref] = new PropertyInfoRecord('xlinkHref', STRING, false, // mustUseProperty
'xlink:href', 'http://www.w3.org/1999/xlink', true);
['src', 'href', 'action', 'formAction'].forEach(function (attributeName) {
  properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, // mustUseProperty
  attributeName.toLowerCase(), // attributeName
  null, // attributeNamespace
  true);
});

var ReactDebugCurrentFrame = null;

{
  ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
} // A javascript: URL can contain leading C0 control or \u0020 SPACE,
// and any newline or tab are filtered out as if they're not part of the URL.
// https://url.spec.whatwg.org/#url-parsing
// Tab or newline are defined as \r\n\t:
// https://infra.spec.whatwg.org/#ascii-tab-or-newline
// A C0 control is a code point in the range \u0000 NULL to \u001F
// INFORMATION SEPARATOR ONE, inclusive:
// https://infra.spec.whatwg.org/#c0-control-or-space

/* eslint-disable max-len */


var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
var didWarn = false;

function sanitizeURL(url) {
  {
    if (!didWarn && isJavaScriptProtocol.test(url)) {
      didWarn = true;

      error('A future version of React will block javascript: URLs as a security precaution. ' + 'Use event handlers instead if you can. If you need to generate unsafe HTML try ' + 'using dangerouslySetInnerHTML instead. React was passed %s.', JSON.stringify(url));
    }
  }
}

/**
 * Get the value for a property on a node. Only used in DEV for SSR validation.
 * The "expected" argument is used as a hint of what the expected value is.
 * Some properties have multiple equivalent values.
 */
function getValueForProperty(node, name, expected, propertyInfo) {
  {
    if (propertyInfo.mustUseProperty) {
      var propertyName = propertyInfo.propertyName;
      return node[propertyName];
    } else {
      if ( propertyInfo.sanitizeURL) {
        // If we haven't fully disabled javascript: URLs, and if
        // the hydration is successful of a javascript: URL, we
        // still want to warn on the client.
        sanitizeURL('' + expected);
      }

      var attributeName = propertyInfo.attributeName;
      var stringValue = null;

      if (propertyInfo.type === OVERLOADED_BOOLEAN) {
        if (node.hasAttribute(attributeName)) {
          var value = node.getAttribute(attributeName);

          if (value === '') {
            return true;
          }

          if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
            return value;
          }

          if (value === '' + expected) {
            return expected;
          }

          return value;
        }
      } else if (node.hasAttribute(attributeName)) {
        if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
          // We had an attribute but shouldn't have had one, so read it
          // for the error message.
          return node.getAttribute(attributeName);
        }

        if (propertyInfo.type === BOOLEAN) {
          // If this was a boolean, it doesn't matter what the value is
          // the fact that we have it is the same as the expected.
          return expected;
        } // Even if this property uses a namespace we use getAttribute
        // because we assume its namespaced name is the same as our config.
        // To use getAttributeNS we need the local name which we don't have
        // in our config atm.


        stringValue = node.getAttribute(attributeName);
      }

      if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
        return stringValue === null ? expected : stringValue;
      } else if (stringValue === '' + expected) {
        return expected;
      } else {
        return stringValue;
      }
    }
  }
}
/**
 * Get the value for a attribute on a node. Only used in DEV for SSR validation.
 * The third argument is used as a hint of what the expected value is. Some
 * attributes have multiple equivalent values.
 */

function getValueForAttribute(node, name, expected) {
  {
    if (!isAttributeNameSafe(name)) {
      return;
    }

    if (!node.hasAttribute(name)) {
      return expected === undefined ? undefined : null;
    }

    var value = node.getAttribute(name);

    if (value === '' + expected) {
      return expected;
    }

    return value;
  }
}
/**
 * Sets the value for a property on a node.
 *
 * @param {DOMElement} node
 * @param {string} name
 * @param {*} value
 */

function setValueForProperty(node, name, value, isCustomComponentTag) {
  var propertyInfo = getPropertyInfo(name);

  if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) {
    return;
  }

  if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) {
    value = null;
  } // If the prop isn't in the special list, treat it as a simple attribute.


  if (isCustomComponentTag || propertyInfo === null) {
    if (isAttributeNameSafe(name)) {
      var _attributeName = name;

      if (value === null) {
        node.removeAttribute(_attributeName);
      } else {
        node.setAttribute(_attributeName,  '' + value);
      }
    }

    return;
  }

  var mustUseProperty = propertyInfo.mustUseProperty;

  if (mustUseProperty) {
    var propertyName = propertyInfo.propertyName;

    if (value === null) {
      var type = propertyInfo.type;
      node[propertyName] = type === BOOLEAN ? false : '';
    } else {
      // Contrary to `setAttribute`, object properties are properly
      // `toString`ed by IE8/9.
      node[propertyName] = value;
    }

    return;
  } // The rest are treated as attributes with special cases.


  var attributeName = propertyInfo.attributeName,
      attributeNamespace = propertyInfo.attributeNamespace;

  if (value === null) {
    node.removeAttribute(attributeName);
  } else {
    var _type = propertyInfo.type;
    var attributeValue;

    if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) {
      // If attribute type is boolean, we know for sure it won't be an execution sink
      // and we won't require Trusted Type here.
      attributeValue = '';
    } else {
      // `setAttribute` with objects becomes only `[object]` in IE8/9,
      // ('' + value) makes it output the correct toString()-value.
      {
        attributeValue = '' + value;
      }

      if (propertyInfo.sanitizeURL) {
        sanitizeURL(attributeValue.toString());
      }
    }

    if (attributeNamespace) {
      node.setAttributeNS(attributeNamespace, attributeName, attributeValue);
    } else {
      node.setAttribute(attributeName, attributeValue);
    }
  }
}

var BEFORE_SLASH_RE = /^(.*)[\\\/]/;
function describeComponentFrame (name, source, ownerName) {
  var sourceInfo = '';

  if (source) {
    var path = source.fileName;
    var fileName = path.replace(BEFORE_SLASH_RE, '');

    {
      // In DEV, include code for a common special case:
      // prefer "folder/index.js" instead of just "index.js".
      if (/^index\./.test(fileName)) {
        var match = path.match(BEFORE_SLASH_RE);

        if (match) {
          var pathBeforeSlash = match[1];

          if (pathBeforeSlash) {
            var folderName = pathBeforeSlash.replace(BEFORE_SLASH_RE, '');
            fileName = folderName + '/' + fileName;
          }
        }
      }
    }

    sourceInfo = ' (at ' + fileName + ':' + source.lineNumber + ')';
  } else if (ownerName) {
    sourceInfo = ' (created by ' + ownerName + ')';
  }

  return '\n    in ' + (name || 'Unknown') + sourceInfo;
}

// The Symbol used to tag the ReactElement-like types. If there is no native Symbol
// nor polyfill, then a plain number is used for performance.
var hasSymbol = typeof Symbol === 'function' && Symbol.for;
var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary
var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 0xead8;
var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;
var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for('react.block') : 0xead9;
var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
var FAUX_ITERATOR_SYMBOL = '@@iterator';
function getIteratorFn(maybeIterable) {
  if (maybeIterable === null || typeof maybeIterable !== 'object') {
    return null;
  }

  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];

  if (typeof maybeIterator === 'function') {
    return maybeIterator;
  }

  return null;
}

var Uninitialized = -1;
var Pending = 0;
var Resolved = 1;
var Rejected = 2;
function refineResolvedLazyComponent(lazyComponent) {
  return lazyComponent._status === Resolved ? lazyComponent._result : null;
}
function initializeLazyComponentType(lazyComponent) {
  if (lazyComponent._status === Uninitialized) {
    lazyComponent._status = Pending;
    var ctor = lazyComponent._ctor;
    var thenable = ctor();
    lazyComponent._result = thenable;
    thenable.then(function (moduleObject) {
      if (lazyComponent._status === Pending) {
        var defaultExport = moduleObject.default;

        {
          if (defaultExport === undefined) {
            error('lazy: Expected the result of a dynamic import() call. ' + 'Instead received: %s\n\nYour code should look like: \n  ' + "const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
          }
        }

        lazyComponent._status = Resolved;
        lazyComponent._result = defaultExport;
      }
    }, function (error) {
      if (lazyComponent._status === Pending) {
        lazyComponent._status = Rejected;
        lazyComponent._result = error;
      }
    });
  }
}

function getWrappedName(outerType, innerType, wrapperName) {
  var functionName = innerType.displayName || innerType.name || '';
  return outerType.displayName || (functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName);
}

function getComponentName(type) {
  if (type == null) {
    // Host root, text node or just invalid type.
    return null;
  }

  {
    if (typeof type.tag === 'number') {
      error('Received an unexpected object in getComponentName(). ' + 'This is likely a bug in React. Please file an issue.');
    }
  }

  if (typeof type === 'function') {
    return type.displayName || type.name || null;
  }

  if (typeof type === 'string') {
    return type;
  }

  switch (type) {
    case REACT_FRAGMENT_TYPE:
      return 'Fragment';

    case REACT_PORTAL_TYPE:
      return 'Portal';

    case REACT_PROFILER_TYPE:
      return "Profiler";

    case REACT_STRICT_MODE_TYPE:
      return 'StrictMode';

    case REACT_SUSPENSE_TYPE:
      return 'Suspense';

    case REACT_SUSPENSE_LIST_TYPE:
      return 'SuspenseList';
  }

  if (typeof type === 'object') {
    switch (type.$$typeof) {
      case REACT_CONTEXT_TYPE:
        return 'Context.Consumer';

      case REACT_PROVIDER_TYPE:
        return 'Context.Provider';

      case REACT_FORWARD_REF_TYPE:
        return getWrappedName(type, type.render, 'ForwardRef');

      case REACT_MEMO_TYPE:
        return getComponentName(type.type);

      case REACT_BLOCK_TYPE:
        return getComponentName(type.render);

      case REACT_LAZY_TYPE:
        {
          var thenable = type;
          var resolvedThenable = refineResolvedLazyComponent(thenable);

          if (resolvedThenable) {
            return getComponentName(resolvedThenable);
          }

          break;
        }
    }
  }

  return null;
}

var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;

function describeFiber(fiber) {
  switch (fiber.tag) {
    case HostRoot:
    case HostPortal:
    case HostText:
    case Fragment:
    case ContextProvider:
    case ContextConsumer:
      return '';

    default:
      var owner = fiber._debugOwner;
      var source = fiber._debugSource;
      var name = getComponentName(fiber.type);
      var ownerName = null;

      if (owner) {
        ownerName = getComponentName(owner.type);
      }

      return describeComponentFrame(name, source, ownerName);
  }
}

function getStackByFiberInDevAndProd(workInProgress) {
  var info = '';
  var node = workInProgress;

  do {
    info += describeFiber(node);
    node = node.return;
  } while (node);

  return info;
}
var current = null;
var isRendering = false;
function getCurrentFiberOwnerNameInDevOrNull() {
  {
    if (current === null) {
      return null;
    }

    var owner = current._debugOwner;

    if (owner !== null && typeof owner !== 'undefined') {
      return getComponentName(owner.type);
    }
  }

  return null;
}
function getCurrentFiberStackInDev() {
  {
    if (current === null) {
      return '';
    } // Safe because if current fiber exists, we are reconciling,
    // and it is guaranteed to be the work-in-progress version.


    return getStackByFiberInDevAndProd(current);
  }
}
function resetCurrentFiber() {
  {
    ReactDebugCurrentFrame$1.getCurrentStack = null;
    current = null;
    isRendering = false;
  }
}
function setCurrentFiber(fiber) {
  {
    ReactDebugCurrentFrame$1.getCurrentStack = getCurrentFiberStackInDev;
    current = fiber;
    isRendering = false;
  }
}
function setIsRendering(rendering) {
  {
    isRendering = rendering;
  }
}

// Flow does not allow string concatenation of most non-string types. To work
// around this limitation, we use an opaque type that can only be obtained by
// passing the value through getToStringValue first.
function toString(value) {
  return '' + value;
}
function getToStringValue(value) {
  switch (typeof value) {
    case 'boolean':
    case 'number':
    case 'object':
    case 'string':
    case 'undefined':
      return value;

    default:
      // function, symbol are assigned as empty strings
      return '';
  }
}

var ReactDebugCurrentFrame$2 = null;
var ReactControlledValuePropTypes = {
  checkPropTypes: null
};

{
  ReactDebugCurrentFrame$2 = ReactSharedInternals.ReactDebugCurrentFrame;
  var hasReadOnlyValue = {
    button: true,
    checkbox: true,
    image: true,
    hidden: true,
    radio: true,
    reset: true,
    submit: true
  };
  var propTypes = {
    value: function (props, propName, componentName) {
      if (hasReadOnlyValue[props.type] || props.onChange || props.readOnly || props.disabled || props[propName] == null || enableDeprecatedFlareAPI ) {
        return null;
      }

      return new Error('You provided a `value` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultValue`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
    },
    checked: function (props, propName, componentName) {
      if (props.onChange || props.readOnly || props.disabled || props[propName] == null || enableDeprecatedFlareAPI ) {
        return null;
      }

      return new Error('You provided a `checked` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultChecked`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
    }
  };
  /**
   * Provide a linked `value` attribute for controlled forms. You should not use
   * this outside of the ReactDOM controlled form components.
   */

  ReactControlledValuePropTypes.checkPropTypes = function (tagName, props) {
    checkPropTypes(propTypes, props, 'prop', tagName, ReactDebugCurrentFrame$2.getStackAddendum);
  };
}

function isCheckable(elem) {
  var type = elem.type;
  var nodeName = elem.nodeName;
  return nodeName && nodeName.toLowerCase() === 'input' && (type === 'checkbox' || type === 'radio');
}

function getTracker(node) {
  return node._valueTracker;
}

function detachTracker(node) {
  node._valueTracker = null;
}

function getValueFromNode(node) {
  var value = '';

  if (!node) {
    return value;
  }

  if (isCheckable(node)) {
    value = node.checked ? 'true' : 'false';
  } else {
    value = node.value;
  }

  return value;
}

function trackValueOnNode(node) {
  var valueField = isCheckable(node) ? 'checked' : 'value';
  var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);
  var currentValue = '' + node[valueField]; // if someone has already defined a value or Safari, then bail
  // and don't track value will cause over reporting of changes,
  // but it's better then a hard failure
  // (needed for certain tests that spyOn input values and Safari)

  if (node.hasOwnProperty(valueField) || typeof descriptor === 'undefined' || typeof descriptor.get !== 'function' || typeof descriptor.set !== 'function') {
    return;
  }

  var get = descriptor.get,
      set = descriptor.set;
  Object.defineProperty(node, valueField, {
    configurable: true,
    get: function () {
      return get.call(this);
    },
    set: function (value) {
      currentValue = '' + value;
      set.call(this, value);
    }
  }); // We could've passed this the first time
  // but it triggers a bug in IE11 and Edge 14/15.
  // Calling defineProperty() again should be equivalent.
  // https://github.com/facebook/react/issues/11768

  Object.defineProperty(node, valueField, {
    enumerable: descriptor.enumerable
  });
  var tracker = {
    getValue: function () {
      return currentValue;
    },
    setValue: function (value) {
      currentValue = '' + value;
    },
    stopTracking: function () {
      detachTracker(node);
      delete node[valueField];
    }
  };
  return tracker;
}

function track(node) {
  if (getTracker(node)) {
    return;
  } // TODO: Once it's just Fiber we can move this to node._wrapperState


  node._valueTracker = trackValueOnNode(node);
}
function updateValueIfChanged(node) {
  if (!node) {
    return false;
  }

  var tracker = getTracker(node); // if there is no tracker at this point it's unlikely
  // that trying again will succeed

  if (!tracker) {
    return true;
  }

  var lastValue = tracker.getValue();
  var nextValue = getValueFromNode(node);

  if (nextValue !== lastValue) {
    tracker.setValue(nextValue);
    return true;
  }

  return false;
}

var didWarnValueDefaultValue = false;
var didWarnCheckedDefaultChecked = false;
var didWarnControlledToUncontrolled = false;
var didWarnUncontrolledToControlled = false;

function isControlled(props) {
  var usesChecked = props.type === 'checkbox' || props.type === 'radio';
  return usesChecked ? props.checked != null : props.value != null;
}
/**
 * Implements an <input> host component that allows setting these optional
 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
 *
 * If `checked` or `value` are not supplied (or null/undefined), user actions
 * that affect the checked state or value will trigger updates to the element.
 *
 * If they are supplied (and not null/undefined), the rendered element will not
 * trigger updates to the element. Instead, the props must change in order for
 * the rendered element to be updated.
 *
 * The rendered element will be initialized as unchecked (or `defaultChecked`)
 * with an empty value (or `defaultValue`).
 *
 * See http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
 */


function getHostProps(element, props) {
  var node = element;
  var checked = props.checked;

  var hostProps = _assign({}, props, {
    defaultChecked: undefined,
    defaultValue: undefined,
    value: undefined,
    checked: checked != null ? checked : node._wrapperState.initialChecked
  });

  return hostProps;
}
function initWrapperState(element, props) {
  {
    ReactControlledValuePropTypes.checkPropTypes('input', props);

    if (props.checked !== undefined && props.defaultChecked !== undefined && !didWarnCheckedDefaultChecked) {
      error('%s contains an input of type %s with both checked and defaultChecked props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the checked prop, or the defaultChecked prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', getCurrentFiberOwnerNameInDevOrNull() || 'A component', props.type);

      didWarnCheckedDefaultChecked = true;
    }

    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
      error('%s contains an input of type %s with both value and defaultValue props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', getCurrentFiberOwnerNameInDevOrNull() || 'A component', props.type);

      didWarnValueDefaultValue = true;
    }
  }

  var node = element;
  var defaultValue = props.defaultValue == null ? '' : props.defaultValue;
  node._wrapperState = {
    initialChecked: props.checked != null ? props.checked : props.defaultChecked,
    initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
    controlled: isControlled(props)
  };
}
function updateChecked(element, props) {
  var node = element;
  var checked = props.checked;

  if (checked != null) {
    setValueForProperty(node, 'checked', checked, false);
  }
}
function updateWrapper(element, props) {
  var node = element;

  {
    var controlled = isControlled(props);

    if (!node._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
      error('A component is changing an uncontrolled input of type %s to be controlled. ' + 'Input elements should not switch from uncontrolled to controlled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components', props.type);

      didWarnUncontrolledToControlled = true;
    }

    if (node._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
      error('A component is changing a controlled input of type %s to be uncontrolled. ' + 'Input elements should not switch from controlled to uncontrolled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components', props.type);

      didWarnControlledToUncontrolled = true;
    }
  }

  updateChecked(element, props);
  var value = getToStringValue(props.value);
  var type = props.type;

  if (value != null) {
    if (type === 'number') {
      if (value === 0 && node.value === '' || // We explicitly want to coerce to number here if possible.
      // eslint-disable-next-line
      node.value != value) {
        node.value = toString(value);
      }
    } else if (node.value !== toString(value)) {
      node.value = toString(value);
    }
  } else if (type === 'submit' || type === 'reset') {
    // Submit/reset inputs need the attribute removed completely to avoid
    // blank-text buttons.
    node.removeAttribute('value');
    return;
  }

  {
    // When syncing the value attribute, the value comes from a cascade of
    // properties:
    //  1. The value React property
    //  2. The defaultValue React property
    //  3. Otherwise there should be no change
    if (props.hasOwnProperty('value')) {
      setDefaultValue(node, props.type, value);
    } else if (props.hasOwnProperty('defaultValue')) {
      setDefaultValue(node, props.type, getToStringValue(props.defaultValue));
    }
  }

  {
    // When syncing the checked attribute, it only changes when it needs
    // to be removed, such as transitioning from a checkbox into a text input
    if (props.checked == null && props.defaultChecked != null) {
      node.defaultChecked = !!props.defaultChecked;
    }
  }
}
function postMountWrapper(element, props, isHydrating) {
  var node = element; // Do not assign value if it is already set. This prevents user text input
  // from being lost during SSR hydration.

  if (props.hasOwnProperty('value') || props.hasOwnProperty('defaultValue')) {
    var type = props.type;
    var isButton = type === 'submit' || type === 'reset'; // Avoid setting value attribute on submit/reset inputs as it overrides the
    // default value provided by the browser. See: #12872

    if (isButton && (props.value === undefined || props.value === null)) {
      return;
    }

    var initialValue = toString(node._wrapperState.initialValue); // Do not assign value if it is already set. This prevents user text input
    // from being lost during SSR hydration.

    if (!isHydrating) {
      {
        // When syncing the value attribute, the value property should use
        // the wrapperState._initialValue property. This uses:
        //
        //   1. The value React property when present
        //   2. The defaultValue React property when present
        //   3. An empty string
        if (initialValue !== node.value) {
          node.value = initialValue;
        }
      }
    }

    {
      // Otherwise, the value attribute is synchronized to the property,
      // so we assign defaultValue to the same thing as the value property
      // assignment step above.
      node.defaultValue = initialValue;
    }
  } // Normally, we'd just do `node.checked = node.checked` upon initial mount, less this bug
  // this is needed to work around a chrome bug where setting defaultChecked
  // will sometimes influence the value of checked (even after detachment).
  // Reference: https://bugs.chromium.org/p/chromium/issues/detail?id=608416
  // We need to temporarily unset name to avoid disrupting radio button groups.


  var name = node.name;

  if (name !== '') {
    node.name = '';
  }

  {
    // When syncing the checked attribute, both the checked property and
    // attribute are assigned at the same time using defaultChecked. This uses:
    //
    //   1. The checked React property when present
    //   2. The defaultChecked React property when present
    //   3. Otherwise, false
    node.defaultChecked = !node.defaultChecked;
    node.defaultChecked = !!node._wrapperState.initialChecked;
  }

  if (name !== '') {
    node.name = name;
  }
}
function restoreControlledState(element, props) {
  var node = element;
  updateWrapper(node, props);
  updateNamedCousins(node, props);
}

function updateNamedCousins(rootNode, props) {
  var name = props.name;

  if (props.type === 'radio' && name != null) {
    var queryRoot = rootNode;

    while (queryRoot.parentNode) {
      queryRoot = queryRoot.parentNode;
    } // If `rootNode.form` was non-null, then we could try `form.elements`,
    // but that sometimes behaves strangely in IE8. We could also try using
    // `form.getElementsByName`, but that will only return direct children
    // and won't include inputs that use the HTML5 `form=` attribute. Since
    // the input might not even be in a form. It might not even be in the
    // document. Let's just use the local `querySelectorAll` to ensure we don't
    // miss anything.


    var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type="radio"]');

    for (var i = 0; i < group.length; i++) {
      var otherNode = group[i];

      if (otherNode === rootNode || otherNode.form !== rootNode.form) {
        continue;
      } // This will throw if radio buttons rendered by different copies of React
      // and the same name are rendered into the same form (same as #1939).
      // That's probably okay; we don't support it just as we don't support
      // mixing React radio buttons with non-React ones.


      var otherProps = getFiberCurrentPropsFromNode$1(otherNode);

      if (!otherProps) {
        {
          throw Error( "ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported." );
        }
      } // We need update the tracked value on the named cousin since the value
      // was changed but the input saw no event or value set


      updateValueIfChanged(otherNode); // If this is a controlled radio button group, forcing the input that
      // was previously checked to update will cause it to be come re-checked
      // as appropriate.

      updateWrapper(otherNode, otherProps);
    }
  }
} // In Chrome, assigning defaultValue to certain input types triggers input validation.
// For number inputs, the display value loses trailing decimal points. For email inputs,
// Chrome raises "The specified value <x> is not a valid email address".
//
// Here we check to see if the defaultValue has actually changed, avoiding these problems
// when the user is inputting text
//
// https://github.com/facebook/react/issues/7253


function setDefaultValue(node, type, value) {
  if ( // Focused number inputs synchronize on blur. See ChangeEventPlugin.js
  type !== 'number' || node.ownerDocument.activeElement !== node) {
    if (value == null) {
      node.defaultValue = toString(node._wrapperState.initialValue);
    } else if (node.defaultValue !== toString(value)) {
      node.defaultValue = toString(value);
    }
  }
}

var didWarnSelectedSetOnOption = false;
var didWarnInvalidChild = false;

function flattenChildren(children) {
  var content = ''; // Flatten children. We'll warn if they are invalid
  // during validateProps() which runs for hydration too.
  // Note that this would throw on non-element objects.
  // Elements are stringified (which is normally irrelevant
  // but matters for <fbt>).

  React.Children.forEach(children, function (child) {
    if (child == null) {
      return;
    }

    content += child; // Note: we don't warn about invalid children here.
    // Instead, this is done separately below so that
    // it happens during the hydration codepath too.
  });
  return content;
}
/**
 * Implements an <option> host component that warns when `selected` is set.
 */


function validateProps(element, props) {
  {
    // This mirrors the codepath above, but runs for hydration too.
    // Warn about invalid children here so that client and hydration are consistent.
    // TODO: this seems like it could cause a DEV-only throw for hydration
    // if children contains a non-element object. We should try to avoid that.
    if (typeof props.children === 'object' && props.children !== null) {
      React.Children.forEach(props.children, function (child) {
        if (child == null) {
          return;
        }

        if (typeof child === 'string' || typeof child === 'number') {
          return;
        }

        if (typeof child.type !== 'string') {
          return;
        }

        if (!didWarnInvalidChild) {
          didWarnInvalidChild = true;

          error('Only strings and numbers are supported as <option> children.');
        }
      });
    } // TODO: Remove support for `selected` in <option>.


    if (props.selected != null && !didWarnSelectedSetOnOption) {
      error('Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.');

      didWarnSelectedSetOnOption = true;
    }
  }
}
function postMountWrapper$1(element, props) {
  // value="" should make a value attribute (#6219)
  if (props.value != null) {
    element.setAttribute('value', toString(getToStringValue(props.value)));
  }
}
function getHostProps$1(element, props) {
  var hostProps = _assign({
    children: undefined
  }, props);

  var content = flattenChildren(props.children);

  if (content) {
    hostProps.children = content;
  }

  return hostProps;
}

var didWarnValueDefaultValue$1;

{
  didWarnValueDefaultValue$1 = false;
}

function getDeclarationErrorAddendum() {
  var ownerName = getCurrentFiberOwnerNameInDevOrNull();

  if (ownerName) {
    return '\n\nCheck the render method of `' + ownerName + '`.';
  }

  return '';
}

var valuePropNames = ['value', 'defaultValue'];
/**
 * Validation function for `value` and `defaultValue`.
 */

function checkSelectPropTypes(props) {
  {
    ReactControlledValuePropTypes.checkPropTypes('select', props);

    for (var i = 0; i < valuePropNames.length; i++) {
      var propName = valuePropNames[i];

      if (props[propName] == null) {
        continue;
      }

      var isArray = Array.isArray(props[propName]);

      if (props.multiple && !isArray) {
        error('The `%s` prop supplied to <select> must be an array if ' + '`multiple` is true.%s', propName, getDeclarationErrorAddendum());
      } else if (!props.multiple && isArray) {
        error('The `%s` prop supplied to <select> must be a scalar ' + 'value if `multiple` is false.%s', propName, getDeclarationErrorAddendum());
      }
    }
  }
}

function updateOptions(node, multiple, propValue, setDefaultSelected) {
  var options = node.options;

  if (multiple) {
    var selectedValues = propValue;
    var selectedValue = {};

    for (var i = 0; i < selectedValues.length; i++) {
      // Prefix to avoid chaos with special keys.
      selectedValue['$' + selectedValues[i]] = true;
    }

    for (var _i = 0; _i < options.length; _i++) {
      var selected = selectedValue.hasOwnProperty('$' + options[_i].value);

      if (options[_i].selected !== selected) {
        options[_i].selected = selected;
      }

      if (selected && setDefaultSelected) {
        options[_i].defaultSelected = true;
      }
    }
  } else {
    // Do not set `select.value` as exact behavior isn't consistent across all
    // browsers for all cases.
    var _selectedValue = toString(getToStringValue(propValue));

    var defaultSelected = null;

    for (var _i2 = 0; _i2 < options.length; _i2++) {
      if (options[_i2].value === _selectedValue) {
        options[_i2].selected = true;

        if (setDefaultSelected) {
          options[_i2].defaultSelected = true;
        }

        return;
      }

      if (defaultSelected === null && !options[_i2].disabled) {
        defaultSelected = options[_i2];
      }
    }

    if (defaultSelected !== null) {
      defaultSelected.selected = true;
    }
  }
}
/**
 * Implements a <select> host component that allows optionally setting the
 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
 * stringable. If `multiple` is true, the prop must be an array of stringables.
 *
 * If `value` is not supplied (or null/undefined), user actions that change the
 * selected option will trigger updates to the rendered options.
 *
 * If it is supplied (and not null/undefined), the rendered options will not
 * update in response to user actions. Instead, the `value` prop must change in
 * order for the rendered options to update.
 *
 * If `defaultValue` is provided, any options with the supplied values will be
 * selected.
 */


function getHostProps$2(element, props) {
  return _assign({}, props, {
    value: undefined
  });
}
function initWrapperState$1(element, props) {
  var node = element;

  {
    checkSelectPropTypes(props);
  }

  node._wrapperState = {
    wasMultiple: !!props.multiple
  };

  {
    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue$1) {
      error('Select elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled select ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components');

      didWarnValueDefaultValue$1 = true;
    }
  }
}
function postMountWrapper$2(element, props) {
  var node = element;
  node.multiple = !!props.multiple;
  var value = props.value;

  if (value != null) {
    updateOptions(node, !!props.multiple, value, false);
  } else if (props.defaultValue != null) {
    updateOptions(node, !!props.multiple, props.defaultValue, true);
  }
}
function postUpdateWrapper(element, props) {
  var node = element;
  var wasMultiple = node._wrapperState.wasMultiple;
  node._wrapperState.wasMultiple = !!props.multiple;
  var value = props.value;

  if (value != null) {
    updateOptions(node, !!props.multiple, value, false);
  } else if (wasMultiple !== !!props.multiple) {
    // For simplicity, reapply `defaultValue` if `multiple` is toggled.
    if (props.defaultValue != null) {
      updateOptions(node, !!props.multiple, props.defaultValue, true);
    } else {
      // Revert the select back to its default unselected state.
      updateOptions(node, !!props.multiple, props.multiple ? [] : '', false);
    }
  }
}
function restoreControlledState$1(element, props) {
  var node = element;
  var value = props.value;

  if (value != null) {
    updateOptions(node, !!props.multiple, value, false);
  }
}

var didWarnValDefaultVal = false;

/**
 * Implements a <textarea> host component that allows setting `value`, and
 * `defaultValue`. This differs from the traditional DOM API because value is
 * usually set as PCDATA children.
 *
 * If `value` is not supplied (or null/undefined), user actions that affect the
 * value will trigger updates to the element.
 *
 * If `value` is supplied (and not null/undefined), the rendered element will
 * not trigger updates to the element. Instead, the `value` prop must change in
 * order for the rendered element to be updated.
 *
 * The rendered element will be initialized with an empty value, the prop
 * `defaultValue` if specified, or the children content (deprecated).
 */
function getHostProps$3(element, props) {
  var node = element;

  if (!(props.dangerouslySetInnerHTML == null)) {
    {
      throw Error( "`dangerouslySetInnerHTML` does not make sense on <textarea>." );
    }
  } // Always set children to the same thing. In IE9, the selection range will
  // get reset if `textContent` is mutated.  We could add a check in setTextContent
  // to only set the value if/when the value differs from the node value (which would
  // completely solve this IE9 bug), but Sebastian+Sophie seemed to like this
  // solution. The value can be a boolean or object so that's why it's forced
  // to be a string.


  var hostProps = _assign({}, props, {
    value: undefined,
    defaultValue: undefined,
    children: toString(node._wrapperState.initialValue)
  });

  return hostProps;
}
function initWrapperState$2(element, props) {
  var node = element;

  {
    ReactControlledValuePropTypes.checkPropTypes('textarea', props);

    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValDefaultVal) {
      error('%s contains a textarea with both value and defaultValue props. ' + 'Textarea elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled textarea ' + 'and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', getCurrentFiberOwnerNameInDevOrNull() || 'A component');

      didWarnValDefaultVal = true;
    }
  }

  var initialValue = props.value; // Only bother fetching default value if we're going to use it

  if (initialValue == null) {
    var children = props.children,
        defaultValue = props.defaultValue;

    if (children != null) {
      {
        error('Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.');
      }

      {
        if (!(defaultValue == null)) {
          {
            throw Error( "If you supply `defaultValue` on a <textarea>, do not pass children." );
          }
        }

        if (Array.isArray(children)) {
          if (!(children.length <= 1)) {
            {
              throw Error( "<textarea> can only have at most one child." );
            }
          }

          children = children[0];
        }

        defaultValue = children;
      }
    }

    if (defaultValue == null) {
      defaultValue = '';
    }

    initialValue = defaultValue;
  }

  node._wrapperState = {
    initialValue: getToStringValue(initialValue)
  };
}
function updateWrapper$1(element, props) {
  var node = element;
  var value = getToStringValue(props.value);
  var defaultValue = getToStringValue(props.defaultValue);

  if (value != null) {
    // Cast `value` to a string to ensure the value is set correctly. While
    // browsers typically do this as necessary, jsdom doesn't.
    var newValue = toString(value); // To avoid side effects (such as losing text selection), only set value if changed

    if (newValue !== node.value) {
      node.value = newValue;
    }

    if (props.defaultValue == null && node.defaultValue !== newValue) {
      node.defaultValue = newValue;
    }
  }

  if (defaultValue != null) {
    node.defaultValue = toString(defaultValue);
  }
}
function postMountWrapper$3(element, props) {
  var node = element; // This is in postMount because we need access to the DOM node, which is not
  // available until after the component has mounted.

  var textContent = node.textContent; // Only set node.value if textContent is equal to the expected
  // initial value. In IE10/IE11 there is a bug where the placeholder attribute
  // will populate textContent as well.
  // https://developer.microsoft.com/microsoft-edge/platform/issues/101525/

  if (textContent === node._wrapperState.initialValue) {
    if (textContent !== '' && textContent !== null) {
      node.value = textContent;
    }
  }
}
function restoreControlledState$2(element, props) {
  // DOM component is still mounted; update
  updateWrapper$1(element, props);
}

var HTML_NAMESPACE = 'http://www.w3.org/1999/xhtml';
var MATH_NAMESPACE = 'http://www.w3.org/1998/Math/MathML';
var SVG_NAMESPACE = 'http://www.w3.org/2000/svg';
var Namespaces = {
  html: HTML_NAMESPACE,
  mathml: MATH_NAMESPACE,
  svg: SVG_NAMESPACE
}; // Assumes there is no parent namespace.

function getIntrinsicNamespace(type) {
  switch (type) {
    case 'svg':
      return SVG_NAMESPACE;

    case 'math':
      return MATH_NAMESPACE;

    default:
      return HTML_NAMESPACE;
  }
}
function getChildNamespace(parentNamespace, type) {
  if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) {
    // No (or default) parent namespace: potential entry point.
    return getIntrinsicNamespace(type);
  }

  if (parentNamespace === SVG_NAMESPACE && type === 'foreignObject') {
    // We're leaving SVG.
    return HTML_NAMESPACE;
  } // By default, pass namespace below.


  return parentNamespace;
}

/* globals MSApp */

/**
 * Create a function which has 'unsafe' privileges (required by windows8 apps)
 */
var createMicrosoftUnsafeLocalFunction = function (func) {
  if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
    return function (arg0, arg1, arg2, arg3) {
      MSApp.execUnsafeLocalFunction(function () {
        return func(arg0, arg1, arg2, arg3);
      });
    };
  } else {
    return func;
  }
};

var reusableSVGContainer;
/**
 * Set the innerHTML property of a node
 *
 * @param {DOMElement} node
 * @param {string} html
 * @internal
 */

var setInnerHTML = createMicrosoftUnsafeLocalFunction(function (node, html) {
  if (node.namespaceURI === Namespaces.svg) {

    if (!('innerHTML' in node)) {
      // IE does not have innerHTML for SVG nodes, so instead we inject the
      // new markup in a temp node and then move the child nodes across into
      // the target node
      reusableSVGContainer = reusableSVGContainer || document.createElement('div');
      reusableSVGContainer.innerHTML = '<svg>' + html.valueOf().toString() + '</svg>';
      var svgNode = reusableSVGContainer.firstChild;

      while (node.firstChild) {
        node.removeChild(node.firstChild);
      }

      while (svgNode.firstChild) {
        node.appendChild(svgNode.firstChild);
      }

      return;
    }
  }

  node.innerHTML = html;
});

/**
 * HTML nodeType values that represent the type of the node
 */
var ELEMENT_NODE = 1;
var TEXT_NODE = 3;
var COMMENT_NODE = 8;
var DOCUMENT_NODE = 9;
var DOCUMENT_FRAGMENT_NODE = 11;

/**
 * Set the textContent property of a node. For text updates, it's faster
 * to set the `nodeValue` of the Text node directly instead of using
 * `.textContent` which will remove the existing node and create a new one.
 *
 * @param {DOMElement} node
 * @param {string} text
 * @internal
 */

var setTextContent = function (node, text) {
  if (text) {
    var firstChild = node.firstChild;

    if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
      firstChild.nodeValue = text;
      return;
    }
  }

  node.textContent = text;
};

// Do not use the below two methods directly!
// Instead use constants exported from DOMTopLevelEventTypes in ReactDOM.
// (It is the only module that is allowed to access these methods.)
function unsafeCastStringToDOMTopLevelType(topLevelType) {
  return topLevelType;
}
function unsafeCastDOMTopLevelTypeToString(topLevelType) {
  return topLevelType;
}

/**
 * Generate a mapping of standard vendor prefixes using the defined style property and event name.
 *
 * @param {string} styleProp
 * @param {string} eventName
 * @returns {object}
 */

function makePrefixMap(styleProp, eventName) {
  var prefixes = {};
  prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();
  prefixes['Webkit' + styleProp] = 'webkit' + eventName;
  prefixes['Moz' + styleProp] = 'moz' + eventName;
  return prefixes;
}
/**
 * A list of event names to a configurable list of vendor prefixes.
 */


var vendorPrefixes = {
  animationend: makePrefixMap('Animation', 'AnimationEnd'),
  animationiteration: makePrefixMap('Animation', 'AnimationIteration'),
  animationstart: makePrefixMap('Animation', 'AnimationStart'),
  transitionend: makePrefixMap('Transition', 'TransitionEnd')
};
/**
 * Event names that have already been detected and prefixed (if applicable).
 */

var prefixedEventNames = {};
/**
 * Element to check for prefixes on.
 */

var style = {};
/**
 * Bootstrap if a DOM exists.
 */

if (canUseDOM) {
  style = document.createElement('div').style; // On some platforms, in particular some releases of Android 4.x,
  // the un-prefixed "animation" and "transition" properties are defined on the
  // style object but the events that fire will still be prefixed, so we need
  // to check if the un-prefixed events are usable, and if not remove them from the map.

  if (!('AnimationEvent' in window)) {
    delete vendorPrefixes.animationend.animation;
    delete vendorPrefixes.animationiteration.animation;
    delete vendorPrefixes.animationstart.animation;
  } // Same as above


  if (!('TransitionEvent' in window)) {
    delete vendorPrefixes.transitionend.transition;
  }
}
/**
 * Attempts to determine the correct vendor prefixed event name.
 *
 * @param {string} eventName
 * @returns {string}
 */


function getVendorPrefixedEventName(eventName) {
  if (prefixedEventNames[eventName]) {
    return prefixedEventNames[eventName];
  } else if (!vendorPrefixes[eventName]) {
    return eventName;
  }

  var prefixMap = vendorPrefixes[eventName];

  for (var styleProp in prefixMap) {
    if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
      return prefixedEventNames[eventName] = prefixMap[styleProp];
    }
  }

  return eventName;
}

/**
 * To identify top level events in ReactDOM, we use constants defined by this
 * module. This is the only module that uses the unsafe* methods to express
 * that the constants actually correspond to the browser event names. This lets
 * us save some bundle size by avoiding a top level type -> event name map.
 * The rest of ReactDOM code should import top level types from this file.
 */

var TOP_ABORT = unsafeCastStringToDOMTopLevelType('abort');
var TOP_ANIMATION_END = unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName('animationend'));
var TOP_ANIMATION_ITERATION = unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName('animationiteration'));
var TOP_ANIMATION_START = unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName('animationstart'));
var TOP_BLUR = unsafeCastStringToDOMTopLevelType('blur');
var TOP_CAN_PLAY = unsafeCastStringToDOMTopLevelType('canplay');
var TOP_CAN_PLAY_THROUGH = unsafeCastStringToDOMTopLevelType('canplaythrough');
var TOP_CANCEL = unsafeCastStringToDOMTopLevelType('cancel');
var TOP_CHANGE = unsafeCastStringToDOMTopLevelType('change');
var TOP_CLICK = unsafeCastStringToDOMTopLevelType('click');
var TOP_CLOSE = unsafeCastStringToDOMTopLevelType('close');
var TOP_COMPOSITION_END = unsafeCastStringToDOMTopLevelType('compositionend');
var TOP_COMPOSITION_START = unsafeCastStringToDOMTopLevelType('compositionstart');
var TOP_COMPOSITION_UPDATE = unsafeCastStringToDOMTopLevelType('compositionupdate');
var TOP_CONTEXT_MENU = unsafeCastStringToDOMTopLevelType('contextmenu');
var TOP_COPY = unsafeCastStringToDOMTopLevelType('copy');
var TOP_CUT = unsafeCastStringToDOMTopLevelType('cut');
var TOP_DOUBLE_CLICK = unsafeCastStringToDOMTopLevelType('dblclick');
var TOP_AUX_CLICK = unsafeCastStringToDOMTopLevelType('auxclick');
var TOP_DRAG = unsafeCastStringToDOMTopLevelType('drag');
var TOP_DRAG_END = unsafeCastStringToDOMTopLevelType('dragend');
var TOP_DRAG_ENTER = unsafeCastStringToDOMTopLevelType('dragenter');
var TOP_DRAG_EXIT = unsafeCastStringToDOMTopLevelType('dragexit');
var TOP_DRAG_LEAVE = unsafeCastStringToDOMTopLevelType('dragleave');
var TOP_DRAG_OVER = unsafeCastStringToDOMTopLevelType('dragover');
var TOP_DRAG_START = unsafeCastStringToDOMTopLevelType('dragstart');
var TOP_DROP = unsafeCastStringToDOMTopLevelType('drop');
var TOP_DURATION_CHANGE = unsafeCastStringToDOMTopLevelType('durationchange');
var TOP_EMPTIED = unsafeCastStringToDOMTopLevelType('emptied');
var TOP_ENCRYPTED = unsafeCastStringToDOMTopLevelType('encrypted');
var TOP_ENDED = unsafeCastStringToDOMTopLevelType('ended');
var TOP_ERROR = unsafeCastStringToDOMTopLevelType('error');
var TOP_FOCUS = unsafeCastStringToDOMTopLevelType('focus');
var TOP_GOT_POINTER_CAPTURE = unsafeCastStringToDOMTopLevelType('gotpointercapture');
var TOP_INPUT = unsafeCastStringToDOMTopLevelType('input');
var TOP_INVALID = unsafeCastStringToDOMTopLevelType('invalid');
var TOP_KEY_DOWN = unsafeCastStringToDOMTopLevelType('keydown');
var TOP_KEY_PRESS = unsafeCastStringToDOMTopLevelType('keypress');
var TOP_KEY_UP = unsafeCastStringToDOMTopLevelType('keyup');
var TOP_LOAD = unsafeCastStringToDOMTopLevelType('load');
var TOP_LOAD_START = unsafeCastStringToDOMTopLevelType('loadstart');
var TOP_LOADED_DATA = unsafeCastStringToDOMTopLevelType('loadeddata');
var TOP_LOADED_METADATA = unsafeCastStringToDOMTopLevelType('loadedmetadata');
var TOP_LOST_POINTER_CAPTURE = unsafeCastStringToDOMTopLevelType('lostpointercapture');
var TOP_MOUSE_DOWN = unsafeCastStringToDOMTopLevelType('mousedown');
var TOP_MOUSE_MOVE = unsafeCastStringToDOMTopLevelType('mousemove');
var TOP_MOUSE_OUT = unsafeCastStringToDOMTopLevelType('mouseout');
var TOP_MOUSE_OVER = unsafeCastStringToDOMTopLevelType('mouseover');
var TOP_MOUSE_UP = unsafeCastStringToDOMTopLevelType('mouseup');
var TOP_PASTE = unsafeCastStringToDOMTopLevelType('paste');
var TOP_PAUSE = unsafeCastStringToDOMTopLevelType('pause');
var TOP_PLAY = unsafeCastStringToDOMTopLevelType('play');
var TOP_PLAYING = unsafeCastStringToDOMTopLevelType('playing');
var TOP_POINTER_CANCEL = unsafeCastStringToDOMTopLevelType('pointercancel');
var TOP_POINTER_DOWN = unsafeCastStringToDOMTopLevelType('pointerdown');
var TOP_POINTER_MOVE = unsafeCastStringToDOMTopLevelType('pointermove');
var TOP_POINTER_OUT = unsafeCastStringToDOMTopLevelType('pointerout');
var TOP_POINTER_OVER = unsafeCastStringToDOMTopLevelType('pointerover');
var TOP_POINTER_UP = unsafeCastStringToDOMTopLevelType('pointerup');
var TOP_PROGRESS = unsafeCastStringToDOMTopLevelType('progress');
var TOP_RATE_CHANGE = unsafeCastStringToDOMTopLevelType('ratechange');
var TOP_RESET = unsafeCastStringToDOMTopLevelType('reset');
var TOP_SCROLL = unsafeCastStringToDOMTopLevelType('scroll');
var TOP_SEEKED = unsafeCastStringToDOMTopLevelType('seeked');
var TOP_SEEKING = unsafeCastStringToDOMTopLevelType('seeking');
var TOP_SELECTION_CHANGE = unsafeCastStringToDOMTopLevelType('selectionchange');
var TOP_STALLED = unsafeCastStringToDOMTopLevelType('stalled');
var TOP_SUBMIT = unsafeCastStringToDOMTopLevelType('submit');
var TOP_SUSPEND = unsafeCastStringToDOMTopLevelType('suspend');
var TOP_TEXT_INPUT = unsafeCastStringToDOMTopLevelType('textInput');
var TOP_TIME_UPDATE = unsafeCastStringToDOMTopLevelType('timeupdate');
var TOP_TOGGLE = unsafeCastStringToDOMTopLevelType('toggle');
var TOP_TOUCH_CANCEL = unsafeCastStringToDOMTopLevelType('touchcancel');
var TOP_TOUCH_END = unsafeCastStringToDOMTopLevelType('touchend');
var TOP_TOUCH_MOVE = unsafeCastStringToDOMTopLevelType('touchmove');
var TOP_TOUCH_START = unsafeCastStringToDOMTopLevelType('touchstart');
var TOP_TRANSITION_END = unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName('transitionend'));
var TOP_VOLUME_CHANGE = unsafeCastStringToDOMTopLevelType('volumechange');
var TOP_WAITING = unsafeCastStringToDOMTopLevelType('waiting');
var TOP_WHEEL = unsafeCastStringToDOMTopLevelType('wheel'); // List of events that need to be individually attached to media elements.
// Note that events in this list will *not* be listened to at the top level
// unless they're explicitly whitelisted in `ReactBrowserEventEmitter.listenTo`.

var mediaEventTypes = [TOP_ABORT, TOP_CAN_PLAY, TOP_CAN_PLAY_THROUGH, TOP_DURATION_CHANGE, TOP_EMPTIED, TOP_ENCRYPTED, TOP_ENDED, TOP_ERROR, TOP_LOADED_DATA, TOP_LOADED_METADATA, TOP_LOAD_START, TOP_PAUSE, TOP_PLAY, TOP_PLAYING, TOP_PROGRESS, TOP_RATE_CHANGE, TOP_SEEKED, TOP_SEEKING, TOP_STALLED, TOP_SUSPEND, TOP_TIME_UPDATE, TOP_VOLUME_CHANGE, TOP_WAITING];
function getRawEventName(topLevelType) {
  return unsafeCastDOMTopLevelTypeToString(topLevelType);
}

var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map; // prettier-ignore

var elementListenerMap = new PossiblyWeakMap();
function getListenerMapForElement(element) {
  var listenerMap = elementListenerMap.get(element);

  if (listenerMap === undefined) {
    listenerMap = new Map();
    elementListenerMap.set(element, listenerMap);
  }

  return listenerMap;
}

/**
 * `ReactInstanceMap` maintains a mapping from a public facing stateful
 * instance (key) and the internal representation (value). This allows public
 * methods to accept the user facing instance as an argument and map them back
 * to internal methods.
 *
 * Note that this module is currently shared and assumed to be stateless.
 * If this becomes an actual Map, that will break.
 */
function get(key) {
  return key._reactInternalFiber;
}
function has(key) {
  return key._reactInternalFiber !== undefined;
}
function set(key, value) {
  key._reactInternalFiber = value;
}

// Don't change these two values. They're used by React Dev Tools.
var NoEffect =
/*              */
0;
var PerformedWork =
/*         */
1; // You can change the rest (and add more).

var Placement =
/*             */
2;
var Update =
/*                */
4;
var PlacementAndUpdate =
/*    */
6;
var Deletion =
/*              */
8;
var ContentReset =
/*          */
16;
var Callback =
/*              */
32;
var DidCapture =
/*            */
64;
var Ref =
/*                   */
128;
var Snapshot =
/*              */
256;
var Passive =
/*               */
512;
var Hydrating =
/*             */
1024;
var HydratingAndUpdate =
/*    */
1028; // Passive & Update & Callback & Ref & Snapshot

var LifecycleEffectMask =
/*   */
932; // Union of all host effects

var HostEffectMask =
/*        */
2047;
var Incomplete =
/*            */
2048;
var ShouldCapture =
/*         */
4096;

var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
function getNearestMountedFiber(fiber) {
  var node = fiber;
  var nearestMounted = fiber;

  if (!fiber.alternate) {
    // If there is no alternate, this might be a new tree that isn't inserted
    // yet. If it is, then it will have a pending insertion effect on it.
    var nextNode = node;

    do {
      node = nextNode;

      if ((node.effectTag & (Placement | Hydrating)) !== NoEffect) {
        // This is an insertion or in-progress hydration. The nearest possible
        // mounted fiber is the parent but we need to continue to figure out
        // if that one is still mounted.
        nearestMounted = node.return;
      }

      nextNode = node.return;
    } while (nextNode);
  } else {
    while (node.return) {
      node = node.return;
    }
  }

  if (node.tag === HostRoot) {
    // TODO: Check if this was a nested HostRoot when used with
    // renderContainerIntoSubtree.
    return nearestMounted;
  } // If we didn't hit the root, that means that we're in an disconnected tree
  // that has been unmounted.


  return null;
}
function getSuspenseInstanceFromFiber(fiber) {
  if (fiber.tag === SuspenseComponent) {
    var suspenseState = fiber.memoizedState;

    if (suspenseState === null) {
      var current = fiber.alternate;

      if (current !== null) {
        suspenseState = current.memoizedState;
      }
    }

    if (suspenseState !== null) {
      return suspenseState.dehydrated;
    }
  }

  return null;
}
function getContainerFromFiber(fiber) {
  return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
}
function isFiberMounted(fiber) {
  return getNearestMountedFiber(fiber) === fiber;
}
function isMounted(component) {
  {
    var owner = ReactCurrentOwner.current;

    if (owner !== null && owner.tag === ClassComponent) {
      var ownerFiber = owner;
      var instance = ownerFiber.stateNode;

      if (!instance._warnedAboutRefsInRender) {
        error('%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', getComponentName(ownerFiber.type) || 'A component');
      }

      instance._warnedAboutRefsInRender = true;
    }
  }

  var fiber = get(component);

  if (!fiber) {
    return false;
  }

  return getNearestMountedFiber(fiber) === fiber;
}

function assertIsMounted(fiber) {
  if (!(getNearestMountedFiber(fiber) === fiber)) {
    {
      throw Error( "Unable to find node on an unmounted component." );
    }
  }
}

function findCurrentFiberUsingSlowPath(fiber) {
  var alternate = fiber.alternate;

  if (!alternate) {
    // If there is no alternate, then we only need to check if it is mounted.
    var nearestMounted = getNearestMountedFiber(fiber);

    if (!(nearestMounted !== null)) {
      {
        throw Error( "Unable to find node on an unmounted component." );
      }
    }

    if (nearestMounted !== fiber) {
      return null;
    }

    return fiber;
  } // If we have two possible branches, we'll walk backwards up to the root
  // to see what path the root points to. On the way we may hit one of the
  // special cases and we'll deal with them.


  var a = fiber;
  var b = alternate;

  while (true) {
    var parentA = a.return;

    if (parentA === null) {
      // We're at the root.
      break;
    }

    var parentB = parentA.alternate;

    if (parentB === null) {
      // There is no alternate. This is an unusual case. Currently, it only
      // happens when a Suspense component is hidden. An extra fragment fiber
      // is inserted in between the Suspense fiber and its children. Skip
      // over this extra fragment fiber and proceed to the next parent.
      var nextParent = parentA.return;

      if (nextParent !== null) {
        a = b = nextParent;
        continue;
      } // If there's no parent, we're at the root.


      break;
    } // If both copies of the parent fiber point to the same child, we can
    // assume that the child is current. This happens when we bailout on low
    // priority: the bailed out fiber's child reuses the current child.


    if (parentA.child === parentB.child) {
      var child = parentA.child;

      while (child) {
        if (child === a) {
          // We've determined that A is the current branch.
          assertIsMounted(parentA);
          return fiber;
        }

        if (child === b) {
          // We've determined that B is the current branch.
          assertIsMounted(parentA);
          return alternate;
        }

        child = child.sibling;
      } // We should never have an alternate for any mounting node. So the only
      // way this could possibly happen is if this was unmounted, if at all.


      {
        {
          throw Error( "Unable to find node on an unmounted component." );
        }
      }
    }

    if (a.return !== b.return) {
      // The return pointer of A and the return pointer of B point to different
      // fibers. We assume that return pointers never criss-cross, so A must
      // belong to the child set of A.return, and B must belong to the child
      // set of B.return.
      a = parentA;
      b = parentB;
    } else {
      // The return pointers point to the same fiber. We'll have to use the
      // default, slow path: scan the child sets of each parent alternate to see
      // which child belongs to which set.
      //
      // Search parent A's child set
      var didFindChild = false;
      var _child = parentA.child;

      while (_child) {
        if (_child === a) {
          didFindChild = true;
          a = parentA;
          b = parentB;
          break;
        }

        if (_child === b) {
          didFindChild = true;
          b = parentA;
          a = parentB;
          break;
        }

        _child = _child.sibling;
      }

      if (!didFindChild) {
        // Search parent B's child set
        _child = parentB.child;

        while (_child) {
          if (_child === a) {
            didFindChild = true;
            a = parentB;
            b = parentA;
            break;
          }

          if (_child === b) {
            didFindChild = true;
            b = parentB;
            a = parentA;
            break;
          }

          _child = _child.sibling;
        }

        if (!didFindChild) {
          {
            throw Error( "Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue." );
          }
        }
      }
    }

    if (!(a.alternate === b)) {
      {
        throw Error( "Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue." );
      }
    }
  } // If the root is not a host container, we're in a disconnected tree. I.e.
  // unmounted.


  if (!(a.tag === HostRoot)) {
    {
      throw Error( "Unable to find node on an unmounted component." );
    }
  }

  if (a.stateNode.current === a) {
    // We've determined that A is the current branch.
    return fiber;
  } // Otherwise B has to be current branch.


  return alternate;
}
function findCurrentHostFiber(parent) {
  var currentParent = findCurrentFiberUsingSlowPath(parent);

  if (!currentParent) {
    return null;
  } // Next we'll drill down this component to find the first HostComponent/Text.


  var node = currentParent;

  while (true) {
    if (node.tag === HostComponent || node.tag === HostText) {
      return node;
    } else if (node.child) {
      node.child.return = node;
      node = node.child;
      continue;
    }

    if (node === currentParent) {
      return null;
    }

    while (!node.sibling) {
      if (!node.return || node.return === currentParent) {
        return null;
      }

      node = node.return;
    }

    node.sibling.return = node.return;
    node = node.sibling;
  } // Flow needs the return null here, but ESLint complains about it.
  // eslint-disable-next-line no-unreachable


  return null;
}
function findCurrentHostFiberWithNoPortals(parent) {
  var currentParent = findCurrentFiberUsingSlowPath(parent);

  if (!currentParent) {
    return null;
  } // Next we'll drill down this component to find the first HostComponent/Text.


  var node = currentParent;

  while (true) {
    if (node.tag === HostComponent || node.tag === HostText || enableFundamentalAPI ) {
      return node;
    } else if (node.child && node.tag !== HostPortal) {
      node.child.return = node;
      node = node.child;
      continue;
    }

    if (node === currentParent) {
      return null;
    }

    while (!node.sibling) {
      if (!node.return || node.return === currentParent) {
        return null;
      }

      node = node.return;
    }

    node.sibling.return = node.return;
    node = node.sibling;
  } // Flow needs the return null here, but ESLint complains about it.
  // eslint-disable-next-line no-unreachable


  return null;
}

/**
 * Accumulates items that must not be null or undefined into the first one. This
 * is used to conserve memory by avoiding array allocations, and thus sacrifices
 * API cleanness. Since `current` can be null before being passed in and not
 * null after this function, make sure to assign it back to `current`:
 *
 * `a = accumulateInto(a, b);`
 *
 * This API should be sparingly used. Try `accumulate` for something cleaner.
 *
 * @return {*|array<*>} An accumulation of items.
 */

function accumulateInto(current, next) {
  if (!(next != null)) {
    {
      throw Error( "accumulateInto(...): Accumulated items must not be null or undefined." );
    }
  }

  if (current == null) {
    return next;
  } // Both are not empty. Warning: Never call x.concat(y) when you are not
  // certain that x is an Array (x could be a string with concat method).


  if (Array.isArray(current)) {
    if (Array.isArray(next)) {
      current.push.apply(current, next);
      return current;
    }

    current.push(next);
    return current;
  }

  if (Array.isArray(next)) {
    // A bit too dangerous to mutate `next`.
    return [current].concat(next);
  }

  return [current, next];
}

/**
 * @param {array} arr an "accumulation" of items which is either an Array or
 * a single item. Useful when paired with the `accumulate` module. This is a
 * simple utility that allows us to reason about a collection of items, but
 * handling the case when there is exactly one item (and we do not need to
 * allocate an array).
 * @param {function} cb Callback invoked with each element or a collection.
 * @param {?} [scope] Scope used as `this` in a callback.
 */
function forEachAccumulated(arr, cb, scope) {
  if (Array.isArray(arr)) {
    arr.forEach(cb, scope);
  } else if (arr) {
    cb.call(scope, arr);
  }
}

/**
 * Internal queue of events that have accumulated their dispatches and are
 * waiting to have their dispatches executed.
 */

var eventQueue = null;
/**
 * Dispatches an event and releases it back into the pool, unless persistent.
 *
 * @param {?object} event Synthetic event to be dispatched.
 * @private
 */

var executeDispatchesAndRelease = function (event) {
  if (event) {
    executeDispatchesInOrder(event);

    if (!event.isPersistent()) {
      event.constructor.release(event);
    }
  }
};

var executeDispatchesAndReleaseTopLevel = function (e) {
  return executeDispatchesAndRelease(e);
};

function runEventsInBatch(events) {
  if (events !== null) {
    eventQueue = accumulateInto(eventQueue, events);
  } // Set `eventQueue` to null before processing it so that we can tell if more
  // events get enqueued while processing.


  var processingEventQueue = eventQueue;
  eventQueue = null;

  if (!processingEventQueue) {
    return;
  }

  forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);

  if (!!eventQueue) {
    {
      throw Error( "processEventQueue(): Additional events were enqueued while processing an event queue. Support for this has not yet been implemented." );
    }
  } // This would be a good time to rethrow if any of the event handlers threw.


  rethrowCaughtError();
}

/**
 * Gets the target node from a native browser event by accounting for
 * inconsistencies in browser DOM APIs.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {DOMEventTarget} Target node.
 */

function getEventTarget(nativeEvent) {
  // Fallback to nativeEvent.srcElement for IE9
  // https://github.com/facebook/react/issues/12506
  var target = nativeEvent.target || nativeEvent.srcElement || window; // Normalize SVG <use> element events #4963

  if (target.correspondingUseElement) {
    target = target.correspondingUseElement;
  } // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
  // @see http://www.quirksmode.org/js/events_properties.html


  return target.nodeType === TEXT_NODE ? target.parentNode : target;
}

/**
 * Checks if an event is supported in the current execution environment.
 *
 * NOTE: This will not work correctly for non-generic events such as `change`,
 * `reset`, `load`, `error`, and `select`.
 *
 * Borrows from Modernizr.
 *
 * @param {string} eventNameSuffix Event name, e.g. "click".
 * @return {boolean} True if the event is supported.
 * @internal
 * @license Modernizr 3.0.0pre (Custom Build) | MIT
 */

function isEventSupported(eventNameSuffix) {
  if (!canUseDOM) {
    return false;
  }

  var eventName = 'on' + eventNameSuffix;
  var isSupported = eventName in document;

  if (!isSupported) {
    var element = document.createElement('div');
    element.setAttribute(eventName, 'return;');
    isSupported = typeof element[eventName] === 'function';
  }

  return isSupported;
}

/**
 * Summary of `DOMEventPluginSystem` event handling:
 *
 *  - Top-level delegation is used to trap most native browser events. This
 *    may only occur in the main thread and is the responsibility of
 *    ReactDOMEventListener, which is injected and can therefore support
 *    pluggable event sources. This is the only work that occurs in the main
 *    thread.
 *
 *  - We normalize and de-duplicate events to account for browser quirks. This
 *    may be done in the worker thread.
 *
 *  - Forward these native events (with the associated top-level type used to
 *    trap it) to `EventPluginRegistry`, which in turn will ask plugins if they want
 *    to extract any synthetic events.
 *
 *  - The `EventPluginRegistry` will then process each event by annotating them with
 *    "dispatches", a sequence of listeners and IDs that care about that event.
 *
 *  - The `EventPluginRegistry` then dispatches the events.
 *
 * Overview of React and the event system:
 *
 * +------------+    .
 * |    DOM     |    .
 * +------------+    .
 *       |           .
 *       v           .
 * +------------+    .
 * | ReactEvent |    .
 * |  Listener  |    .
 * +------------+    .                         +-----------+
 *       |           .               +--------+|SimpleEvent|
 *       |           .               |         |Plugin     |
 * +-----|------+    .               v         +-----------+
 * |     |      |    .    +--------------+                    +------------+
 * |     +-----------.--->|PluginRegistry|                    |    Event   |
 * |            |    .    |              |     +-----------+  | Propagators|
 * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
 * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
 * |            |    .    |              |     +-----------+  |  utilities |
 * |     +-----------.--->|              |                    +------------+
 * |     |      |    .    +--------------+
 * +-----|------+    .                ^        +-----------+
 *       |           .                |        |Enter/Leave|
 *       +           .                +-------+|Plugin     |
 * +-------------+   .                         +-----------+
 * | application |   .
 * |-------------|   .
 * |             |   .
 * |             |   .
 * +-------------+   .
 *                   .
 *    React Core     .  General Purpose Event Plugin System
 */

var CALLBACK_BOOKKEEPING_POOL_SIZE = 10;
var callbackBookkeepingPool = [];

function releaseTopLevelCallbackBookKeeping(instance) {
  instance.topLevelType = null;
  instance.nativeEvent = null;
  instance.targetInst = null;
  instance.ancestors.length = 0;

  if (callbackBookkeepingPool.length < CALLBACK_BOOKKEEPING_POOL_SIZE) {
    callbackBookkeepingPool.push(instance);
  }
} // Used to store ancestor hierarchy in top level callback


function getTopLevelCallbackBookKeeping(topLevelType, nativeEvent, targetInst, eventSystemFlags) {
  if (callbackBookkeepingPool.length) {
    var instance = callbackBookkeepingPool.pop();
    instance.topLevelType = topLevelType;
    instance.eventSystemFlags = eventSystemFlags;
    instance.nativeEvent = nativeEvent;
    instance.targetInst = targetInst;
    return instance;
  }

  return {
    topLevelType: topLevelType,
    eventSystemFlags: eventSystemFlags,
    nativeEvent: nativeEvent,
    targetInst: targetInst,
    ancestors: []
  };
}
/**
 * Find the deepest React component completely containing the root of the
 * passed-in instance (for use when entire React trees are nested within each
 * other). If React trees are not nested, returns null.
 */


function findRootContainerNode(inst) {
  if (inst.tag === HostRoot) {
    return inst.stateNode.containerInfo;
  } // TODO: It may be a good idea to cache this to prevent unnecessary DOM
  // traversal, but caching is difficult to do correctly without using a
  // mutation observer to listen for all DOM changes.


  while (inst.return) {
    inst = inst.return;
  }

  if (inst.tag !== HostRoot) {
    // This can happen if we're in a detached tree.
    return null;
  }

  return inst.stateNode.containerInfo;
}
/**
 * Allows registered plugins an opportunity to extract events from top-level
 * native browser events.
 *
 * @return {*} An accumulation of synthetic events.
 * @internal
 */


function extractPluginEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags) {
  var events = null;

  for (var i = 0; i < plugins.length; i++) {
    // Not every plugin in the ordering may be loaded at runtime.
    var possiblePlugin = plugins[i];

    if (possiblePlugin) {
      var extractedEvents = possiblePlugin.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);

      if (extractedEvents) {
        events = accumulateInto(events, extractedEvents);
      }
    }
  }

  return events;
}

function runExtractedPluginEventsInBatch(topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags) {
  var events = extractPluginEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
  runEventsInBatch(events);
}

function handleTopLevel(bookKeeping) {
  var targetInst = bookKeeping.targetInst; // Loop through the hierarchy, in case there's any nested components.
  // It's important that we build the array of ancestors before calling any
  // event handlers, because event handlers can modify the DOM, leading to
  // inconsistencies with ReactMount's node cache. See #1105.

  var ancestor = targetInst;

  do {
    if (!ancestor) {
      var ancestors = bookKeeping.ancestors;
      ancestors.push(ancestor);
      break;
    }

    var root = findRootContainerNode(ancestor);

    if (!root) {
      break;
    }

    var tag = ancestor.tag;

    if (tag === HostComponent || tag === HostText) {
      bookKeeping.ancestors.push(ancestor);
    }

    ancestor = getClosestInstanceFromNode(root);
  } while (ancestor);

  for (var i = 0; i < bookKeeping.ancestors.length; i++) {
    targetInst = bookKeeping.ancestors[i];
    var eventTarget = getEventTarget(bookKeeping.nativeEvent);
    var topLevelType = bookKeeping.topLevelType;
    var nativeEvent = bookKeeping.nativeEvent;
    var eventSystemFlags = bookKeeping.eventSystemFlags; // If this is the first ancestor, we mark it on the system flags

    if (i === 0) {
      eventSystemFlags |= IS_FIRST_ANCESTOR;
    }

    runExtractedPluginEventsInBatch(topLevelType, targetInst, nativeEvent, eventTarget, eventSystemFlags);
  }
}

function dispatchEventForLegacyPluginEventSystem(topLevelType, eventSystemFlags, nativeEvent, targetInst) {
  var bookKeeping = getTopLevelCallbackBookKeeping(topLevelType, nativeEvent, targetInst, eventSystemFlags);

  try {
    // Event queue being processed in the same cycle allows
    // `preventDefault`.
    batchedEventUpdates(handleTopLevel, bookKeeping);
  } finally {
    releaseTopLevelCallbackBookKeeping(bookKeeping);
  }
}
/**
 * We listen for bubbled touch events on the document object.
 *
 * Firefox v8.01 (and possibly others) exhibited strange behavior when
 * mounting `onmousemove` events at some node that was not the document
 * element. The symptoms were that if your mouse is not moving over something
 * contained within that mount point (for example on the background) the
 * top-level listeners for `onmousemove` won't be called. However, if you
 * register the `mousemove` on the document object, then it will of course
 * catch all `mousemove`s. This along with iOS quirks, justifies restricting
 * top-level listeners to the document object only, at least for these
 * movement types of events and possibly all events.
 *
 * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
 *
 * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
 * they bubble to document.
 *
 * @param {string} registrationName Name of listener (e.g. `onClick`).
 * @param {object} mountAt Container where to mount the listener
 */

function legacyListenToEvent(registrationName, mountAt) {
  var listenerMap = getListenerMapForElement(mountAt);
  var dependencies = registrationNameDependencies[registrationName];

  for (var i = 0; i < dependencies.length; i++) {
    var dependency = dependencies[i];
    legacyListenToTopLevelEvent(dependency, mountAt, listenerMap);
  }
}
function legacyListenToTopLevelEvent(topLevelType, mountAt, listenerMap) {
  if (!listenerMap.has(topLevelType)) {
    switch (topLevelType) {
      case TOP_SCROLL:
        trapCapturedEvent(TOP_SCROLL, mountAt);
        break;

      case TOP_FOCUS:
      case TOP_BLUR:
        trapCapturedEvent(TOP_FOCUS, mountAt);
        trapCapturedEvent(TOP_BLUR, mountAt); // We set the flag for a single dependency later in this function,
        // but this ensures we mark both as attached rather than just one.

        listenerMap.set(TOP_BLUR, null);
        listenerMap.set(TOP_FOCUS, null);
        break;

      case TOP_CANCEL:
      case TOP_CLOSE:
        if (isEventSupported(getRawEventName(topLevelType))) {
          trapCapturedEvent(topLevelType, mountAt);
        }

        break;

      case TOP_INVALID:
      case TOP_SUBMIT:
      case TOP_RESET:
        // We listen to them on the target DOM elements.
        // Some of them bubble so we don't want them to fire twice.
        break;

      default:
        // By default, listen on the top level to all non-media events.
        // Media events don't bubble so adding the listener wouldn't do anything.
        var isMediaEvent = mediaEventTypes.indexOf(topLevelType) !== -1;

        if (!isMediaEvent) {
          trapBubbledEvent(topLevelType, mountAt);
        }

        break;
    }

    listenerMap.set(topLevelType, null);
  }
}
function isListeningToAllDependencies(registrationName, mountAt) {
  var listenerMap = getListenerMapForElement(mountAt);
  var dependencies = registrationNameDependencies[registrationName];

  for (var i = 0; i < dependencies.length; i++) {
    var dependency = dependencies[i];

    if (!listenerMap.has(dependency)) {
      return false;
    }
  }

  return true;
}

var attemptUserBlockingHydration;
function setAttemptUserBlockingHydration(fn) {
  attemptUserBlockingHydration = fn;
}
var attemptContinuousHydration;
function setAttemptContinuousHydration(fn) {
  attemptContinuousHydration = fn;
}
var attemptHydrationAtCurrentPriority;
function setAttemptHydrationAtCurrentPriority(fn) {
  attemptHydrationAtCurrentPriority = fn;
} // TODO: Upgrade this definition once we're on a newer version of Flow that
var hasScheduledReplayAttempt = false; // The queue of discrete events to be replayed.

var queuedDiscreteEvents = []; // Indicates if any continuous event targets are non-null for early bailout.
// if the last target was dehydrated.

var queuedFocus = null;
var queuedDrag = null;
var queuedMouse = null; // For pointer events there can be one latest event per pointerId.

var queuedPointers = new Map();
var queuedPointerCaptures = new Map(); // We could consider replaying selectionchange and touchmoves too.

var queuedExplicitHydrationTargets = [];
function hasQueuedDiscreteEvents() {
  return queuedDiscreteEvents.length > 0;
}
var discreteReplayableEvents = [TOP_MOUSE_DOWN, TOP_MOUSE_UP, TOP_TOUCH_CANCEL, TOP_TOUCH_END, TOP_TOUCH_START, TOP_AUX_CLICK, TOP_DOUBLE_CLICK, TOP_POINTER_CANCEL, TOP_POINTER_DOWN, TOP_POINTER_UP, TOP_DRAG_END, TOP_DRAG_START, TOP_DROP, TOP_COMPOSITION_END, TOP_COMPOSITION_START, TOP_KEY_DOWN, TOP_KEY_PRESS, TOP_KEY_UP, TOP_INPUT, TOP_TEXT_INPUT, TOP_CLOSE, TOP_CANCEL, TOP_COPY, TOP_CUT, TOP_PASTE, TOP_CLICK, TOP_CHANGE, TOP_CONTEXT_MENU, TOP_RESET, TOP_SUBMIT];
var continuousReplayableEvents = [TOP_FOCUS, TOP_BLUR, TOP_DRAG_ENTER, TOP_DRAG_LEAVE, TOP_MOUSE_OVER, TOP_MOUSE_OUT, TOP_POINTER_OVER, TOP_POINTER_OUT, TOP_GOT_POINTER_CAPTURE, TOP_LOST_POINTER_CAPTURE];
function isReplayableDiscreteEvent(eventType) {
  return discreteReplayableEvents.indexOf(eventType) > -1;
}

function trapReplayableEventForDocument(topLevelType, document, listenerMap) {
  legacyListenToTopLevelEvent(topLevelType, document, listenerMap);
}

function eagerlyTrapReplayableEvents(container, document) {
  var listenerMapForDoc = getListenerMapForElement(document); // Discrete

  discreteReplayableEvents.forEach(function (topLevelType) {
    trapReplayableEventForDocument(topLevelType, document, listenerMapForDoc);
  }); // Continuous

  continuousReplayableEvents.forEach(function (topLevelType) {
    trapReplayableEventForDocument(topLevelType, document, listenerMapForDoc);
  });
}

function createQueuedReplayableEvent(blockedOn, topLevelType, eventSystemFlags, container, nativeEvent) {
  return {
    blockedOn: blockedOn,
    topLevelType: topLevelType,
    eventSystemFlags: eventSystemFlags | IS_REPLAYED,
    nativeEvent: nativeEvent,
    container: container
  };
}

function queueDiscreteEvent(blockedOn, topLevelType, eventSystemFlags, container, nativeEvent) {
  var queuedEvent = createQueuedReplayableEvent(blockedOn, topLevelType, eventSystemFlags, container, nativeEvent);
  queuedDiscreteEvents.push(queuedEvent);
} // Resets the replaying for this type of continuous event to no event.

function clearIfContinuousEvent(topLevelType, nativeEvent) {
  switch (topLevelType) {
    case TOP_FOCUS:
    case TOP_BLUR:
      queuedFocus = null;
      break;

    case TOP_DRAG_ENTER:
    case TOP_DRAG_LEAVE:
      queuedDrag = null;
      break;

    case TOP_MOUSE_OVER:
    case TOP_MOUSE_OUT:
      queuedMouse = null;
      break;

    case TOP_POINTER_OVER:
    case TOP_POINTER_OUT:
      {
        var pointerId = nativeEvent.pointerId;
        queuedPointers.delete(pointerId);
        break;
      }

    case TOP_GOT_POINTER_CAPTURE:
    case TOP_LOST_POINTER_CAPTURE:
      {
        var _pointerId = nativeEvent.pointerId;
        queuedPointerCaptures.delete(_pointerId);
        break;
      }
  }
}

function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, topLevelType, eventSystemFlags, container, nativeEvent) {
  if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
    var queuedEvent = createQueuedReplayableEvent(blockedOn, topLevelType, eventSystemFlags, container, nativeEvent);

    if (blockedOn !== null) {
      var _fiber2 = getInstanceFromNode$1(blockedOn);

      if (_fiber2 !== null) {
        // Attempt to increase the priority of this target.
        attemptContinuousHydration(_fiber2);
      }
    }

    return queuedEvent;
  } // If we have already queued this exact event, then it's because
  // the different event systems have different DOM event listeners.
  // We can accumulate the flags and store a single event to be
  // replayed.


  existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
  return existingQueuedEvent;
}

function queueIfContinuousEvent(blockedOn, topLevelType, eventSystemFlags, container, nativeEvent) {
  // These set relatedTarget to null because the replayed event will be treated as if we
  // moved from outside the window (no target) onto the target once it hydrates.
  // Instead of mutating we could clone the event.
  switch (topLevelType) {
    case TOP_FOCUS:
      {
        var focusEvent = nativeEvent;
        queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, topLevelType, eventSystemFlags, container, focusEvent);
        return true;
      }

    case TOP_DRAG_ENTER:
      {
        var dragEvent = nativeEvent;
        queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, topLevelType, eventSystemFlags, container, dragEvent);
        return true;
      }

    case TOP_MOUSE_OVER:
      {
        var mouseEvent = nativeEvent;
        queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, topLevelType, eventSystemFlags, container, mouseEvent);
        return true;
      }

    case TOP_POINTER_OVER:
      {
        var pointerEvent = nativeEvent;
        var pointerId = pointerEvent.pointerId;
        queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, topLevelType, eventSystemFlags, container, pointerEvent));
        return true;
      }

    case TOP_GOT_POINTER_CAPTURE:
      {
        var _pointerEvent = nativeEvent;
        var _pointerId2 = _pointerEvent.pointerId;
        queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, topLevelType, eventSystemFlags, container, _pointerEvent));
        return true;
      }
  }

  return false;
} // Check if this target is unblocked. Returns true if it's unblocked.

function attemptExplicitHydrationTarget(queuedTarget) {
  // TODO: This function shares a lot of logic with attemptToDispatchEvent.
  // Try to unify them. It's a bit tricky since it would require two return
  // values.
  var targetInst = getClosestInstanceFromNode(queuedTarget.target);

  if (targetInst !== null) {
    var nearestMounted = getNearestMountedFiber(targetInst);

    if (nearestMounted !== null) {
      var tag = nearestMounted.tag;

      if (tag === SuspenseComponent) {
        var instance = getSuspenseInstanceFromFiber(nearestMounted);

        if (instance !== null) {
          // We're blocked on hydrating this boundary.
          // Increase its priority.
          queuedTarget.blockedOn = instance;
          Scheduler.unstable_runWithPriority(queuedTarget.priority, function () {
            attemptHydrationAtCurrentPriority(nearestMounted);
          });
          return;
        }
      } else if (tag === HostRoot) {
        var root = nearestMounted.stateNode;

        if (root.hydrate) {
          queuedTarget.blockedOn = getContainerFromFiber(nearestMounted); // We don't currently have a way to increase the priority of
          // a root other than sync.

          return;
        }
      }
    }
  }

  queuedTarget.blockedOn = null;
}

function attemptReplayContinuousQueuedEvent(queuedEvent) {
  if (queuedEvent.blockedOn !== null) {
    return false;
  }

  var nextBlockedOn = attemptToDispatchEvent(queuedEvent.topLevelType, queuedEvent.eventSystemFlags, queuedEvent.container, queuedEvent.nativeEvent);

  if (nextBlockedOn !== null) {
    // We're still blocked. Try again later.
    var _fiber3 = getInstanceFromNode$1(nextBlockedOn);

    if (_fiber3 !== null) {
      attemptContinuousHydration(_fiber3);
    }

    queuedEvent.blockedOn = nextBlockedOn;
    return false;
  }

  return true;
}

function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map) {
  if (attemptReplayContinuousQueuedEvent(queuedEvent)) {
    map.delete(key);
  }
}

function replayUnblockedEvents() {
  hasScheduledReplayAttempt = false; // First replay discrete events.

  while (queuedDiscreteEvents.length > 0) {
    var nextDiscreteEvent = queuedDiscreteEvents[0];

    if (nextDiscreteEvent.blockedOn !== null) {
      // We're still blocked.
      // Increase the priority of this boundary to unblock
      // the next discrete event.
      var _fiber4 = getInstanceFromNode$1(nextDiscreteEvent.blockedOn);

      if (_fiber4 !== null) {
        attemptUserBlockingHydration(_fiber4);
      }

      break;
    }

    var nextBlockedOn = attemptToDispatchEvent(nextDiscreteEvent.topLevelType, nextDiscreteEvent.eventSystemFlags, nextDiscreteEvent.container, nextDiscreteEvent.nativeEvent);

    if (nextBlockedOn !== null) {
      // We're still blocked. Try again later.
      nextDiscreteEvent.blockedOn = nextBlockedOn;
    } else {
      // We've successfully replayed the first event. Let's try the next one.
      queuedDiscreteEvents.shift();
    }
  } // Next replay any continuous events.


  if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) {
    queuedFocus = null;
  }

  if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) {
    queuedDrag = null;
  }

  if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) {
    queuedMouse = null;
  }

  queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
  queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
}

function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
  if (queuedEvent.blockedOn === unblocked) {
    queuedEvent.blockedOn = null;

    if (!hasScheduledReplayAttempt) {
      hasScheduledReplayAttempt = true; // Schedule a callback to attempt replaying as many events as are
      // now unblocked. This first might not actually be unblocked yet.
      // We could check it early to avoid scheduling an unnecessary callback.

      Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents);
    }
  }
}

function retryIfBlockedOn(unblocked) {
  // Mark anything that was blocked on this as no longer blocked
  // and eligible for a replay.
  if (queuedDiscreteEvents.length > 0) {
    scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked); // This is a exponential search for each boundary that commits. I think it's
    // worth it because we expect very few discrete events to queue up and once
    // we are actually fully unblocked it will be fast to replay them.

    for (var i = 1; i < queuedDiscreteEvents.length; i++) {
      var queuedEvent = queuedDiscreteEvents[i];

      if (queuedEvent.blockedOn === unblocked) {
        queuedEvent.blockedOn = null;
      }
    }
  }

  if (queuedFocus !== null) {
    scheduleCallbackIfUnblocked(queuedFocus, unblocked);
  }

  if (queuedDrag !== null) {
    scheduleCallbackIfUnblocked(queuedDrag, unblocked);
  }

  if (queuedMouse !== null) {
    scheduleCallbackIfUnblocked(queuedMouse, unblocked);
  }

  var unblock = function (queuedEvent) {
    return scheduleCallbackIfUnblocked(queuedEvent, unblocked);
  };

  queuedPointers.forEach(unblock);
  queuedPointerCaptures.forEach(unblock);

  for (var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++) {
    var queuedTarget = queuedExplicitHydrationTargets[_i];

    if (queuedTarget.blockedOn === unblocked) {
      queuedTarget.blockedOn = null;
    }
  }

  while (queuedExplicitHydrationTargets.length > 0) {
    var nextExplicitTarget = queuedExplicitHydrationTargets[0];

    if (nextExplicitTarget.blockedOn !== null) {
      // We're still blocked.
      break;
    } else {
      attemptExplicitHydrationTarget(nextExplicitTarget);

      if (nextExplicitTarget.blockedOn === null) {
        // We're unblocked.
        queuedExplicitHydrationTargets.shift();
      }
    }
  }
}

function addEventBubbleListener(element, eventType, listener) {
  element.addEventListener(eventType, listener, false);
}
function addEventCaptureListener(element, eventType, listener) {
  element.addEventListener(eventType, listener, true);
}

// do it in two places, which duplicates logic
// and increases the bundle size, we do it all
// here once. If we remove or refactor the
// SimpleEventPlugin, we should also remove or
// update the below line.

var simpleEventPluginEventTypes = {};
var topLevelEventsToDispatchConfig = new Map();
var eventPriorities = new Map(); // We store most of the events in this module in pairs of two strings so we can re-use
// the code required to apply the same logic for event prioritization and that of the
// SimpleEventPlugin. This complicates things slightly, but the aim is to reduce code
// duplication (for which there would be quite a bit). For the events that are not needed
// for the SimpleEventPlugin (otherDiscreteEvents) we process them separately as an
// array of top level events.
// Lastly, we ignore prettier so we can keep the formatting sane.
// prettier-ignore

var discreteEventPairsForSimpleEventPlugin = [TOP_BLUR, 'blur', TOP_CANCEL, 'cancel', TOP_CLICK, 'click', TOP_CLOSE, 'close', TOP_CONTEXT_MENU, 'contextMenu', TOP_COPY, 'copy', TOP_CUT, 'cut', TOP_AUX_CLICK, 'auxClick', TOP_DOUBLE_CLICK, 'doubleClick', TOP_DRAG_END, 'dragEnd', TOP_DRAG_START, 'dragStart', TOP_DROP, 'drop', TOP_FOCUS, 'focus', TOP_INPUT, 'input', TOP_INVALID, 'invalid', TOP_KEY_DOWN, 'keyDown', TOP_KEY_PRESS, 'keyPress', TOP_KEY_UP, 'keyUp', TOP_MOUSE_DOWN, 'mouseDown', TOP_MOUSE_UP, 'mouseUp', TOP_PASTE, 'paste', TOP_PAUSE, 'pause', TOP_PLAY, 'play', TOP_POINTER_CANCEL, 'pointerCancel', TOP_POINTER_DOWN, 'pointerDown', TOP_POINTER_UP, 'pointerUp', TOP_RATE_CHANGE, 'rateChange', TOP_RESET, 'reset', TOP_SEEKED, 'seeked', TOP_SUBMIT, 'submit', TOP_TOUCH_CANCEL, 'touchCancel', TOP_TOUCH_END, 'touchEnd', TOP_TOUCH_START, 'touchStart', TOP_VOLUME_CHANGE, 'volumeChange'];
var otherDiscreteEvents = [TOP_CHANGE, TOP_SELECTION_CHANGE, TOP_TEXT_INPUT, TOP_COMPOSITION_START, TOP_COMPOSITION_END, TOP_COMPOSITION_UPDATE]; // prettier-ignore

var userBlockingPairsForSimpleEventPlugin = [TOP_DRAG, 'drag', TOP_DRAG_ENTER, 'dragEnter', TOP_DRAG_EXIT, 'dragExit', TOP_DRAG_LEAVE, 'dragLeave', TOP_DRAG_OVER, 'dragOver', TOP_MOUSE_MOVE, 'mouseMove', TOP_MOUSE_OUT, 'mouseOut', TOP_MOUSE_OVER, 'mouseOver', TOP_POINTER_MOVE, 'pointerMove', TOP_POINTER_OUT, 'pointerOut', TOP_POINTER_OVER, 'pointerOver', TOP_SCROLL, 'scroll', TOP_TOGGLE, 'toggle', TOP_TOUCH_MOVE, 'touchMove', TOP_WHEEL, 'wheel']; // prettier-ignore

var continuousPairsForSimpleEventPlugin = [TOP_ABORT, 'abort', TOP_ANIMATION_END, 'animationEnd', TOP_ANIMATION_ITERATION, 'animationIteration', TOP_ANIMATION_START, 'animationStart', TOP_CAN_PLAY, 'canPlay', TOP_CAN_PLAY_THROUGH, 'canPlayThrough', TOP_DURATION_CHANGE, 'durationChange', TOP_EMPTIED, 'emptied', TOP_ENCRYPTED, 'encrypted', TOP_ENDED, 'ended', TOP_ERROR, 'error', TOP_GOT_POINTER_CAPTURE, 'gotPointerCapture', TOP_LOAD, 'load', TOP_LOADED_DATA, 'loadedData', TOP_LOADED_METADATA, 'loadedMetadata', TOP_LOAD_START, 'loadStart', TOP_LOST_POINTER_CAPTURE, 'lostPointerCapture', TOP_PLAYING, 'playing', TOP_PROGRESS, 'progress', TOP_SEEKING, 'seeking', TOP_STALLED, 'stalled', TOP_SUSPEND, 'suspend', TOP_TIME_UPDATE, 'timeUpdate', TOP_TRANSITION_END, 'transitionEnd', TOP_WAITING, 'waiting'];
/**
 * Turns
 * ['abort', ...]
 * into
 * eventTypes = {
 *   'abort': {
 *     phasedRegistrationNames: {
 *       bubbled: 'onAbort',
 *       captured: 'onAbortCapture',
 *     },
 *     dependencies: [TOP_ABORT],
 *   },
 *   ...
 * };
 * topLevelEventsToDispatchConfig = new Map([
 *   [TOP_ABORT, { sameConfig }],
 * ]);
 */

function processSimpleEventPluginPairsByPriority(eventTypes, priority) {
  // As the event types are in pairs of two, we need to iterate
  // through in twos. The events are in pairs of two to save code
  // and improve init perf of processing this array, as it will
  // result in far fewer object allocations and property accesses
  // if we only use three arrays to process all the categories of
  // instead of tuples.
  for (var i = 0; i < eventTypes.length; i += 2) {
    var topEvent = eventTypes[i];
    var event = eventTypes[i + 1];
    var capitalizedEvent = event[0].toUpperCase() + event.slice(1);
    var onEvent = 'on' + capitalizedEvent;
    var config = {
      phasedRegistrationNames: {
        bubbled: onEvent,
        captured: onEvent + 'Capture'
      },
      dependencies: [topEvent],
      eventPriority: priority
    };
    eventPriorities.set(topEvent, priority);
    topLevelEventsToDispatchConfig.set(topEvent, config);
    simpleEventPluginEventTypes[event] = config;
  }
}

function processTopEventPairsByPriority(eventTypes, priority) {
  for (var i = 0; i < eventTypes.length; i++) {
    eventPriorities.set(eventTypes[i], priority);
  }
} // SimpleEventPlugin


processSimpleEventPluginPairsByPriority(discreteEventPairsForSimpleEventPlugin, DiscreteEvent);
processSimpleEventPluginPairsByPriority(userBlockingPairsForSimpleEventPlugin, UserBlockingEvent);
processSimpleEventPluginPairsByPriority(continuousPairsForSimpleEventPlugin, ContinuousEvent); // Not used by SimpleEventPlugin

processTopEventPairsByPriority(otherDiscreteEvents, DiscreteEvent);
function getEventPriorityForPluginSystem(topLevelType) {
  var priority = eventPriorities.get(topLevelType); // Default to a ContinuousEvent. Note: we might
  // want to warn if we can't detect the priority
  // for the event.

  return priority === undefined ? ContinuousEvent : priority;
}

// Intentionally not named imports because Rollup would use dynamic dispatch for
var UserBlockingPriority = Scheduler.unstable_UserBlockingPriority,
    runWithPriority = Scheduler.unstable_runWithPriority; // TODO: can we stop exporting these?

var _enabled = true;
function setEnabled(enabled) {
  _enabled = !!enabled;
}
function isEnabled() {
  return _enabled;
}
function trapBubbledEvent(topLevelType, element) {
  trapEventForPluginEventSystem(element, topLevelType, false);
}
function trapCapturedEvent(topLevelType, element) {
  trapEventForPluginEventSystem(element, topLevelType, true);
}

function trapEventForPluginEventSystem(container, topLevelType, capture) {
  var listener;

  switch (getEventPriorityForPluginSystem(topLevelType)) {
    case DiscreteEvent:
      listener = dispatchDiscreteEvent.bind(null, topLevelType, PLUGIN_EVENT_SYSTEM, container);
      break;

    case UserBlockingEvent:
      listener = dispatchUserBlockingUpdate.bind(null, topLevelType, PLUGIN_EVENT_SYSTEM, container);
      break;

    case ContinuousEvent:
    default:
      listener = dispatchEvent.bind(null, topLevelType, PLUGIN_EVENT_SYSTEM, container);
      break;
  }

  var rawEventName = getRawEventName(topLevelType);

  if (capture) {
    addEventCaptureListener(container, rawEventName, listener);
  } else {
    addEventBubbleListener(container, rawEventName, listener);
  }
}

function dispatchDiscreteEvent(topLevelType, eventSystemFlags, container, nativeEvent) {
  flushDiscreteUpdatesIfNeeded(nativeEvent.timeStamp);
  discreteUpdates(dispatchEvent, topLevelType, eventSystemFlags, container, nativeEvent);
}

function dispatchUserBlockingUpdate(topLevelType, eventSystemFlags, container, nativeEvent) {
  runWithPriority(UserBlockingPriority, dispatchEvent.bind(null, topLevelType, eventSystemFlags, container, nativeEvent));
}

function dispatchEvent(topLevelType, eventSystemFlags, container, nativeEvent) {
  if (!_enabled) {
    return;
  }

  if (hasQueuedDiscreteEvents() && isReplayableDiscreteEvent(topLevelType)) {
    // If we already have a queue of discrete events, and this is another discrete
    // event, then we can't dispatch it regardless of its target, since they
    // need to dispatch in order.
    queueDiscreteEvent(null, // Flags that we're not actually blocked on anything as far as we know.
    topLevelType, eventSystemFlags, container, nativeEvent);
    return;
  }

  var blockedOn = attemptToDispatchEvent(topLevelType, eventSystemFlags, container, nativeEvent);

  if (blockedOn === null) {
    // We successfully dispatched this event.
    clearIfContinuousEvent(topLevelType, nativeEvent);
    return;
  }

  if (isReplayableDiscreteEvent(topLevelType)) {
    // This this to be replayed later once the target is available.
    queueDiscreteEvent(blockedOn, topLevelType, eventSystemFlags, container, nativeEvent);
    return;
  }

  if (queueIfContinuousEvent(blockedOn, topLevelType, eventSystemFlags, container, nativeEvent)) {
    return;
  } // We need to clear only if we didn't queue because
  // queueing is accummulative.


  clearIfContinuousEvent(topLevelType, nativeEvent); // This is not replayable so we'll invoke it but without a target,
  // in case the event system needs to trace it.

  {
    dispatchEventForLegacyPluginEventSystem(topLevelType, eventSystemFlags, nativeEvent, null);
  }
} // Attempt dispatching an event. Returns a SuspenseInstance or Container if it's blocked.

function attemptToDispatchEvent(topLevelType, eventSystemFlags, container, nativeEvent) {
  // TODO: Warn if _enabled is false.
  var nativeEventTarget = getEventTarget(nativeEvent);
  var targetInst = getClosestInstanceFromNode(nativeEventTarget);

  if (targetInst !== null) {
    var nearestMounted = getNearestMountedFiber(targetInst);

    if (nearestMounted === null) {
      // This tree has been unmounted already. Dispatch without a target.
      targetInst = null;
    } else {
      var tag = nearestMounted.tag;

      if (tag === SuspenseComponent) {
        var instance = getSuspenseInstanceFromFiber(nearestMounted);

        if (instance !== null) {
          // Queue the event to be replayed later. Abort dispatching since we
          // don't want this event dispatched twice through the event system.
          // TODO: If this is the first discrete event in the queue. Schedule an increased
          // priority for this boundary.
          return instance;
        } // This shouldn't happen, something went wrong but to avoid blocking
        // the whole system, dispatch the event without a target.
        // TODO: Warn.


        targetInst = null;
      } else if (tag === HostRoot) {
        var root = nearestMounted.stateNode;

        if (root.hydrate) {
          // If this happens during a replay something went wrong and it might block
          // the whole system.
          return getContainerFromFiber(nearestMounted);
        }

        targetInst = null;
      } else if (nearestMounted !== targetInst) {
        // If we get an event (ex: img onload) before committing that
        // component's mount, ignore it for now (that is, treat it as if it was an
        // event on a non-React tree). We might also consider queueing events and
        // dispatching them after the mount.
        targetInst = null;
      }
    }
  }

  {
    dispatchEventForLegacyPluginEventSystem(topLevelType, eventSystemFlags, nativeEvent, targetInst);
  } // We're not blocked on anything.


  return null;
}

// List derived from Gecko source code:
// https://github.com/mozilla/gecko-dev/blob/4e638efc71/layout/style/test/property_database.js
var shorthandToLonghand = {
  animation: ['animationDelay', 'animationDirection', 'animationDuration', 'animationFillMode', 'animationIterationCount', 'animationName', 'animationPlayState', 'animationTimingFunction'],
  background: ['backgroundAttachment', 'backgroundClip', 'backgroundColor', 'backgroundImage', 'backgroundOrigin', 'backgroundPositionX', 'backgroundPositionY', 'backgroundRepeat', 'backgroundSize'],
  backgroundPosition: ['backgroundPositionX', 'backgroundPositionY'],
  border: ['borderBottomColor', 'borderBottomStyle', 'borderBottomWidth', 'borderImageOutset', 'borderImageRepeat', 'borderImageSlice', 'borderImageSource', 'borderImageWidth', 'borderLeftColor', 'borderLeftStyle', 'borderLeftWidth', 'borderRightColor', 'borderRightStyle', 'borderRightWidth', 'borderTopColor', 'borderTopStyle', 'borderTopWidth'],
  borderBlockEnd: ['borderBlockEndColor', 'borderBlockEndStyle', 'borderBlockEndWidth'],
  borderBlockStart: ['borderBlockStartColor', 'borderBlockStartStyle', 'borderBlockStartWidth'],
  borderBottom: ['borderBottomColor', 'borderBottomStyle', 'borderBottomWidth'],
  borderColor: ['borderBottomColor', 'borderLeftColor', 'borderRightColor', 'borderTopColor'],
  borderImage: ['borderImageOutset', 'borderImageRepeat', 'borderImageSlice', 'borderImageSource', 'borderImageWidth'],
  borderInlineEnd: ['borderInlineEndColor', 'borderInlineEndStyle', 'borderInlineEndWidth'],
  borderInlineStart: ['borderInlineStartColor', 'borderInlineStartStyle', 'borderInlineStartWidth'],
  borderLeft: ['borderLeftColor', 'borderLeftStyle', 'borderLeftWidth'],
  borderRadius: ['borderBottomLeftRadius', 'borderBottomRightRadius', 'borderTopLeftRadius', 'borderTopRightRadius'],
  borderRight: ['borderRightColor', 'borderRightStyle', 'borderRightWidth'],
  borderStyle: ['borderBottomStyle', 'borderLeftStyle', 'borderRightStyle', 'borderTopStyle'],
  borderTop: ['borderTopColor', 'borderTopStyle', 'borderTopWidth'],
  borderWidth: ['borderBottomWidth', 'borderLeftWidth', 'borderRightWidth', 'borderTopWidth'],
  columnRule: ['columnRuleColor', 'columnRuleStyle', 'columnRuleWidth'],
  columns: ['columnCount', 'columnWidth'],
  flex: ['flexBasis', 'flexGrow', 'flexShrink'],
  flexFlow: ['flexDirection', 'flexWrap'],
  font: ['fontFamily', 'fontFeatureSettings', 'fontKerning', 'fontLanguageOverride', 'fontSize', 'fontSizeAdjust', 'fontStretch', 'fontStyle', 'fontVariant', 'fontVariantAlternates', 'fontVariantCaps', 'fontVariantEastAsian', 'fontVariantLigatures', 'fontVariantNumeric', 'fontVariantPosition', 'fontWeight', 'lineHeight'],
  fontVariant: ['fontVariantAlternates', 'fontVariantCaps', 'fontVariantEastAsian', 'fontVariantLigatures', 'fontVariantNumeric', 'fontVariantPosition'],
  gap: ['columnGap', 'rowGap'],
  grid: ['gridAutoColumns', 'gridAutoFlow', 'gridAutoRows', 'gridTemplateAreas', 'gridTemplateColumns', 'gridTemplateRows'],
  gridArea: ['gridColumnEnd', 'gridColumnStart', 'gridRowEnd', 'gridRowStart'],
  gridColumn: ['gridColumnEnd', 'gridColumnStart'],
  gridColumnGap: ['columnGap'],
  gridGap: ['columnGap', 'rowGap'],
  gridRow: ['gridRowEnd', 'gridRowStart'],
  gridRowGap: ['rowGap'],
  gridTemplate: ['gridTemplateAreas', 'gridTemplateColumns', 'gridTemplateRows'],
  listStyle: ['listStyleImage', 'listStylePosition', 'listStyleType'],
  margin: ['marginBottom', 'marginLeft', 'marginRight', 'marginTop'],
  marker: ['markerEnd', 'markerMid', 'markerStart'],
  mask: ['maskClip', 'maskComposite', 'maskImage', 'maskMode', 'maskOrigin', 'maskPositionX', 'maskPositionY', 'maskRepeat', 'maskSize'],
  maskPosition: ['maskPositionX', 'maskPositionY'],
  outline: ['outlineColor', 'outlineStyle', 'outlineWidth'],
  overflow: ['overflowX', 'overflowY'],
  padding: ['paddingBottom', 'paddingLeft', 'paddingRight', 'paddingTop'],
  placeContent: ['alignContent', 'justifyContent'],
  placeItems: ['alignItems', 'justifyItems'],
  placeSelf: ['alignSelf', 'justifySelf'],
  textDecoration: ['textDecorationColor', 'textDecorationLine', 'textDecorationStyle'],
  textEmphasis: ['textEmphasisColor', 'textEmphasisStyle'],
  transition: ['transitionDelay', 'transitionDuration', 'transitionProperty', 'transitionTimingFunction'],
  wordWrap: ['overflowWrap']
};

/**
 * CSS properties which accept numbers but are not in units of "px".
 */
var isUnitlessNumber = {
  animationIterationCount: true,
  borderImageOutset: true,
  borderImageSlice: true,
  borderImageWidth: true,
  boxFlex: true,
  boxFlexGroup: true,
  boxOrdinalGroup: true,
  columnCount: true,
  columns: true,
  flex: true,
  flexGrow: true,
  flexPositive: true,
  flexShrink: true,
  flexNegative: true,
  flexOrder: true,
  gridArea: true,
  gridRow: true,
  gridRowEnd: true,
  gridRowSpan: true,
  gridRowStart: true,
  gridColumn: true,
  gridColumnEnd: true,
  gridColumnSpan: true,
  gridColumnStart: true,
  fontWeight: true,
  lineClamp: true,
  lineHeight: true,
  opacity: true,
  order: true,
  orphans: true,
  tabSize: true,
  widows: true,
  zIndex: true,
  zoom: true,
  // SVG-related properties
  fillOpacity: true,
  floodOpacity: true,
  stopOpacity: true,
  strokeDasharray: true,
  strokeDashoffset: true,
  strokeMiterlimit: true,
  strokeOpacity: true,
  strokeWidth: true
};
/**
 * @param {string} prefix vendor-specific prefix, eg: Webkit
 * @param {string} key style name, eg: transitionDuration
 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
 * WebkitTransitionDuration
 */

function prefixKey(prefix, key) {
  return prefix + key.charAt(0).toUpperCase() + key.substring(1);
}
/**
 * Support style names that may come passed in prefixed by adding permutations
 * of vendor prefixes.
 */


var prefixes = ['Webkit', 'ms', 'Moz', 'O']; // Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
// infinite loop, because it iterates over the newly added props too.

Object.keys(isUnitlessNumber).forEach(function (prop) {
  prefixes.forEach(function (prefix) {
    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
  });
});

/**
 * Convert a value into the proper css writable value. The style name `name`
 * should be logical (no hyphens), as specified
 * in `CSSProperty.isUnitlessNumber`.
 *
 * @param {string} name CSS property name such as `topMargin`.
 * @param {*} value CSS property value such as `10px`.
 * @return {string} Normalized style value with dimensions applied.
 */

function dangerousStyleValue(name, value, isCustomProperty) {
  // Note that we've removed escapeTextForBrowser() calls here since the
  // whole string will be escaped when the attribute is injected into
  // the markup. If you provide unsafe user data here they can inject
  // arbitrary CSS which may be problematic (I couldn't repro this):
  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
  // This is not an XSS hole but instead a potential CSS injection issue
  // which has lead to a greater discussion about how we're going to
  // trust URLs moving forward. See #2115901
  var isEmpty = value == null || typeof value === 'boolean' || value === '';

  if (isEmpty) {
    return '';
  }

  if (!isCustomProperty && typeof value === 'number' && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) {
    return value + 'px'; // Presumes implicit 'px' suffix for unitless numbers
  }

  return ('' + value).trim();
}

var uppercasePattern = /([A-Z])/g;
var msPattern = /^ms-/;
/**
 * Hyphenates a camelcased CSS property name, for example:
 *
 *   > hyphenateStyleName('backgroundColor')
 *   < "background-color"
 *   > hyphenateStyleName('MozTransition')
 *   < "-moz-transition"
 *   > hyphenateStyleName('msTransition')
 *   < "-ms-transition"
 *
 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
 * is converted to `-ms-`.
 */

function hyphenateStyleName(name) {
  return name.replace(uppercasePattern, '-$1').toLowerCase().replace(msPattern, '-ms-');
}

var warnValidStyle = function () {};

{
  // 'msTransform' is correct, but the other prefixes should be capitalized
  var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
  var msPattern$1 = /^-ms-/;
  var hyphenPattern = /-(.)/g; // style values shouldn't contain a semicolon

  var badStyleValueWithSemicolonPattern = /;\s*$/;
  var warnedStyleNames = {};
  var warnedStyleValues = {};
  var warnedForNaNValue = false;
  var warnedForInfinityValue = false;

  var camelize = function (string) {
    return string.replace(hyphenPattern, function (_, character) {
      return character.toUpperCase();
    });
  };

  var warnHyphenatedStyleName = function (name) {
    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
      return;
    }

    warnedStyleNames[name] = true;

    error('Unsupported style property %s. Did you mean %s?', name, // As Andi Smith suggests
    // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
    // is converted to lowercase `ms`.
    camelize(name.replace(msPattern$1, 'ms-')));
  };

  var warnBadVendoredStyleName = function (name) {
    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
      return;
    }

    warnedStyleNames[name] = true;

    error('Unsupported vendor-prefixed style property %s. Did you mean %s?', name, name.charAt(0).toUpperCase() + name.slice(1));
  };

  var warnStyleValueWithSemicolon = function (name, value) {
    if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
      return;
    }

    warnedStyleValues[value] = true;

    error("Style property values shouldn't contain a semicolon. " + 'Try "%s: %s" instead.', name, value.replace(badStyleValueWithSemicolonPattern, ''));
  };

  var warnStyleValueIsNaN = function (name, value) {
    if (warnedForNaNValue) {
      return;
    }

    warnedForNaNValue = true;

    error('`NaN` is an invalid value for the `%s` css style property.', name);
  };

  var warnStyleValueIsInfinity = function (name, value) {
    if (warnedForInfinityValue) {
      return;
    }

    warnedForInfinityValue = true;

    error('`Infinity` is an invalid value for the `%s` css style property.', name);
  };

  warnValidStyle = function (name, value) {
    if (name.indexOf('-') > -1) {
      warnHyphenatedStyleName(name);
    } else if (badVendoredStyleNamePattern.test(name)) {
      warnBadVendoredStyleName(name);
    } else if (badStyleValueWithSemicolonPattern.test(value)) {
      warnStyleValueWithSemicolon(name, value);
    }

    if (typeof value === 'number') {
      if (isNaN(value)) {
        warnStyleValueIsNaN(name, value);
      } else if (!isFinite(value)) {
        warnStyleValueIsInfinity(name, value);
      }
    }
  };
}

var warnValidStyle$1 = warnValidStyle;

/**
 * Operations for dealing with CSS properties.
 */

/**
 * This creates a string that is expected to be equivalent to the style
 * attribute generated by server-side rendering. It by-passes warnings and
 * security checks so it's not safe to use this value for anything other than
 * comparison. It is only used in DEV for SSR validation.
 */

function createDangerousStringForStyles(styles) {
  {
    var serialized = '';
    var delimiter = '';

    for (var styleName in styles) {
      if (!styles.hasOwnProperty(styleName)) {
        continue;
      }

      var styleValue = styles[styleName];

      if (styleValue != null) {
        var isCustomProperty = styleName.indexOf('--') === 0;
        serialized += delimiter + (isCustomProperty ? styleName : hyphenateStyleName(styleName)) + ':';
        serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);
        delimiter = ';';
      }
    }

    return serialized || null;
  }
}
/**
 * Sets the value for multiple styles on a node.  If a value is specified as
 * '' (empty string), the corresponding style property will be unset.
 *
 * @param {DOMElement} node
 * @param {object} styles
 */

function setValueForStyles(node, styles) {
  var style = node.style;

  for (var styleName in styles) {
    if (!styles.hasOwnProperty(styleName)) {
      continue;
    }

    var isCustomProperty = styleName.indexOf('--') === 0;

    {
      if (!isCustomProperty) {
        warnValidStyle$1(styleName, styles[styleName]);
      }
    }

    var styleValue = dangerousStyleValue(styleName, styles[styleName], isCustomProperty);

    if (styleName === 'float') {
      styleName = 'cssFloat';
    }

    if (isCustomProperty) {
      style.setProperty(styleName, styleValue);
    } else {
      style[styleName] = styleValue;
    }
  }
}

function isValueEmpty(value) {
  return value == null || typeof value === 'boolean' || value === '';
}
/**
 * Given {color: 'red', overflow: 'hidden'} returns {
 *   color: 'color',
 *   overflowX: 'overflow',
 *   overflowY: 'overflow',
 * }. This can be read as "the overflowY property was set by the overflow
 * shorthand". That is, the values are the property that each was derived from.
 */


function expandShorthandMap(styles) {
  var expanded = {};

  for (var key in styles) {
    var longhands = shorthandToLonghand[key] || [key];

    for (var i = 0; i < longhands.length; i++) {
      expanded[longhands[i]] = key;
    }
  }

  return expanded;
}
/**
 * When mixing shorthand and longhand property names, we warn during updates if
 * we expect an incorrect result to occur. In particular, we warn for:
 *
 * Updating a shorthand property (longhand gets overwritten):
 *   {font: 'foo', fontVariant: 'bar'} -> {font: 'baz', fontVariant: 'bar'}
 *   becomes .style.font = 'baz'
 * Removing a shorthand property (longhand gets lost too):
 *   {font: 'foo', fontVariant: 'bar'} -> {fontVariant: 'bar'}
 *   becomes .style.font = ''
 * Removing a longhand property (should revert to shorthand; doesn't):
 *   {font: 'foo', fontVariant: 'bar'} -> {font: 'foo'}
 *   becomes .style.fontVariant = ''
 */


function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
  {

    if (!nextStyles) {
      return;
    }

    var expandedUpdates = expandShorthandMap(styleUpdates);
    var expandedStyles = expandShorthandMap(nextStyles);
    var warnedAbout = {};

    for (var key in expandedUpdates) {
      var originalKey = expandedUpdates[key];
      var correctOriginalKey = expandedStyles[key];

      if (correctOriginalKey && originalKey !== correctOriginalKey) {
        var warningKey = originalKey + ',' + correctOriginalKey;

        if (warnedAbout[warningKey]) {
          continue;
        }

        warnedAbout[warningKey] = true;

        error('%s a style property during rerender (%s) when a ' + 'conflicting property is set (%s) can lead to styling bugs. To ' + "avoid this, don't mix shorthand and non-shorthand properties " + 'for the same value; instead, replace the shorthand with ' + 'separate values.', isValueEmpty(styleUpdates[originalKey]) ? 'Removing' : 'Updating', originalKey, correctOriginalKey);
      }
    }
  }
}

// For HTML, certain tags should omit their close tag. We keep a whitelist for
// those special-case tags.
var omittedCloseTags = {
  area: true,
  base: true,
  br: true,
  col: true,
  embed: true,
  hr: true,
  img: true,
  input: true,
  keygen: true,
  link: true,
  meta: true,
  param: true,
  source: true,
  track: true,
  wbr: true // NOTE: menuitem's close tag should be omitted, but that causes problems.

};

// `omittedCloseTags` except that `menuitem` should still have its closing tag.

var voidElementTags = _assign({
  menuitem: true
}, omittedCloseTags);

var HTML = '__html';
var ReactDebugCurrentFrame$3 = null;

{
  ReactDebugCurrentFrame$3 = ReactSharedInternals.ReactDebugCurrentFrame;
}

function assertValidProps(tag, props) {
  if (!props) {
    return;
  } // Note the use of `==` which checks for null or undefined.


  if (voidElementTags[tag]) {
    if (!(props.children == null && props.dangerouslySetInnerHTML == null)) {
      {
        throw Error( tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`." + ( ReactDebugCurrentFrame$3.getStackAddendum() ) );
      }
    }
  }

  if (props.dangerouslySetInnerHTML != null) {
    if (!(props.children == null)) {
      {
        throw Error( "Can only set one of `children` or `props.dangerouslySetInnerHTML`." );
      }
    }

    if (!(typeof props.dangerouslySetInnerHTML === 'object' && HTML in props.dangerouslySetInnerHTML)) {
      {
        throw Error( "`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://fb.me/react-invariant-dangerously-set-inner-html for more information." );
      }
    }
  }

  {
    if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
      error('A component is `contentEditable` and contains `children` managed by ' + 'React. It is now your responsibility to guarantee that none of ' + 'those nodes are unexpectedly modified or duplicated. This is ' + 'probably not intentional.');
    }
  }

  if (!(props.style == null || typeof props.style === 'object')) {
    {
      throw Error( "The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX." + ( ReactDebugCurrentFrame$3.getStackAddendum() ) );
    }
  }
}

function isCustomComponent(tagName, props) {
  if (tagName.indexOf('-') === -1) {
    return typeof props.is === 'string';
  }

  switch (tagName) {
    // These are reserved SVG and MathML elements.
    // We don't mind this whitelist too much because we expect it to never grow.
    // The alternative is to track the namespace in a few places which is convoluted.
    // https://w3c.github.io/webcomponents/spec/custom/#custom-elements-core-concepts
    case 'annotation-xml':
    case 'color-profile':
    case 'font-face':
    case 'font-face-src':
    case 'font-face-uri':
    case 'font-face-format':
    case 'font-face-name':
    case 'missing-glyph':
      return false;

    default:
      return true;
  }
}

// When adding attributes to the HTML or SVG whitelist, be sure to
// also add them to this module to ensure casing and incorrect name
// warnings.
var possibleStandardNames = {
  // HTML
  accept: 'accept',
  acceptcharset: 'acceptCharset',
  'accept-charset': 'acceptCharset',
  accesskey: 'accessKey',
  action: 'action',
  allowfullscreen: 'allowFullScreen',
  alt: 'alt',
  as: 'as',
  async: 'async',
  autocapitalize: 'autoCapitalize',
  autocomplete: 'autoComplete',
  autocorrect: 'autoCorrect',
  autofocus: 'autoFocus',
  autoplay: 'autoPlay',
  autosave: 'autoSave',
  capture: 'capture',
  cellpadding: 'cellPadding',
  cellspacing: 'cellSpacing',
  challenge: 'challenge',
  charset: 'charSet',
  checked: 'checked',
  children: 'children',
  cite: 'cite',
  class: 'className',
  classid: 'classID',
  classname: 'className',
  cols: 'cols',
  colspan: 'colSpan',
  content: 'content',
  contenteditable: 'contentEditable',
  contextmenu: 'contextMenu',
  controls: 'controls',
  controlslist: 'controlsList',
  coords: 'coords',
  crossorigin: 'crossOrigin',
  dangerouslysetinnerhtml: 'dangerouslySetInnerHTML',
  data: 'data',
  datetime: 'dateTime',
  default: 'default',
  defaultchecked: 'defaultChecked',
  defaultvalue: 'defaultValue',
  defer: 'defer',
  dir: 'dir',
  disabled: 'disabled',
  disablepictureinpicture: 'disablePictureInPicture',
  download: 'download',
  draggable: 'draggable',
  enctype: 'encType',
  for: 'htmlFor',
  form: 'form',
  formmethod: 'formMethod',
  formaction: 'formAction',
  formenctype: 'formEncType',
  formnovalidate: 'formNoValidate',
  formtarget: 'formTarget',
  frameborder: 'frameBorder',
  headers: 'headers',
  height: 'height',
  hidden: 'hidden',
  high: 'high',
  href: 'href',
  hreflang: 'hrefLang',
  htmlfor: 'htmlFor',
  httpequiv: 'httpEquiv',
  'http-equiv': 'httpEquiv',
  icon: 'icon',
  id: 'id',
  innerhtml: 'innerHTML',
  inputmode: 'inputMode',
  integrity: 'integrity',
  is: 'is',
  itemid: 'itemID',
  itemprop: 'itemProp',
  itemref: 'itemRef',
  itemscope: 'itemScope',
  itemtype: 'itemType',
  keyparams: 'keyParams',
  keytype: 'keyType',
  kind: 'kind',
  label: 'label',
  lang: 'lang',
  list: 'list',
  loop: 'loop',
  low: 'low',
  manifest: 'manifest',
  marginwidth: 'marginWidth',
  marginheight: 'marginHeight',
  max: 'max',
  maxlength: 'maxLength',
  media: 'media',
  mediagroup: 'mediaGroup',
  method: 'method',
  min: 'min',
  minlength: 'minLength',
  multiple: 'multiple',
  muted: 'muted',
  name: 'name',
  nomodule: 'noModule',
  nonce: 'nonce',
  novalidate: 'noValidate',
  open: 'open',
  optimum: 'optimum',
  pattern: 'pattern',
  placeholder: 'placeholder',
  playsinline: 'playsInline',
  poster: 'poster',
  preload: 'preload',
  profile: 'profile',
  radiogroup: 'radioGroup',
  readonly: 'readOnly',
  referrerpolicy: 'referrerPolicy',
  rel: 'rel',
  required: 'required',
  reversed: 'reversed',
  role: 'role',
  rows: 'rows',
  rowspan: 'rowSpan',
  sandbox: 'sandbox',
  scope: 'scope',
  scoped: 'scoped',
  scrolling: 'scrolling',
  seamless: 'seamless',
  selected: 'selected',
  shape: 'shape',
  size: 'size',
  sizes: 'sizes',
  span: 'span',
  spellcheck: 'spellCheck',
  src: 'src',
  srcdoc: 'srcDoc',
  srclang: 'srcLang',
  srcset: 'srcSet',
  start: 'start',
  step: 'step',
  style: 'style',
  summary: 'summary',
  tabindex: 'tabIndex',
  target: 'target',
  title: 'title',
  type: 'type',
  usemap: 'useMap',
  value: 'value',
  width: 'width',
  wmode: 'wmode',
  wrap: 'wrap',
  // SVG
  about: 'about',
  accentheight: 'accentHeight',
  'accent-height': 'accentHeight',
  accumulate: 'accumulate',
  additive: 'additive',
  alignmentbaseline: 'alignmentBaseline',
  'alignment-baseline': 'alignmentBaseline',
  allowreorder: 'allowReorder',
  alphabetic: 'alphabetic',
  amplitude: 'amplitude',
  arabicform: 'arabicForm',
  'arabic-form': 'arabicForm',
  ascent: 'ascent',
  attributename: 'attributeName',
  attributetype: 'attributeType',
  autoreverse: 'autoReverse',
  azimuth: 'azimuth',
  basefrequency: 'baseFrequency',
  baselineshift: 'baselineShift',
  'baseline-shift': 'baselineShift',
  baseprofile: 'baseProfile',
  bbox: 'bbox',
  begin: 'begin',
  bias: 'bias',
  by: 'by',
  calcmode: 'calcMode',
  capheight: 'capHeight',
  'cap-height': 'capHeight',
  clip: 'clip',
  clippath: 'clipPath',
  'clip-path': 'clipPath',
  clippathunits: 'clipPathUnits',
  cliprule: 'clipRule',
  'clip-rule': 'clipRule',
  color: 'color',
  colorinterpolation: 'colorInterpolation',
  'color-interpolation': 'colorInterpolation',
  colorinterpolationfilters: 'colorInterpolationFilters',
  'color-interpolation-filters': 'colorInterpolationFilters',
  colorprofile: 'colorProfile',
  'color-profile': 'colorProfile',
  colorrendering: 'colorRendering',
  'color-rendering': 'colorRendering',
  contentscripttype: 'contentScriptType',
  contentstyletype: 'contentStyleType',
  cursor: 'cursor',
  cx: 'cx',
  cy: 'cy',
  d: 'd',
  datatype: 'datatype',
  decelerate: 'decelerate',
  descent: 'descent',
  diffuseconstant: 'diffuseConstant',
  direction: 'direction',
  display: 'display',
  divisor: 'divisor',
  dominantbaseline: 'dominantBaseline',
  'dominant-baseline': 'dominantBaseline',
  dur: 'dur',
  dx: 'dx',
  dy: 'dy',
  edgemode: 'edgeMode',
  elevation: 'elevation',
  enablebackground: 'enableBackground',
  'enable-background': 'enableBackground',
  end: 'end',
  exponent: 'exponent',
  externalresourcesrequired: 'externalResourcesRequired',
  fill: 'fill',
  fillopacity: 'fillOpacity',
  'fill-opacity': 'fillOpacity',
  fillrule: 'fillRule',
  'fill-rule': 'fillRule',
  filter: 'filter',
  filterres: 'filterRes',
  filterunits: 'filterUnits',
  floodopacity: 'floodOpacity',
  'flood-opacity': 'floodOpacity',
  floodcolor: 'floodColor',
  'flood-color': 'floodColor',
  focusable: 'focusable',
  fontfamily: 'fontFamily',
  'font-family': 'fontFamily',
  fontsize: 'fontSize',
  'font-size': 'fontSize',
  fontsizeadjust: 'fontSizeAdjust',
  'font-size-adjust': 'fontSizeAdjust',
  fontstretch: 'fontStretch',
  'font-stretch': 'fontStretch',
  fontstyle: 'fontStyle',
  'font-style': 'fontStyle',
  fontvariant: 'fontVariant',
  'font-variant': 'fontVariant',
  fontweight: 'fontWeight',
  'font-weight': 'fontWeight',
  format: 'format',
  from: 'from',
  fx: 'fx',
  fy: 'fy',
  g1: 'g1',
  g2: 'g2',
  glyphname: 'glyphName',
  'glyph-name': 'glyphName',
  glyphorientationhorizontal: 'glyphOrientationHorizontal',
  'glyph-orientation-horizontal': 'glyphOrientationHorizontal',
  glyphorientationvertical: 'glyphOrientationVertical',
  'glyph-orientation-vertical': 'glyphOrientationVertical',
  glyphref: 'glyphRef',
  gradienttransform: 'gradientTransform',
  gradientunits: 'gradientUnits',
  hanging: 'hanging',
  horizadvx: 'horizAdvX',
  'horiz-adv-x': 'horizAdvX',
  horizoriginx: 'horizOriginX',
  'horiz-origin-x': 'horizOriginX',
  ideographic: 'ideographic',
  imagerendering: 'imageRendering',
  'image-rendering': 'imageRendering',
  in2: 'in2',
  in: 'in',
  inlist: 'inlist',
  intercept: 'intercept',
  k1: 'k1',
  k2: 'k2',
  k3: 'k3',
  k4: 'k4',
  k: 'k',
  kernelmatrix: 'kernelMatrix',
  kernelunitlength: 'kernelUnitLength',
  kerning: 'kerning',
  keypoints: 'keyPoints',
  keysplines: 'keySplines',
  keytimes: 'keyTimes',
  lengthadjust: 'lengthAdjust',
  letterspacing: 'letterSpacing',
  'letter-spacing': 'letterSpacing',
  lightingcolor: 'lightingColor',
  'lighting-color': 'lightingColor',
  limitingconeangle: 'limitingConeAngle',
  local: 'local',
  markerend: 'markerEnd',
  'marker-end': 'markerEnd',
  markerheight: 'markerHeight',
  markermid: 'markerMid',
  'marker-mid': 'markerMid',
  markerstart: 'markerStart',
  'marker-start': 'markerStart',
  markerunits: 'markerUnits',
  markerwidth: 'markerWidth',
  mask: 'mask',
  maskcontentunits: 'maskContentUnits',
  maskunits: 'maskUnits',
  mathematical: 'mathematical',
  mode: 'mode',
  numoctaves: 'numOctaves',
  offset: 'offset',
  opacity: 'opacity',
  operator: 'operator',
  order: 'order',
  orient: 'orient',
  orientation: 'orientation',
  origin: 'origin',
  overflow: 'overflow',
  overlineposition: 'overlinePosition',
  'overline-position': 'overlinePosition',
  overlinethickness: 'overlineThickness',
  'overline-thickness': 'overlineThickness',
  paintorder: 'paintOrder',
  'paint-order': 'paintOrder',
  panose1: 'panose1',
  'panose-1': 'panose1',
  pathlength: 'pathLength',
  patterncontentunits: 'patternContentUnits',
  patterntransform: 'patternTransform',
  patternunits: 'patternUnits',
  pointerevents: 'pointerEvents',
  'pointer-events': 'pointerEvents',
  points: 'points',
  pointsatx: 'pointsAtX',
  pointsaty: 'pointsAtY',
  pointsatz: 'pointsAtZ',
  prefix: 'prefix',
  preservealpha: 'preserveAlpha',
  preserveaspectratio: 'preserveAspectRatio',
  primitiveunits: 'primitiveUnits',
  property: 'property',
  r: 'r',
  radius: 'radius',
  refx: 'refX',
  refy: 'refY',
  renderingintent: 'renderingIntent',
  'rendering-intent': 'renderingIntent',
  repeatcount: 'repeatCount',
  repeatdur: 'repeatDur',
  requiredextensions: 'requiredExtensions',
  requiredfeatures: 'requiredFeatures',
  resource: 'resource',
  restart: 'restart',
  result: 'result',
  results: 'results',
  rotate: 'rotate',
  rx: 'rx',
  ry: 'ry',
  scale: 'scale',
  security: 'security',
  seed: 'seed',
  shaperendering: 'shapeRendering',
  'shape-rendering': 'shapeRendering',
  slope: 'slope',
  spacing: 'spacing',
  specularconstant: 'specularConstant',
  specularexponent: 'specularExponent',
  speed: 'speed',
  spreadmethod: 'spreadMethod',
  startoffset: 'startOffset',
  stddeviation: 'stdDeviation',
  stemh: 'stemh',
  stemv: 'stemv',
  stitchtiles: 'stitchTiles',
  stopcolor: 'stopColor',
  'stop-color': 'stopColor',
  stopopacity: 'stopOpacity',
  'stop-opacity': 'stopOpacity',
  strikethroughposition: 'strikethroughPosition',
  'strikethrough-position': 'strikethroughPosition',
  strikethroughthickness: 'strikethroughThickness',
  'strikethrough-thickness': 'strikethroughThickness',
  string: 'string',
  stroke: 'stroke',
  strokedasharray: 'strokeDasharray',
  'stroke-dasharray': 'strokeDasharray',
  strokedashoffset: 'strokeDashoffset',
  'stroke-dashoffset': 'strokeDashoffset',
  strokelinecap: 'strokeLinecap',
  'stroke-linecap': 'strokeLinecap',
  strokelinejoin: 'strokeLinejoin',
  'stroke-linejoin': 'strokeLinejoin',
  strokemiterlimit: 'strokeMiterlimit',
  'stroke-miterlimit': 'strokeMiterlimit',
  strokewidth: 'strokeWidth',
  'stroke-width': 'strokeWidth',
  strokeopacity: 'strokeOpacity',
  'stroke-opacity': 'strokeOpacity',
  suppresscontenteditablewarning: 'suppressContentEditableWarning',
  suppresshydrationwarning: 'suppressHydrationWarning',
  surfacescale: 'surfaceScale',
  systemlanguage: 'systemLanguage',
  tablevalues: 'tableValues',
  targetx: 'targetX',
  targety: 'targetY',
  textanchor: 'textAnchor',
  'text-anchor': 'textAnchor',
  textdecoration: 'textDecoration',
  'text-decoration': 'textDecoration',
  textlength: 'textLength',
  textrendering: 'textRendering',
  'text-rendering': 'textRendering',
  to: 'to',
  transform: 'transform',
  typeof: 'typeof',
  u1: 'u1',
  u2: 'u2',
  underlineposition: 'underlinePosition',
  'underline-position': 'underlinePosition',
  underlinethickness: 'underlineThickness',
  'underline-thickness': 'underlineThickness',
  unicode: 'unicode',
  unicodebidi: 'unicodeBidi',
  'unicode-bidi': 'unicodeBidi',
  unicoderange: 'unicodeRange',
  'unicode-range': 'unicodeRange',
  unitsperem: 'unitsPerEm',
  'units-per-em': 'unitsPerEm',
  unselectable: 'unselectable',
  valphabetic: 'vAlphabetic',
  'v-alphabetic': 'vAlphabetic',
  values: 'values',
  vectoreffect: 'vectorEffect',
  'vector-effect': 'vectorEffect',
  version: 'version',
  vertadvy: 'vertAdvY',
  'vert-adv-y': 'vertAdvY',
  vertoriginx: 'vertOriginX',
  'vert-origin-x': 'vertOriginX',
  vertoriginy: 'vertOriginY',
  'vert-origin-y': 'vertOriginY',
  vhanging: 'vHanging',
  'v-hanging': 'vHanging',
  videographic: 'vIdeographic',
  'v-ideographic': 'vIdeographic',
  viewbox: 'viewBox',
  viewtarget: 'viewTarget',
  visibility: 'visibility',
  vmathematical: 'vMathematical',
  'v-mathematical': 'vMathematical',
  vocab: 'vocab',
  widths: 'widths',
  wordspacing: 'wordSpacing',
  'word-spacing': 'wordSpacing',
  writingmode: 'writingMode',
  'writing-mode': 'writingMode',
  x1: 'x1',
  x2: 'x2',
  x: 'x',
  xchannelselector: 'xChannelSelector',
  xheight: 'xHeight',
  'x-height': 'xHeight',
  xlinkactuate: 'xlinkActuate',
  'xlink:actuate': 'xlinkActuate',
  xlinkarcrole: 'xlinkArcrole',
  'xlink:arcrole': 'xlinkArcrole',
  xlinkhref: 'xlinkHref',
  'xlink:href': 'xlinkHref',
  xlinkrole: 'xlinkRole',
  'xlink:role': 'xlinkRole',
  xlinkshow: 'xlinkShow',
  'xlink:show': 'xlinkShow',
  xlinktitle: 'xlinkTitle',
  'xlink:title': 'xlinkTitle',
  xlinktype: 'xlinkType',
  'xlink:type': 'xlinkType',
  xmlbase: 'xmlBase',
  'xml:base': 'xmlBase',
  xmllang: 'xmlLang',
  'xml:lang': 'xmlLang',
  xmlns: 'xmlns',
  'xml:space': 'xmlSpace',
  xmlnsxlink: 'xmlnsXlink',
  'xmlns:xlink': 'xmlnsXlink',
  xmlspace: 'xmlSpace',
  y1: 'y1',
  y2: 'y2',
  y: 'y',
  ychannelselector: 'yChannelSelector',
  z: 'z',
  zoomandpan: 'zoomAndPan'
};

var ariaProperties = {
  'aria-current': 0,
  // state
  'aria-details': 0,
  'aria-disabled': 0,
  // state
  'aria-hidden': 0,
  // state
  'aria-invalid': 0,
  // state
  'aria-keyshortcuts': 0,
  'aria-label': 0,
  'aria-roledescription': 0,
  // Widget Attributes
  'aria-autocomplete': 0,
  'aria-checked': 0,
  'aria-expanded': 0,
  'aria-haspopup': 0,
  'aria-level': 0,
  'aria-modal': 0,
  'aria-multiline': 0,
  'aria-multiselectable': 0,
  'aria-orientation': 0,
  'aria-placeholder': 0,
  'aria-pressed': 0,
  'aria-readonly': 0,
  'aria-required': 0,
  'aria-selected': 0,
  'aria-sort': 0,
  'aria-valuemax': 0,
  'aria-valuemin': 0,
  'aria-valuenow': 0,
  'aria-valuetext': 0,
  // Live Region Attributes
  'aria-atomic': 0,
  'aria-busy': 0,
  'aria-live': 0,
  'aria-relevant': 0,
  // Drag-and-Drop Attributes
  'aria-dropeffect': 0,
  'aria-grabbed': 0,
  // Relationship Attributes
  'aria-activedescendant': 0,
  'aria-colcount': 0,
  'aria-colindex': 0,
  'aria-colspan': 0,
  'aria-controls': 0,
  'aria-describedby': 0,
  'aria-errormessage': 0,
  'aria-flowto': 0,
  'aria-labelledby': 0,
  'aria-owns': 0,
  'aria-posinset': 0,
  'aria-rowcount': 0,
  'aria-rowindex': 0,
  'aria-rowspan': 0,
  'aria-setsize': 0
};

var warnedProperties = {};
var rARIA = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');
var rARIACamel = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$');
var hasOwnProperty$1 = Object.prototype.hasOwnProperty;

function validateProperty(tagName, name) {
  {
    if (hasOwnProperty$1.call(warnedProperties, name) && warnedProperties[name]) {
      return true;
    }

    if (rARIACamel.test(name)) {
      var ariaName = 'aria-' + name.slice(4).toLowerCase();
      var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null; // If this is an aria-* attribute, but is not listed in the known DOM
      // DOM properties, then it is an invalid aria-* attribute.

      if (correctName == null) {
        error('Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.', name);

        warnedProperties[name] = true;
        return true;
      } // aria-* attributes should be lowercase; suggest the lowercase version.


      if (name !== correctName) {
        error('Invalid ARIA attribute `%s`. Did you mean `%s`?', name, correctName);

        warnedProperties[name] = true;
        return true;
      }
    }

    if (rARIA.test(name)) {
      var lowerCasedName = name.toLowerCase();
      var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null; // If this is an aria-* attribute, but is not listed in the known DOM
      // DOM properties, then it is an invalid aria-* attribute.

      if (standardName == null) {
        warnedProperties[name] = true;
        return false;
      } // aria-* attributes should be lowercase; suggest the lowercase version.


      if (name !== standardName) {
        error('Unknown ARIA attribute `%s`. Did you mean `%s`?', name, standardName);

        warnedProperties[name] = true;
        return true;
      }
    }
  }

  return true;
}

function warnInvalidARIAProps(type, props) {
  {
    var invalidProps = [];

    for (var key in props) {
      var isValid = validateProperty(type, key);

      if (!isValid) {
        invalidProps.push(key);
      }
    }

    var unknownPropString = invalidProps.map(function (prop) {
      return '`' + prop + '`';
    }).join(', ');

    if (invalidProps.length === 1) {
      error('Invalid aria prop %s on <%s> tag. ' + 'For details, see https://fb.me/invalid-aria-prop', unknownPropString, type);
    } else if (invalidProps.length > 1) {
      error('Invalid aria props %s on <%s> tag. ' + 'For details, see https://fb.me/invalid-aria-prop', unknownPropString, type);
    }
  }
}

function validateProperties(type, props) {
  if (isCustomComponent(type, props)) {
    return;
  }

  warnInvalidARIAProps(type, props);
}

var didWarnValueNull = false;
function validateProperties$1(type, props) {
  {
    if (type !== 'input' && type !== 'textarea' && type !== 'select') {
      return;
    }

    if (props != null && props.value === null && !didWarnValueNull) {
      didWarnValueNull = true;

      if (type === 'select' && props.multiple) {
        error('`value` prop on `%s` should not be null. ' + 'Consider using an empty array when `multiple` is set to `true` ' + 'to clear the component or `undefined` for uncontrolled components.', type);
      } else {
        error('`value` prop on `%s` should not be null. ' + 'Consider using an empty string to clear the component or `undefined` ' + 'for uncontrolled components.', type);
      }
    }
  }
}

var validateProperty$1 = function () {};

{
  var warnedProperties$1 = {};
  var _hasOwnProperty = Object.prototype.hasOwnProperty;
  var EVENT_NAME_REGEX = /^on./;
  var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
  var rARIA$1 = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');
  var rARIACamel$1 = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$');

  validateProperty$1 = function (tagName, name, value, canUseEventSystem) {
    if (_hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) {
      return true;
    }

    var lowerCasedName = name.toLowerCase();

    if (lowerCasedName === 'onfocusin' || lowerCasedName === 'onfocusout') {
      error('React uses onFocus and onBlur instead of onFocusIn and onFocusOut. ' + 'All React events are normalized to bubble, so onFocusIn and onFocusOut ' + 'are not needed/supported by React.');

      warnedProperties$1[name] = true;
      return true;
    } // We can't rely on the event system being injected on the server.


    if (canUseEventSystem) {
      if (registrationNameModules.hasOwnProperty(name)) {
        return true;
      }

      var registrationName = possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames[lowerCasedName] : null;

      if (registrationName != null) {
        error('Invalid event handler property `%s`. Did you mean `%s`?', name, registrationName);

        warnedProperties$1[name] = true;
        return true;
      }

      if (EVENT_NAME_REGEX.test(name)) {
        error('Unknown event handler property `%s`. It will be ignored.', name);

        warnedProperties$1[name] = true;
        return true;
      }
    } else if (EVENT_NAME_REGEX.test(name)) {
      // If no event plugins have been injected, we are in a server environment.
      // So we can't tell if the event name is correct for sure, but we can filter
      // out known bad ones like `onclick`. We can't suggest a specific replacement though.
      if (INVALID_EVENT_NAME_REGEX.test(name)) {
        error('Invalid event handler property `%s`. ' + 'React events use the camelCase naming convention, for example `onClick`.', name);
      }

      warnedProperties$1[name] = true;
      return true;
    } // Let the ARIA attribute hook validate ARIA attributes


    if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
      return true;
    }

    if (lowerCasedName === 'innerhtml') {
      error('Directly setting property `innerHTML` is not permitted. ' + 'For more information, lookup documentation on `dangerouslySetInnerHTML`.');

      warnedProperties$1[name] = true;
      return true;
    }

    if (lowerCasedName === 'aria') {
      error('The `aria` attribute is reserved for future use in React. ' + 'Pass individual `aria-` attributes instead.');

      warnedProperties$1[name] = true;
      return true;
    }

    if (lowerCasedName === 'is' && value !== null && value !== undefined && typeof value !== 'string') {
      error('Received a `%s` for a string attribute `is`. If this is expected, cast ' + 'the value to a string.', typeof value);

      warnedProperties$1[name] = true;
      return true;
    }

    if (typeof value === 'number' && isNaN(value)) {
      error('Received NaN for the `%s` attribute. If this is expected, cast ' + 'the value to a string.', name);

      warnedProperties$1[name] = true;
      return true;
    }

    var propertyInfo = getPropertyInfo(name);
    var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED; // Known attributes should match the casing specified in the property config.

    if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
      var standardName = possibleStandardNames[lowerCasedName];

      if (standardName !== name) {
        error('Invalid DOM property `%s`. Did you mean `%s`?', name, standardName);

        warnedProperties$1[name] = true;
        return true;
      }
    } else if (!isReserved && name !== lowerCasedName) {
      // Unknown attributes should have lowercase casing since that's how they
      // will be cased anyway with server rendering.
      error('React does not recognize the `%s` prop on a DOM element. If you ' + 'intentionally want it to appear in the DOM as a custom ' + 'attribute, spell it as lowercase `%s` instead. ' + 'If you accidentally passed it from a parent component, remove ' + 'it from the DOM element.', name, lowerCasedName);

      warnedProperties$1[name] = true;
      return true;
    }

    if (typeof value === 'boolean' && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
      if (value) {
        error('Received `%s` for a non-boolean attribute `%s`.\n\n' + 'If you want to write it to the DOM, pass a string instead: ' + '%s="%s" or %s={value.toString()}.', value, name, name, value, name);
      } else {
        error('Received `%s` for a non-boolean attribute `%s`.\n\n' + 'If you want to write it to the DOM, pass a string instead: ' + '%s="%s" or %s={value.toString()}.\n\n' + 'If you used to conditionally omit it with %s={condition && value}, ' + 'pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
      }

      warnedProperties$1[name] = true;
      return true;
    } // Now that we've validated casing, do not validate
    // data types for reserved props


    if (isReserved) {
      return true;
    } // Warn when a known attribute is a bad type


    if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
      warnedProperties$1[name] = true;
      return false;
    } // Warn when passing the strings 'false' or 'true' into a boolean prop


    if ((value === 'false' || value === 'true') && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
      error('Received the string `%s` for the boolean attribute `%s`. ' + '%s ' + 'Did you mean %s={%s}?', value, name, value === 'false' ? 'The browser will interpret it as a truthy value.' : 'Although this works, it will not work as expected if you pass the string "false".', name, value);

      warnedProperties$1[name] = true;
      return true;
    }

    return true;
  };
}

var warnUnknownProperties = function (type, props, canUseEventSystem) {
  {
    var unknownProps = [];

    for (var key in props) {
      var isValid = validateProperty$1(type, key, props[key], canUseEventSystem);

      if (!isValid) {
        unknownProps.push(key);
      }
    }

    var unknownPropString = unknownProps.map(function (prop) {
      return '`' + prop + '`';
    }).join(', ');

    if (unknownProps.length === 1) {
      error('Invalid value for prop %s on <%s> tag. Either remove it from the element, ' + 'or pass a string or number value to keep it in the DOM. ' + 'For details, see https://fb.me/react-attribute-behavior', unknownPropString, type);
    } else if (unknownProps.length > 1) {
      error('Invalid values for props %s on <%s> tag. Either remove them from the element, ' + 'or pass a string or number value to keep them in the DOM. ' + 'For details, see https://fb.me/react-attribute-behavior', unknownPropString, type);
    }
  }
};

function validateProperties$2(type, props, canUseEventSystem) {
  if (isCustomComponent(type, props)) {
    return;
  }

  warnUnknownProperties(type, props, canUseEventSystem);
}

var didWarnInvalidHydration = false;
var DANGEROUSLY_SET_INNER_HTML = 'dangerouslySetInnerHTML';
var SUPPRESS_CONTENT_EDITABLE_WARNING = 'suppressContentEditableWarning';
var SUPPRESS_HYDRATION_WARNING = 'suppressHydrationWarning';
var AUTOFOCUS = 'autoFocus';
var CHILDREN = 'children';
var STYLE = 'style';
var HTML$1 = '__html';
var HTML_NAMESPACE$1 = Namespaces.html;
var warnedUnknownTags;
var suppressHydrationWarning;
var validatePropertiesInDevelopment;
var warnForTextDifference;
var warnForPropDifference;
var warnForExtraAttributes;
var warnForInvalidEventListener;
var canDiffStyleForHydrationWarning;
var normalizeMarkupForTextOrAttribute;
var normalizeHTML;

{
  warnedUnknownTags = {
    // Chrome is the only major browser not shipping <time>. But as of July
    // 2017 it intends to ship it due to widespread usage. We intentionally
    // *don't* warn for <time> even if it's unrecognized by Chrome because
    // it soon will be, and many apps have been using it anyway.
    time: true,
    // There are working polyfills for <dialog>. Let people use it.
    dialog: true,
    // Electron ships a custom <webview> tag to display external web content in
    // an isolated frame and process.
    // This tag is not present in non Electron environments such as JSDom which
    // is often used for testing purposes.
    // @see https://electronjs.org/docs/api/webview-tag
    webview: true
  };

  validatePropertiesInDevelopment = function (type, props) {
    validateProperties(type, props);
    validateProperties$1(type, props);
    validateProperties$2(type, props,
    /* canUseEventSystem */
    true);
  }; // IE 11 parses & normalizes the style attribute as opposed to other
  // browsers. It adds spaces and sorts the properties in some
  // non-alphabetical order. Handling that would require sorting CSS
  // properties in the client & server versions or applying
  // `expectedStyle` to a temporary DOM node to read its `style` attribute
  // normalized. Since it only affects IE, we're skipping style warnings
  // in that browser completely in favor of doing all that work.
  // See https://github.com/facebook/react/issues/11807


  canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode; // HTML parsing normalizes CR and CRLF to LF.
  // It also can turn \u0000 into \uFFFD inside attributes.
  // https://www.w3.org/TR/html5/single-page.html#preprocessing-the-input-stream
  // If we have a mismatch, it might be caused by that.
  // We will still patch up in this case but not fire the warning.

  var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
  var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;

  normalizeMarkupForTextOrAttribute = function (markup) {
    var markupString = typeof markup === 'string' ? markup : '' + markup;
    return markupString.replace(NORMALIZE_NEWLINES_REGEX, '\n').replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, '');
  };

  warnForTextDifference = function (serverText, clientText) {
    if (didWarnInvalidHydration) {
      return;
    }

    var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
    var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);

    if (normalizedServerText === normalizedClientText) {
      return;
    }

    didWarnInvalidHydration = true;

    error('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
  };

  warnForPropDifference = function (propName, serverValue, clientValue) {
    if (didWarnInvalidHydration) {
      return;
    }

    var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
    var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);

    if (normalizedServerValue === normalizedClientValue) {
      return;
    }

    didWarnInvalidHydration = true;

    error('Prop `%s` did not match. Server: %s Client: %s', propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
  };

  warnForExtraAttributes = function (attributeNames) {
    if (didWarnInvalidHydration) {
      return;
    }

    didWarnInvalidHydration = true;
    var names = [];
    attributeNames.forEach(function (name) {
      names.push(name);
    });

    error('Extra attributes from the server: %s', names);
  };

  warnForInvalidEventListener = function (registrationName, listener) {
    if (listener === false) {
      error('Expected `%s` listener to be a function, instead got `false`.\n\n' + 'If you used to conditionally omit it with %s={condition && value}, ' + 'pass %s={condition ? value : undefined} instead.', registrationName, registrationName, registrationName);
    } else {
      error('Expected `%s` listener to be a function, instead got a value of `%s` type.', registrationName, typeof listener);
    }
  }; // Parse the HTML and read it back to normalize the HTML string so that it
  // can be used for comparison.


  normalizeHTML = function (parent, html) {
    // We could have created a separate document here to avoid
    // re-initializing custom elements if they exist. But this breaks
    // how <noscript> is being handled. So we use the same document.
    // See the discussion in https://github.com/facebook/react/pull/11157.
    var testElement = parent.namespaceURI === HTML_NAMESPACE$1 ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
    testElement.innerHTML = html;
    return testElement.innerHTML;
  };
}

function ensureListeningTo(rootContainerElement, registrationName) {
  var isDocumentOrFragment = rootContainerElement.nodeType === DOCUMENT_NODE || rootContainerElement.nodeType === DOCUMENT_FRAGMENT_NODE;
  var doc = isDocumentOrFragment ? rootContainerElement : rootContainerElement.ownerDocument;
  legacyListenToEvent(registrationName, doc);
}

function getOwnerDocumentFromRootContainer(rootContainerElement) {
  return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
}

function noop() {}

function trapClickOnNonInteractiveElement(node) {
  // Mobile Safari does not fire properly bubble click events on
  // non-interactive elements, which means delegated click listeners do not
  // fire. The workaround for this bug involves attaching an empty click
  // listener on the target node.
  // http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
  // Just set it using the onclick property so that we don't have to manage any
  // bookkeeping for it. Not sure if we need to clear it when the listener is
  // removed.
  // TODO: Only do this for the relevant Safaris maybe?
  node.onclick = noop;
}

function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
  for (var propKey in nextProps) {
    if (!nextProps.hasOwnProperty(propKey)) {
      continue;
    }

    var nextProp = nextProps[propKey];

    if (propKey === STYLE) {
      {
        if (nextProp) {
          // Freeze the next style object so that we can assume it won't be
          // mutated. We have already warned for this in the past.
          Object.freeze(nextProp);
        }
      } // Relies on `updateStylesByID` not mutating `styleUpdates`.


      setValueForStyles(domElement, nextProp);
    } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
      var nextHtml = nextProp ? nextProp[HTML$1] : undefined;

      if (nextHtml != null) {
        setInnerHTML(domElement, nextHtml);
      }
    } else if (propKey === CHILDREN) {
      if (typeof nextProp === 'string') {
        // Avoid setting initial textContent when the text is empty. In IE11 setting
        // textContent on a <textarea> will cause the placeholder to not
        // show within the <textarea> until it has been focused and blurred again.
        // https://github.com/facebook/react/issues/6731#issuecomment-254874553
        var canSetTextContent = tag !== 'textarea' || nextProp !== '';

        if (canSetTextContent) {
          setTextContent(domElement, nextProp);
        }
      } else if (typeof nextProp === 'number') {
        setTextContent(domElement, '' + nextProp);
      }
    } else if ( propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ; else if (propKey === AUTOFOCUS) ; else if (registrationNameModules.hasOwnProperty(propKey)) {
      if (nextProp != null) {
        if ( typeof nextProp !== 'function') {
          warnForInvalidEventListener(propKey, nextProp);
        }

        ensureListeningTo(rootContainerElement, propKey);
      }
    } else if (nextProp != null) {
      setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
    }
  }
}

function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
  // TODO: Handle wasCustomComponentTag
  for (var i = 0; i < updatePayload.length; i += 2) {
    var propKey = updatePayload[i];
    var propValue = updatePayload[i + 1];

    if (propKey === STYLE) {
      setValueForStyles(domElement, propValue);
    } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
      setInnerHTML(domElement, propValue);
    } else if (propKey === CHILDREN) {
      setTextContent(domElement, propValue);
    } else {
      setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
    }
  }
}

function createElement(type, props, rootContainerElement, parentNamespace) {
  var isCustomComponentTag; // We create tags in the namespace of their parent container, except HTML
  // tags get no namespace.

  var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
  var domElement;
  var namespaceURI = parentNamespace;

  if (namespaceURI === HTML_NAMESPACE$1) {
    namespaceURI = getIntrinsicNamespace(type);
  }

  if (namespaceURI === HTML_NAMESPACE$1) {
    {
      isCustomComponentTag = isCustomComponent(type, props); // Should this check be gated by parent namespace? Not sure we want to
      // allow <SVG> or <mATH>.

      if (!isCustomComponentTag && type !== type.toLowerCase()) {
        error('<%s /> is using incorrect casing. ' + 'Use PascalCase for React components, ' + 'or lowercase for HTML elements.', type);
      }
    }

    if (type === 'script') {
      // Create the script via .innerHTML so its "parser-inserted" flag is
      // set to true and it does not execute
      var div = ownerDocument.createElement('div');

      div.innerHTML = '<script><' + '/script>'; // eslint-disable-line
      // This is guaranteed to yield a script element.

      var firstChild = div.firstChild;
      domElement = div.removeChild(firstChild);
    } else if (typeof props.is === 'string') {
      // $FlowIssue `createElement` should be updated for Web Components
      domElement = ownerDocument.createElement(type, {
        is: props.is
      });
    } else {
      // Separate else branch instead of using `props.is || undefined` above because of a Firefox bug.
      // See discussion in https://github.com/facebook/react/pull/6896
      // and discussion in https://bugzilla.mozilla.org/show_bug.cgi?id=1276240
      domElement = ownerDocument.createElement(type); // Normally attributes are assigned in `setInitialDOMProperties`, however the `multiple` and `size`
      // attributes on `select`s needs to be added before `option`s are inserted.
      // This prevents:
      // - a bug where the `select` does not scroll to the correct option because singular
      //  `select` elements automatically pick the first item #13222
      // - a bug where the `select` set the first item as selected despite the `size` attribute #14239
      // See https://github.com/facebook/react/issues/13222
      // and https://github.com/facebook/react/issues/14239

      if (type === 'select') {
        var node = domElement;

        if (props.multiple) {
          node.multiple = true;
        } else if (props.size) {
          // Setting a size greater than 1 causes a select to behave like `multiple=true`, where
          // it is possible that no option is selected.
          //
          // This is only necessary when a select in "single selection mode".
          node.size = props.size;
        }
      }
    }
  } else {
    domElement = ownerDocument.createElementNS(namespaceURI, type);
  }

  {
    if (namespaceURI === HTML_NAMESPACE$1) {
      if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === '[object HTMLUnknownElement]' && !Object.prototype.hasOwnProperty.call(warnedUnknownTags, type)) {
        warnedUnknownTags[type] = true;

        error('The tag <%s> is unrecognized in this browser. ' + 'If you meant to render a React component, start its name with ' + 'an uppercase letter.', type);
      }
    }
  }

  return domElement;
}
function createTextNode(text, rootContainerElement) {
  return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
}
function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
  var isCustomComponentTag = isCustomComponent(tag, rawProps);

  {
    validatePropertiesInDevelopment(tag, rawProps);
  } // TODO: Make sure that we check isMounted before firing any of these events.


  var props;

  switch (tag) {
    case 'iframe':
    case 'object':
    case 'embed':
      trapBubbledEvent(TOP_LOAD, domElement);
      props = rawProps;
      break;

    case 'video':
    case 'audio':
      // Create listener for each media event
      for (var i = 0; i < mediaEventTypes.length; i++) {
        trapBubbledEvent(mediaEventTypes[i], domElement);
      }

      props = rawProps;
      break;

    case 'source':
      trapBubbledEvent(TOP_ERROR, domElement);
      props = rawProps;
      break;

    case 'img':
    case 'image':
    case 'link':
      trapBubbledEvent(TOP_ERROR, domElement);
      trapBubbledEvent(TOP_LOAD, domElement);
      props = rawProps;
      break;

    case 'form':
      trapBubbledEvent(TOP_RESET, domElement);
      trapBubbledEvent(TOP_SUBMIT, domElement);
      props = rawProps;
      break;

    case 'details':
      trapBubbledEvent(TOP_TOGGLE, domElement);
      props = rawProps;
      break;

    case 'input':
      initWrapperState(domElement, rawProps);
      props = getHostProps(domElement, rawProps);
      trapBubbledEvent(TOP_INVALID, domElement); // For controlled components we always need to ensure we're listening
      // to onChange. Even if there is no listener.

      ensureListeningTo(rootContainerElement, 'onChange');
      break;

    case 'option':
      validateProps(domElement, rawProps);
      props = getHostProps$1(domElement, rawProps);
      break;

    case 'select':
      initWrapperState$1(domElement, rawProps);
      props = getHostProps$2(domElement, rawProps);
      trapBubbledEvent(TOP_INVALID, domElement); // For controlled components we always need to ensure we're listening
      // to onChange. Even if there is no listener.

      ensureListeningTo(rootContainerElement, 'onChange');
      break;

    case 'textarea':
      initWrapperState$2(domElement, rawProps);
      props = getHostProps$3(domElement, rawProps);
      trapBubbledEvent(TOP_INVALID, domElement); // For controlled components we always need to ensure we're listening
      // to onChange. Even if there is no listener.

      ensureListeningTo(rootContainerElement, 'onChange');
      break;

    default:
      props = rawProps;
  }

  assertValidProps(tag, props);
  setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);

  switch (tag) {
    case 'input':
      // TODO: Make sure we check if this is still unmounted or do any clean
      // up necessary since we never stop tracking anymore.
      track(domElement);
      postMountWrapper(domElement, rawProps, false);
      break;

    case 'textarea':
      // TODO: Make sure we check if this is still unmounted or do any clean
      // up necessary since we never stop tracking anymore.
      track(domElement);
      postMountWrapper$3(domElement);
      break;

    case 'option':
      postMountWrapper$1(domElement, rawProps);
      break;

    case 'select':
      postMountWrapper$2(domElement, rawProps);
      break;

    default:
      if (typeof props.onClick === 'function') {
        // TODO: This cast may not be sound for SVG, MathML or custom elements.
        trapClickOnNonInteractiveElement(domElement);
      }

      break;
  }
} // Calculate the diff between the two objects.

function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
  {
    validatePropertiesInDevelopment(tag, nextRawProps);
  }

  var updatePayload = null;
  var lastProps;
  var nextProps;

  switch (tag) {
    case 'input':
      lastProps = getHostProps(domElement, lastRawProps);
      nextProps = getHostProps(domElement, nextRawProps);
      updatePayload = [];
      break;

    case 'option':
      lastProps = getHostProps$1(domElement, lastRawProps);
      nextProps = getHostProps$1(domElement, nextRawProps);
      updatePayload = [];
      break;

    case 'select':
      lastProps = getHostProps$2(domElement, lastRawProps);
      nextProps = getHostProps$2(domElement, nextRawProps);
      updatePayload = [];
      break;

    case 'textarea':
      lastProps = getHostProps$3(domElement, lastRawProps);
      nextProps = getHostProps$3(domElement, nextRawProps);
      updatePayload = [];
      break;

    default:
      lastProps = lastRawProps;
      nextProps = nextRawProps;

      if (typeof lastProps.onClick !== 'function' && typeof nextProps.onClick === 'function') {
        // TODO: This cast may not be sound for SVG, MathML or custom elements.
        trapClickOnNonInteractiveElement(domElement);
      }

      break;
  }

  assertValidProps(tag, nextProps);
  var propKey;
  var styleName;
  var styleUpdates = null;

  for (propKey in lastProps) {
    if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
      continue;
    }

    if (propKey === STYLE) {
      var lastStyle = lastProps[propKey];

      for (styleName in lastStyle) {
        if (lastStyle.hasOwnProperty(styleName)) {
          if (!styleUpdates) {
            styleUpdates = {};
          }

          styleUpdates[styleName] = '';
        }
      }
    } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN) ; else if ( propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ; else if (propKey === AUTOFOCUS) ; else if (registrationNameModules.hasOwnProperty(propKey)) {
      // This is a special case. If any listener updates we need to ensure
      // that the "current" fiber pointer gets updated so we need a commit
      // to update this element.
      if (!updatePayload) {
        updatePayload = [];
      }
    } else {
      // For all other deleted properties we add it to the queue. We use
      // the whitelist in the commit phase instead.
      (updatePayload = updatePayload || []).push(propKey, null);
    }
  }

  for (propKey in nextProps) {
    var nextProp = nextProps[propKey];
    var lastProp = lastProps != null ? lastProps[propKey] : undefined;

    if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
      continue;
    }

    if (propKey === STYLE) {
      {
        if (nextProp) {
          // Freeze the next style object so that we can assume it won't be
          // mutated. We have already warned for this in the past.
          Object.freeze(nextProp);
        }
      }

      if (lastProp) {
        // Unset styles on `lastProp` but not on `nextProp`.
        for (styleName in lastProp) {
          if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
            if (!styleUpdates) {
              styleUpdates = {};
            }

            styleUpdates[styleName] = '';
          }
        } // Update styles that changed since `lastProp`.


        for (styleName in nextProp) {
          if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
            if (!styleUpdates) {
              styleUpdates = {};
            }

            styleUpdates[styleName] = nextProp[styleName];
          }
        }
      } else {
        // Relies on `updateStylesByID` not mutating `styleUpdates`.
        if (!styleUpdates) {
          if (!updatePayload) {
            updatePayload = [];
          }

          updatePayload.push(propKey, styleUpdates);
        }

        styleUpdates = nextProp;
      }
    } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
      var nextHtml = nextProp ? nextProp[HTML$1] : undefined;
      var lastHtml = lastProp ? lastProp[HTML$1] : undefined;

      if (nextHtml != null) {
        if (lastHtml !== nextHtml) {
          (updatePayload = updatePayload || []).push(propKey, nextHtml);
        }
      }
    } else if (propKey === CHILDREN) {
      if (lastProp !== nextProp && (typeof nextProp === 'string' || typeof nextProp === 'number')) {
        (updatePayload = updatePayload || []).push(propKey, '' + nextProp);
      }
    } else if ( propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ; else if (registrationNameModules.hasOwnProperty(propKey)) {
      if (nextProp != null) {
        // We eagerly listen to this even though we haven't committed yet.
        if ( typeof nextProp !== 'function') {
          warnForInvalidEventListener(propKey, nextProp);
        }

        ensureListeningTo(rootContainerElement, propKey);
      }

      if (!updatePayload && lastProp !== nextProp) {
        // This is a special case. If any listener updates we need to ensure
        // that the "current" props pointer gets updated so we need a commit
        // to update this element.
        updatePayload = [];
      }
    } else {
      // For any other property we always add it to the queue and then we
      // filter it out using the whitelist during the commit.
      (updatePayload = updatePayload || []).push(propKey, nextProp);
    }
  }

  if (styleUpdates) {
    {
      validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]);
    }

    (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
  }

  return updatePayload;
} // Apply the diff.

function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
  // Update checked *before* name.
  // In the middle of an update, it is possible to have multiple checked.
  // When a checked radio tries to change name, browser makes another radio's checked false.
  if (tag === 'input' && nextRawProps.type === 'radio' && nextRawProps.name != null) {
    updateChecked(domElement, nextRawProps);
  }

  var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
  var isCustomComponentTag = isCustomComponent(tag, nextRawProps); // Apply the diff.

  updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag); // TODO: Ensure that an update gets scheduled if any of the special props
  // changed.

  switch (tag) {
    case 'input':
      // Update the wrapper around inputs *after* updating props. This has to
      // happen after `updateDOMProperties`. Otherwise HTML5 input validations
      // raise warnings and prevent the new value from being assigned.
      updateWrapper(domElement, nextRawProps);
      break;

    case 'textarea':
      updateWrapper$1(domElement, nextRawProps);
      break;

    case 'select':
      // <select> value update needs to occur after <option> children
      // reconciliation
      postUpdateWrapper(domElement, nextRawProps);
      break;
  }
}

function getPossibleStandardName(propName) {
  {
    var lowerCasedName = propName.toLowerCase();

    if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
      return null;
    }

    return possibleStandardNames[lowerCasedName] || null;
  }
}

function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement) {
  var isCustomComponentTag;
  var extraAttributeNames;

  {
    suppressHydrationWarning = rawProps[SUPPRESS_HYDRATION_WARNING] === true;
    isCustomComponentTag = isCustomComponent(tag, rawProps);
    validatePropertiesInDevelopment(tag, rawProps);
  } // TODO: Make sure that we check isMounted before firing any of these events.


  switch (tag) {
    case 'iframe':
    case 'object':
    case 'embed':
      trapBubbledEvent(TOP_LOAD, domElement);
      break;

    case 'video':
    case 'audio':
      // Create listener for each media event
      for (var i = 0; i < mediaEventTypes.length; i++) {
        trapBubbledEvent(mediaEventTypes[i], domElement);
      }

      break;

    case 'source':
      trapBubbledEvent(TOP_ERROR, domElement);
      break;

    case 'img':
    case 'image':
    case 'link':
      trapBubbledEvent(TOP_ERROR, domElement);
      trapBubbledEvent(TOP_LOAD, domElement);
      break;

    case 'form':
      trapBubbledEvent(TOP_RESET, domElement);
      trapBubbledEvent(TOP_SUBMIT, domElement);
      break;

    case 'details':
      trapBubbledEvent(TOP_TOGGLE, domElement);
      break;

    case 'input':
      initWrapperState(domElement, rawProps);
      trapBubbledEvent(TOP_INVALID, domElement); // For controlled components we always need to ensure we're listening
      // to onChange. Even if there is no listener.

      ensureListeningTo(rootContainerElement, 'onChange');
      break;

    case 'option':
      validateProps(domElement, rawProps);
      break;

    case 'select':
      initWrapperState$1(domElement, rawProps);
      trapBubbledEvent(TOP_INVALID, domElement); // For controlled components we always need to ensure we're listening
      // to onChange. Even if there is no listener.

      ensureListeningTo(rootContainerElement, 'onChange');
      break;

    case 'textarea':
      initWrapperState$2(domElement, rawProps);
      trapBubbledEvent(TOP_INVALID, domElement); // For controlled components we always need to ensure we're listening
      // to onChange. Even if there is no listener.

      ensureListeningTo(rootContainerElement, 'onChange');
      break;
  }

  assertValidProps(tag, rawProps);

  {
    extraAttributeNames = new Set();
    var attributes = domElement.attributes;

    for (var _i = 0; _i < attributes.length; _i++) {
      var name = attributes[_i].name.toLowerCase();

      switch (name) {
        // Built-in SSR attribute is whitelisted
        case 'data-reactroot':
          break;
        // Controlled attributes are not validated
        // TODO: Only ignore them on controlled tags.

        case 'value':
          break;

        case 'checked':
          break;

        case 'selected':
          break;

        default:
          // Intentionally use the original name.
          // See discussion in https://github.com/facebook/react/pull/10676.
          extraAttributeNames.add(attributes[_i].name);
      }
    }
  }

  var updatePayload = null;

  for (var propKey in rawProps) {
    if (!rawProps.hasOwnProperty(propKey)) {
      continue;
    }

    var nextProp = rawProps[propKey];

    if (propKey === CHILDREN) {
      // For text content children we compare against textContent. This
      // might match additional HTML that is hidden when we read it using
      // textContent. E.g. "foo" will match "f<span>oo</span>" but that still
      // satisfies our requirement. Our requirement is not to produce perfect
      // HTML and attributes. Ideally we should preserve structure but it's
      // ok not to if the visible content is still enough to indicate what
      // even listeners these nodes might be wired up to.
      // TODO: Warn if there is more than a single textNode as a child.
      // TODO: Should we use domElement.firstChild.nodeValue to compare?
      if (typeof nextProp === 'string') {
        if (domElement.textContent !== nextProp) {
          if ( !suppressHydrationWarning) {
            warnForTextDifference(domElement.textContent, nextProp);
          }

          updatePayload = [CHILDREN, nextProp];
        }
      } else if (typeof nextProp === 'number') {
        if (domElement.textContent !== '' + nextProp) {
          if ( !suppressHydrationWarning) {
            warnForTextDifference(domElement.textContent, nextProp);
          }

          updatePayload = [CHILDREN, '' + nextProp];
        }
      }
    } else if (registrationNameModules.hasOwnProperty(propKey)) {
      if (nextProp != null) {
        if ( typeof nextProp !== 'function') {
          warnForInvalidEventListener(propKey, nextProp);
        }

        ensureListeningTo(rootContainerElement, propKey);
      }
    } else if ( // Convince Flow we've calculated it (it's DEV-only in this method.)
    typeof isCustomComponentTag === 'boolean') {
      // Validate that the properties correspond to their expected values.
      var serverValue = void 0;
      var propertyInfo = getPropertyInfo(propKey);

      if (suppressHydrationWarning) ; else if ( propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || // Controlled attributes are not validated
      // TODO: Only ignore them on controlled tags.
      propKey === 'value' || propKey === 'checked' || propKey === 'selected') ; else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
        var serverHTML = domElement.innerHTML;
        var nextHtml = nextProp ? nextProp[HTML$1] : undefined;
        var expectedHTML = normalizeHTML(domElement, nextHtml != null ? nextHtml : '');

        if (expectedHTML !== serverHTML) {
          warnForPropDifference(propKey, serverHTML, expectedHTML);
        }
      } else if (propKey === STYLE) {
        // $FlowFixMe - Should be inferred as not undefined.
        extraAttributeNames.delete(propKey);

        if (canDiffStyleForHydrationWarning) {
          var expectedStyle = createDangerousStringForStyles(nextProp);
          serverValue = domElement.getAttribute('style');

          if (expectedStyle !== serverValue) {
            warnForPropDifference(propKey, serverValue, expectedStyle);
          }
        }
      } else if (isCustomComponentTag) {
        // $FlowFixMe - Should be inferred as not undefined.
        extraAttributeNames.delete(propKey.toLowerCase());
        serverValue = getValueForAttribute(domElement, propKey, nextProp);

        if (nextProp !== serverValue) {
          warnForPropDifference(propKey, serverValue, nextProp);
        }
      } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
        var isMismatchDueToBadCasing = false;

        if (propertyInfo !== null) {
          // $FlowFixMe - Should be inferred as not undefined.
          extraAttributeNames.delete(propertyInfo.attributeName);
          serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
        } else {
          var ownNamespace = parentNamespace;

          if (ownNamespace === HTML_NAMESPACE$1) {
            ownNamespace = getIntrinsicNamespace(tag);
          }

          if (ownNamespace === HTML_NAMESPACE$1) {
            // $FlowFixMe - Should be inferred as not undefined.
            extraAttributeNames.delete(propKey.toLowerCase());
          } else {
            var standardName = getPossibleStandardName(propKey);

            if (standardName !== null && standardName !== propKey) {
              // If an SVG prop is supplied with bad casing, it will
              // be successfully parsed from HTML, but will produce a mismatch
              // (and would be incorrectly rendered on the client).
              // However, we already warn about bad casing elsewhere.
              // So we'll skip the misleading extra mismatch warning in this case.
              isMismatchDueToBadCasing = true; // $FlowFixMe - Should be inferred as not undefined.

              extraAttributeNames.delete(standardName);
            } // $FlowFixMe - Should be inferred as not undefined.


            extraAttributeNames.delete(propKey);
          }

          serverValue = getValueForAttribute(domElement, propKey, nextProp);
        }

        if (nextProp !== serverValue && !isMismatchDueToBadCasing) {
          warnForPropDifference(propKey, serverValue, nextProp);
        }
      }
    }
  }

  {
    // $FlowFixMe - Should be inferred as not undefined.
    if (extraAttributeNames.size > 0 && !suppressHydrationWarning) {
      // $FlowFixMe - Should be inferred as not undefined.
      warnForExtraAttributes(extraAttributeNames);
    }
  }

  switch (tag) {
    case 'input':
      // TODO: Make sure we check if this is still unmounted or do any clean
      // up necessary since we never stop tracking anymore.
      track(domElement);
      postMountWrapper(domElement, rawProps, true);
      break;

    case 'textarea':
      // TODO: Make sure we check if this is still unmounted or do any clean
      // up necessary since we never stop tracking anymore.
      track(domElement);
      postMountWrapper$3(domElement);
      break;

    case 'select':
    case 'option':
      // For input and textarea we current always set the value property at
      // post mount to force it to diverge from attributes. However, for
      // option and select we don't quite do the same thing and select
      // is not resilient to the DOM state changing so we don't do that here.
      // TODO: Consider not doing this for input and textarea.
      break;

    default:
      if (typeof rawProps.onClick === 'function') {
        // TODO: This cast may not be sound for SVG, MathML or custom elements.
        trapClickOnNonInteractiveElement(domElement);
      }

      break;
  }

  return updatePayload;
}
function diffHydratedText(textNode, text) {
  var isDifferent = textNode.nodeValue !== text;
  return isDifferent;
}
function warnForUnmatchedText(textNode, text) {
  {
    warnForTextDifference(textNode.nodeValue, text);
  }
}
function warnForDeletedHydratableElement(parentNode, child) {
  {
    if (didWarnInvalidHydration) {
      return;
    }

    didWarnInvalidHydration = true;

    error('Did not expect server HTML to contain a <%s> in <%s>.', child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
  }
}
function warnForDeletedHydratableText(parentNode, child) {
  {
    if (didWarnInvalidHydration) {
      return;
    }

    didWarnInvalidHydration = true;

    error('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
  }
}
function warnForInsertedHydratedElement(parentNode, tag, props) {
  {
    if (didWarnInvalidHydration) {
      return;
    }

    didWarnInvalidHydration = true;

    error('Expected server HTML to contain a matching <%s> in <%s>.', tag, parentNode.nodeName.toLowerCase());
  }
}
function warnForInsertedHydratedText(parentNode, text) {
  {
    if (text === '') {
      // We expect to insert empty text nodes since they're not represented in
      // the HTML.
      // TODO: Remove this special case if we can just avoid inserting empty
      // text nodes.
      return;
    }

    if (didWarnInvalidHydration) {
      return;
    }

    didWarnInvalidHydration = true;

    error('Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
  }
}
function restoreControlledState$3(domElement, tag, props) {
  switch (tag) {
    case 'input':
      restoreControlledState(domElement, props);
      return;

    case 'textarea':
      restoreControlledState$2(domElement, props);
      return;

    case 'select':
      restoreControlledState$1(domElement, props);
      return;
  }
}

function getActiveElement(doc) {
  doc = doc || (typeof document !== 'undefined' ? document : undefined);

  if (typeof doc === 'undefined') {
    return null;
  }

  try {
    return doc.activeElement || doc.body;
  } catch (e) {
    return doc.body;
  }
}

/**
 * Given any node return the first leaf node without children.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {DOMElement|DOMTextNode}
 */

function getLeafNode(node) {
  while (node && node.firstChild) {
    node = node.firstChild;
  }

  return node;
}
/**
 * Get the next sibling within a container. This will walk up the
 * DOM if a node's siblings have been exhausted.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {?DOMElement|DOMTextNode}
 */


function getSiblingNode(node) {
  while (node) {
    if (node.nextSibling) {
      return node.nextSibling;
    }

    node = node.parentNode;
  }
}
/**
 * Get object describing the nodes which contain characters at offset.
 *
 * @param {DOMElement|DOMTextNode} root
 * @param {number} offset
 * @return {?object}
 */


function getNodeForCharacterOffset(root, offset) {
  var node = getLeafNode(root);
  var nodeStart = 0;
  var nodeEnd = 0;

  while (node) {
    if (node.nodeType === TEXT_NODE) {
      nodeEnd = nodeStart + node.textContent.length;

      if (nodeStart <= offset && nodeEnd >= offset) {
        return {
          node: node,
          offset: offset - nodeStart
        };
      }

      nodeStart = nodeEnd;
    }

    node = getLeafNode(getSiblingNode(node));
  }
}

/**
 * @param {DOMElement} outerNode
 * @return {?object}
 */

function getOffsets(outerNode) {
  var ownerDocument = outerNode.ownerDocument;
  var win = ownerDocument && ownerDocument.defaultView || window;
  var selection = win.getSelection && win.getSelection();

  if (!selection || selection.rangeCount === 0) {
    return null;
  }

  var anchorNode = selection.anchorNode,
      anchorOffset = selection.anchorOffset,
      focusNode = selection.focusNode,
      focusOffset = selection.focusOffset; // In Firefox, anchorNode and focusNode can be "anonymous divs", e.g. the
  // up/down buttons on an <input type="number">. Anonymous divs do not seem to
  // expose properties, triggering a "Permission denied error" if any of its
  // properties are accessed. The only seemingly possible way to avoid erroring
  // is to access a property that typically works for non-anonymous divs and
  // catch any error that may otherwise arise. See
  // https://bugzilla.mozilla.org/show_bug.cgi?id=208427

  try {
    /* eslint-disable no-unused-expressions */
    anchorNode.nodeType;
    focusNode.nodeType;
    /* eslint-enable no-unused-expressions */
  } catch (e) {
    return null;
  }

  return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
}
/**
 * Returns {start, end} where `start` is the character/codepoint index of
 * (anchorNode, anchorOffset) within the textContent of `outerNode`, and
 * `end` is the index of (focusNode, focusOffset).
 *
 * Returns null if you pass in garbage input but we should probably just crash.
 *
 * Exported only for testing.
 */

function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
  var length = 0;
  var start = -1;
  var end = -1;
  var indexWithinAnchor = 0;
  var indexWithinFocus = 0;
  var node = outerNode;
  var parentNode = null;

  outer: while (true) {
    var next = null;

    while (true) {
      if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) {
        start = length + anchorOffset;
      }

      if (node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE)) {
        end = length + focusOffset;
      }

      if (node.nodeType === TEXT_NODE) {
        length += node.nodeValue.length;
      }

      if ((next = node.firstChild) === null) {
        break;
      } // Moving from `node` to its first child `next`.


      parentNode = node;
      node = next;
    }

    while (true) {
      if (node === outerNode) {
        // If `outerNode` has children, this is always the second time visiting
        // it. If it has no children, this is still the first loop, and the only
        // valid selection is anchorNode and focusNode both equal to this node
        // and both offsets 0, in which case we will have handled above.
        break outer;
      }

      if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
        start = length;
      }

      if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
        end = length;
      }

      if ((next = node.nextSibling) !== null) {
        break;
      }

      node = parentNode;
      parentNode = node.parentNode;
    } // Moving from `node` to its next sibling `next`.


    node = next;
  }

  if (start === -1 || end === -1) {
    // This should never happen. (Would happen if the anchor/focus nodes aren't
    // actually inside the passed-in node.)
    return null;
  }

  return {
    start: start,
    end: end
  };
}
/**
 * In modern non-IE browsers, we can support both forward and backward
 * selections.
 *
 * Note: IE10+ supports the Selection object, but it does not support
 * the `extend` method, which means that even in modern IE, it's not possible
 * to programmatically create a backward selection. Thus, for all IE
 * versions, we use the old IE API to create our selections.
 *
 * @param {DOMElement|DOMTextNode} node
 * @param {object} offsets
 */

function setOffsets(node, offsets) {
  var doc = node.ownerDocument || document;
  var win = doc && doc.defaultView || window; // Edge fails with "Object expected" in some scenarios.
  // (For instance: TinyMCE editor used in a list component that supports pasting to add more,
  // fails when pasting 100+ items)

  if (!win.getSelection) {
    return;
  }

  var selection = win.getSelection();
  var length = node.textContent.length;
  var start = Math.min(offsets.start, length);
  var end = offsets.end === undefined ? start : Math.min(offsets.end, length); // IE 11 uses modern selection, but doesn't support the extend method.
  // Flip backward selections, so we can set with a single range.

  if (!selection.extend && start > end) {
    var temp = end;
    end = start;
    start = temp;
  }

  var startMarker = getNodeForCharacterOffset(node, start);
  var endMarker = getNodeForCharacterOffset(node, end);

  if (startMarker && endMarker) {
    if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {
      return;
    }

    var range = doc.createRange();
    range.setStart(startMarker.node, startMarker.offset);
    selection.removeAllRanges();

    if (start > end) {
      selection.addRange(range);
      selection.extend(endMarker.node, endMarker.offset);
    } else {
      range.setEnd(endMarker.node, endMarker.offset);
      selection.addRange(range);
    }
  }
}

function isTextNode(node) {
  return node && node.nodeType === TEXT_NODE;
}

function containsNode(outerNode, innerNode) {
  if (!outerNode || !innerNode) {
    return false;
  } else if (outerNode === innerNode) {
    return true;
  } else if (isTextNode(outerNode)) {
    return false;
  } else if (isTextNode(innerNode)) {
    return containsNode(outerNode, innerNode.parentNode);
  } else if ('contains' in outerNode) {
    return outerNode.contains(innerNode);
  } else if (outerNode.compareDocumentPosition) {
    return !!(outerNode.compareDocumentPosition(innerNode) & 16);
  } else {
    return false;
  }
}

function isInDocument(node) {
  return node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node);
}

function isSameOriginFrame(iframe) {
  try {
    // Accessing the contentDocument of a HTMLIframeElement can cause the browser
    // to throw, e.g. if it has a cross-origin src attribute.
    // Safari will show an error in the console when the access results in "Blocked a frame with origin". e.g:
    // iframe.contentDocument.defaultView;
    // A safety way is to access one of the cross origin properties: Window or Location
    // Which might result in "SecurityError" DOM Exception and it is compatible to Safari.
    // https://html.spec.whatwg.org/multipage/browsers.html#integration-with-idl
    return typeof iframe.contentWindow.location.href === 'string';
  } catch (err) {
    return false;
  }
}

function getActiveElementDeep() {
  var win = window;
  var element = getActiveElement();

  while (element instanceof win.HTMLIFrameElement) {
    if (isSameOriginFrame(element)) {
      win = element.contentWindow;
    } else {
      return element;
    }

    element = getActiveElement(win.document);
  }

  return element;
}
/**
 * @ReactInputSelection: React input selection module. Based on Selection.js,
 * but modified to be suitable for react and has a couple of bug fixes (doesn't
 * assume buttons have range selections allowed).
 * Input selection module for React.
 */

/**
 * @hasSelectionCapabilities: we get the element types that support selection
 * from https://html.spec.whatwg.org/#do-not-apply, looking at `selectionStart`
 * and `selectionEnd` rows.
 */


function hasSelectionCapabilities(elem) {
  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
  return nodeName && (nodeName === 'input' && (elem.type === 'text' || elem.type === 'search' || elem.type === 'tel' || elem.type === 'url' || elem.type === 'password') || nodeName === 'textarea' || elem.contentEditable === 'true');
}
function getSelectionInformation() {
  var focusedElem = getActiveElementDeep();
  return {
    // Used by Flare
    activeElementDetached: null,
    focusedElem: focusedElem,
    selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection(focusedElem) : null
  };
}
/**
 * @restoreSelection: If any selection information was potentially lost,
 * restore it. This is useful when performing operations that could remove dom
 * nodes and place them back in, resulting in focus being lost.
 */

function restoreSelection(priorSelectionInformation) {
  var curFocusedElem = getActiveElementDeep();
  var priorFocusedElem = priorSelectionInformation.focusedElem;
  var priorSelectionRange = priorSelectionInformation.selectionRange;

  if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
    if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
      setSelection(priorFocusedElem, priorSelectionRange);
    } // Focusing a node can change the scroll position, which is undesirable


    var ancestors = [];
    var ancestor = priorFocusedElem;

    while (ancestor = ancestor.parentNode) {
      if (ancestor.nodeType === ELEMENT_NODE) {
        ancestors.push({
          element: ancestor,
          left: ancestor.scrollLeft,
          top: ancestor.scrollTop
        });
      }
    }

    if (typeof priorFocusedElem.focus === 'function') {
      priorFocusedElem.focus();
    }

    for (var i = 0; i < ancestors.length; i++) {
      var info = ancestors[i];
      info.element.scrollLeft = info.left;
      info.element.scrollTop = info.top;
    }
  }
}
/**
 * @getSelection: Gets the selection bounds of a focused textarea, input or
 * contentEditable node.
 * -@input: Look up selection bounds of this input
 * -@return {start: selectionStart, end: selectionEnd}
 */

function getSelection(input) {
  var selection;

  if ('selectionStart' in input) {
    // Modern browser with input or textarea.
    selection = {
      start: input.selectionStart,
      end: input.selectionEnd
    };
  } else {
    // Content editable or old IE textarea.
    selection = getOffsets(input);
  }

  return selection || {
    start: 0,
    end: 0
  };
}
/**
 * @setSelection: Sets the selection bounds of a textarea or input and focuses
 * the input.
 * -@input     Set selection bounds of this input or textarea
 * -@offsets   Object of same form that is returned from get*
 */

function setSelection(input, offsets) {
  var start = offsets.start,
      end = offsets.end;

  if (end === undefined) {
    end = start;
  }

  if ('selectionStart' in input) {
    input.selectionStart = start;
    input.selectionEnd = Math.min(end, input.value.length);
  } else {
    setOffsets(input, offsets);
  }
}

var validateDOMNesting = function () {};

var updatedAncestorInfo = function () {};

{
  // This validation code was written based on the HTML5 parsing spec:
  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
  //
  // Note: this does not catch all invalid nesting, nor does it try to (as it's
  // not clear what practical benefit doing so provides); instead, we warn only
  // for cases where the parser will give a parse tree differing from what React
  // intended. For example, <b><div></div></b> is invalid but we don't warn
  // because it still parses correctly; we do warn for other cases like nested
  // <p> tags where the beginning of the second element implicitly closes the
  // first, causing a confusing mess.
  // https://html.spec.whatwg.org/multipage/syntax.html#special
  var specialTags = ['address', 'applet', 'area', 'article', 'aside', 'base', 'basefont', 'bgsound', 'blockquote', 'body', 'br', 'button', 'caption', 'center', 'col', 'colgroup', 'dd', 'details', 'dir', 'div', 'dl', 'dt', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'iframe', 'img', 'input', 'isindex', 'li', 'link', 'listing', 'main', 'marquee', 'menu', 'menuitem', 'meta', 'nav', 'noembed', 'noframes', 'noscript', 'object', 'ol', 'p', 'param', 'plaintext', 'pre', 'script', 'section', 'select', 'source', 'style', 'summary', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'title', 'tr', 'track', 'ul', 'wbr', 'xmp']; // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope

  var inScopeTags = ['applet', 'caption', 'html', 'table', 'td', 'th', 'marquee', 'object', 'template', // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
  // TODO: Distinguish by namespace here -- for <title>, including it here
  // errs on the side of fewer warnings
  'foreignObject', 'desc', 'title']; // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope

  var buttonScopeTags = inScopeTags.concat(['button']); // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags

  var impliedEndTags = ['dd', 'dt', 'li', 'option', 'optgroup', 'p', 'rp', 'rt'];
  var emptyAncestorInfo = {
    current: null,
    formTag: null,
    aTagInScope: null,
    buttonTagInScope: null,
    nobrTagInScope: null,
    pTagInButtonScope: null,
    listItemTagAutoclosing: null,
    dlItemTagAutoclosing: null
  };

  updatedAncestorInfo = function (oldInfo, tag) {
    var ancestorInfo = _assign({}, oldInfo || emptyAncestorInfo);

    var info = {
      tag: tag
    };

    if (inScopeTags.indexOf(tag) !== -1) {
      ancestorInfo.aTagInScope = null;
      ancestorInfo.buttonTagInScope = null;
      ancestorInfo.nobrTagInScope = null;
    }

    if (buttonScopeTags.indexOf(tag) !== -1) {
      ancestorInfo.pTagInButtonScope = null;
    } // See rules for 'li', 'dd', 'dt' start tags in
    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody


    if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {
      ancestorInfo.listItemTagAutoclosing = null;
      ancestorInfo.dlItemTagAutoclosing = null;
    }

    ancestorInfo.current = info;

    if (tag === 'form') {
      ancestorInfo.formTag = info;
    }

    if (tag === 'a') {
      ancestorInfo.aTagInScope = info;
    }

    if (tag === 'button') {
      ancestorInfo.buttonTagInScope = info;
    }

    if (tag === 'nobr') {
      ancestorInfo.nobrTagInScope = info;
    }

    if (tag === 'p') {
      ancestorInfo.pTagInButtonScope = info;
    }

    if (tag === 'li') {
      ancestorInfo.listItemTagAutoclosing = info;
    }

    if (tag === 'dd' || tag === 'dt') {
      ancestorInfo.dlItemTagAutoclosing = info;
    }

    return ancestorInfo;
  };
  /**
   * Returns whether
   */


  var isTagValidWithParent = function (tag, parentTag) {
    // First, let's check if we're in an unusual parsing mode...
    switch (parentTag) {
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
      case 'select':
        return tag === 'option' || tag === 'optgroup' || tag === '#text';

      case 'optgroup':
        return tag === 'option' || tag === '#text';
      // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
      // but

      case 'option':
        return tag === '#text';
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
      // No special behavior since these rules fall back to "in body" mode for
      // all except special table nodes which cause bad parsing behavior anyway.
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr

      case 'tr':
        return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody

      case 'tbody':
      case 'thead':
      case 'tfoot':
        return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup

      case 'colgroup':
        return tag === 'col' || tag === 'template';
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable

      case 'table':
        return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead

      case 'head':
        return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';
      // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element

      case 'html':
        return tag === 'head' || tag === 'body' || tag === 'frameset';

      case 'frameset':
        return tag === 'frame';

      case '#document':
        return tag === 'html';
    } // Probably in the "in body" parsing mode, so we outlaw only tag combos
    // where the parsing rules cause implicit opens or closes to be added.
    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody


    switch (tag) {
      case 'h1':
      case 'h2':
      case 'h3':
      case 'h4':
      case 'h5':
      case 'h6':
        return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';

      case 'rp':
      case 'rt':
        return impliedEndTags.indexOf(parentTag) === -1;

      case 'body':
      case 'caption':
      case 'col':
      case 'colgroup':
      case 'frameset':
      case 'frame':
      case 'head':
      case 'html':
      case 'tbody':
      case 'td':
      case 'tfoot':
      case 'th':
      case 'thead':
      case 'tr':
        // These tags are only valid with a few parents that have special child
        // parsing rules -- if we're down here, then none of those matched and
        // so we allow it only if we don't know what the parent is, as all other
        // cases are invalid.
        return parentTag == null;
    }

    return true;
  };
  /**
   * Returns whether
   */


  var findInvalidAncestorForTag = function (tag, ancestorInfo) {
    switch (tag) {
      case 'address':
      case 'article':
      case 'aside':
      case 'blockquote':
      case 'center':
      case 'details':
      case 'dialog':
      case 'dir':
      case 'div':
      case 'dl':
      case 'fieldset':
      case 'figcaption':
      case 'figure':
      case 'footer':
      case 'header':
      case 'hgroup':
      case 'main':
      case 'menu':
      case 'nav':
      case 'ol':
      case 'p':
      case 'section':
      case 'summary':
      case 'ul':
      case 'pre':
      case 'listing':
      case 'table':
      case 'hr':
      case 'xmp':
      case 'h1':
      case 'h2':
      case 'h3':
      case 'h4':
      case 'h5':
      case 'h6':
        return ancestorInfo.pTagInButtonScope;

      case 'form':
        return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;

      case 'li':
        return ancestorInfo.listItemTagAutoclosing;

      case 'dd':
      case 'dt':
        return ancestorInfo.dlItemTagAutoclosing;

      case 'button':
        return ancestorInfo.buttonTagInScope;

      case 'a':
        // Spec says something about storing a list of markers, but it sounds
        // equivalent to this check.
        return ancestorInfo.aTagInScope;

      case 'nobr':
        return ancestorInfo.nobrTagInScope;
    }

    return null;
  };

  var didWarn$1 = {};

  validateDOMNesting = function (childTag, childText, ancestorInfo) {
    ancestorInfo = ancestorInfo || emptyAncestorInfo;
    var parentInfo = ancestorInfo.current;
    var parentTag = parentInfo && parentInfo.tag;

    if (childText != null) {
      if (childTag != null) {
        error('validateDOMNesting: when childText is passed, childTag should be null');
      }

      childTag = '#text';
    }

    var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
    var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
    var invalidParentOrAncestor = invalidParent || invalidAncestor;

    if (!invalidParentOrAncestor) {
      return;
    }

    var ancestorTag = invalidParentOrAncestor.tag;
    var addendum = getCurrentFiberStackInDev();
    var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag + '|' + addendum;

    if (didWarn$1[warnKey]) {
      return;
    }

    didWarn$1[warnKey] = true;
    var tagDisplayName = childTag;
    var whitespaceInfo = '';

    if (childTag === '#text') {
      if (/\S/.test(childText)) {
        tagDisplayName = 'Text nodes';
      } else {
        tagDisplayName = 'Whitespace text nodes';
        whitespaceInfo = " Make sure you don't have any extra whitespace between tags on " + 'each line of your source code.';
      }
    } else {
      tagDisplayName = '<' + childTag + '>';
    }

    if (invalidParent) {
      var info = '';

      if (ancestorTag === 'table' && childTag === 'tr') {
        info += ' Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by ' + 'the browser.';
      }

      error('validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s', tagDisplayName, ancestorTag, whitespaceInfo, info);
    } else {
      error('validateDOMNesting(...): %s cannot appear as a descendant of ' + '<%s>.', tagDisplayName, ancestorTag);
    }
  };
}

var SUPPRESS_HYDRATION_WARNING$1;

{
  SUPPRESS_HYDRATION_WARNING$1 = 'suppressHydrationWarning';
}

var SUSPENSE_START_DATA = '$';
var SUSPENSE_END_DATA = '/$';
var SUSPENSE_PENDING_START_DATA = '$?';
var SUSPENSE_FALLBACK_START_DATA = '$!';
var STYLE$1 = 'style';
var eventsEnabled = null;
var selectionInformation = null;

function shouldAutoFocusHostComponent(type, props) {
  switch (type) {
    case 'button':
    case 'input':
    case 'select':
    case 'textarea':
      return !!props.autoFocus;
  }

  return false;
}
function getRootHostContext(rootContainerInstance) {
  var type;
  var namespace;
  var nodeType = rootContainerInstance.nodeType;

  switch (nodeType) {
    case DOCUMENT_NODE:
    case DOCUMENT_FRAGMENT_NODE:
      {
        type = nodeType === DOCUMENT_NODE ? '#document' : '#fragment';
        var root = rootContainerInstance.documentElement;
        namespace = root ? root.namespaceURI : getChildNamespace(null, '');
        break;
      }

    default:
      {
        var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
        var ownNamespace = container.namespaceURI || null;
        type = container.tagName;
        namespace = getChildNamespace(ownNamespace, type);
        break;
      }
  }

  {
    var validatedTag = type.toLowerCase();
    var ancestorInfo = updatedAncestorInfo(null, validatedTag);
    return {
      namespace: namespace,
      ancestorInfo: ancestorInfo
    };
  }
}
function getChildHostContext(parentHostContext, type, rootContainerInstance) {
  {
    var parentHostContextDev = parentHostContext;
    var namespace = getChildNamespace(parentHostContextDev.namespace, type);
    var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
    return {
      namespace: namespace,
      ancestorInfo: ancestorInfo
    };
  }
}
function getPublicInstance(instance) {
  return instance;
}
function prepareForCommit(containerInfo) {
  eventsEnabled = isEnabled();
  selectionInformation = getSelectionInformation();
  setEnabled(false);
}
function resetAfterCommit(containerInfo) {
  restoreSelection(selectionInformation);
  setEnabled(eventsEnabled);
  eventsEnabled = null;

  selectionInformation = null;
}
function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
  var parentNamespace;

  {
    // TODO: take namespace into account when validating.
    var hostContextDev = hostContext;
    validateDOMNesting(type, null, hostContextDev.ancestorInfo);

    if (typeof props.children === 'string' || typeof props.children === 'number') {
      var string = '' + props.children;
      var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
      validateDOMNesting(null, string, ownAncestorInfo);
    }

    parentNamespace = hostContextDev.namespace;
  }

  var domElement = createElement(type, props, rootContainerInstance, parentNamespace);
  precacheFiberNode(internalInstanceHandle, domElement);
  updateFiberProps(domElement, props);
  return domElement;
}
function appendInitialChild(parentInstance, child) {
  parentInstance.appendChild(child);
}
function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
  setInitialProperties(domElement, type, props, rootContainerInstance);
  return shouldAutoFocusHostComponent(type, props);
}
function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
  {
    var hostContextDev = hostContext;

    if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === 'string' || typeof newProps.children === 'number')) {
      var string = '' + newProps.children;
      var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
      validateDOMNesting(null, string, ownAncestorInfo);
    }
  }

  return diffProperties(domElement, type, oldProps, newProps, rootContainerInstance);
}
function shouldSetTextContent(type, props) {
  return type === 'textarea' || type === 'option' || type === 'noscript' || typeof props.children === 'string' || typeof props.children === 'number' || typeof props.dangerouslySetInnerHTML === 'object' && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
}
function shouldDeprioritizeSubtree(type, props) {
  return !!props.hidden;
}
function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
  {
    var hostContextDev = hostContext;
    validateDOMNesting(null, text, hostContextDev.ancestorInfo);
  }

  var textNode = createTextNode(text, rootContainerInstance);
  precacheFiberNode(internalInstanceHandle, textNode);
  return textNode;
}
// if a component just imports ReactDOM (e.g. for findDOMNode).
// Some environments might not have setTimeout or clearTimeout.

var scheduleTimeout = typeof setTimeout === 'function' ? setTimeout : undefined;
var cancelTimeout = typeof clearTimeout === 'function' ? clearTimeout : undefined;
var noTimeout = -1; // -------------------
function commitMount(domElement, type, newProps, internalInstanceHandle) {
  // Despite the naming that might imply otherwise, this method only
  // fires if there is an `Update` effect scheduled during mounting.
  // This happens if `finalizeInitialChildren` returns `true` (which it
  // does to implement the `autoFocus` attribute on the client). But
  // there are also other cases when this might happen (such as patching
  // up text content during hydration mismatch). So we'll check this again.
  if (shouldAutoFocusHostComponent(type, newProps)) {
    domElement.focus();
  }
}
function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
  // Update the props handle so that we know which props are the ones with
  // with current event handlers.
  updateFiberProps(domElement, newProps); // Apply the diff to the DOM node.

  updateProperties(domElement, updatePayload, type, oldProps, newProps);
}
function resetTextContent(domElement) {
  setTextContent(domElement, '');
}
function commitTextUpdate(textInstance, oldText, newText) {
  textInstance.nodeValue = newText;
}
function appendChild(parentInstance, child) {
  parentInstance.appendChild(child);
}
function appendChildToContainer(container, child) {
  var parentNode;

  if (container.nodeType === COMMENT_NODE) {
    parentNode = container.parentNode;
    parentNode.insertBefore(child, container);
  } else {
    parentNode = container;
    parentNode.appendChild(child);
  } // This container might be used for a portal.
  // If something inside a portal is clicked, that click should bubble
  // through the React tree. However, on Mobile Safari the click would
  // never bubble through the *DOM* tree unless an ancestor with onclick
  // event exists. So we wouldn't see it and dispatch it.
  // This is why we ensure that non React root containers have inline onclick
  // defined.
  // https://github.com/facebook/react/issues/11918


  var reactRootContainer = container._reactRootContainer;

  if ((reactRootContainer === null || reactRootContainer === undefined) && parentNode.onclick === null) {
    // TODO: This cast may not be sound for SVG, MathML or custom elements.
    trapClickOnNonInteractiveElement(parentNode);
  }
}
function insertBefore(parentInstance, child, beforeChild) {
  parentInstance.insertBefore(child, beforeChild);
}
function insertInContainerBefore(container, child, beforeChild) {
  if (container.nodeType === COMMENT_NODE) {
    container.parentNode.insertBefore(child, beforeChild);
  } else {
    container.insertBefore(child, beforeChild);
  }
}
function removeChild(parentInstance, child) {
  parentInstance.removeChild(child);
}
function removeChildFromContainer(container, child) {
  if (container.nodeType === COMMENT_NODE) {
    container.parentNode.removeChild(child);
  } else {
    container.removeChild(child);
  }
}

function hideInstance(instance) {
  // pass host context to this method?


  instance = instance;
  var style = instance.style;

  if (typeof style.setProperty === 'function') {
    style.setProperty('display', 'none', 'important');
  } else {
    style.display = 'none';
  }
}
function hideTextInstance(textInstance) {
  textInstance.nodeValue = '';
}
function unhideInstance(instance, props) {
  instance = instance;
  var styleProp = props[STYLE$1];
  var display = styleProp !== undefined && styleProp !== null && styleProp.hasOwnProperty('display') ? styleProp.display : null;
  instance.style.display = dangerousStyleValue('display', display);
}
function unhideTextInstance(textInstance, text) {
  textInstance.nodeValue = text;
} // -------------------
function canHydrateInstance(instance, type, props) {
  if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) {
    return null;
  } // This has now been refined to an element node.


  return instance;
}
function canHydrateTextInstance(instance, text) {
  if (text === '' || instance.nodeType !== TEXT_NODE) {
    // Empty strings are not parsed by HTML so there won't be a correct match here.
    return null;
  } // This has now been refined to a text node.


  return instance;
}
function isSuspenseInstancePending(instance) {
  return instance.data === SUSPENSE_PENDING_START_DATA;
}
function isSuspenseInstanceFallback(instance) {
  return instance.data === SUSPENSE_FALLBACK_START_DATA;
}

function getNextHydratable(node) {
  // Skip non-hydratable nodes.
  for (; node != null; node = node.nextSibling) {
    var nodeType = node.nodeType;

    if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) {
      break;
    }
  }

  return node;
}

function getNextHydratableSibling(instance) {
  return getNextHydratable(instance.nextSibling);
}
function getFirstHydratableChild(parentInstance) {
  return getNextHydratable(parentInstance.firstChild);
}
function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
  precacheFiberNode(internalInstanceHandle, instance); // TODO: Possibly defer this until the commit phase where all the events
  // get attached.

  updateFiberProps(instance, props);
  var parentNamespace;

  {
    var hostContextDev = hostContext;
    parentNamespace = hostContextDev.namespace;
  }

  return diffHydratedProperties(instance, type, props, parentNamespace, rootContainerInstance);
}
function hydrateTextInstance(textInstance, text, internalInstanceHandle) {
  precacheFiberNode(internalInstanceHandle, textInstance);
  return diffHydratedText(textInstance, text);
}
function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
  var node = suspenseInstance.nextSibling; // Skip past all nodes within this suspense boundary.
  // There might be nested nodes so we need to keep track of how
  // deep we are and only break out when we're back on top.

  var depth = 0;

  while (node) {
    if (node.nodeType === COMMENT_NODE) {
      var data = node.data;

      if (data === SUSPENSE_END_DATA) {
        if (depth === 0) {
          return getNextHydratableSibling(node);
        } else {
          depth--;
        }
      } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
        depth++;
      }
    }

    node = node.nextSibling;
  } // TODO: Warn, we didn't find the end comment boundary.


  return null;
} // Returns the SuspenseInstance if this node is a direct child of a
// SuspenseInstance. I.e. if its previous sibling is a Comment with
// SUSPENSE_x_START_DATA. Otherwise, null.

function getParentSuspenseInstance(targetInstance) {
  var node = targetInstance.previousSibling; // Skip past all nodes within this suspense boundary.
  // There might be nested nodes so we need to keep track of how
  // deep we are and only break out when we're back on top.

  var depth = 0;

  while (node) {
    if (node.nodeType === COMMENT_NODE) {
      var data = node.data;

      if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
        if (depth === 0) {
          return node;
        } else {
          depth--;
        }
      } else if (data === SUSPENSE_END_DATA) {
        depth++;
      }
    }

    node = node.previousSibling;
  }

  return null;
}
function commitHydratedContainer(container) {
  // Retry if any event replaying was blocked on this.
  retryIfBlockedOn(container);
}
function commitHydratedSuspenseInstance(suspenseInstance) {
  // Retry if any event replaying was blocked on this.
  retryIfBlockedOn(suspenseInstance);
}
function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text) {
  {
    warnForUnmatchedText(textInstance, text);
  }
}
function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text) {
  if ( parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
    warnForUnmatchedText(textInstance, text);
  }
}
function didNotHydrateContainerInstance(parentContainer, instance) {
  {
    if (instance.nodeType === ELEMENT_NODE) {
      warnForDeletedHydratableElement(parentContainer, instance);
    } else if (instance.nodeType === COMMENT_NODE) ; else {
      warnForDeletedHydratableText(parentContainer, instance);
    }
  }
}
function didNotHydrateInstance(parentType, parentProps, parentInstance, instance) {
  if ( parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
    if (instance.nodeType === ELEMENT_NODE) {
      warnForDeletedHydratableElement(parentInstance, instance);
    } else if (instance.nodeType === COMMENT_NODE) ; else {
      warnForDeletedHydratableText(parentInstance, instance);
    }
  }
}
function didNotFindHydratableContainerInstance(parentContainer, type, props) {
  {
    warnForInsertedHydratedElement(parentContainer, type);
  }
}
function didNotFindHydratableContainerTextInstance(parentContainer, text) {
  {
    warnForInsertedHydratedText(parentContainer, text);
  }
}
function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props) {
  if ( parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
    warnForInsertedHydratedElement(parentInstance, type);
  }
}
function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text) {
  if ( parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
    warnForInsertedHydratedText(parentInstance, text);
  }
}
function didNotFindHydratableSuspenseInstance(parentType, parentProps, parentInstance) {
  if ( parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) ;
}

var randomKey = Math.random().toString(36).slice(2);
var internalInstanceKey = '__reactInternalInstance$' + randomKey;
var internalEventHandlersKey = '__reactEventHandlers$' + randomKey;
var internalContainerInstanceKey = '__reactContainere$' + randomKey;
function precacheFiberNode(hostInst, node) {
  node[internalInstanceKey] = hostInst;
}
function markContainerAsRoot(hostRoot, node) {
  node[internalContainerInstanceKey] = hostRoot;
}
function unmarkContainerAsRoot(node) {
  node[internalContainerInstanceKey] = null;
}
function isContainerMarkedAsRoot(node) {
  return !!node[internalContainerInstanceKey];
} // Given a DOM node, return the closest HostComponent or HostText fiber ancestor.
// If the target node is part of a hydrated or not yet rendered subtree, then
// this may also return a SuspenseComponent or HostRoot to indicate that.
// Conceptually the HostRoot fiber is a child of the Container node. So if you
// pass the Container node as the targetNode, you will not actually get the
// HostRoot back. To get to the HostRoot, you need to pass a child of it.
// The same thing applies to Suspense boundaries.

function getClosestInstanceFromNode(targetNode) {
  var targetInst = targetNode[internalInstanceKey];

  if (targetInst) {
    // Don't return HostRoot or SuspenseComponent here.
    return targetInst;
  } // If the direct event target isn't a React owned DOM node, we need to look
  // to see if one of its parents is a React owned DOM node.


  var parentNode = targetNode.parentNode;

  while (parentNode) {
    // We'll check if this is a container root that could include
    // React nodes in the future. We need to check this first because
    // if we're a child of a dehydrated container, we need to first
    // find that inner container before moving on to finding the parent
    // instance. Note that we don't check this field on  the targetNode
    // itself because the fibers are conceptually between the container
    // node and the first child. It isn't surrounding the container node.
    // If it's not a container, we check if it's an instance.
    targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];

    if (targetInst) {
      // Since this wasn't the direct target of the event, we might have
      // stepped past dehydrated DOM nodes to get here. However they could
      // also have been non-React nodes. We need to answer which one.
      // If we the instance doesn't have any children, then there can't be
      // a nested suspense boundary within it. So we can use this as a fast
      // bailout. Most of the time, when people add non-React children to
      // the tree, it is using a ref to a child-less DOM node.
      // Normally we'd only need to check one of the fibers because if it
      // has ever gone from having children to deleting them or vice versa
      // it would have deleted the dehydrated boundary nested inside already.
      // However, since the HostRoot starts out with an alternate it might
      // have one on the alternate so we need to check in case this was a
      // root.
      var alternate = targetInst.alternate;

      if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
        // Next we need to figure out if the node that skipped past is
        // nested within a dehydrated boundary and if so, which one.
        var suspenseInstance = getParentSuspenseInstance(targetNode);

        while (suspenseInstance !== null) {
          // We found a suspense instance. That means that we haven't
          // hydrated it yet. Even though we leave the comments in the
          // DOM after hydrating, and there are boundaries in the DOM
          // that could already be hydrated, we wouldn't have found them
          // through this pass since if the target is hydrated it would
          // have had an internalInstanceKey on it.
          // Let's get the fiber associated with the SuspenseComponent
          // as the deepest instance.
          var targetSuspenseInst = suspenseInstance[internalInstanceKey];

          if (targetSuspenseInst) {
            return targetSuspenseInst;
          } // If we don't find a Fiber on the comment, it might be because
          // we haven't gotten to hydrate it yet. There might still be a
          // parent boundary that hasn't above this one so we need to find
          // the outer most that is known.


          suspenseInstance = getParentSuspenseInstance(suspenseInstance); // If we don't find one, then that should mean that the parent
          // host component also hasn't hydrated yet. We can return it
          // below since it will bail out on the isMounted check later.
        }
      }

      return targetInst;
    }

    targetNode = parentNode;
    parentNode = targetNode.parentNode;
  }

  return null;
}
/**
 * Given a DOM node, return the ReactDOMComponent or ReactDOMTextComponent
 * instance, or null if the node was not rendered by this React.
 */

function getInstanceFromNode$1(node) {
  var inst = node[internalInstanceKey] || node[internalContainerInstanceKey];

  if (inst) {
    if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) {
      return inst;
    } else {
      return null;
    }
  }

  return null;
}
/**
 * Given a ReactDOMComponent or ReactDOMTextComponent, return the corresponding
 * DOM node.
 */

function getNodeFromInstance$1(inst) {
  if (inst.tag === HostComponent || inst.tag === HostText) {
    // In Fiber this, is just the state node right now. We assume it will be
    // a host component or host text.
    return inst.stateNode;
  } // Without this first invariant, passing a non-DOM-component triggers the next
  // invariant for a missing parent, which is super confusing.


  {
    {
      throw Error( "getNodeFromInstance: Invalid argument." );
    }
  }
}
function getFiberCurrentPropsFromNode$1(node) {
  return node[internalEventHandlersKey] || null;
}
function updateFiberProps(node, props) {
  node[internalEventHandlersKey] = props;
}

function getParent(inst) {
  do {
    inst = inst.return; // TODO: If this is a HostRoot we might want to bail out.
    // That is depending on if we want nested subtrees (layers) to bubble
    // events to their parent. We could also go through parentNode on the
    // host node but that wouldn't work for React Native and doesn't let us
    // do the portal feature.
  } while (inst && inst.tag !== HostComponent);

  if (inst) {
    return inst;
  }

  return null;
}
/**
 * Return the lowest common ancestor of A and B, or null if they are in
 * different trees.
 */


function getLowestCommonAncestor(instA, instB) {
  var depthA = 0;

  for (var tempA = instA; tempA; tempA = getParent(tempA)) {
    depthA++;
  }

  var depthB = 0;

  for (var tempB = instB; tempB; tempB = getParent(tempB)) {
    depthB++;
  } // If A is deeper, crawl up.


  while (depthA - depthB > 0) {
    instA = getParent(instA);
    depthA--;
  } // If B is deeper, crawl up.


  while (depthB - depthA > 0) {
    instB = getParent(instB);
    depthB--;
  } // Walk in lockstep until we find a match.


  var depth = depthA;

  while (depth--) {
    if (instA === instB || instA === instB.alternate) {
      return instA;
    }

    instA = getParent(instA);
    instB = getParent(instB);
  }

  return null;
}
/**
 * Simulates the traversal of a two-phase, capture/bubble event dispatch.
 */

function traverseTwoPhase(inst, fn, arg) {
  var path = [];

  while (inst) {
    path.push(inst);
    inst = getParent(inst);
  }

  var i;

  for (i = path.length; i-- > 0;) {
    fn(path[i], 'captured', arg);
  }

  for (i = 0; i < path.length; i++) {
    fn(path[i], 'bubbled', arg);
  }
}
/**
 * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
 * should would receive a `mouseEnter` or `mouseLeave` event.
 *
 * Does not invoke the callback on the nearest common ancestor because nothing
 * "entered" or "left" that element.
 */

function traverseEnterLeave(from, to, fn, argFrom, argTo) {
  var common = from && to ? getLowestCommonAncestor(from, to) : null;
  var pathFrom = [];

  while (true) {
    if (!from) {
      break;
    }

    if (from === common) {
      break;
    }

    var alternate = from.alternate;

    if (alternate !== null && alternate === common) {
      break;
    }

    pathFrom.push(from);
    from = getParent(from);
  }

  var pathTo = [];

  while (true) {
    if (!to) {
      break;
    }

    if (to === common) {
      break;
    }

    var _alternate = to.alternate;

    if (_alternate !== null && _alternate === common) {
      break;
    }

    pathTo.push(to);
    to = getParent(to);
  }

  for (var i = 0; i < pathFrom.length; i++) {
    fn(pathFrom[i], 'bubbled', argFrom);
  }

  for (var _i = pathTo.length; _i-- > 0;) {
    fn(pathTo[_i], 'captured', argTo);
  }
}

function isInteractive(tag) {
  return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';
}

function shouldPreventMouseEvent(name, type, props) {
  switch (name) {
    case 'onClick':
    case 'onClickCapture':
    case 'onDoubleClick':
    case 'onDoubleClickCapture':
    case 'onMouseDown':
    case 'onMouseDownCapture':
    case 'onMouseMove':
    case 'onMouseMoveCapture':
    case 'onMouseUp':
    case 'onMouseUpCapture':
    case 'onMouseEnter':
      return !!(props.disabled && isInteractive(type));

    default:
      return false;
  }
}
/**
 * @param {object} inst The instance, which is the source of events.
 * @param {string} registrationName Name of listener (e.g. `onClick`).
 * @return {?function} The stored callback.
 */


function getListener(inst, registrationName) {
  var listener; // TODO: shouldPreventMouseEvent is DOM-specific and definitely should not
  // live here; needs to be moved to a better place soon

  var stateNode = inst.stateNode;

  if (!stateNode) {
    // Work in progress (ex: onload events in incremental mode).
    return null;
  }

  var props = getFiberCurrentPropsFromNode(stateNode);

  if (!props) {
    // Work in progress.
    return null;
  }

  listener = props[registrationName];

  if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
    return null;
  }

  if (!(!listener || typeof listener === 'function')) {
    {
      throw Error( "Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type." );
    }
  }

  return listener;
}

/**
 * Some event types have a notion of different registration names for different
 * "phases" of propagation. This finds listeners by a given phase.
 */
function listenerAtPhase(inst, event, propagationPhase) {
  var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];
  return getListener(inst, registrationName);
}
/**
 * A small set of propagation patterns, each of which will accept a small amount
 * of information, and generate a set of "dispatch ready event objects" - which
 * are sets of events that have already been annotated with a set of dispatched
 * listener functions/ids. The API is designed this way to discourage these
 * propagation strategies from actually executing the dispatches, since we
 * always want to collect the entire set of dispatches before executing even a
 * single one.
 */

/**
 * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
 * here, allows us to not have to bind or create functions for each event.
 * Mutating the event's members allows us to not have to create a wrapping
 * "dispatch" object that pairs the event with the listener.
 */


function accumulateDirectionalDispatches(inst, phase, event) {
  {
    if (!inst) {
      error('Dispatching inst must not be null');
    }
  }

  var listener = listenerAtPhase(inst, event, phase);

  if (listener) {
    event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
    event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
  }
}
/**
 * Collect dispatches (must be entirely collected before dispatching - see unit
 * tests). Lazily allocate the array to conserve memory.  We must loop through
 * each event and perform the traversal for each one. We cannot perform a
 * single traversal for the entire collection of events because each event may
 * have a different target.
 */


function accumulateTwoPhaseDispatchesSingle(event) {
  if (event && event.dispatchConfig.phasedRegistrationNames) {
    traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event);
  }
}
/**
 * Accumulates without regard to direction, does not look for phased
 * registration names. Same as `accumulateDirectDispatchesSingle` but without
 * requiring that the `dispatchMarker` be the same as the dispatched ID.
 */


function accumulateDispatches(inst, ignoredDirection, event) {
  if (inst && event && event.dispatchConfig.registrationName) {
    var registrationName = event.dispatchConfig.registrationName;
    var listener = getListener(inst, registrationName);

    if (listener) {
      event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
      event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
    }
  }
}
/**
 * Accumulates dispatches on an `SyntheticEvent`, but only for the
 * `dispatchMarker`.
 * @param {SyntheticEvent} event
 */


function accumulateDirectDispatchesSingle(event) {
  if (event && event.dispatchConfig.registrationName) {
    accumulateDispatches(event._targetInst, null, event);
  }
}

function accumulateTwoPhaseDispatches(events) {
  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
}
function accumulateEnterLeaveDispatches(leave, enter, from, to) {
  traverseEnterLeave(from, to, accumulateDispatches, leave, enter);
}
function accumulateDirectDispatches(events) {
  forEachAccumulated(events, accumulateDirectDispatchesSingle);
}

/**
 * These variables store information about text content of a target node,
 * allowing comparison of content before and after a given event.
 *
 * Identify the node where selection currently begins, then observe
 * both its text content and its current position in the DOM. Since the
 * browser may natively replace the target node during composition, we can
 * use its position to find its replacement.
 *
 *
 */
var root = null;
var startText = null;
var fallbackText = null;
function initialize(nativeEventTarget) {
  root = nativeEventTarget;
  startText = getText();
  return true;
}
function reset() {
  root = null;
  startText = null;
  fallbackText = null;
}
function getData() {
  if (fallbackText) {
    return fallbackText;
  }

  var start;
  var startValue = startText;
  var startLength = startValue.length;
  var end;
  var endValue = getText();
  var endLength = endValue.length;

  for (start = 0; start < startLength; start++) {
    if (startValue[start] !== endValue[start]) {
      break;
    }
  }

  var minEnd = startLength - start;

  for (end = 1; end <= minEnd; end++) {
    if (startValue[startLength - end] !== endValue[endLength - end]) {
      break;
    }
  }

  var sliceTail = end > 1 ? 1 - end : undefined;
  fallbackText = endValue.slice(start, sliceTail);
  return fallbackText;
}
function getText() {
  if ('value' in root) {
    return root.value;
  }

  return root.textContent;
}

var EVENT_POOL_SIZE = 10;
/**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */

var EventInterface = {
  type: null,
  target: null,
  // currentTarget is set when dispatching; no use in copying it here
  currentTarget: function () {
    return null;
  },
  eventPhase: null,
  bubbles: null,
  cancelable: null,
  timeStamp: function (event) {
    return event.timeStamp || Date.now();
  },
  defaultPrevented: null,
  isTrusted: null
};

function functionThatReturnsTrue() {
  return true;
}

function functionThatReturnsFalse() {
  return false;
}
/**
 * Synthetic events are dispatched by event plugins, typically in response to a
 * top-level event delegation handler.
 *
 * These systems should generally use pooling to reduce the frequency of garbage
 * collection. The system should check `isPersistent` to determine whether the
 * event should be released into the pool after being dispatched. Users that
 * need a persisted event should invoke `persist`.
 *
 * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
 * normalizing browser quirks. Subclasses do not necessarily have to implement a
 * DOM interface; custom application-specific events can also subclass this.
 *
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {*} targetInst Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @param {DOMEventTarget} nativeEventTarget Target node.
 */


function SyntheticEvent(dispatchConfig, targetInst, nativeEvent, nativeEventTarget) {
  {
    // these have a getter/setter for warnings
    delete this.nativeEvent;
    delete this.preventDefault;
    delete this.stopPropagation;
    delete this.isDefaultPrevented;
    delete this.isPropagationStopped;
  }

  this.dispatchConfig = dispatchConfig;
  this._targetInst = targetInst;
  this.nativeEvent = nativeEvent;
  var Interface = this.constructor.Interface;

  for (var propName in Interface) {
    if (!Interface.hasOwnProperty(propName)) {
      continue;
    }

    {
      delete this[propName]; // this has a getter/setter for warnings
    }

    var normalize = Interface[propName];

    if (normalize) {
      this[propName] = normalize(nativeEvent);
    } else {
      if (propName === 'target') {
        this.target = nativeEventTarget;
      } else {
        this[propName] = nativeEvent[propName];
      }
    }
  }

  var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;

  if (defaultPrevented) {
    this.isDefaultPrevented = functionThatReturnsTrue;
  } else {
    this.isDefaultPrevented = functionThatReturnsFalse;
  }

  this.isPropagationStopped = functionThatReturnsFalse;
  return this;
}

_assign(SyntheticEvent.prototype, {
  preventDefault: function () {
    this.defaultPrevented = true;
    var event = this.nativeEvent;

    if (!event) {
      return;
    }

    if (event.preventDefault) {
      event.preventDefault();
    } else if (typeof event.returnValue !== 'unknown') {
      event.returnValue = false;
    }

    this.isDefaultPrevented = functionThatReturnsTrue;
  },
  stopPropagation: function () {
    var event = this.nativeEvent;

    if (!event) {
      return;
    }

    if (event.stopPropagation) {
      event.stopPropagation();
    } else if (typeof event.cancelBubble !== 'unknown') {
      // The ChangeEventPlugin registers a "propertychange" event for
      // IE. This event does not support bubbling or cancelling, and
      // any references to cancelBubble throw "Member not found".  A
      // typeof check of "unknown" circumvents this issue (and is also
      // IE specific).
      event.cancelBubble = true;
    }

    this.isPropagationStopped = functionThatReturnsTrue;
  },

  /**
   * We release all dispatched `SyntheticEvent`s after each event loop, adding
   * them back into the pool. This allows a way to hold onto a reference that
   * won't be added back into the pool.
   */
  persist: function () {
    this.isPersistent = functionThatReturnsTrue;
  },

  /**
   * Checks if this event should be released back into the pool.
   *
   * @return {boolean} True if this should not be released, false otherwise.
   */
  isPersistent: functionThatReturnsFalse,

  /**
   * `PooledClass` looks for `destructor` on each instance it releases.
   */
  destructor: function () {
    var Interface = this.constructor.Interface;

    for (var propName in Interface) {
      {
        Object.defineProperty(this, propName, getPooledWarningPropertyDefinition(propName, Interface[propName]));
      }
    }

    this.dispatchConfig = null;
    this._targetInst = null;
    this.nativeEvent = null;
    this.isDefaultPrevented = functionThatReturnsFalse;
    this.isPropagationStopped = functionThatReturnsFalse;
    this._dispatchListeners = null;
    this._dispatchInstances = null;

    {
      Object.defineProperty(this, 'nativeEvent', getPooledWarningPropertyDefinition('nativeEvent', null));
      Object.defineProperty(this, 'isDefaultPrevented', getPooledWarningPropertyDefinition('isDefaultPrevented', functionThatReturnsFalse));
      Object.defineProperty(this, 'isPropagationStopped', getPooledWarningPropertyDefinition('isPropagationStopped', functionThatReturnsFalse));
      Object.defineProperty(this, 'preventDefault', getPooledWarningPropertyDefinition('preventDefault', function () {}));
      Object.defineProperty(this, 'stopPropagation', getPooledWarningPropertyDefinition('stopPropagation', function () {}));
    }
  }
});

SyntheticEvent.Interface = EventInterface;
/**
 * Helper to reduce boilerplate when creating subclasses.
 */

SyntheticEvent.extend = function (Interface) {
  var Super = this;

  var E = function () {};

  E.prototype = Super.prototype;
  var prototype = new E();

  function Class() {
    return Super.apply(this, arguments);
  }

  _assign(prototype, Class.prototype);

  Class.prototype = prototype;
  Class.prototype.constructor = Class;
  Class.Interface = _assign({}, Super.Interface, Interface);
  Class.extend = Super.extend;
  addEventPoolingTo(Class);
  return Class;
};

addEventPoolingTo(SyntheticEvent);
/**
 * Helper to nullify syntheticEvent instance properties when destructing
 *
 * @param {String} propName
 * @param {?object} getVal
 * @return {object} defineProperty object
 */

function getPooledWarningPropertyDefinition(propName, getVal) {
  var isFunction = typeof getVal === 'function';
  return {
    configurable: true,
    set: set,
    get: get
  };

  function set(val) {
    var action = isFunction ? 'setting the method' : 'setting the property';
    warn(action, 'This is effectively a no-op');
    return val;
  }

  function get() {
    var action = isFunction ? 'accessing the method' : 'accessing the property';
    var result = isFunction ? 'This is a no-op function' : 'This is set to null';
    warn(action, result);
    return getVal;
  }

  function warn(action, result) {
    {
      error("This synthetic event is reused for performance reasons. If you're seeing this, " + "you're %s `%s` on a released/nullified synthetic event. %s. " + 'If you must keep the original synthetic event around, use event.persist(). ' + 'See https://fb.me/react-event-pooling for more information.', action, propName, result);
    }
  }
}

function getPooledEvent(dispatchConfig, targetInst, nativeEvent, nativeInst) {
  var EventConstructor = this;

  if (EventConstructor.eventPool.length) {
    var instance = EventConstructor.eventPool.pop();
    EventConstructor.call(instance, dispatchConfig, targetInst, nativeEvent, nativeInst);
    return instance;
  }

  return new EventConstructor(dispatchConfig, targetInst, nativeEvent, nativeInst);
}

function releasePooledEvent(event) {
  var EventConstructor = this;

  if (!(event instanceof EventConstructor)) {
    {
      throw Error( "Trying to release an event instance into a pool of a different type." );
    }
  }

  event.destructor();

  if (EventConstructor.eventPool.length < EVENT_POOL_SIZE) {
    EventConstructor.eventPool.push(event);
  }
}

function addEventPoolingTo(EventConstructor) {
  EventConstructor.eventPool = [];
  EventConstructor.getPooled = getPooledEvent;
  EventConstructor.release = releasePooledEvent;
}

/**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
 */

var SyntheticCompositionEvent = SyntheticEvent.extend({
  data: null
});

/**
 * @interface Event
 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
 *      /#events-inputevents
 */

var SyntheticInputEvent = SyntheticEvent.extend({
  data: null
});

var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space

var START_KEYCODE = 229;
var canUseCompositionEvent = canUseDOM && 'CompositionEvent' in window;
var documentMode = null;

if (canUseDOM && 'documentMode' in document) {
  documentMode = document.documentMode;
} // Webkit offers a very useful `textInput` event that can be used to
// directly represent `beforeInput`. The IE `textinput` event is not as
// useful, so we don't use it.


var canUseTextInputEvent = canUseDOM && 'TextEvent' in window && !documentMode; // In IE9+, we have access to composition events, but the data supplied
// by the native compositionend event may be incorrect. Japanese ideographic
// spaces, for instance (\u3000) are not recorded correctly.

var useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
var SPACEBAR_CODE = 32;
var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE); // Events and their corresponding property names.

var eventTypes = {
  beforeInput: {
    phasedRegistrationNames: {
      bubbled: 'onBeforeInput',
      captured: 'onBeforeInputCapture'
    },
    dependencies: [TOP_COMPOSITION_END, TOP_KEY_PRESS, TOP_TEXT_INPUT, TOP_PASTE]
  },
  compositionEnd: {
    phasedRegistrationNames: {
      bubbled: 'onCompositionEnd',
      captured: 'onCompositionEndCapture'
    },
    dependencies: [TOP_BLUR, TOP_COMPOSITION_END, TOP_KEY_DOWN, TOP_KEY_PRESS, TOP_KEY_UP, TOP_MOUSE_DOWN]
  },
  compositionStart: {
    phasedRegistrationNames: {
      bubbled: 'onCompositionStart',
      captured: 'onCompositionStartCapture'
    },
    dependencies: [TOP_BLUR, TOP_COMPOSITION_START, TOP_KEY_DOWN, TOP_KEY_PRESS, TOP_KEY_UP, TOP_MOUSE_DOWN]
  },
  compositionUpdate: {
    phasedRegistrationNames: {
      bubbled: 'onCompositionUpdate',
      captured: 'onCompositionUpdateCapture'
    },
    dependencies: [TOP_BLUR, TOP_COMPOSITION_UPDATE, TOP_KEY_DOWN, TOP_KEY_PRESS, TOP_KEY_UP, TOP_MOUSE_DOWN]
  }
}; // Track whether we've ever handled a keypress on the space key.

var hasSpaceKeypress = false;
/**
 * Return whether a native keypress event is assumed to be a command.
 * This is required because Firefox fires `keypress` events for key commands
 * (cut, copy, select-all, etc.) even though no character is inserted.
 */

function isKeypressCommand(nativeEvent) {
  return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && // ctrlKey && altKey is equivalent to AltGr, and is not a command.
  !(nativeEvent.ctrlKey && nativeEvent.altKey);
}
/**
 * Translate native top level events into event types.
 *
 * @param {string} topLevelType
 * @return {object}
 */


function getCompositionEventType(topLevelType) {
  switch (topLevelType) {
    case TOP_COMPOSITION_START:
      return eventTypes.compositionStart;

    case TOP_COMPOSITION_END:
      return eventTypes.compositionEnd;

    case TOP_COMPOSITION_UPDATE:
      return eventTypes.compositionUpdate;
  }
}
/**
 * Does our fallback best-guess model think this event signifies that
 * composition has begun?
 *
 * @param {string} topLevelType
 * @param {object} nativeEvent
 * @return {boolean}
 */


function isFallbackCompositionStart(topLevelType, nativeEvent) {
  return topLevelType === TOP_KEY_DOWN && nativeEvent.keyCode === START_KEYCODE;
}
/**
 * Does our fallback mode think that this event is the end of composition?
 *
 * @param {string} topLevelType
 * @param {object} nativeEvent
 * @return {boolean}
 */


function isFallbackCompositionEnd(topLevelType, nativeEvent) {
  switch (topLevelType) {
    case TOP_KEY_UP:
      // Command keys insert or clear IME input.
      return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;

    case TOP_KEY_DOWN:
      // Expect IME keyCode on each keydown. If we get any other
      // code we must have exited earlier.
      return nativeEvent.keyCode !== START_KEYCODE;

    case TOP_KEY_PRESS:
    case TOP_MOUSE_DOWN:
    case TOP_BLUR:
      // Events are not possible without cancelling IME.
      return true;

    default:
      return false;
  }
}
/**
 * Google Input Tools provides composition data via a CustomEvent,
 * with the `data` property populated in the `detail` object. If this
 * is available on the event object, use it. If not, this is a plain
 * composition event and we have nothing special to extract.
 *
 * @param {object} nativeEvent
 * @return {?string}
 */


function getDataFromCustomEvent(nativeEvent) {
  var detail = nativeEvent.detail;

  if (typeof detail === 'object' && 'data' in detail) {
    return detail.data;
  }

  return null;
}
/**
 * Check if a composition event was triggered by Korean IME.
 * Our fallback mode does not work well with IE's Korean IME,
 * so just use native composition events when Korean IME is used.
 * Although CompositionEvent.locale property is deprecated,
 * it is available in IE, where our fallback mode is enabled.
 *
 * @param {object} nativeEvent
 * @return {boolean}
 */


function isUsingKoreanIME(nativeEvent) {
  return nativeEvent.locale === 'ko';
} // Track the current IME composition status, if any.


var isComposing = false;
/**
 * @return {?object} A SyntheticCompositionEvent.
 */

function extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
  var eventType;
  var fallbackData;

  if (canUseCompositionEvent) {
    eventType = getCompositionEventType(topLevelType);
  } else if (!isComposing) {
    if (isFallbackCompositionStart(topLevelType, nativeEvent)) {
      eventType = eventTypes.compositionStart;
    }
  } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {
    eventType = eventTypes.compositionEnd;
  }

  if (!eventType) {
    return null;
  }

  if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
    // The current composition is stored statically and must not be
    // overwritten while composition continues.
    if (!isComposing && eventType === eventTypes.compositionStart) {
      isComposing = initialize(nativeEventTarget);
    } else if (eventType === eventTypes.compositionEnd) {
      if (isComposing) {
        fallbackData = getData();
      }
    }
  }

  var event = SyntheticCompositionEvent.getPooled(eventType, targetInst, nativeEvent, nativeEventTarget);

  if (fallbackData) {
    // Inject data generated from fallback path into the synthetic event.
    // This matches the property of native CompositionEventInterface.
    event.data = fallbackData;
  } else {
    var customData = getDataFromCustomEvent(nativeEvent);

    if (customData !== null) {
      event.data = customData;
    }
  }

  accumulateTwoPhaseDispatches(event);
  return event;
}
/**
 * @param {TopLevelType} topLevelType Number from `TopLevelType`.
 * @param {object} nativeEvent Native browser event.
 * @return {?string} The string corresponding to this `beforeInput` event.
 */


function getNativeBeforeInputChars(topLevelType, nativeEvent) {
  switch (topLevelType) {
    case TOP_COMPOSITION_END:
      return getDataFromCustomEvent(nativeEvent);

    case TOP_KEY_PRESS:
      /**
       * If native `textInput` events are available, our goal is to make
       * use of them. However, there is a special case: the spacebar key.
       * In Webkit, preventing default on a spacebar `textInput` event
       * cancels character insertion, but it *also* causes the browser
       * to fall back to its default spacebar behavior of scrolling the
       * page.
       *
       * Tracking at:
       * https://code.google.com/p/chromium/issues/detail?id=355103
       *
       * To avoid this issue, use the keypress event as if no `textInput`
       * event is available.
       */
      var which = nativeEvent.which;

      if (which !== SPACEBAR_CODE) {
        return null;
      }

      hasSpaceKeypress = true;
      return SPACEBAR_CHAR;

    case TOP_TEXT_INPUT:
      // Record the characters to be added to the DOM.
      var chars = nativeEvent.data; // If it's a spacebar character, assume that we have already handled
      // it at the keypress level and bail immediately. Android Chrome
      // doesn't give us keycodes, so we need to ignore it.

      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
        return null;
      }

      return chars;

    default:
      // For other native event types, do nothing.
      return null;
  }
}
/**
 * For browsers that do not provide the `textInput` event, extract the
 * appropriate string to use for SyntheticInputEvent.
 *
 * @param {number} topLevelType Number from `TopLevelEventTypes`.
 * @param {object} nativeEvent Native browser event.
 * @return {?string} The fallback string for this `beforeInput` event.
 */


function getFallbackBeforeInputChars(topLevelType, nativeEvent) {
  // If we are currently composing (IME) and using a fallback to do so,
  // try to extract the composed characters from the fallback object.
  // If composition event is available, we extract a string only at
  // compositionevent, otherwise extract it at fallback events.
  if (isComposing) {
    if (topLevelType === TOP_COMPOSITION_END || !canUseCompositionEvent && isFallbackCompositionEnd(topLevelType, nativeEvent)) {
      var chars = getData();
      reset();
      isComposing = false;
      return chars;
    }

    return null;
  }

  switch (topLevelType) {
    case TOP_PASTE:
      // If a paste event occurs after a keypress, throw out the input
      // chars. Paste events should not lead to BeforeInput events.
      return null;

    case TOP_KEY_PRESS:
      /**
       * As of v27, Firefox may fire keypress events even when no character
       * will be inserted. A few possibilities:
       *
       * - `which` is `0`. Arrow keys, Esc key, etc.
       *
       * - `which` is the pressed key code, but no char is available.
       *   Ex: 'AltGr + d` in Polish. There is no modified character for
       *   this key combination and no character is inserted into the
       *   document, but FF fires the keypress for char code `100` anyway.
       *   No `input` event will occur.
       *
       * - `which` is the pressed key code, but a command combination is
       *   being used. Ex: `Cmd+C`. No character is inserted, and no
       *   `input` event will occur.
       */
      if (!isKeypressCommand(nativeEvent)) {
        // IE fires the `keypress` event when a user types an emoji via
        // Touch keyboard of Windows.  In such a case, the `char` property
        // holds an emoji character like `\uD83D\uDE0A`.  Because its length
        // is 2, the property `which` does not represent an emoji correctly.
        // In such a case, we directly return the `char` property instead of
        // using `which`.
        if (nativeEvent.char && nativeEvent.char.length > 1) {
          return nativeEvent.char;
        } else if (nativeEvent.which) {
          return String.fromCharCode(nativeEvent.which);
        }
      }

      return null;

    case TOP_COMPOSITION_END:
      return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;

    default:
      return null;
  }
}
/**
 * Extract a SyntheticInputEvent for `beforeInput`, based on either native
 * `textInput` or fallback behavior.
 *
 * @return {?object} A SyntheticInputEvent.
 */


function extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
  var chars;

  if (canUseTextInputEvent) {
    chars = getNativeBeforeInputChars(topLevelType, nativeEvent);
  } else {
    chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);
  } // If no characters are being inserted, no BeforeInput event should
  // be fired.


  if (!chars) {
    return null;
  }

  var event = SyntheticInputEvent.getPooled(eventTypes.beforeInput, targetInst, nativeEvent, nativeEventTarget);
  event.data = chars;
  accumulateTwoPhaseDispatches(event);
  return event;
}
/**
 * Create an `onBeforeInput` event to match
 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
 *
 * This event plugin is based on the native `textInput` event
 * available in Chrome, Safari, Opera, and IE. This event fires after
 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
 *
 * `beforeInput` is spec'd but not implemented in any browsers, and
 * the `input` event does not provide any useful information about what has
 * actually been added, contrary to the spec. Thus, `textInput` is the best
 * available event to identify the characters that have actually been inserted
 * into the target node.
 *
 * This plugin is also responsible for emitting `composition` events, thus
 * allowing us to share composition fallback code for both `beforeInput` and
 * `composition` event types.
 */


var BeforeInputEventPlugin = {
  eventTypes: eventTypes,
  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags) {
    var composition = extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget);
    var beforeInput = extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget);

    if (composition === null) {
      return beforeInput;
    }

    if (beforeInput === null) {
      return composition;
    }

    return [composition, beforeInput];
  }
};

/**
 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
 */
var supportedInputTypes = {
  color: true,
  date: true,
  datetime: true,
  'datetime-local': true,
  email: true,
  month: true,
  number: true,
  password: true,
  range: true,
  search: true,
  tel: true,
  text: true,
  time: true,
  url: true,
  week: true
};

function isTextInputElement(elem) {
  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();

  if (nodeName === 'input') {
    return !!supportedInputTypes[elem.type];
  }

  if (nodeName === 'textarea') {
    return true;
  }

  return false;
}

var eventTypes$1 = {
  change: {
    phasedRegistrationNames: {
      bubbled: 'onChange',
      captured: 'onChangeCapture'
    },
    dependencies: [TOP_BLUR, TOP_CHANGE, TOP_CLICK, TOP_FOCUS, TOP_INPUT, TOP_KEY_DOWN, TOP_KEY_UP, TOP_SELECTION_CHANGE]
  }
};

function createAndAccumulateChangeEvent(inst, nativeEvent, target) {
  var event = SyntheticEvent.getPooled(eventTypes$1.change, inst, nativeEvent, target);
  event.type = 'change'; // Flag this event loop as needing state restore.

  enqueueStateRestore(target);
  accumulateTwoPhaseDispatches(event);
  return event;
}
/**
 * For IE shims
 */


var activeElement = null;
var activeElementInst = null;
/**
 * SECTION: handle `change` event
 */

function shouldUseChangeEvent(elem) {
  var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
  return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';
}

function manualDispatchChangeEvent(nativeEvent) {
  var event = createAndAccumulateChangeEvent(activeElementInst, nativeEvent, getEventTarget(nativeEvent)); // If change and propertychange bubbled, we'd just bind to it like all the
  // other events and have it go through ReactBrowserEventEmitter. Since it
  // doesn't, we manually listen for the events and so we have to enqueue and
  // process the abstract event manually.
  //
  // Batching is necessary here in order to ensure that all event handlers run
  // before the next rerender (including event handlers attached to ancestor
  // elements instead of directly on the input). Without this, controlled
  // components don't work properly in conjunction with event bubbling because
  // the component is rerendered and the value reverted before all the event
  // handlers can run. See https://github.com/facebook/react/issues/708.

  batchedUpdates(runEventInBatch, event);
}

function runEventInBatch(event) {
  runEventsInBatch(event);
}

function getInstIfValueChanged(targetInst) {
  var targetNode = getNodeFromInstance$1(targetInst);

  if (updateValueIfChanged(targetNode)) {
    return targetInst;
  }
}

function getTargetInstForChangeEvent(topLevelType, targetInst) {
  if (topLevelType === TOP_CHANGE) {
    return targetInst;
  }
}
/**
 * SECTION: handle `input` event
 */


var isInputEventSupported = false;

if (canUseDOM) {
  // IE9 claims to support the input event but fails to trigger it when
  // deleting text, so we ignore its input events.
  isInputEventSupported = isEventSupported('input') && (!document.documentMode || document.documentMode > 9);
}
/**
 * (For IE <=9) Starts tracking propertychange events on the passed-in element
 * and override the value property so that we can distinguish user events from
 * value changes in JS.
 */


function startWatchingForValueChange(target, targetInst) {
  activeElement = target;
  activeElementInst = targetInst;
  activeElement.attachEvent('onpropertychange', handlePropertyChange);
}
/**
 * (For IE <=9) Removes the event listeners from the currently-tracked element,
 * if any exists.
 */


function stopWatchingForValueChange() {
  if (!activeElement) {
    return;
  }

  activeElement.detachEvent('onpropertychange', handlePropertyChange);
  activeElement = null;
  activeElementInst = null;
}
/**
 * (For IE <=9) Handles a propertychange event, sending a `change` event if
 * the value of the active element has changed.
 */


function handlePropertyChange(nativeEvent) {
  if (nativeEvent.propertyName !== 'value') {
    return;
  }

  if (getInstIfValueChanged(activeElementInst)) {
    manualDispatchChangeEvent(nativeEvent);
  }
}

function handleEventsForInputEventPolyfill(topLevelType, target, targetInst) {
  if (topLevelType === TOP_FOCUS) {
    // In IE9, propertychange fires for most input events but is buggy and
    // doesn't fire when text is deleted, but conveniently, selectionchange
    // appears to fire in all of the remaining cases so we catch those and
    // forward the event if the value has changed
    // In either case, we don't want to call the event handler if the value
    // is changed from JS so we redefine a setter for `.value` that updates
    // our activeElementValue variable, allowing us to ignore those changes
    //
    // stopWatching() should be a noop here but we call it just in case we
    // missed a blur event somehow.
    stopWatchingForValueChange();
    startWatchingForValueChange(target, targetInst);
  } else if (topLevelType === TOP_BLUR) {
    stopWatchingForValueChange();
  }
} // For IE8 and IE9.


function getTargetInstForInputEventPolyfill(topLevelType, targetInst) {
  if (topLevelType === TOP_SELECTION_CHANGE || topLevelType === TOP_KEY_UP || topLevelType === TOP_KEY_DOWN) {
    // On the selectionchange event, the target is just document which isn't
    // helpful for us so just check activeElement instead.
    //
    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
    // propertychange on the first input event after setting `value` from a
    // script and fires only keydown, keypress, keyup. Catching keyup usually
    // gets it and catching keydown lets us fire an event for the first
    // keystroke if user does a key repeat (it'll be a little delayed: right
    // before the second keystroke). Other input methods (e.g., paste) seem to
    // fire selectionchange normally.
    return getInstIfValueChanged(activeElementInst);
  }
}
/**
 * SECTION: handle `click` event
 */


function shouldUseClickEvent(elem) {
  // Use the `click` event to detect changes to checkbox and radio inputs.
  // This approach works across all browsers, whereas `change` does not fire
  // until `blur` in IE8.
  var nodeName = elem.nodeName;
  return nodeName && nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');
}

function getTargetInstForClickEvent(topLevelType, targetInst) {
  if (topLevelType === TOP_CLICK) {
    return getInstIfValueChanged(targetInst);
  }
}

function getTargetInstForInputOrChangeEvent(topLevelType, targetInst) {
  if (topLevelType === TOP_INPUT || topLevelType === TOP_CHANGE) {
    return getInstIfValueChanged(targetInst);
  }
}

function handleControlledInputBlur(node) {
  var state = node._wrapperState;

  if (!state || !state.controlled || node.type !== 'number') {
    return;
  }

  {
    // If controlled, assign the value attribute to the current value on blur
    setDefaultValue(node, 'number', node.value);
  }
}
/**
 * This plugin creates an `onChange` event that normalizes change events
 * across form elements. This event fires at a time when it's possible to
 * change the element's value without seeing a flicker.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - select
 */


var ChangeEventPlugin = {
  eventTypes: eventTypes$1,
  _isInputEventSupported: isInputEventSupported,
  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags) {
    var targetNode = targetInst ? getNodeFromInstance$1(targetInst) : window;
    var getTargetInstFunc, handleEventFunc;

    if (shouldUseChangeEvent(targetNode)) {
      getTargetInstFunc = getTargetInstForChangeEvent;
    } else if (isTextInputElement(targetNode)) {
      if (isInputEventSupported) {
        getTargetInstFunc = getTargetInstForInputOrChangeEvent;
      } else {
        getTargetInstFunc = getTargetInstForInputEventPolyfill;
        handleEventFunc = handleEventsForInputEventPolyfill;
      }
    } else if (shouldUseClickEvent(targetNode)) {
      getTargetInstFunc = getTargetInstForClickEvent;
    }

    if (getTargetInstFunc) {
      var inst = getTargetInstFunc(topLevelType, targetInst);

      if (inst) {
        var event = createAndAccumulateChangeEvent(inst, nativeEvent, nativeEventTarget);
        return event;
      }
    }

    if (handleEventFunc) {
      handleEventFunc(topLevelType, targetNode, targetInst);
    } // When blurring, set the value attribute for number inputs


    if (topLevelType === TOP_BLUR) {
      handleControlledInputBlur(targetNode);
    }
  }
};

var SyntheticUIEvent = SyntheticEvent.extend({
  view: null,
  detail: null
});

/**
 * Translation from modifier key to the associated property in the event.
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
 */
var modifierKeyToProp = {
  Alt: 'altKey',
  Control: 'ctrlKey',
  Meta: 'metaKey',
  Shift: 'shiftKey'
}; // Older browsers (Safari <= 10, iOS Safari <= 10.2) do not support
// getModifierState. If getModifierState is not supported, we map it to a set of
// modifier keys exposed by the event. In this case, Lock-keys are not supported.

function modifierStateGetter(keyArg) {
  var syntheticEvent = this;
  var nativeEvent = syntheticEvent.nativeEvent;

  if (nativeEvent.getModifierState) {
    return nativeEvent.getModifierState(keyArg);
  }

  var keyProp = modifierKeyToProp[keyArg];
  return keyProp ? !!nativeEvent[keyProp] : false;
}

function getEventModifierState(nativeEvent) {
  return modifierStateGetter;
}

var previousScreenX = 0;
var previousScreenY = 0; // Use flags to signal movementX/Y has already been set

var isMovementXSet = false;
var isMovementYSet = false;
/**
 * @interface MouseEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */

var SyntheticMouseEvent = SyntheticUIEvent.extend({
  screenX: null,
  screenY: null,
  clientX: null,
  clientY: null,
  pageX: null,
  pageY: null,
  ctrlKey: null,
  shiftKey: null,
  altKey: null,
  metaKey: null,
  getModifierState: getEventModifierState,
  button: null,
  buttons: null,
  relatedTarget: function (event) {
    return event.relatedTarget || (event.fromElement === event.srcElement ? event.toElement : event.fromElement);
  },
  movementX: function (event) {
    if ('movementX' in event) {
      return event.movementX;
    }

    var screenX = previousScreenX;
    previousScreenX = event.screenX;

    if (!isMovementXSet) {
      isMovementXSet = true;
      return 0;
    }

    return event.type === 'mousemove' ? event.screenX - screenX : 0;
  },
  movementY: function (event) {
    if ('movementY' in event) {
      return event.movementY;
    }

    var screenY = previousScreenY;
    previousScreenY = event.screenY;

    if (!isMovementYSet) {
      isMovementYSet = true;
      return 0;
    }

    return event.type === 'mousemove' ? event.screenY - screenY : 0;
  }
});

/**
 * @interface PointerEvent
 * @see http://www.w3.org/TR/pointerevents/
 */

var SyntheticPointerEvent = SyntheticMouseEvent.extend({
  pointerId: null,
  width: null,
  height: null,
  pressure: null,
  tangentialPressure: null,
  tiltX: null,
  tiltY: null,
  twist: null,
  pointerType: null,
  isPrimary: null
});

var eventTypes$2 = {
  mouseEnter: {
    registrationName: 'onMouseEnter',
    dependencies: [TOP_MOUSE_OUT, TOP_MOUSE_OVER]
  },
  mouseLeave: {
    registrationName: 'onMouseLeave',
    dependencies: [TOP_MOUSE_OUT, TOP_MOUSE_OVER]
  },
  pointerEnter: {
    registrationName: 'onPointerEnter',
    dependencies: [TOP_POINTER_OUT, TOP_POINTER_OVER]
  },
  pointerLeave: {
    registrationName: 'onPointerLeave',
    dependencies: [TOP_POINTER_OUT, TOP_POINTER_OVER]
  }
};
var EnterLeaveEventPlugin = {
  eventTypes: eventTypes$2,

  /**
   * For almost every interaction we care about, there will be both a top-level
   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
   * we do not extract duplicate events. However, moving the mouse into the
   * browser from outside will not fire a `mouseout` event. In this case, we use
   * the `mouseover` top-level event.
   */
  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags) {
    var isOverEvent = topLevelType === TOP_MOUSE_OVER || topLevelType === TOP_POINTER_OVER;
    var isOutEvent = topLevelType === TOP_MOUSE_OUT || topLevelType === TOP_POINTER_OUT;

    if (isOverEvent && (eventSystemFlags & IS_REPLAYED) === 0 && (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
      // If this is an over event with a target, then we've already dispatched
      // the event in the out event of the other target. If this is replayed,
      // then it's because we couldn't dispatch against this target previously
      // so we have to do it now instead.
      return null;
    }

    if (!isOutEvent && !isOverEvent) {
      // Must not be a mouse or pointer in or out - ignoring.
      return null;
    }

    var win;

    if (nativeEventTarget.window === nativeEventTarget) {
      // `nativeEventTarget` is probably a window object.
      win = nativeEventTarget;
    } else {
      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
      var doc = nativeEventTarget.ownerDocument;

      if (doc) {
        win = doc.defaultView || doc.parentWindow;
      } else {
        win = window;
      }
    }

    var from;
    var to;

    if (isOutEvent) {
      from = targetInst;
      var related = nativeEvent.relatedTarget || nativeEvent.toElement;
      to = related ? getClosestInstanceFromNode(related) : null;

      if (to !== null) {
        var nearestMounted = getNearestMountedFiber(to);

        if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {
          to = null;
        }
      }
    } else {
      // Moving to a node from outside the window.
      from = null;
      to = targetInst;
    }

    if (from === to) {
      // Nothing pertains to our managed components.
      return null;
    }

    var eventInterface, leaveEventType, enterEventType, eventTypePrefix;

    if (topLevelType === TOP_MOUSE_OUT || topLevelType === TOP_MOUSE_OVER) {
      eventInterface = SyntheticMouseEvent;
      leaveEventType = eventTypes$2.mouseLeave;
      enterEventType = eventTypes$2.mouseEnter;
      eventTypePrefix = 'mouse';
    } else if (topLevelType === TOP_POINTER_OUT || topLevelType === TOP_POINTER_OVER) {
      eventInterface = SyntheticPointerEvent;
      leaveEventType = eventTypes$2.pointerLeave;
      enterEventType = eventTypes$2.pointerEnter;
      eventTypePrefix = 'pointer';
    }

    var fromNode = from == null ? win : getNodeFromInstance$1(from);
    var toNode = to == null ? win : getNodeFromInstance$1(to);
    var leave = eventInterface.getPooled(leaveEventType, from, nativeEvent, nativeEventTarget);
    leave.type = eventTypePrefix + 'leave';
    leave.target = fromNode;
    leave.relatedTarget = toNode;
    var enter = eventInterface.getPooled(enterEventType, to, nativeEvent, nativeEventTarget);
    enter.type = eventTypePrefix + 'enter';
    enter.target = toNode;
    enter.relatedTarget = fromNode;
    accumulateEnterLeaveDispatches(leave, enter, from, to); // If we are not processing the first ancestor, then we
    // should not process the same nativeEvent again, as we
    // will have already processed it in the first ancestor.

    if ((eventSystemFlags & IS_FIRST_ANCESTOR) === 0) {
      return [leave];
    }

    return [leave, enter];
  }
};

/**
 * inlined Object.is polyfill to avoid requiring consumers ship their own
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
 */
function is(x, y) {
  return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y // eslint-disable-line no-self-compare
  ;
}

var objectIs = typeof Object.is === 'function' ? Object.is : is;

var hasOwnProperty$2 = Object.prototype.hasOwnProperty;
/**
 * Performs equality by iterating through keys on an object and returning false
 * when any key has values which are not strictly equal between the arguments.
 * Returns true when the values of all keys are strictly equal.
 */

function shallowEqual(objA, objB) {
  if (objectIs(objA, objB)) {
    return true;
  }

  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
    return false;
  }

  var keysA = Object.keys(objA);
  var keysB = Object.keys(objB);

  if (keysA.length !== keysB.length) {
    return false;
  } // Test for A's keys different from B.


  for (var i = 0; i < keysA.length; i++) {
    if (!hasOwnProperty$2.call(objB, keysA[i]) || !objectIs(objA[keysA[i]], objB[keysA[i]])) {
      return false;
    }
  }

  return true;
}

var skipSelectionChangeEvent = canUseDOM && 'documentMode' in document && document.documentMode <= 11;
var eventTypes$3 = {
  select: {
    phasedRegistrationNames: {
      bubbled: 'onSelect',
      captured: 'onSelectCapture'
    },
    dependencies: [TOP_BLUR, TOP_CONTEXT_MENU, TOP_DRAG_END, TOP_FOCUS, TOP_KEY_DOWN, TOP_KEY_UP, TOP_MOUSE_DOWN, TOP_MOUSE_UP, TOP_SELECTION_CHANGE]
  }
};
var activeElement$1 = null;
var activeElementInst$1 = null;
var lastSelection = null;
var mouseDown = false;
/**
 * Get an object which is a unique representation of the current selection.
 *
 * The return value will not be consistent across nodes or browsers, but
 * two identical selections on the same node will return identical objects.
 *
 * @param {DOMElement} node
 * @return {object}
 */

function getSelection$1(node) {
  if ('selectionStart' in node && hasSelectionCapabilities(node)) {
    return {
      start: node.selectionStart,
      end: node.selectionEnd
    };
  } else {
    var win = node.ownerDocument && node.ownerDocument.defaultView || window;
    var selection = win.getSelection();
    return {
      anchorNode: selection.anchorNode,
      anchorOffset: selection.anchorOffset,
      focusNode: selection.focusNode,
      focusOffset: selection.focusOffset
    };
  }
}
/**
 * Get document associated with the event target.
 *
 * @param {object} nativeEventTarget
 * @return {Document}
 */


function getEventTargetDocument(eventTarget) {
  return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
}
/**
 * Poll selection to see whether it's changed.
 *
 * @param {object} nativeEvent
 * @param {object} nativeEventTarget
 * @return {?SyntheticEvent}
 */


function constructSelectEvent(nativeEvent, nativeEventTarget) {
  // Ensure we have the right element, and that the user is not dragging a
  // selection (this matches native `select` event behavior). In HTML5, select
  // fires only on input and textarea thus if there's no focused element we
  // won't dispatch.
  var doc = getEventTargetDocument(nativeEventTarget);

  if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {
    return null;
  } // Only fire when selection has actually changed.


  var currentSelection = getSelection$1(activeElement$1);

  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
    lastSelection = currentSelection;
    var syntheticEvent = SyntheticEvent.getPooled(eventTypes$3.select, activeElementInst$1, nativeEvent, nativeEventTarget);
    syntheticEvent.type = 'select';
    syntheticEvent.target = activeElement$1;
    accumulateTwoPhaseDispatches(syntheticEvent);
    return syntheticEvent;
  }

  return null;
}
/**
 * This plugin creates an `onSelect` event that normalizes select events
 * across form elements.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - contentEditable
 *
 * This differs from native browser implementations in the following ways:
 * - Fires on contentEditable fields as well as inputs.
 * - Fires for collapsed selection.
 * - Fires after user input.
 */


var SelectEventPlugin = {
  eventTypes: eventTypes$3,
  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, container) {
    var containerOrDoc = container || getEventTargetDocument(nativeEventTarget); // Track whether all listeners exists for this plugin. If none exist, we do
    // not extract events. See #3639.

    if (!containerOrDoc || !isListeningToAllDependencies('onSelect', containerOrDoc)) {
      return null;
    }

    var targetNode = targetInst ? getNodeFromInstance$1(targetInst) : window;

    switch (topLevelType) {
      // Track the input node that has focus.
      case TOP_FOCUS:
        if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {
          activeElement$1 = targetNode;
          activeElementInst$1 = targetInst;
          lastSelection = null;
        }

        break;

      case TOP_BLUR:
        activeElement$1 = null;
        activeElementInst$1 = null;
        lastSelection = null;
        break;
      // Don't fire the event while the user is dragging. This matches the
      // semantics of the native select event.

      case TOP_MOUSE_DOWN:
        mouseDown = true;
        break;

      case TOP_CONTEXT_MENU:
      case TOP_MOUSE_UP:
      case TOP_DRAG_END:
        mouseDown = false;
        return constructSelectEvent(nativeEvent, nativeEventTarget);
      // Chrome and IE fire non-standard event when selection is changed (and
      // sometimes when it hasn't). IE's event fires out of order with respect
      // to key and input events on deletion, so we discard it.
      //
      // Firefox doesn't support selectionchange, so check selection status
      // after each key entry. The selection changes after keydown and before
      // keyup, but we check on keydown as well in the case of holding down a
      // key, when multiple keydown events are fired but only one keyup is.
      // This is also our approach for IE handling, for the reason above.

      case TOP_SELECTION_CHANGE:
        if (skipSelectionChangeEvent) {
          break;
        }

      // falls through

      case TOP_KEY_DOWN:
      case TOP_KEY_UP:
        return constructSelectEvent(nativeEvent, nativeEventTarget);
    }

    return null;
  }
};

/**
 * @interface Event
 * @see http://www.w3.org/TR/css3-animations/#AnimationEvent-interface
 * @see https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent
 */

var SyntheticAnimationEvent = SyntheticEvent.extend({
  animationName: null,
  elapsedTime: null,
  pseudoElement: null
});

/**
 * @interface Event
 * @see http://www.w3.org/TR/clipboard-apis/
 */

var SyntheticClipboardEvent = SyntheticEvent.extend({
  clipboardData: function (event) {
    return 'clipboardData' in event ? event.clipboardData : window.clipboardData;
  }
});

/**
 * @interface FocusEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */

var SyntheticFocusEvent = SyntheticUIEvent.extend({
  relatedTarget: null
});

/**
 * `charCode` represents the actual "character code" and is safe to use with
 * `String.fromCharCode`. As such, only keys that correspond to printable
 * characters produce a valid `charCode`, the only exception to this is Enter.
 * The Tab-key is considered non-printable and does not have a `charCode`,
 * presumably because it does not produce a tab-character in browsers.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {number} Normalized `charCode` property.
 */
function getEventCharCode(nativeEvent) {
  var charCode;
  var keyCode = nativeEvent.keyCode;

  if ('charCode' in nativeEvent) {
    charCode = nativeEvent.charCode; // FF does not set `charCode` for the Enter-key, check against `keyCode`.

    if (charCode === 0 && keyCode === 13) {
      charCode = 13;
    }
  } else {
    // IE8 does not implement `charCode`, but `keyCode` has the correct value.
    charCode = keyCode;
  } // IE and Edge (on Windows) and Chrome / Safari (on Windows and Linux)
  // report Enter as charCode 10 when ctrl is pressed.


  if (charCode === 10) {
    charCode = 13;
  } // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
  // Must not discard the (non-)printable Enter-key.


  if (charCode >= 32 || charCode === 13) {
    return charCode;
  }

  return 0;
}

/**
 * Normalization of deprecated HTML5 `key` values
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */

var normalizeKey = {
  Esc: 'Escape',
  Spacebar: ' ',
  Left: 'ArrowLeft',
  Up: 'ArrowUp',
  Right: 'ArrowRight',
  Down: 'ArrowDown',
  Del: 'Delete',
  Win: 'OS',
  Menu: 'ContextMenu',
  Apps: 'ContextMenu',
  Scroll: 'ScrollLock',
  MozPrintableKey: 'Unidentified'
};
/**
 * Translation from legacy `keyCode` to HTML5 `key`
 * Only special keys supported, all others depend on keyboard layout or browser
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */

var translateToKey = {
  '8': 'Backspace',
  '9': 'Tab',
  '12': 'Clear',
  '13': 'Enter',
  '16': 'Shift',
  '17': 'Control',
  '18': 'Alt',
  '19': 'Pause',
  '20': 'CapsLock',
  '27': 'Escape',
  '32': ' ',
  '33': 'PageUp',
  '34': 'PageDown',
  '35': 'End',
  '36': 'Home',
  '37': 'ArrowLeft',
  '38': 'ArrowUp',
  '39': 'ArrowRight',
  '40': 'ArrowDown',
  '45': 'Insert',
  '46': 'Delete',
  '112': 'F1',
  '113': 'F2',
  '114': 'F3',
  '115': 'F4',
  '116': 'F5',
  '117': 'F6',
  '118': 'F7',
  '119': 'F8',
  '120': 'F9',
  '121': 'F10',
  '122': 'F11',
  '123': 'F12',
  '144': 'NumLock',
  '145': 'ScrollLock',
  '224': 'Meta'
};
/**
 * @param {object} nativeEvent Native browser event.
 * @return {string} Normalized `key` property.
 */

function getEventKey(nativeEvent) {
  if (nativeEvent.key) {
    // Normalize inconsistent values reported by browsers due to
    // implementations of a working draft specification.
    // FireFox implements `key` but returns `MozPrintableKey` for all
    // printable characters (normalized to `Unidentified`), ignore it.
    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;

    if (key !== 'Unidentified') {
      return key;
    }
  } // Browser does not implement `key`, polyfill as much of it as we can.


  if (nativeEvent.type === 'keypress') {
    var charCode = getEventCharCode(nativeEvent); // The enter-key is technically both printable and non-printable and can
    // thus be captured by `keypress`, no other non-printable key should.

    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
  }

  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
    // While user keyboard layout determines the actual meaning of each
    // `keyCode` value, almost all function keys have a universal value.
    return translateToKey[nativeEvent.keyCode] || 'Unidentified';
  }

  return '';
}

/**
 * @interface KeyboardEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */

var SyntheticKeyboardEvent = SyntheticUIEvent.extend({
  key: getEventKey,
  location: null,
  ctrlKey: null,
  shiftKey: null,
  altKey: null,
  metaKey: null,
  repeat: null,
  locale: null,
  getModifierState: getEventModifierState,
  // Legacy Interface
  charCode: function (event) {
    // `charCode` is the result of a KeyPress event and represents the value of
    // the actual printable character.
    // KeyPress is deprecated, but its replacement is not yet final and not
    // implemented in any major browser. Only KeyPress has charCode.
    if (event.type === 'keypress') {
      return getEventCharCode(event);
    }

    return 0;
  },
  keyCode: function (event) {
    // `keyCode` is the result of a KeyDown/Up event and represents the value of
    // physical keyboard key.
    // The actual meaning of the value depends on the users' keyboard layout
    // which cannot be detected. Assuming that it is a US keyboard layout
    // provides a surprisingly accurate mapping for US and European users.
    // Due to this, it is left to the user to implement at this time.
    if (event.type === 'keydown' || event.type === 'keyup') {
      return event.keyCode;
    }

    return 0;
  },
  which: function (event) {
    // `which` is an alias for either `keyCode` or `charCode` depending on the
    // type of the event.
    if (event.type === 'keypress') {
      return getEventCharCode(event);
    }

    if (event.type === 'keydown' || event.type === 'keyup') {
      return event.keyCode;
    }

    return 0;
  }
});

/**
 * @interface DragEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */

var SyntheticDragEvent = SyntheticMouseEvent.extend({
  dataTransfer: null
});

/**
 * @interface TouchEvent
 * @see http://www.w3.org/TR/touch-events/
 */

var SyntheticTouchEvent = SyntheticUIEvent.extend({
  touches: null,
  targetTouches: null,
  changedTouches: null,
  altKey: null,
  metaKey: null,
  ctrlKey: null,
  shiftKey: null,
  getModifierState: getEventModifierState
});

/**
 * @interface Event
 * @see http://www.w3.org/TR/2009/WD-css3-transitions-20090320/#transition-events-
 * @see https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent
 */

var SyntheticTransitionEvent = SyntheticEvent.extend({
  propertyName: null,
  elapsedTime: null,
  pseudoElement: null
});

/**
 * @interface WheelEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */

var SyntheticWheelEvent = SyntheticMouseEvent.extend({
  deltaX: function (event) {
    return 'deltaX' in event ? event.deltaX : // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
    'wheelDeltaX' in event ? -event.wheelDeltaX : 0;
  },
  deltaY: function (event) {
    return 'deltaY' in event ? event.deltaY : // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
    'wheelDeltaY' in event ? -event.wheelDeltaY : // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
    'wheelDelta' in event ? -event.wheelDelta : 0;
  },
  deltaZ: null,
  // Browsers without "deltaMode" is reporting in raw wheel delta where one
  // notch on the scroll is always +/- 120, roughly equivalent to pixels.
  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
  deltaMode: null
});

var knownHTMLTopLevelTypes = [TOP_ABORT, TOP_CANCEL, TOP_CAN_PLAY, TOP_CAN_PLAY_THROUGH, TOP_CLOSE, TOP_DURATION_CHANGE, TOP_EMPTIED, TOP_ENCRYPTED, TOP_ENDED, TOP_ERROR, TOP_INPUT, TOP_INVALID, TOP_LOAD, TOP_LOADED_DATA, TOP_LOADED_METADATA, TOP_LOAD_START, TOP_PAUSE, TOP_PLAY, TOP_PLAYING, TOP_PROGRESS, TOP_RATE_CHANGE, TOP_RESET, TOP_SEEKED, TOP_SEEKING, TOP_STALLED, TOP_SUBMIT, TOP_SUSPEND, TOP_TIME_UPDATE, TOP_TOGGLE, TOP_VOLUME_CHANGE, TOP_WAITING];
var SimpleEventPlugin = {
  // simpleEventPluginEventTypes gets populated from
  // the DOMEventProperties module.
  eventTypes: simpleEventPluginEventTypes,
  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags) {
    var dispatchConfig = topLevelEventsToDispatchConfig.get(topLevelType);

    if (!dispatchConfig) {
      return null;
    }

    var EventConstructor;

    switch (topLevelType) {
      case TOP_KEY_PRESS:
        // Firefox creates a keypress event for function keys too. This removes
        // the unwanted keypress events. Enter is however both printable and
        // non-printable. One would expect Tab to be as well (but it isn't).
        if (getEventCharCode(nativeEvent) === 0) {
          return null;
        }

      /* falls through */

      case TOP_KEY_DOWN:
      case TOP_KEY_UP:
        EventConstructor = SyntheticKeyboardEvent;
        break;

      case TOP_BLUR:
      case TOP_FOCUS:
        EventConstructor = SyntheticFocusEvent;
        break;

      case TOP_CLICK:
        // Firefox creates a click event on right mouse clicks. This removes the
        // unwanted click events.
        if (nativeEvent.button === 2) {
          return null;
        }

      /* falls through */

      case TOP_AUX_CLICK:
      case TOP_DOUBLE_CLICK:
      case TOP_MOUSE_DOWN:
      case TOP_MOUSE_MOVE:
      case TOP_MOUSE_UP: // TODO: Disabled elements should not respond to mouse events

      /* falls through */

      case TOP_MOUSE_OUT:
      case TOP_MOUSE_OVER:
      case TOP_CONTEXT_MENU:
        EventConstructor = SyntheticMouseEvent;
        break;

      case TOP_DRAG:
      case TOP_DRAG_END:
      case TOP_DRAG_ENTER:
      case TOP_DRAG_EXIT:
      case TOP_DRAG_LEAVE:
      case TOP_DRAG_OVER:
      case TOP_DRAG_START:
      case TOP_DROP:
        EventConstructor = SyntheticDragEvent;
        break;

      case TOP_TOUCH_CANCEL:
      case TOP_TOUCH_END:
      case TOP_TOUCH_MOVE:
      case TOP_TOUCH_START:
        EventConstructor = SyntheticTouchEvent;
        break;

      case TOP_ANIMATION_END:
      case TOP_ANIMATION_ITERATION:
      case TOP_ANIMATION_START:
        EventConstructor = SyntheticAnimationEvent;
        break;

      case TOP_TRANSITION_END:
        EventConstructor = SyntheticTransitionEvent;
        break;

      case TOP_SCROLL:
        EventConstructor = SyntheticUIEvent;
        break;

      case TOP_WHEEL:
        EventConstructor = SyntheticWheelEvent;
        break;

      case TOP_COPY:
      case TOP_CUT:
      case TOP_PASTE:
        EventConstructor = SyntheticClipboardEvent;
        break;

      case TOP_GOT_POINTER_CAPTURE:
      case TOP_LOST_POINTER_CAPTURE:
      case TOP_POINTER_CANCEL:
      case TOP_POINTER_DOWN:
      case TOP_POINTER_MOVE:
      case TOP_POINTER_OUT:
      case TOP_POINTER_OVER:
      case TOP_POINTER_UP:
        EventConstructor = SyntheticPointerEvent;
        break;

      default:
        {
          if (knownHTMLTopLevelTypes.indexOf(topLevelType) === -1) {
            error('SimpleEventPlugin: Unhandled event type, `%s`. This warning ' + 'is likely caused by a bug in React. Please file an issue.', topLevelType);
          }
        } // HTML Events
        // @see http://www.w3.org/TR/html5/index.html#events-0


        EventConstructor = SyntheticEvent;
        break;
    }

    var event = EventConstructor.getPooled(dispatchConfig, targetInst, nativeEvent, nativeEventTarget);
    accumulateTwoPhaseDispatches(event);
    return event;
  }
};

/**
 * Specifies a deterministic ordering of `EventPlugin`s. A convenient way to
 * reason about plugins, without having to package every one of them. This
 * is better than having plugins be ordered in the same order that they
 * are injected because that ordering would be influenced by the packaging order.
 * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
 * preventing default on events is convenient in `SimpleEventPlugin` handlers.
 */

var DOMEventPluginOrder = ['ResponderEventPlugin', 'SimpleEventPlugin', 'EnterLeaveEventPlugin', 'ChangeEventPlugin', 'SelectEventPlugin', 'BeforeInputEventPlugin'];
/**
 * Inject modules for resolving DOM hierarchy and plugin ordering.
 */

injectEventPluginOrder(DOMEventPluginOrder);
setComponentTree(getFiberCurrentPropsFromNode$1, getInstanceFromNode$1, getNodeFromInstance$1);
/**
 * Some important event plugins included by default (without having to require
 * them).
 */

injectEventPluginsByName({
  SimpleEventPlugin: SimpleEventPlugin,
  EnterLeaveEventPlugin: EnterLeaveEventPlugin,
  ChangeEventPlugin: ChangeEventPlugin,
  SelectEventPlugin: SelectEventPlugin,
  BeforeInputEventPlugin: BeforeInputEventPlugin
});

// Prefix measurements so that it's possible to filter them.
// Longer prefixes are hard to read in DevTools.
var reactEmoji = "\u269B";
var warningEmoji = "\u26D4";
var supportsUserTiming = typeof performance !== 'undefined' && typeof performance.mark === 'function' && typeof performance.clearMarks === 'function' && typeof performance.measure === 'function' && typeof performance.clearMeasures === 'function'; // Keep track of current fiber so that we know the path to unwind on pause.
// TODO: this looks the same as nextUnitOfWork in scheduler. Can we unify them?

var currentFiber = null; // If we're in the middle of user code, which fiber and method is it?
// Reusing `currentFiber` would be confusing for this because user code fiber
// can change during commit phase too, but we don't need to unwind it (since
// lifecycles in the commit phase don't resemble a tree).

var currentPhase = null;
var currentPhaseFiber = null; // Did lifecycle hook schedule an update? This is often a performance problem,
// so we will keep track of it, and include it in the report.
// Track commits caused by cascading updates.

var isCommitting = false;
var hasScheduledUpdateInCurrentCommit = false;
var hasScheduledUpdateInCurrentPhase = false;
var commitCountInCurrentWorkLoop = 0;
var effectCountInCurrentCommit = 0;
// to avoid stretch the commit phase with measurement overhead.

var labelsInCurrentCommit = new Set();

var formatMarkName = function (markName) {
  return reactEmoji + " " + markName;
};

var formatLabel = function (label, warning) {
  var prefix = warning ? warningEmoji + " " : reactEmoji + " ";
  var suffix = warning ? " Warning: " + warning : '';
  return "" + prefix + label + suffix;
};

var beginMark = function (markName) {
  performance.mark(formatMarkName(markName));
};

var clearMark = function (markName) {
  performance.clearMarks(formatMarkName(markName));
};

var endMark = function (label, markName, warning) {
  var formattedMarkName = formatMarkName(markName);
  var formattedLabel = formatLabel(label, warning);

  try {
    performance.measure(formattedLabel, formattedMarkName);
  } catch (err) {} // If previous mark was missing for some reason, this will throw.
  // This could only happen if React crashed in an unexpected place earlier.
  // Don't pile on with more errors.
  // Clear marks immediately to avoid growing buffer.


  performance.clearMarks(formattedMarkName);
  performance.clearMeasures(formattedLabel);
};

var getFiberMarkName = function (label, debugID) {
  return label + " (#" + debugID + ")";
};

var getFiberLabel = function (componentName, isMounted, phase) {
  if (phase === null) {
    // These are composite component total time measurements.
    return componentName + " [" + (isMounted ? 'update' : 'mount') + "]";
  } else {
    // Composite component methods.
    return componentName + "." + phase;
  }
};

var beginFiberMark = function (fiber, phase) {
  var componentName = getComponentName(fiber.type) || 'Unknown';
  var debugID = fiber._debugID;
  var isMounted = fiber.alternate !== null;
  var label = getFiberLabel(componentName, isMounted, phase);

  if (isCommitting && labelsInCurrentCommit.has(label)) {
    // During the commit phase, we don't show duplicate labels because
    // there is a fixed overhead for every measurement, and we don't
    // want to stretch the commit phase beyond necessary.
    return false;
  }

  labelsInCurrentCommit.add(label);
  var markName = getFiberMarkName(label, debugID);
  beginMark(markName);
  return true;
};

var clearFiberMark = function (fiber, phase) {
  var componentName = getComponentName(fiber.type) || 'Unknown';
  var debugID = fiber._debugID;
  var isMounted = fiber.alternate !== null;
  var label = getFiberLabel(componentName, isMounted, phase);
  var markName = getFiberMarkName(label, debugID);
  clearMark(markName);
};

var endFiberMark = function (fiber, phase, warning) {
  var componentName = getComponentName(fiber.type) || 'Unknown';
  var debugID = fiber._debugID;
  var isMounted = fiber.alternate !== null;
  var label = getFiberLabel(componentName, isMounted, phase);
  var markName = getFiberMarkName(label, debugID);
  endMark(label, markName, warning);
};

var shouldIgnoreFiber = function (fiber) {
  // Host components should be skipped in the timeline.
  // We could check typeof fiber.type, but does this work with RN?
  switch (fiber.tag) {
    case HostRoot:
    case HostComponent:
    case HostText:
    case HostPortal:
    case Fragment:
    case ContextProvider:
    case ContextConsumer:
    case Mode:
      return true;

    default:
      return false;
  }
};

var clearPendingPhaseMeasurement = function () {
  if (currentPhase !== null && currentPhaseFiber !== null) {
    clearFiberMark(currentPhaseFiber, currentPhase);
  }

  currentPhaseFiber = null;
  currentPhase = null;
  hasScheduledUpdateInCurrentPhase = false;
};

var pauseTimers = function () {
  // Stops all currently active measurements so that they can be resumed
  // if we continue in a later deferred loop from the same unit of work.
  var fiber = currentFiber;

  while (fiber) {
    if (fiber._debugIsCurrentlyTiming) {
      endFiberMark(fiber, null, null);
    }

    fiber = fiber.return;
  }
};

var resumeTimersRecursively = function (fiber) {
  if (fiber.return !== null) {
    resumeTimersRecursively(fiber.return);
  }

  if (fiber._debugIsCurrentlyTiming) {
    beginFiberMark(fiber, null);
  }
};

var resumeTimers = function () {
  // Resumes all measurements that were active during the last deferred loop.
  if (currentFiber !== null) {
    resumeTimersRecursively(currentFiber);
  }
};

function recordEffect() {
  {
    effectCountInCurrentCommit++;
  }
}
function recordScheduleUpdate() {
  {
    if (isCommitting) {
      hasScheduledUpdateInCurrentCommit = true;
    }

    if (currentPhase !== null && currentPhase !== 'componentWillMount' && currentPhase !== 'componentWillReceiveProps') {
      hasScheduledUpdateInCurrentPhase = true;
    }
  }
}
function startWorkTimer(fiber) {
  {
    if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
      return;
    } // If we pause, this is the fiber to unwind from.


    currentFiber = fiber;

    if (!beginFiberMark(fiber, null)) {
      return;
    }

    fiber._debugIsCurrentlyTiming = true;
  }
}
function cancelWorkTimer(fiber) {
  {
    if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
      return;
    } // Remember we shouldn't complete measurement for this fiber.
    // Otherwise flamechart will be deep even for small updates.


    fiber._debugIsCurrentlyTiming = false;
    clearFiberMark(fiber, null);
  }
}
function stopWorkTimer(fiber) {
  {
    if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
      return;
    } // If we pause, its parent is the fiber to unwind from.


    currentFiber = fiber.return;

    if (!fiber._debugIsCurrentlyTiming) {
      return;
    }

    fiber._debugIsCurrentlyTiming = false;
    endFiberMark(fiber, null, null);
  }
}
function stopFailedWorkTimer(fiber) {
  {
    if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
      return;
    } // If we pause, its parent is the fiber to unwind from.


    currentFiber = fiber.return;

    if (!fiber._debugIsCurrentlyTiming) {
      return;
    }

    fiber._debugIsCurrentlyTiming = false;
    var warning = fiber.tag === SuspenseComponent ? 'Rendering was suspended' : 'An error was thrown inside this error boundary';
    endFiberMark(fiber, null, warning);
  }
}
function startPhaseTimer(fiber, phase) {
  {
    if (!supportsUserTiming) {
      return;
    }

    clearPendingPhaseMeasurement();

    if (!beginFiberMark(fiber, phase)) {
      return;
    }

    currentPhaseFiber = fiber;
    currentPhase = phase;
  }
}
function stopPhaseTimer() {
  {
    if (!supportsUserTiming) {
      return;
    }

    if (currentPhase !== null && currentPhaseFiber !== null) {
      var warning = hasScheduledUpdateInCurrentPhase ? 'Scheduled a cascading update' : null;
      endFiberMark(currentPhaseFiber, currentPhase, warning);
    }

    currentPhase = null;
    currentPhaseFiber = null;
  }
}
function startWorkLoopTimer(nextUnitOfWork) {
  {
    currentFiber = nextUnitOfWork;

    if (!supportsUserTiming) {
      return;
    }

    commitCountInCurrentWorkLoop = 0; // This is top level call.
    // Any other measurements are performed within.

    beginMark('(React Tree Reconciliation)'); // Resume any measurements that were in progress during the last loop.

    resumeTimers();
  }
}
function stopWorkLoopTimer(interruptedBy, didCompleteRoot) {
  {
    if (!supportsUserTiming) {
      return;
    }

    var warning = null;

    if (interruptedBy !== null) {
      if (interruptedBy.tag === HostRoot) {
        warning = 'A top-level update interrupted the previous render';
      } else {
        var componentName = getComponentName(interruptedBy.type) || 'Unknown';
        warning = "An update to " + componentName + " interrupted the previous render";
      }
    } else if (commitCountInCurrentWorkLoop > 1) {
      warning = 'There were cascading updates';
    }

    commitCountInCurrentWorkLoop = 0;
    var label = didCompleteRoot ? '(React Tree Reconciliation: Completed Root)' : '(React Tree Reconciliation: Yielded)'; // Pause any measurements until the next loop.

    pauseTimers();
    endMark(label, '(React Tree Reconciliation)', warning);
  }
}
function startCommitTimer() {
  {
    if (!supportsUserTiming) {
      return;
    }

    isCommitting = true;
    hasScheduledUpdateInCurrentCommit = false;
    labelsInCurrentCommit.clear();
    beginMark('(Committing Changes)');
  }
}
function stopCommitTimer() {
  {
    if (!supportsUserTiming) {
      return;
    }

    var warning = null;

    if (hasScheduledUpdateInCurrentCommit) {
      warning = 'Lifecycle hook scheduled a cascading update';
    } else if (commitCountInCurrentWorkLoop > 0) {
      warning = 'Caused by a cascading update in earlier commit';
    }

    hasScheduledUpdateInCurrentCommit = false;
    commitCountInCurrentWorkLoop++;
    isCommitting = false;
    labelsInCurrentCommit.clear();
    endMark('(Committing Changes)', '(Committing Changes)', warning);
  }
}
function startCommitSnapshotEffectsTimer() {
  {
    if (!supportsUserTiming) {
      return;
    }

    effectCountInCurrentCommit = 0;
    beginMark('(Committing Snapshot Effects)');
  }
}
function stopCommitSnapshotEffectsTimer() {
  {
    if (!supportsUserTiming) {
      return;
    }

    var count = effectCountInCurrentCommit;
    effectCountInCurrentCommit = 0;
    endMark("(Committing Snapshot Effects: " + count + " Total)", '(Committing Snapshot Effects)', null);
  }
}
function startCommitHostEffectsTimer() {
  {
    if (!supportsUserTiming) {
      return;
    }

    effectCountInCurrentCommit = 0;
    beginMark('(Committing Host Effects)');
  }
}
function stopCommitHostEffectsTimer() {
  {
    if (!supportsUserTiming) {
      return;
    }

    var count = effectCountInCurrentCommit;
    effectCountInCurrentCommit = 0;
    endMark("(Committing Host Effects: " + count + " Total)", '(Committing Host Effects)', null);
  }
}
function startCommitLifeCyclesTimer() {
  {
    if (!supportsUserTiming) {
      return;
    }

    effectCountInCurrentCommit = 0;
    beginMark('(Calling Lifecycle Methods)');
  }
}
function stopCommitLifeCyclesTimer() {
  {
    if (!supportsUserTiming) {
      return;
    }

    var count = effectCountInCurrentCommit;
    effectCountInCurrentCommit = 0;
    endMark("(Calling Lifecycle Methods: " + count + " Total)", '(Calling Lifecycle Methods)', null);
  }
}

var valueStack = [];
var fiberStack;

{
  fiberStack = [];
}

var index = -1;

function createCursor(defaultValue) {
  return {
    current: defaultValue
  };
}

function pop(cursor, fiber) {
  if (index < 0) {
    {
      error('Unexpected pop.');
    }

    return;
  }

  {
    if (fiber !== fiberStack[index]) {
      error('Unexpected Fiber popped.');
    }
  }

  cursor.current = valueStack[index];
  valueStack[index] = null;

  {
    fiberStack[index] = null;
  }

  index--;
}

function push(cursor, value, fiber) {
  index++;
  valueStack[index] = cursor.current;

  {
    fiberStack[index] = fiber;
  }

  cursor.current = value;
}

var warnedAboutMissingGetChildContext;

{
  warnedAboutMissingGetChildContext = {};
}

var emptyContextObject = {};

{
  Object.freeze(emptyContextObject);
} // A cursor to the current merged context object on the stack.


var contextStackCursor = createCursor(emptyContextObject); // A cursor to a boolean indicating whether the context has changed.

var didPerformWorkStackCursor = createCursor(false); // Keep track of the previous context object that was on the stack.
// We use this to get access to the parent context after we have already
// pushed the next context provider, and now need to merge their contexts.

var previousContext = emptyContextObject;

function getUnmaskedContext(workInProgress, Component, didPushOwnContextIfProvider) {
  {
    if (didPushOwnContextIfProvider && isContextProvider(Component)) {
      // If the fiber is a context provider itself, when we read its context
      // we may have already pushed its own child context on the stack. A context
      // provider should not "see" its own child context. Therefore we read the
      // previous (parent) context instead for a context provider.
      return previousContext;
    }

    return contextStackCursor.current;
  }
}

function cacheContext(workInProgress, unmaskedContext, maskedContext) {
  {
    var instance = workInProgress.stateNode;
    instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
    instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
  }
}

function getMaskedContext(workInProgress, unmaskedContext) {
  {
    var type = workInProgress.type;
    var contextTypes = type.contextTypes;

    if (!contextTypes) {
      return emptyContextObject;
    } // Avoid recreating masked context unless unmasked context has changed.
    // Failing to do this will result in unnecessary calls to componentWillReceiveProps.
    // This may trigger infinite loops if componentWillReceiveProps calls setState.


    var instance = workInProgress.stateNode;

    if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
      return instance.__reactInternalMemoizedMaskedChildContext;
    }

    var context = {};

    for (var key in contextTypes) {
      context[key] = unmaskedContext[key];
    }

    {
      var name = getComponentName(type) || 'Unknown';
      checkPropTypes(contextTypes, context, 'context', name, getCurrentFiberStackInDev);
    } // Cache unmasked context so we can avoid recreating masked context unless necessary.
    // Context is created before the class component is instantiated so check for instance.


    if (instance) {
      cacheContext(workInProgress, unmaskedContext, context);
    }

    return context;
  }
}

function hasContextChanged() {
  {
    return didPerformWorkStackCursor.current;
  }
}

function isContextProvider(type) {
  {
    var childContextTypes = type.childContextTypes;
    return childContextTypes !== null && childContextTypes !== undefined;
  }
}

function popContext(fiber) {
  {
    pop(didPerformWorkStackCursor, fiber);
    pop(contextStackCursor, fiber);
  }
}

function popTopLevelContextObject(fiber) {
  {
    pop(didPerformWorkStackCursor, fiber);
    pop(contextStackCursor, fiber);
  }
}

function pushTopLevelContextObject(fiber, context, didChange) {
  {
    if (!(contextStackCursor.current === emptyContextObject)) {
      {
        throw Error( "Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue." );
      }
    }

    push(contextStackCursor, context, fiber);
    push(didPerformWorkStackCursor, didChange, fiber);
  }
}

function processChildContext(fiber, type, parentContext) {
  {
    var instance = fiber.stateNode;
    var childContextTypes = type.childContextTypes; // TODO (bvaughn) Replace this behavior with an invariant() in the future.
    // It has only been added in Fiber to match the (unintentional) behavior in Stack.

    if (typeof instance.getChildContext !== 'function') {
      {
        var componentName = getComponentName(type) || 'Unknown';

        if (!warnedAboutMissingGetChildContext[componentName]) {
          warnedAboutMissingGetChildContext[componentName] = true;

          error('%s.childContextTypes is specified but there is no getChildContext() method ' + 'on the instance. You can either define getChildContext() on %s or remove ' + 'childContextTypes from it.', componentName, componentName);
        }
      }

      return parentContext;
    }

    var childContext;
    startPhaseTimer(fiber, 'getChildContext');
    childContext = instance.getChildContext();
    stopPhaseTimer();

    for (var contextKey in childContext) {
      if (!(contextKey in childContextTypes)) {
        {
          throw Error( (getComponentName(type) || 'Unknown') + ".getChildContext(): key \"" + contextKey + "\" is not defined in childContextTypes." );
        }
      }
    }

    {
      var name = getComponentName(type) || 'Unknown';
      checkPropTypes(childContextTypes, childContext, 'child context', name, // In practice, there is one case in which we won't get a stack. It's when
      // somebody calls unstable_renderSubtreeIntoContainer() and we process
      // context from the parent component instance. The stack will be missing
      // because it's outside of the reconciliation, and so the pointer has not
      // been set. This is rare and doesn't matter. We'll also remove that API.
      getCurrentFiberStackInDev);
    }

    return _assign({}, parentContext, {}, childContext);
  }
}

function pushContextProvider(workInProgress) {
  {
    var instance = workInProgress.stateNode; // We push the context as early as possible to ensure stack integrity.
    // If the instance does not exist yet, we will push null at first,
    // and replace it on the stack later when invalidating the context.

    var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject; // Remember the parent context so we can merge with it later.
    // Inherit the parent's did-perform-work value to avoid inadvertently blocking updates.

    previousContext = contextStackCursor.current;
    push(contextStackCursor, memoizedMergedChildContext, workInProgress);
    push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress);
    return true;
  }
}

function invalidateContextProvider(workInProgress, type, didChange) {
  {
    var instance = workInProgress.stateNode;

    if (!instance) {
      {
        throw Error( "Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue." );
      }
    }

    if (didChange) {
      // Merge parent and own context.
      // Skip this if we're not updating due to sCU.
      // This avoids unnecessarily recomputing memoized values.
      var mergedContext = processChildContext(workInProgress, type, previousContext);
      instance.__reactInternalMemoizedMergedChildContext = mergedContext; // Replace the old (or empty) context with the new one.
      // It is important to unwind the context in the reverse order.

      pop(didPerformWorkStackCursor, workInProgress);
      pop(contextStackCursor, workInProgress); // Now push the new context and mark that it has changed.

      push(contextStackCursor, mergedContext, workInProgress);
      push(didPerformWorkStackCursor, didChange, workInProgress);
    } else {
      pop(didPerformWorkStackCursor, workInProgress);
      push(didPerformWorkStackCursor, didChange, workInProgress);
    }
  }
}

function findCurrentUnmaskedContext(fiber) {
  {
    // Currently this is only used with renderSubtreeIntoContainer; not sure if it
    // makes sense elsewhere
    if (!(isFiberMounted(fiber) && fiber.tag === ClassComponent)) {
      {
        throw Error( "Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue." );
      }
    }

    var node = fiber;

    do {
      switch (node.tag) {
        case HostRoot:
          return node.stateNode.context;

        case ClassComponent:
          {
            var Component = node.type;

            if (isContextProvider(Component)) {
              return node.stateNode.__reactInternalMemoizedMergedChildContext;
            }

            break;
          }
      }

      node = node.return;
    } while (node !== null);

    {
      {
        throw Error( "Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue." );
      }
    }
  }
}

var LegacyRoot = 0;
var BlockingRoot = 1;
var ConcurrentRoot = 2;

var Scheduler_runWithPriority = Scheduler.unstable_runWithPriority,
    Scheduler_scheduleCallback = Scheduler.unstable_scheduleCallback,
    Scheduler_cancelCallback = Scheduler.unstable_cancelCallback,
    Scheduler_shouldYield = Scheduler.unstable_shouldYield,
    Scheduler_requestPaint = Scheduler.unstable_requestPaint,
    Scheduler_now = Scheduler.unstable_now,
    Scheduler_getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel,
    Scheduler_ImmediatePriority = Scheduler.unstable_ImmediatePriority,
    Scheduler_UserBlockingPriority = Scheduler.unstable_UserBlockingPriority,
    Scheduler_NormalPriority = Scheduler.unstable_NormalPriority,
    Scheduler_LowPriority = Scheduler.unstable_LowPriority,
    Scheduler_IdlePriority = Scheduler.unstable_IdlePriority;

{
  // Provide explicit error message when production+profiling bundle of e.g.
  // react-dom is used with production (non-profiling) bundle of
  // scheduler/tracing
  if (!(tracing.__interactionsRef != null && tracing.__interactionsRef.current != null)) {
    {
      throw Error( "It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at http://fb.me/react-profiling" );
    }
  }
}

var fakeCallbackNode = {}; // Except for NoPriority, these correspond to Scheduler priorities. We use
// ascending numbers so we can compare them like numbers. They start at 90 to
// avoid clashing with Scheduler's priorities.

var ImmediatePriority = 99;
var UserBlockingPriority$1 = 98;
var NormalPriority = 97;
var LowPriority = 96;
var IdlePriority = 95; // NoPriority is the absence of priority. Also React-only.

var NoPriority = 90;
var shouldYield = Scheduler_shouldYield;
var requestPaint = // Fall back gracefully if we're running an older version of Scheduler.
Scheduler_requestPaint !== undefined ? Scheduler_requestPaint : function () {};
var syncQueue = null;
var immediateQueueCallbackNode = null;
var isFlushingSyncQueue = false;
var initialTimeMs = Scheduler_now(); // If the initial timestamp is reasonably small, use Scheduler's `now` directly.
// This will be the case for modern browsers that support `performance.now`. In
// older browsers, Scheduler falls back to `Date.now`, which returns a Unix
// timestamp. In that case, subtract the module initialization time to simulate
// the behavior of performance.now and keep our times small enough to fit
// within 32 bits.
// TODO: Consider lifting this into Scheduler.

var now = initialTimeMs < 10000 ? Scheduler_now : function () {
  return Scheduler_now() - initialTimeMs;
};
function getCurrentPriorityLevel() {
  switch (Scheduler_getCurrentPriorityLevel()) {
    case Scheduler_ImmediatePriority:
      return ImmediatePriority;

    case Scheduler_UserBlockingPriority:
      return UserBlockingPriority$1;

    case Scheduler_NormalPriority:
      return NormalPriority;

    case Scheduler_LowPriority:
      return LowPriority;

    case Scheduler_IdlePriority:
      return IdlePriority;

    default:
      {
        {
          throw Error( "Unknown priority level." );
        }
      }

  }
}

function reactPriorityToSchedulerPriority(reactPriorityLevel) {
  switch (reactPriorityLevel) {
    case ImmediatePriority:
      return Scheduler_ImmediatePriority;

    case UserBlockingPriority$1:
      return Scheduler_UserBlockingPriority;

    case NormalPriority:
      return Scheduler_NormalPriority;

    case LowPriority:
      return Scheduler_LowPriority;

    case IdlePriority:
      return Scheduler_IdlePriority;

    default:
      {
        {
          throw Error( "Unknown priority level." );
        }
      }

  }
}

function runWithPriority$1(reactPriorityLevel, fn) {
  var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
  return Scheduler_runWithPriority(priorityLevel, fn);
}
function scheduleCallback(reactPriorityLevel, callback, options) {
  var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
  return Scheduler_scheduleCallback(priorityLevel, callback, options);
}
function scheduleSyncCallback(callback) {
  // Push this callback into an internal queue. We'll flush these either in
  // the next tick, or earlier if something calls `flushSyncCallbackQueue`.
  if (syncQueue === null) {
    syncQueue = [callback]; // Flush the queue in the next tick, at the earliest.

    immediateQueueCallbackNode = Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueueImpl);
  } else {
    // Push onto existing queue. Don't need to schedule a callback because
    // we already scheduled one when we created the queue.
    syncQueue.push(callback);
  }

  return fakeCallbackNode;
}
function cancelCallback(callbackNode) {
  if (callbackNode !== fakeCallbackNode) {
    Scheduler_cancelCallback(callbackNode);
  }
}
function flushSyncCallbackQueue() {
  if (immediateQueueCallbackNode !== null) {
    var node = immediateQueueCallbackNode;
    immediateQueueCallbackNode = null;
    Scheduler_cancelCallback(node);
  }

  flushSyncCallbackQueueImpl();
}

function flushSyncCallbackQueueImpl() {
  if (!isFlushingSyncQueue && syncQueue !== null) {
    // Prevent re-entrancy.
    isFlushingSyncQueue = true;
    var i = 0;

    try {
      var _isSync = true;
      var queue = syncQueue;
      runWithPriority$1(ImmediatePriority, function () {
        for (; i < queue.length; i++) {
          var callback = queue[i];

          do {
            callback = callback(_isSync);
          } while (callback !== null);
        }
      });
      syncQueue = null;
    } catch (error) {
      // If something throws, leave the remaining callbacks on the queue.
      if (syncQueue !== null) {
        syncQueue = syncQueue.slice(i + 1);
      } // Resume flushing in the next tick


      Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueue);
      throw error;
    } finally {
      isFlushingSyncQueue = false;
    }
  }
}

var NoMode = 0;
var StrictMode = 1; // TODO: Remove BlockingMode and ConcurrentMode by reading from the root
// tag instead

var BlockingMode = 2;
var ConcurrentMode = 4;
var ProfileMode = 8;

// Max 31 bit integer. The max integer size in V8 for 32-bit systems.
// Math.pow(2, 30) - 1
// 0b111111111111111111111111111111
var MAX_SIGNED_31_BIT_INT = 1073741823;

var NoWork = 0; // TODO: Think of a better name for Never. The key difference with Idle is that
// Never work can be committed in an inconsistent state without tearing the UI.
// The main example is offscreen content, like a hidden subtree. So one possible
// name is Offscreen. However, it also includes dehydrated Suspense boundaries,
// which are inconsistent in the sense that they haven't finished yet, but
// aren't visibly inconsistent because the server rendered HTML matches what the
// hydrated tree would look like.

var Never = 1; // Idle is slightly higher priority than Never. It must completely finish in
// order to be consistent.

var Idle = 2; // Continuous Hydration is slightly higher than Idle and is used to increase
// priority of hover targets.

var ContinuousHydration = 3;
var Sync = MAX_SIGNED_31_BIT_INT;
var Batched = Sync - 1;
var UNIT_SIZE = 10;
var MAGIC_NUMBER_OFFSET = Batched - 1; // 1 unit of expiration time represents 10ms.

function msToExpirationTime(ms) {
  // Always subtract from the offset so that we don't clash with the magic number for NoWork.
  return MAGIC_NUMBER_OFFSET - (ms / UNIT_SIZE | 0);
}
function expirationTimeToMs(expirationTime) {
  return (MAGIC_NUMBER_OFFSET - expirationTime) * UNIT_SIZE;
}

function ceiling(num, precision) {
  return ((num / precision | 0) + 1) * precision;
}

function computeExpirationBucket(currentTime, expirationInMs, bucketSizeMs) {
  return MAGIC_NUMBER_OFFSET - ceiling(MAGIC_NUMBER_OFFSET - currentTime + expirationInMs / UNIT_SIZE, bucketSizeMs / UNIT_SIZE);
} // TODO: This corresponds to Scheduler's NormalPriority, not LowPriority. Update
// the names to reflect.


var LOW_PRIORITY_EXPIRATION = 5000;
var LOW_PRIORITY_BATCH_SIZE = 250;
function computeAsyncExpiration(currentTime) {
  return computeExpirationBucket(currentTime, LOW_PRIORITY_EXPIRATION, LOW_PRIORITY_BATCH_SIZE);
}
function computeSuspenseExpiration(currentTime, timeoutMs) {
  // TODO: Should we warn if timeoutMs is lower than the normal pri expiration time?
  return computeExpirationBucket(currentTime, timeoutMs, LOW_PRIORITY_BATCH_SIZE);
} // We intentionally set a higher expiration time for interactive updates in
// dev than in production.
//
// If the main thread is being blocked so long that you hit the expiration,
// it's a problem that could be solved with better scheduling.
//
// People will be more likely to notice this and fix it with the long
// expiration time in development.
//
// In production we opt for better UX at the risk of masking scheduling
// problems, by expiring fast.

var HIGH_PRIORITY_EXPIRATION =  500 ;
var HIGH_PRIORITY_BATCH_SIZE = 100;
function computeInteractiveExpiration(currentTime) {
  return computeExpirationBucket(currentTime, HIGH_PRIORITY_EXPIRATION, HIGH_PRIORITY_BATCH_SIZE);
}
function inferPriorityFromExpirationTime(currentTime, expirationTime) {
  if (expirationTime === Sync) {
    return ImmediatePriority;
  }

  if (expirationTime === Never || expirationTime === Idle) {
    return IdlePriority;
  }

  var msUntil = expirationTimeToMs(expirationTime) - expirationTimeToMs(currentTime);

  if (msUntil <= 0) {
    return ImmediatePriority;
  }

  if (msUntil <= HIGH_PRIORITY_EXPIRATION + HIGH_PRIORITY_BATCH_SIZE) {
    return UserBlockingPriority$1;
  }

  if (msUntil <= LOW_PRIORITY_EXPIRATION + LOW_PRIORITY_BATCH_SIZE) {
    return NormalPriority;
  } // TODO: Handle LowPriority
  // Assume anything lower has idle priority


  return IdlePriority;
}

var ReactStrictModeWarnings = {
  recordUnsafeLifecycleWarnings: function (fiber, instance) {},
  flushPendingUnsafeLifecycleWarnings: function () {},
  recordLegacyContextWarning: function (fiber, instance) {},
  flushLegacyContextWarning: function () {},
  discardPendingWarnings: function () {}
};

{
  var findStrictRoot = function (fiber) {
    var maybeStrictRoot = null;
    var node = fiber;

    while (node !== null) {
      if (node.mode & StrictMode) {
        maybeStrictRoot = node;
      }

      node = node.return;
    }

    return maybeStrictRoot;
  };

  var setToSortedString = function (set) {
    var array = [];
    set.forEach(function (value) {
      array.push(value);
    });
    return array.sort().join(', ');
  };

  var pendingComponentWillMountWarnings = [];
  var pendingUNSAFE_ComponentWillMountWarnings = [];
  var pendingComponentWillReceivePropsWarnings = [];
  var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
  var pendingComponentWillUpdateWarnings = [];
  var pendingUNSAFE_ComponentWillUpdateWarnings = []; // Tracks components we have already warned about.

  var didWarnAboutUnsafeLifecycles = new Set();

  ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function (fiber, instance) {
    // Dedup strategy: Warn once per component.
    if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
      return;
    }

    if (typeof instance.componentWillMount === 'function' && // Don't warn about react-lifecycles-compat polyfilled components.
    instance.componentWillMount.__suppressDeprecationWarning !== true) {
      pendingComponentWillMountWarnings.push(fiber);
    }

    if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillMount === 'function') {
      pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
    }

    if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
      pendingComponentWillReceivePropsWarnings.push(fiber);
    }

    if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
      pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
    }

    if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
      pendingComponentWillUpdateWarnings.push(fiber);
    }

    if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillUpdate === 'function') {
      pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
    }
  };

  ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function () {
    // We do an initial pass to gather component names
    var componentWillMountUniqueNames = new Set();

    if (pendingComponentWillMountWarnings.length > 0) {
      pendingComponentWillMountWarnings.forEach(function (fiber) {
        componentWillMountUniqueNames.add(getComponentName(fiber.type) || 'Component');
        didWarnAboutUnsafeLifecycles.add(fiber.type);
      });
      pendingComponentWillMountWarnings = [];
    }

    var UNSAFE_componentWillMountUniqueNames = new Set();

    if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
      pendingUNSAFE_ComponentWillMountWarnings.forEach(function (fiber) {
        UNSAFE_componentWillMountUniqueNames.add(getComponentName(fiber.type) || 'Component');
        didWarnAboutUnsafeLifecycles.add(fiber.type);
      });
      pendingUNSAFE_ComponentWillMountWarnings = [];
    }

    var componentWillReceivePropsUniqueNames = new Set();

    if (pendingComponentWillReceivePropsWarnings.length > 0) {
      pendingComponentWillReceivePropsWarnings.forEach(function (fiber) {
        componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || 'Component');
        didWarnAboutUnsafeLifecycles.add(fiber.type);
      });
      pendingComponentWillReceivePropsWarnings = [];
    }

    var UNSAFE_componentWillReceivePropsUniqueNames = new Set();

    if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
      pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function (fiber) {
        UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || 'Component');
        didWarnAboutUnsafeLifecycles.add(fiber.type);
      });
      pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
    }

    var componentWillUpdateUniqueNames = new Set();

    if (pendingComponentWillUpdateWarnings.length > 0) {
      pendingComponentWillUpdateWarnings.forEach(function (fiber) {
        componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || 'Component');
        didWarnAboutUnsafeLifecycles.add(fiber.type);
      });
      pendingComponentWillUpdateWarnings = [];
    }

    var UNSAFE_componentWillUpdateUniqueNames = new Set();

    if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
      pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function (fiber) {
        UNSAFE_componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || 'Component');
        didWarnAboutUnsafeLifecycles.add(fiber.type);
      });
      pendingUNSAFE_ComponentWillUpdateWarnings = [];
    } // Finally, we flush all the warnings
    // UNSAFE_ ones before the deprecated ones, since they'll be 'louder'


    if (UNSAFE_componentWillMountUniqueNames.size > 0) {
      var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);

      error('Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. ' + 'See https://fb.me/react-unsafe-component-lifecycles for details.\n\n' + '* Move code with side effects to componentDidMount, and set initial state in the constructor.\n' + '\nPlease update the following components: %s', sortedNames);
    }

    if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
      var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);

      error('Using UNSAFE_componentWillReceiveProps in strict mode is not recommended ' + 'and may indicate bugs in your code. ' + 'See https://fb.me/react-unsafe-component-lifecycles for details.\n\n' + '* Move data fetching code or side effects to componentDidUpdate.\n' + "* If you're updating state whenever props change, " + 'refactor your code to use memoization techniques or move it to ' + 'static getDerivedStateFromProps. Learn more at: https://fb.me/react-derived-state\n' + '\nPlease update the following components: %s', _sortedNames);
    }

    if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
      var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);

      error('Using UNSAFE_componentWillUpdate in strict mode is not recommended ' + 'and may indicate bugs in your code. ' + 'See https://fb.me/react-unsafe-component-lifecycles for details.\n\n' + '* Move data fetching code or side effects to componentDidUpdate.\n' + '\nPlease update the following components: %s', _sortedNames2);
    }

    if (componentWillMountUniqueNames.size > 0) {
      var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);

      warn('componentWillMount has been renamed, and is not recommended for use. ' + 'See https://fb.me/react-unsafe-component-lifecycles for details.\n\n' + '* Move code with side effects to componentDidMount, and set initial state in the constructor.\n' + '* Rename componentWillMount to UNSAFE_componentWillMount to suppress ' + 'this warning in non-strict mode. In React 17.x, only the UNSAFE_ name will work. ' + 'To rename all deprecated lifecycles to their new names, you can run ' + '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n' + '\nPlease update the following components: %s', _sortedNames3);
    }

    if (componentWillReceivePropsUniqueNames.size > 0) {
      var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);

      warn('componentWillReceiveProps has been renamed, and is not recommended for use. ' + 'See https://fb.me/react-unsafe-component-lifecycles for details.\n\n' + '* Move data fetching code or side effects to componentDidUpdate.\n' + "* If you're updating state whenever props change, refactor your " + 'code to use memoization techniques or move it to ' + 'static getDerivedStateFromProps. Learn more at: https://fb.me/react-derived-state\n' + '* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress ' + 'this warning in non-strict mode. In React 17.x, only the UNSAFE_ name will work. ' + 'To rename all deprecated lifecycles to their new names, you can run ' + '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n' + '\nPlease update the following components: %s', _sortedNames4);
    }

    if (componentWillUpdateUniqueNames.size > 0) {
      var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);

      warn('componentWillUpdate has been renamed, and is not recommended for use. ' + 'See https://fb.me/react-unsafe-component-lifecycles for details.\n\n' + '* Move data fetching code or side effects to componentDidUpdate.\n' + '* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress ' + 'this warning in non-strict mode. In React 17.x, only the UNSAFE_ name will work. ' + 'To rename all deprecated lifecycles to their new names, you can run ' + '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n' + '\nPlease update the following components: %s', _sortedNames5);
    }
  };

  var pendingLegacyContextWarning = new Map(); // Tracks components we have already warned about.

  var didWarnAboutLegacyContext = new Set();

  ReactStrictModeWarnings.recordLegacyContextWarning = function (fiber, instance) {
    var strictRoot = findStrictRoot(fiber);

    if (strictRoot === null) {
      error('Expected to find a StrictMode component in a strict mode tree. ' + 'This error is likely caused by a bug in React. Please file an issue.');

      return;
    } // Dedup strategy: Warn once per component.


    if (didWarnAboutLegacyContext.has(fiber.type)) {
      return;
    }

    var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);

    if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === 'function') {
      if (warningsForRoot === undefined) {
        warningsForRoot = [];
        pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
      }

      warningsForRoot.push(fiber);
    }
  };

  ReactStrictModeWarnings.flushLegacyContextWarning = function () {
    pendingLegacyContextWarning.forEach(function (fiberArray, strictRoot) {
      if (fiberArray.length === 0) {
        return;
      }

      var firstFiber = fiberArray[0];
      var uniqueNames = new Set();
      fiberArray.forEach(function (fiber) {
        uniqueNames.add(getComponentName(fiber.type) || 'Component');
        didWarnAboutLegacyContext.add(fiber.type);
      });
      var sortedNames = setToSortedString(uniqueNames);
      var firstComponentStack = getStackByFiberInDevAndProd(firstFiber);

      error('Legacy context API has been detected within a strict-mode tree.' + '\n\nThe old API will be supported in all 16.x releases, but applications ' + 'using it should migrate to the new version.' + '\n\nPlease update the following components: %s' + '\n\nLearn more about this warning here: https://fb.me/react-legacy-context' + '%s', sortedNames, firstComponentStack);
    });
  };

  ReactStrictModeWarnings.discardPendingWarnings = function () {
    pendingComponentWillMountWarnings = [];
    pendingUNSAFE_ComponentWillMountWarnings = [];
    pendingComponentWillReceivePropsWarnings = [];
    pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
    pendingComponentWillUpdateWarnings = [];
    pendingUNSAFE_ComponentWillUpdateWarnings = [];
    pendingLegacyContextWarning = new Map();
  };
}

var resolveFamily = null; // $FlowFixMe Flow gets confused by a WeakSet feature check below.

var failedBoundaries = null;
var setRefreshHandler = function (handler) {
  {
    resolveFamily = handler;
  }
};
function resolveFunctionForHotReloading(type) {
  {
    if (resolveFamily === null) {
      // Hot reloading is disabled.
      return type;
    }

    var family = resolveFamily(type);

    if (family === undefined) {
      return type;
    } // Use the latest known implementation.


    return family.current;
  }
}
function resolveClassForHotReloading(type) {
  // No implementation differences.
  return resolveFunctionForHotReloading(type);
}
function resolveForwardRefForHotReloading(type) {
  {
    if (resolveFamily === null) {
      // Hot reloading is disabled.
      return type;
    }

    var family = resolveFamily(type);

    if (family === undefined) {
      // Check if we're dealing with a real forwardRef. Don't want to crash early.
      if (type !== null && type !== undefined && typeof type.render === 'function') {
        // ForwardRef is special because its resolved .type is an object,
        // but it's possible that we only have its inner render function in the map.
        // If that inner render function is different, we'll build a new forwardRef type.
        var currentRender = resolveFunctionForHotReloading(type.render);

        if (type.render !== currentRender) {
          var syntheticType = {
            $$typeof: REACT_FORWARD_REF_TYPE,
            render: currentRender
          };

          if (type.displayName !== undefined) {
            syntheticType.displayName = type.displayName;
          }

          return syntheticType;
        }
      }

      return type;
    } // Use the latest known implementation.


    return family.current;
  }
}
function isCompatibleFamilyForHotReloading(fiber, element) {
  {
    if (resolveFamily === null) {
      // Hot reloading is disabled.
      return false;
    }

    var prevType = fiber.elementType;
    var nextType = element.type; // If we got here, we know types aren't === equal.

    var needsCompareFamilies = false;
    var $$typeofNextType = typeof nextType === 'object' && nextType !== null ? nextType.$$typeof : null;

    switch (fiber.tag) {
      case ClassComponent:
        {
          if (typeof nextType === 'function') {
            needsCompareFamilies = true;
          }

          break;
        }

      case FunctionComponent:
        {
          if (typeof nextType === 'function') {
            needsCompareFamilies = true;
          } else if ($$typeofNextType === REACT_LAZY_TYPE) {
            // We don't know the inner type yet.
            // We're going to assume that the lazy inner type is stable,
            // and so it is sufficient to avoid reconciling it away.
            // We're not going to unwrap or actually use the new lazy type.
            needsCompareFamilies = true;
          }

          break;
        }

      case ForwardRef:
        {
          if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
            needsCompareFamilies = true;
          } else if ($$typeofNextType === REACT_LAZY_TYPE) {
            needsCompareFamilies = true;
          }

          break;
        }

      case MemoComponent:
      case SimpleMemoComponent:
        {
          if ($$typeofNextType === REACT_MEMO_TYPE) {
            // TODO: if it was but can no longer be simple,
            // we shouldn't set this.
            needsCompareFamilies = true;
          } else if ($$typeofNextType === REACT_LAZY_TYPE) {
            needsCompareFamilies = true;
          }

          break;
        }

      default:
        return false;
    } // Check if both types have a family and it's the same one.


    if (needsCompareFamilies) {
      // Note: memo() and forwardRef() we'll compare outer rather than inner type.
      // This means both of them need to be registered to preserve state.
      // If we unwrapped and compared the inner types for wrappers instead,
      // then we would risk falsely saying two separate memo(Foo)
      // calls are equivalent because they wrap the same Foo function.
      var prevFamily = resolveFamily(prevType);

      if (prevFamily !== undefined && prevFamily === resolveFamily(nextType)) {
        return true;
      }
    }

    return false;
  }
}
function markFailedErrorBoundaryForHotReloading(fiber) {
  {
    if (resolveFamily === null) {
      // Hot reloading is disabled.
      return;
    }

    if (typeof WeakSet !== 'function') {
      return;
    }

    if (failedBoundaries === null) {
      failedBoundaries = new WeakSet();
    }

    failedBoundaries.add(fiber);
  }
}
var scheduleRefresh = function (root, update) {
  {
    if (resolveFamily === null) {
      // Hot reloading is disabled.
      return;
    }

    var staleFamilies = update.staleFamilies,
        updatedFamilies = update.updatedFamilies;
    flushPassiveEffects();
    flushSync(function () {
      scheduleFibersWithFamiliesRecursively(root.current, updatedFamilies, staleFamilies);
    });
  }
};
var scheduleRoot = function (root, element) {
  {
    if (root.context !== emptyContextObject) {
      // Super edge case: root has a legacy _renderSubtree context
      // but we don't know the parentComponent so we can't pass it.
      // Just ignore. We'll delete this with _renderSubtree code path later.
      return;
    }

    flushPassiveEffects();
    syncUpdates(function () {
      updateContainer(element, root, null, null);
    });
  }
};

function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
  {
    var alternate = fiber.alternate,
        child = fiber.child,
        sibling = fiber.sibling,
        tag = fiber.tag,
        type = fiber.type;
    var candidateType = null;

    switch (tag) {
      case FunctionComponent:
      case SimpleMemoComponent:
      case ClassComponent:
        candidateType = type;
        break;

      case ForwardRef:
        candidateType = type.render;
        break;
    }

    if (resolveFamily === null) {
      throw new Error('Expected resolveFamily to be set during hot reload.');
    }

    var needsRender = false;
    var needsRemount = false;

    if (candidateType !== null) {
      var family = resolveFamily(candidateType);

      if (family !== undefined) {
        if (staleFamilies.has(family)) {
          needsRemount = true;
        } else if (updatedFamilies.has(family)) {
          if (tag === ClassComponent) {
            needsRemount = true;
          } else {
            needsRender = true;
          }
        }
      }
    }

    if (failedBoundaries !== null) {
      if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {
        needsRemount = true;
      }
    }

    if (needsRemount) {
      fiber._debugNeedsRemount = true;
    }

    if (needsRemount || needsRender) {
      scheduleWork(fiber, Sync);
    }

    if (child !== null && !needsRemount) {
      scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
    }

    if (sibling !== null) {
      scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
    }
  }
}

var findHostInstancesForRefresh = function (root, families) {
  {
    var hostInstances = new Set();
    var types = new Set(families.map(function (family) {
      return family.current;
    }));
    findHostInstancesForMatchingFibersRecursively(root.current, types, hostInstances);
    return hostInstances;
  }
};

function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
  {
    var child = fiber.child,
        sibling = fiber.sibling,
        tag = fiber.tag,
        type = fiber.type;
    var candidateType = null;

    switch (tag) {
      case FunctionComponent:
      case SimpleMemoComponent:
      case ClassComponent:
        candidateType = type;
        break;

      case ForwardRef:
        candidateType = type.render;
        break;
    }

    var didMatch = false;

    if (candidateType !== null) {
      if (types.has(candidateType)) {
        didMatch = true;
      }
    }

    if (didMatch) {
      // We have a match. This only drills down to the closest host components.
      // There's no need to search deeper because for the purpose of giving
      // visual feedback, "flashing" outermost parent rectangles is sufficient.
      findHostInstancesForFiberShallowly(fiber, hostInstances);
    } else {
      // If there's no match, maybe there will be one further down in the child tree.
      if (child !== null) {
        findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
      }
    }

    if (sibling !== null) {
      findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
    }
  }
}

function findHostInstancesForFiberShallowly(fiber, hostInstances) {
  {
    var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);

    if (foundHostInstances) {
      return;
    } // If we didn't find any host children, fallback to closest host parent.


    var node = fiber;

    while (true) {
      switch (node.tag) {
        case HostComponent:
          hostInstances.add(node.stateNode);
          return;

        case HostPortal:
          hostInstances.add(node.stateNode.containerInfo);
          return;

        case HostRoot:
          hostInstances.add(node.stateNode.containerInfo);
          return;
      }

      if (node.return === null) {
        throw new Error('Expected to reach root first.');
      }

      node = node.return;
    }
  }
}

function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
  {
    var node = fiber;
    var foundHostInstances = false;

    while (true) {
      if (node.tag === HostComponent) {
        // We got a match.
        foundHostInstances = true;
        hostInstances.add(node.stateNode); // There may still be more, so keep searching.
      } else if (node.child !== null) {
        node.child.return = node;
        node = node.child;
        continue;
      }

      if (node === fiber) {
        return foundHostInstances;
      }

      while (node.sibling === null) {
        if (node.return === null || node.return === fiber) {
          return foundHostInstances;
        }

        node = node.return;
      }

      node.sibling.return = node.return;
      node = node.sibling;
    }
  }

  return false;
}

function resolveDefaultProps(Component, baseProps) {
  if (Component && Component.defaultProps) {
    // Resolve default props. Taken from ReactElement
    var props = _assign({}, baseProps);

    var defaultProps = Component.defaultProps;

    for (var propName in defaultProps) {
      if (props[propName] === undefined) {
        props[propName] = defaultProps[propName];
      }
    }

    return props;
  }

  return baseProps;
}
function readLazyComponentType(lazyComponent) {
  initializeLazyComponentType(lazyComponent);

  if (lazyComponent._status !== Resolved) {
    throw lazyComponent._result;
  }

  return lazyComponent._result;
}

var valueCursor = createCursor(null);
var rendererSigil;

{
  // Use this to detect multiple renderers using the same context
  rendererSigil = {};
}

var currentlyRenderingFiber = null;
var lastContextDependency = null;
var lastContextWithAllBitsObserved = null;
var isDisallowedContextReadInDEV = false;
function resetContextDependencies() {
  // This is called right before React yields execution, to ensure `readContext`
  // cannot be called outside the render phase.
  currentlyRenderingFiber = null;
  lastContextDependency = null;
  lastContextWithAllBitsObserved = null;

  {
    isDisallowedContextReadInDEV = false;
  }
}
function enterDisallowedContextReadInDEV() {
  {
    isDisallowedContextReadInDEV = true;
  }
}
function exitDisallowedContextReadInDEV() {
  {
    isDisallowedContextReadInDEV = false;
  }
}
function pushProvider(providerFiber, nextValue) {
  var context = providerFiber.type._context;

  {
    push(valueCursor, context._currentValue, providerFiber);
    context._currentValue = nextValue;

    {
      if (context._currentRenderer !== undefined && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {
        error('Detected multiple renderers concurrently rendering the ' + 'same context provider. This is currently unsupported.');
      }

      context._currentRenderer = rendererSigil;
    }
  }
}
function popProvider(providerFiber) {
  var currentValue = valueCursor.current;
  pop(valueCursor, providerFiber);
  var context = providerFiber.type._context;

  {
    context._currentValue = currentValue;
  }
}
function calculateChangedBits(context, newValue, oldValue) {
  if (objectIs(oldValue, newValue)) {
    // No change
    return 0;
  } else {
    var changedBits = typeof context._calculateChangedBits === 'function' ? context._calculateChangedBits(oldValue, newValue) : MAX_SIGNED_31_BIT_INT;

    {
      if ((changedBits & MAX_SIGNED_31_BIT_INT) !== changedBits) {
        error('calculateChangedBits: Expected the return value to be a ' + '31-bit integer. Instead received: %s', changedBits);
      }
    }

    return changedBits | 0;
  }
}
function scheduleWorkOnParentPath(parent, renderExpirationTime) {
  // Update the child expiration time of all the ancestors, including
  // the alternates.
  var node = parent;

  while (node !== null) {
    var alternate = node.alternate;

    if (node.childExpirationTime < renderExpirationTime) {
      node.childExpirationTime = renderExpirationTime;

      if (alternate !== null && alternate.childExpirationTime < renderExpirationTime) {
        alternate.childExpirationTime = renderExpirationTime;
      }
    } else if (alternate !== null && alternate.childExpirationTime < renderExpirationTime) {
      alternate.childExpirationTime = renderExpirationTime;
    } else {
      // Neither alternate was updated, which means the rest of the
      // ancestor path already has sufficient priority.
      break;
    }

    node = node.return;
  }
}
function propagateContextChange(workInProgress, context, changedBits, renderExpirationTime) {
  var fiber = workInProgress.child;

  if (fiber !== null) {
    // Set the return pointer of the child to the work-in-progress fiber.
    fiber.return = workInProgress;
  }

  while (fiber !== null) {
    var nextFiber = void 0; // Visit this fiber.

    var list = fiber.dependencies;

    if (list !== null) {
      nextFiber = fiber.child;
      var dependency = list.firstContext;

      while (dependency !== null) {
        // Check if the context matches.
        if (dependency.context === context && (dependency.observedBits & changedBits) !== 0) {
          // Match! Schedule an update on this fiber.
          if (fiber.tag === ClassComponent) {
            // Schedule a force update on the work-in-progress.
            var update = createUpdate(renderExpirationTime, null);
            update.tag = ForceUpdate; // TODO: Because we don't have a work-in-progress, this will add the
            // update to the current fiber, too, which means it will persist even if
            // this render is thrown away. Since it's a race condition, not sure it's
            // worth fixing.

            enqueueUpdate(fiber, update);
          }

          if (fiber.expirationTime < renderExpirationTime) {
            fiber.expirationTime = renderExpirationTime;
          }

          var alternate = fiber.alternate;

          if (alternate !== null && alternate.expirationTime < renderExpirationTime) {
            alternate.expirationTime = renderExpirationTime;
          }

          scheduleWorkOnParentPath(fiber.return, renderExpirationTime); // Mark the expiration time on the list, too.

          if (list.expirationTime < renderExpirationTime) {
            list.expirationTime = renderExpirationTime;
          } // Since we already found a match, we can stop traversing the
          // dependency list.


          break;
        }

        dependency = dependency.next;
      }
    } else if (fiber.tag === ContextProvider) {
      // Don't scan deeper if this is a matching provider
      nextFiber = fiber.type === workInProgress.type ? null : fiber.child;
    } else {
      // Traverse down.
      nextFiber = fiber.child;
    }

    if (nextFiber !== null) {
      // Set the return pointer of the child to the work-in-progress fiber.
      nextFiber.return = fiber;
    } else {
      // No child. Traverse to next sibling.
      nextFiber = fiber;

      while (nextFiber !== null) {
        if (nextFiber === workInProgress) {
          // We're back to the root of this subtree. Exit.
          nextFiber = null;
          break;
        }

        var sibling = nextFiber.sibling;

        if (sibling !== null) {
          // Set the return pointer of the sibling to the work-in-progress fiber.
          sibling.return = nextFiber.return;
          nextFiber = sibling;
          break;
        } // No more siblings. Traverse up.


        nextFiber = nextFiber.return;
      }
    }

    fiber = nextFiber;
  }
}
function prepareToReadContext(workInProgress, renderExpirationTime) {
  currentlyRenderingFiber = workInProgress;
  lastContextDependency = null;
  lastContextWithAllBitsObserved = null;
  var dependencies = workInProgress.dependencies;

  if (dependencies !== null) {
    var firstContext = dependencies.firstContext;

    if (firstContext !== null) {
      if (dependencies.expirationTime >= renderExpirationTime) {
        // Context list has a pending update. Mark that this fiber performed work.
        markWorkInProgressReceivedUpdate();
      } // Reset the work-in-progress list


      dependencies.firstContext = null;
    }
  }
}
function readContext(context, observedBits) {
  {
    // This warning would fire if you read context inside a Hook like useMemo.
    // Unlike the class check below, it's not enforced in production for perf.
    if (isDisallowedContextReadInDEV) {
      error('Context can only be read while React is rendering. ' + 'In classes, you can read it in the render method or getDerivedStateFromProps. ' + 'In function components, you can read it directly in the function body, but not ' + 'inside Hooks like useReducer() or useMemo().');
    }
  }

  if (lastContextWithAllBitsObserved === context) ; else if (observedBits === false || observedBits === 0) ; else {
    var resolvedObservedBits; // Avoid deopting on observable arguments or heterogeneous types.

    if (typeof observedBits !== 'number' || observedBits === MAX_SIGNED_31_BIT_INT) {
      // Observe all updates.
      lastContextWithAllBitsObserved = context;
      resolvedObservedBits = MAX_SIGNED_31_BIT_INT;
    } else {
      resolvedObservedBits = observedBits;
    }

    var contextItem = {
      context: context,
      observedBits: resolvedObservedBits,
      next: null
    };

    if (lastContextDependency === null) {
      if (!(currentlyRenderingFiber !== null)) {
        {
          throw Error( "Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo()." );
        }
      } // This is the first dependency for this component. Create a new list.


      lastContextDependency = contextItem;
      currentlyRenderingFiber.dependencies = {
        expirationTime: NoWork,
        firstContext: contextItem,
        responders: null
      };
    } else {
      // Append a new context item.
      lastContextDependency = lastContextDependency.next = contextItem;
    }
  }

  return  context._currentValue ;
}

var UpdateState = 0;
var ReplaceState = 1;
var ForceUpdate = 2;
var CaptureUpdate = 3; // Global state that is reset at the beginning of calling `processUpdateQueue`.
// It should only be read right after calling `processUpdateQueue`, via
// `checkHasForceUpdateAfterProcessing`.

var hasForceUpdate = false;
var didWarnUpdateInsideUpdate;
var currentlyProcessingQueue;

{
  didWarnUpdateInsideUpdate = false;
  currentlyProcessingQueue = null;
}

function initializeUpdateQueue(fiber) {
  var queue = {
    baseState: fiber.memoizedState,
    baseQueue: null,
    shared: {
      pending: null
    },
    effects: null
  };
  fiber.updateQueue = queue;
}
function cloneUpdateQueue(current, workInProgress) {
  // Clone the update queue from current. Unless it's already a clone.
  var queue = workInProgress.updateQueue;
  var currentQueue = current.updateQueue;

  if (queue === currentQueue) {
    var clone = {
      baseState: currentQueue.baseState,
      baseQueue: currentQueue.baseQueue,
      shared: currentQueue.shared,
      effects: currentQueue.effects
    };
    workInProgress.updateQueue = clone;
  }
}
function createUpdate(expirationTime, suspenseConfig) {
  var update = {
    expirationTime: expirationTime,
    suspenseConfig: suspenseConfig,
    tag: UpdateState,
    payload: null,
    callback: null,
    next: null
  };
  update.next = update;

  {
    update.priority = getCurrentPriorityLevel();
  }

  return update;
}
function enqueueUpdate(fiber, update) {
  var updateQueue = fiber.updateQueue;

  if (updateQueue === null) {
    // Only occurs if the fiber has been unmounted.
    return;
  }

  var sharedQueue = updateQueue.shared;
  var pending = sharedQueue.pending;

  if (pending === null) {
    // This is the first update. Create a circular list.
    update.next = update;
  } else {
    update.next = pending.next;
    pending.next = update;
  }

  sharedQueue.pending = update;

  {
    if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
      error('An update (setState, replaceState, or forceUpdate) was scheduled ' + 'from inside an update function. Update functions should be pure, ' + 'with zero side-effects. Consider using componentDidUpdate or a ' + 'callback.');

      didWarnUpdateInsideUpdate = true;
    }
  }
}
function enqueueCapturedUpdate(workInProgress, update) {
  var current = workInProgress.alternate;

  if (current !== null) {
    // Ensure the work-in-progress queue is a clone
    cloneUpdateQueue(current, workInProgress);
  } // Captured updates go only on the work-in-progress queue.


  var queue = workInProgress.updateQueue; // Append the update to the end of the list.

  var last = queue.baseQueue;

  if (last === null) {
    queue.baseQueue = update.next = update;
    update.next = update;
  } else {
    update.next = last.next;
    last.next = update;
  }
}

function getStateFromUpdate(workInProgress, queue, update, prevState, nextProps, instance) {
  switch (update.tag) {
    case ReplaceState:
      {
        var payload = update.payload;

        if (typeof payload === 'function') {
          // Updater function
          {
            enterDisallowedContextReadInDEV();

            if ( workInProgress.mode & StrictMode) {
              payload.call(instance, prevState, nextProps);
            }
          }

          var nextState = payload.call(instance, prevState, nextProps);

          {
            exitDisallowedContextReadInDEV();
          }

          return nextState;
        } // State object


        return payload;
      }

    case CaptureUpdate:
      {
        workInProgress.effectTag = workInProgress.effectTag & ~ShouldCapture | DidCapture;
      }
    // Intentional fallthrough

    case UpdateState:
      {
        var _payload = update.payload;
        var partialState;

        if (typeof _payload === 'function') {
          // Updater function
          {
            enterDisallowedContextReadInDEV();

            if ( workInProgress.mode & StrictMode) {
              _payload.call(instance, prevState, nextProps);
            }
          }

          partialState = _payload.call(instance, prevState, nextProps);

          {
            exitDisallowedContextReadInDEV();
          }
        } else {
          // Partial state object
          partialState = _payload;
        }

        if (partialState === null || partialState === undefined) {
          // Null and undefined are treated as no-ops.
          return prevState;
        } // Merge the partial state and the previous state.


        return _assign({}, prevState, partialState);
      }

    case ForceUpdate:
      {
        hasForceUpdate = true;
        return prevState;
      }
  }

  return prevState;
}

function processUpdateQueue(workInProgress, props, instance, renderExpirationTime) {
  // This is always non-null on a ClassComponent or HostRoot
  var queue = workInProgress.updateQueue;
  hasForceUpdate = false;

  {
    currentlyProcessingQueue = queue.shared;
  } // The last rebase update that is NOT part of the base state.


  var baseQueue = queue.baseQueue; // The last pending update that hasn't been processed yet.

  var pendingQueue = queue.shared.pending;

  if (pendingQueue !== null) {
    // We have new updates that haven't been processed yet.
    // We'll add them to the base queue.
    if (baseQueue !== null) {
      // Merge the pending queue and the base queue.
      var baseFirst = baseQueue.next;
      var pendingFirst = pendingQueue.next;
      baseQueue.next = pendingFirst;
      pendingQueue.next = baseFirst;
    }

    baseQueue = pendingQueue;
    queue.shared.pending = null; // TODO: Pass `current` as argument

    var current = workInProgress.alternate;

    if (current !== null) {
      var currentQueue = current.updateQueue;

      if (currentQueue !== null) {
        currentQueue.baseQueue = pendingQueue;
      }
    }
  } // These values may change as we process the queue.


  if (baseQueue !== null) {
    var first = baseQueue.next; // Iterate through the list of updates to compute the result.

    var newState = queue.baseState;
    var newExpirationTime = NoWork;
    var newBaseState = null;
    var newBaseQueueFirst = null;
    var newBaseQueueLast = null;

    if (first !== null) {
      var update = first;

      do {
        var updateExpirationTime = update.expirationTime;

        if (updateExpirationTime < renderExpirationTime) {
          // Priority is insufficient. Skip this update. If this is the first
          // skipped update, the previous update/state is the new base
          // update/state.
          var clone = {
            expirationTime: update.expirationTime,
            suspenseConfig: update.suspenseConfig,
            tag: update.tag,
            payload: update.payload,
            callback: update.callback,
            next: null
          };

          if (newBaseQueueLast === null) {
            newBaseQueueFirst = newBaseQueueLast = clone;
            newBaseState = newState;
          } else {
            newBaseQueueLast = newBaseQueueLast.next = clone;
          } // Update the remaining priority in the queue.


          if (updateExpirationTime > newExpirationTime) {
            newExpirationTime = updateExpirationTime;
          }
        } else {
          // This update does have sufficient priority.
          if (newBaseQueueLast !== null) {
            var _clone = {
              expirationTime: Sync,
              // This update is going to be committed so we never want uncommit it.
              suspenseConfig: update.suspenseConfig,
              tag: update.tag,
              payload: update.payload,
              callback: update.callback,
              next: null
            };
            newBaseQueueLast = newBaseQueueLast.next = _clone;
          } // Mark the event time of this update as relevant to this render pass.
          // TODO: This should ideally use the true event time of this update rather than
          // its priority which is a derived and not reverseable value.
          // TODO: We should skip this update if it was already committed but currently
          // we have no way of detecting the difference between a committed and suspended
          // update here.


          markRenderEventTimeAndConfig(updateExpirationTime, update.suspenseConfig); // Process this update.

          newState = getStateFromUpdate(workInProgress, queue, update, newState, props, instance);
          var callback = update.callback;

          if (callback !== null) {
            workInProgress.effectTag |= Callback;
            var effects = queue.effects;

            if (effects === null) {
              queue.effects = [update];
            } else {
              effects.push(update);
            }
          }
        }

        update = update.next;

        if (update === null || update === first) {
          pendingQueue = queue.shared.pending;

          if (pendingQueue === null) {
            break;
          } else {
            // An update was scheduled from inside a reducer. Add the new
            // pending updates to the end of the list and keep processing.
            update = baseQueue.next = pendingQueue.next;
            pendingQueue.next = first;
            queue.baseQueue = baseQueue = pendingQueue;
            queue.shared.pending = null;
          }
        }
      } while (true);
    }

    if (newBaseQueueLast === null) {
      newBaseState = newState;
    } else {
      newBaseQueueLast.next = newBaseQueueFirst;
    }

    queue.baseState = newBaseState;
    queue.baseQueue = newBaseQueueLast; // Set the remaining expiration time to be whatever is remaining in the queue.
    // This should be fine because the only two other things that contribute to
    // expiration time are props and context. We're already in the middle of the
    // begin phase by the time we start processing the queue, so we've already
    // dealt with the props. Context in components that specify
    // shouldComponentUpdate is tricky; but we'll have to account for
    // that regardless.

    markUnprocessedUpdateTime(newExpirationTime);
    workInProgress.expirationTime = newExpirationTime;
    workInProgress.memoizedState = newState;
  }

  {
    currentlyProcessingQueue = null;
  }
}

function callCallback(callback, context) {
  if (!(typeof callback === 'function')) {
    {
      throw Error( "Invalid argument passed as callback. Expected a function. Instead received: " + callback );
    }
  }

  callback.call(context);
}

function resetHasForceUpdateBeforeProcessing() {
  hasForceUpdate = false;
}
function checkHasForceUpdateAfterProcessing() {
  return hasForceUpdate;
}
function commitUpdateQueue(finishedWork, finishedQueue, instance) {
  // Commit the effects
  var effects = finishedQueue.effects;
  finishedQueue.effects = null;

  if (effects !== null) {
    for (var i = 0; i < effects.length; i++) {
      var effect = effects[i];
      var callback = effect.callback;

      if (callback !== null) {
        effect.callback = null;
        callCallback(callback, instance);
      }
    }
  }
}

var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
function requestCurrentSuspenseConfig() {
  return ReactCurrentBatchConfig.suspense;
}

var fakeInternalInstance = {};
var isArray = Array.isArray; // React.Component uses a shared frozen object by default.
// We'll use it to determine whether we need to initialize legacy refs.

var emptyRefsObject = new React.Component().refs;
var didWarnAboutStateAssignmentForComponent;
var didWarnAboutUninitializedState;
var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
var didWarnAboutLegacyLifecyclesAndDerivedState;
var didWarnAboutUndefinedDerivedState;
var warnOnUndefinedDerivedState;
var warnOnInvalidCallback;
var didWarnAboutDirectlyAssigningPropsToState;
var didWarnAboutContextTypeAndContextTypes;
var didWarnAboutInvalidateContextType;

{
  didWarnAboutStateAssignmentForComponent = new Set();
  didWarnAboutUninitializedState = new Set();
  didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set();
  didWarnAboutLegacyLifecyclesAndDerivedState = new Set();
  didWarnAboutDirectlyAssigningPropsToState = new Set();
  didWarnAboutUndefinedDerivedState = new Set();
  didWarnAboutContextTypeAndContextTypes = new Set();
  didWarnAboutInvalidateContextType = new Set();
  var didWarnOnInvalidCallback = new Set();

  warnOnInvalidCallback = function (callback, callerName) {
    if (callback === null || typeof callback === 'function') {
      return;
    }

    var key = callerName + "_" + callback;

    if (!didWarnOnInvalidCallback.has(key)) {
      didWarnOnInvalidCallback.add(key);

      error('%s(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callerName, callback);
    }
  };

  warnOnUndefinedDerivedState = function (type, partialState) {
    if (partialState === undefined) {
      var componentName = getComponentName(type) || 'Component';

      if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
        didWarnAboutUndefinedDerivedState.add(componentName);

        error('%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. ' + 'You have returned undefined.', componentName);
      }
    }
  }; // This is so gross but it's at least non-critical and can be removed if
  // it causes problems. This is meant to give a nicer error message for
  // ReactDOM15.unstable_renderSubtreeIntoContainer(reactDOM16Component,
  // ...)) which otherwise throws a "_processChildContext is not a function"
  // exception.


  Object.defineProperty(fakeInternalInstance, '_processChildContext', {
    enumerable: false,
    value: function () {
      {
        {
          throw Error( "_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal)." );
        }
      }
    }
  });
  Object.freeze(fakeInternalInstance);
}

function applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, nextProps) {
  var prevState = workInProgress.memoizedState;

  {
    if ( workInProgress.mode & StrictMode) {
      // Invoke the function an extra time to help detect side-effects.
      getDerivedStateFromProps(nextProps, prevState);
    }
  }

  var partialState = getDerivedStateFromProps(nextProps, prevState);

  {
    warnOnUndefinedDerivedState(ctor, partialState);
  } // Merge the partial state and the previous state.


  var memoizedState = partialState === null || partialState === undefined ? prevState : _assign({}, prevState, partialState);
  workInProgress.memoizedState = memoizedState; // Once the update queue is empty, persist the derived state onto the
  // base state.

  if (workInProgress.expirationTime === NoWork) {
    // Queue is always non-null for classes
    var updateQueue = workInProgress.updateQueue;
    updateQueue.baseState = memoizedState;
  }
}
var classComponentUpdater = {
  isMounted: isMounted,
  enqueueSetState: function (inst, payload, callback) {
    var fiber = get(inst);
    var currentTime = requestCurrentTimeForUpdate();
    var suspenseConfig = requestCurrentSuspenseConfig();
    var expirationTime = computeExpirationForFiber(currentTime, fiber, suspenseConfig);
    var update = createUpdate(expirationTime, suspenseConfig);
    update.payload = payload;

    if (callback !== undefined && callback !== null) {
      {
        warnOnInvalidCallback(callback, 'setState');
      }

      update.callback = callback;
    }

    enqueueUpdate(fiber, update);
    scheduleWork(fiber, expirationTime);
  },
  enqueueReplaceState: function (inst, payload, callback) {
    var fiber = get(inst);
    var currentTime = requestCurrentTimeForUpdate();
    var suspenseConfig = requestCurrentSuspenseConfig();
    var expirationTime = computeExpirationForFiber(currentTime, fiber, suspenseConfig);
    var update = createUpdate(expirationTime, suspenseConfig);
    update.tag = ReplaceState;
    update.payload = payload;

    if (callback !== undefined && callback !== null) {
      {
        warnOnInvalidCallback(callback, 'replaceState');
      }

      update.callback = callback;
    }

    enqueueUpdate(fiber, update);
    scheduleWork(fiber, expirationTime);
  },
  enqueueForceUpdate: function (inst, callback) {
    var fiber = get(inst);
    var currentTime = requestCurrentTimeForUpdate();
    var suspenseConfig = requestCurrentSuspenseConfig();
    var expirationTime = computeExpirationForFiber(currentTime, fiber, suspenseConfig);
    var update = createUpdate(expirationTime, suspenseConfig);
    update.tag = ForceUpdate;

    if (callback !== undefined && callback !== null) {
      {
        warnOnInvalidCallback(callback, 'forceUpdate');
      }

      update.callback = callback;
    }

    enqueueUpdate(fiber, update);
    scheduleWork(fiber, expirationTime);
  }
};

function checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext) {
  var instance = workInProgress.stateNode;

  if (typeof instance.shouldComponentUpdate === 'function') {
    {
      if ( workInProgress.mode & StrictMode) {
        // Invoke the function an extra time to help detect side-effects.
        instance.shouldComponentUpdate(newProps, newState, nextContext);
      }
    }

    startPhaseTimer(workInProgress, 'shouldComponentUpdate');
    var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
    stopPhaseTimer();

    {
      if (shouldUpdate === undefined) {
        error('%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', getComponentName(ctor) || 'Component');
      }
    }

    return shouldUpdate;
  }

  if (ctor.prototype && ctor.prototype.isPureReactComponent) {
    return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
  }

  return true;
}

function checkClassInstance(workInProgress, ctor, newProps) {
  var instance = workInProgress.stateNode;

  {
    var name = getComponentName(ctor) || 'Component';
    var renderPresent = instance.render;

    if (!renderPresent) {
      if (ctor.prototype && typeof ctor.prototype.render === 'function') {
        error('%s(...): No `render` method found on the returned component ' + 'instance: did you accidentally return an object from the constructor?', name);
      } else {
        error('%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`.', name);
      }
    }

    if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
      error('getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', name);
    }

    if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
      error('getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', name);
    }

    if (instance.propTypes) {
      error('propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', name);
    }

    if (instance.contextType) {
      error('contextType was defined as an instance property on %s. Use a static ' + 'property to define contextType instead.', name);
    }

    {
      if (instance.contextTypes) {
        error('contextTypes was defined as an instance property on %s. Use a static ' + 'property to define contextTypes instead.', name);
      }

      if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
        didWarnAboutContextTypeAndContextTypes.add(ctor);

        error('%s declares both contextTypes and contextType static properties. ' + 'The legacy contextTypes property will be ignored.', name);
      }
    }

    if (typeof instance.componentShouldUpdate === 'function') {
      error('%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', name);
    }

    if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== 'undefined') {
      error('%s has a method called shouldComponentUpdate(). ' + 'shouldComponentUpdate should not be used when extending React.PureComponent. ' + 'Please extend React.Component if shouldComponentUpdate is used.', getComponentName(ctor) || 'A pure component');
    }

    if (typeof instance.componentDidUnmount === 'function') {
      error('%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', name);
    }

    if (typeof instance.componentDidReceiveProps === 'function') {
      error('%s has a method called ' + 'componentDidReceiveProps(). But there is no such lifecycle method. ' + 'If you meant to update the state in response to changing props, ' + 'use componentWillReceiveProps(). If you meant to fetch data or ' + 'run side-effects or mutations after React has updated the UI, use componentDidUpdate().', name);
    }

    if (typeof instance.componentWillRecieveProps === 'function') {
      error('%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', name);
    }

    if (typeof instance.UNSAFE_componentWillRecieveProps === 'function') {
      error('%s has a method called ' + 'UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?', name);
    }

    var hasMutatedProps = instance.props !== newProps;

    if (instance.props !== undefined && hasMutatedProps) {
      error('%s(...): When calling super() in `%s`, make sure to pass ' + "up the same props that your component's constructor was passed.", name, name);
    }

    if (instance.defaultProps) {
      error('Setting defaultProps as an instance property on %s is not supported and will be ignored.' + ' Instead, define defaultProps as a static property on %s.', name, name);
    }

    if (typeof instance.getSnapshotBeforeUpdate === 'function' && typeof instance.componentDidUpdate !== 'function' && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
      didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);

      error('%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). ' + 'This component defines getSnapshotBeforeUpdate() only.', getComponentName(ctor));
    }

    if (typeof instance.getDerivedStateFromProps === 'function') {
      error('%s: getDerivedStateFromProps() is defined as an instance method ' + 'and will be ignored. Instead, declare it as a static method.', name);
    }

    if (typeof instance.getDerivedStateFromError === 'function') {
      error('%s: getDerivedStateFromError() is defined as an instance method ' + 'and will be ignored. Instead, declare it as a static method.', name);
    }

    if (typeof ctor.getSnapshotBeforeUpdate === 'function') {
      error('%s: getSnapshotBeforeUpdate() is defined as a static method ' + 'and will be ignored. Instead, declare it as an instance method.', name);
    }

    var _state = instance.state;

    if (_state && (typeof _state !== 'object' || isArray(_state))) {
      error('%s.state: must be set to an object or null', name);
    }

    if (typeof instance.getChildContext === 'function' && typeof ctor.childContextTypes !== 'object') {
      error('%s.getChildContext(): childContextTypes must be defined in order to ' + 'use getChildContext().', name);
    }
  }
}

function adoptClassInstance(workInProgress, instance) {
  instance.updater = classComponentUpdater;
  workInProgress.stateNode = instance; // The instance needs access to the fiber so that it can schedule updates

  set(instance, workInProgress);

  {
    instance._reactInternalInstance = fakeInternalInstance;
  }
}

function constructClassInstance(workInProgress, ctor, props) {
  var isLegacyContextConsumer = false;
  var unmaskedContext = emptyContextObject;
  var context = emptyContextObject;
  var contextType = ctor.contextType;

  {
    if ('contextType' in ctor) {
      var isValid = // Allow null for conditional declaration
      contextType === null || contextType !== undefined && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === undefined; // Not a <Context.Consumer>

      if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
        didWarnAboutInvalidateContextType.add(ctor);
        var addendum = '';

        if (contextType === undefined) {
          addendum = ' However, it is set to undefined. ' + 'This can be caused by a typo or by mixing up named and default imports. ' + 'This can also happen due to a circular dependency, so ' + 'try moving the createContext() call to a separate file.';
        } else if (typeof contextType !== 'object') {
          addendum = ' However, it is set to a ' + typeof contextType + '.';
        } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
          addendum = ' Did you accidentally pass the Context.Provider instead?';
        } else if (contextType._context !== undefined) {
          // <Context.Consumer>
          addendum = ' Did you accidentally pass the Context.Consumer instead?';
        } else {
          addendum = ' However, it is set to an object with keys {' + Object.keys(contextType).join(', ') + '}.';
        }

        error('%s defines an invalid contextType. ' + 'contextType should point to the Context object returned by React.createContext().%s', getComponentName(ctor) || 'Component', addendum);
      }
    }
  }

  if (typeof contextType === 'object' && contextType !== null) {
    context = readContext(contextType);
  } else {
    unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
    var contextTypes = ctor.contextTypes;
    isLegacyContextConsumer = contextTypes !== null && contextTypes !== undefined;
    context = isLegacyContextConsumer ? getMaskedContext(workInProgress, unmaskedContext) : emptyContextObject;
  } // Instantiate twice to help detect side-effects.


  {
    if ( workInProgress.mode & StrictMode) {
      new ctor(props, context); // eslint-disable-line no-new
    }
  }

  var instance = new ctor(props, context);
  var state = workInProgress.memoizedState = instance.state !== null && instance.state !== undefined ? instance.state : null;
  adoptClassInstance(workInProgress, instance);

  {
    if (typeof ctor.getDerivedStateFromProps === 'function' && state === null) {
      var componentName = getComponentName(ctor) || 'Component';

      if (!didWarnAboutUninitializedState.has(componentName)) {
        didWarnAboutUninitializedState.add(componentName);

        error('`%s` uses `getDerivedStateFromProps` but its initial state is ' + '%s. This is not recommended. Instead, define the initial state by ' + 'assigning an object to `this.state` in the constructor of `%s`. ' + 'This ensures that `getDerivedStateFromProps` arguments have a consistent shape.', componentName, instance.state === null ? 'null' : 'undefined', componentName);
      }
    } // If new component APIs are defined, "unsafe" lifecycles won't be called.
    // Warn about these lifecycles if they are present.
    // Don't warn about react-lifecycles-compat polyfilled methods though.


    if (typeof ctor.getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function') {
      var foundWillMountName = null;
      var foundWillReceivePropsName = null;
      var foundWillUpdateName = null;

      if (typeof instance.componentWillMount === 'function' && instance.componentWillMount.__suppressDeprecationWarning !== true) {
        foundWillMountName = 'componentWillMount';
      } else if (typeof instance.UNSAFE_componentWillMount === 'function') {
        foundWillMountName = 'UNSAFE_componentWillMount';
      }

      if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
        foundWillReceivePropsName = 'componentWillReceiveProps';
      } else if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
        foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps';
      }

      if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
        foundWillUpdateName = 'componentWillUpdate';
      } else if (typeof instance.UNSAFE_componentWillUpdate === 'function') {
        foundWillUpdateName = 'UNSAFE_componentWillUpdate';
      }

      if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
        var _componentName = getComponentName(ctor) || 'Component';

        var newApiName = typeof ctor.getDerivedStateFromProps === 'function' ? 'getDerivedStateFromProps()' : 'getSnapshotBeforeUpdate()';

        if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
          didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);

          error('Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n' + '%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\n' + 'The above lifecycles should be removed. Learn more about this warning here:\n' + 'https://fb.me/react-unsafe-component-lifecycles', _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : '', foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : '', foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : '');
        }
      }
    }
  } // Cache unmasked context so we can avoid recreating masked context unless necessary.
  // ReactFiberContext usually updates this cache but can't for newly-created instances.


  if (isLegacyContextConsumer) {
    cacheContext(workInProgress, unmaskedContext, context);
  }

  return instance;
}

function callComponentWillMount(workInProgress, instance) {
  startPhaseTimer(workInProgress, 'componentWillMount');
  var oldState = instance.state;

  if (typeof instance.componentWillMount === 'function') {
    instance.componentWillMount();
  }

  if (typeof instance.UNSAFE_componentWillMount === 'function') {
    instance.UNSAFE_componentWillMount();
  }

  stopPhaseTimer();

  if (oldState !== instance.state) {
    {
      error('%s.componentWillMount(): Assigning directly to this.state is ' + "deprecated (except inside a component's " + 'constructor). Use setState instead.', getComponentName(workInProgress.type) || 'Component');
    }

    classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
  }
}

function callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext) {
  var oldState = instance.state;
  startPhaseTimer(workInProgress, 'componentWillReceiveProps');

  if (typeof instance.componentWillReceiveProps === 'function') {
    instance.componentWillReceiveProps(newProps, nextContext);
  }

  if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
    instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
  }

  stopPhaseTimer();

  if (instance.state !== oldState) {
    {
      var componentName = getComponentName(workInProgress.type) || 'Component';

      if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
        didWarnAboutStateAssignmentForComponent.add(componentName);

        error('%s.componentWillReceiveProps(): Assigning directly to ' + "this.state is deprecated (except inside a component's " + 'constructor). Use setState instead.', componentName);
      }
    }

    classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
  }
} // Invokes the mount life-cycles on a previously never rendered instance.


function mountClassInstance(workInProgress, ctor, newProps, renderExpirationTime) {
  {
    checkClassInstance(workInProgress, ctor, newProps);
  }

  var instance = workInProgress.stateNode;
  instance.props = newProps;
  instance.state = workInProgress.memoizedState;
  instance.refs = emptyRefsObject;
  initializeUpdateQueue(workInProgress);
  var contextType = ctor.contextType;

  if (typeof contextType === 'object' && contextType !== null) {
    instance.context = readContext(contextType);
  } else {
    var unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
    instance.context = getMaskedContext(workInProgress, unmaskedContext);
  }

  {
    if (instance.state === newProps) {
      var componentName = getComponentName(ctor) || 'Component';

      if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
        didWarnAboutDirectlyAssigningPropsToState.add(componentName);

        error('%s: It is not recommended to assign props directly to state ' + "because updates to props won't be reflected in state. " + 'In most cases, it is better to use props directly.', componentName);
      }
    }

    if (workInProgress.mode & StrictMode) {
      ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, instance);
    }

    {
      ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress, instance);
    }
  }

  processUpdateQueue(workInProgress, newProps, instance, renderExpirationTime);
  instance.state = workInProgress.memoizedState;
  var getDerivedStateFromProps = ctor.getDerivedStateFromProps;

  if (typeof getDerivedStateFromProps === 'function') {
    applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
    instance.state = workInProgress.memoizedState;
  } // In order to support react-lifecycles-compat polyfilled components,
  // Unsafe lifecycles should not be invoked for components using the new APIs.


  if (typeof ctor.getDerivedStateFromProps !== 'function' && typeof instance.getSnapshotBeforeUpdate !== 'function' && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {
    callComponentWillMount(workInProgress, instance); // If we had additional state updates during this life-cycle, let's
    // process them now.

    processUpdateQueue(workInProgress, newProps, instance, renderExpirationTime);
    instance.state = workInProgress.memoizedState;
  }

  if (typeof instance.componentDidMount === 'function') {
    workInProgress.effectTag |= Update;
  }
}

function resumeMountClassInstance(workInProgress, ctor, newProps, renderExpirationTime) {
  var instance = workInProgress.stateNode;
  var oldProps = workInProgress.memoizedProps;
  instance.props = oldProps;
  var oldContext = instance.context;
  var contextType = ctor.contextType;
  var nextContext = emptyContextObject;

  if (typeof contextType === 'object' && contextType !== null) {
    nextContext = readContext(contextType);
  } else {
    var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
    nextContext = getMaskedContext(workInProgress, nextLegacyUnmaskedContext);
  }

  var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
  var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function'; // Note: During these life-cycles, instance.props/instance.state are what
  // ever the previously attempted to render - not the "current". However,
  // during componentDidUpdate we pass the "current" props.
  // In order to support react-lifecycles-compat polyfilled components,
  // Unsafe lifecycles should not be invoked for components using the new APIs.

  if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {
    if (oldProps !== newProps || oldContext !== nextContext) {
      callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);
    }
  }

  resetHasForceUpdateBeforeProcessing();
  var oldState = workInProgress.memoizedState;
  var newState = instance.state = oldState;
  processUpdateQueue(workInProgress, newProps, instance, renderExpirationTime);
  newState = workInProgress.memoizedState;

  if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
    // If an update was already in progress, we should schedule an Update
    // effect even though we're bailing out, so that cWU/cDU are called.
    if (typeof instance.componentDidMount === 'function') {
      workInProgress.effectTag |= Update;
    }

    return false;
  }

  if (typeof getDerivedStateFromProps === 'function') {
    applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
    newState = workInProgress.memoizedState;
  }

  var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext);

  if (shouldUpdate) {
    // In order to support react-lifecycles-compat polyfilled components,
    // Unsafe lifecycles should not be invoked for components using the new APIs.
    if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {
      startPhaseTimer(workInProgress, 'componentWillMount');

      if (typeof instance.componentWillMount === 'function') {
        instance.componentWillMount();
      }

      if (typeof instance.UNSAFE_componentWillMount === 'function') {
        instance.UNSAFE_componentWillMount();
      }

      stopPhaseTimer();
    }

    if (typeof instance.componentDidMount === 'function') {
      workInProgress.effectTag |= Update;
    }
  } else {
    // If an update was already in progress, we should schedule an Update
    // effect even though we're bailing out, so that cWU/cDU are called.
    if (typeof instance.componentDidMount === 'function') {
      workInProgress.effectTag |= Update;
    } // If shouldComponentUpdate returned false, we should still update the
    // memoized state to indicate that this work can be reused.


    workInProgress.memoizedProps = newProps;
    workInProgress.memoizedState = newState;
  } // Update the existing instance's state, props, and context pointers even
  // if shouldComponentUpdate returns false.


  instance.props = newProps;
  instance.state = newState;
  instance.context = nextContext;
  return shouldUpdate;
} // Invokes the update life-cycles and returns false if it shouldn't rerender.


function updateClassInstance(current, workInProgress, ctor, newProps, renderExpirationTime) {
  var instance = workInProgress.stateNode;
  cloneUpdateQueue(current, workInProgress);
  var oldProps = workInProgress.memoizedProps;
  instance.props = workInProgress.type === workInProgress.elementType ? oldProps : resolveDefaultProps(workInProgress.type, oldProps);
  var oldContext = instance.context;
  var contextType = ctor.contextType;
  var nextContext = emptyContextObject;

  if (typeof contextType === 'object' && contextType !== null) {
    nextContext = readContext(contextType);
  } else {
    var nextUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
    nextContext = getMaskedContext(workInProgress, nextUnmaskedContext);
  }

  var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
  var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function'; // Note: During these life-cycles, instance.props/instance.state are what
  // ever the previously attempted to render - not the "current". However,
  // during componentDidUpdate we pass the "current" props.
  // In order to support react-lifecycles-compat polyfilled components,
  // Unsafe lifecycles should not be invoked for components using the new APIs.

  if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {
    if (oldProps !== newProps || oldContext !== nextContext) {
      callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);
    }
  }

  resetHasForceUpdateBeforeProcessing();
  var oldState = workInProgress.memoizedState;
  var newState = instance.state = oldState;
  processUpdateQueue(workInProgress, newProps, instance, renderExpirationTime);
  newState = workInProgress.memoizedState;

  if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
    // If an update was already in progress, we should schedule an Update
    // effect even though we're bailing out, so that cWU/cDU are called.
    if (typeof instance.componentDidUpdate === 'function') {
      if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
        workInProgress.effectTag |= Update;
      }
    }

    if (typeof instance.getSnapshotBeforeUpdate === 'function') {
      if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
        workInProgress.effectTag |= Snapshot;
      }
    }

    return false;
  }

  if (typeof getDerivedStateFromProps === 'function') {
    applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
    newState = workInProgress.memoizedState;
  }

  var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext);

  if (shouldUpdate) {
    // In order to support react-lifecycles-compat polyfilled components,
    // Unsafe lifecycles should not be invoked for components using the new APIs.
    if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === 'function' || typeof instance.componentWillUpdate === 'function')) {
      startPhaseTimer(workInProgress, 'componentWillUpdate');

      if (typeof instance.componentWillUpdate === 'function') {
        instance.componentWillUpdate(newProps, newState, nextContext);
      }

      if (typeof instance.UNSAFE_componentWillUpdate === 'function') {
        instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
      }

      stopPhaseTimer();
    }

    if (typeof instance.componentDidUpdate === 'function') {
      workInProgress.effectTag |= Update;
    }

    if (typeof instance.getSnapshotBeforeUpdate === 'function') {
      workInProgress.effectTag |= Snapshot;
    }
  } else {
    // If an update was already in progress, we should schedule an Update
    // effect even though we're bailing out, so that cWU/cDU are called.
    if (typeof instance.componentDidUpdate === 'function') {
      if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
        workInProgress.effectTag |= Update;
      }
    }

    if (typeof instance.getSnapshotBeforeUpdate === 'function') {
      if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
        workInProgress.effectTag |= Snapshot;
      }
    } // If shouldComponentUpdate returned false, we should still update the
    // memoized props/state to indicate that this work can be reused.


    workInProgress.memoizedProps = newProps;
    workInProgress.memoizedState = newState;
  } // Update the existing instance's state, props, and context pointers even
  // if shouldComponentUpdate returns false.


  instance.props = newProps;
  instance.state = newState;
  instance.context = nextContext;
  return shouldUpdate;
}

var didWarnAboutMaps;
var didWarnAboutGenerators;
var didWarnAboutStringRefs;
var ownerHasKeyUseWarning;
var ownerHasFunctionTypeWarning;

var warnForMissingKey = function (child) {};

{
  didWarnAboutMaps = false;
  didWarnAboutGenerators = false;
  didWarnAboutStringRefs = {};
  /**
   * Warn if there's no key explicitly set on dynamic arrays of children or
   * object keys are not valid. This allows us to keep track of children between
   * updates.
   */

  ownerHasKeyUseWarning = {};
  ownerHasFunctionTypeWarning = {};

  warnForMissingKey = function (child) {
    if (child === null || typeof child !== 'object') {
      return;
    }

    if (!child._store || child._store.validated || child.key != null) {
      return;
    }

    if (!(typeof child._store === 'object')) {
      {
        throw Error( "React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue." );
      }
    }

    child._store.validated = true;
    var currentComponentErrorInfo = 'Each child in a list should have a unique ' + '"key" prop. See https://fb.me/react-warning-keys for ' + 'more information.' + getCurrentFiberStackInDev();

    if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
      return;
    }

    ownerHasKeyUseWarning[currentComponentErrorInfo] = true;

    error('Each child in a list should have a unique ' + '"key" prop. See https://fb.me/react-warning-keys for ' + 'more information.');
  };
}

var isArray$1 = Array.isArray;

function coerceRef(returnFiber, current, element) {
  var mixedRef = element.ref;

  if (mixedRef !== null && typeof mixedRef !== 'function' && typeof mixedRef !== 'object') {
    {
      // TODO: Clean this up once we turn on the string ref warning for
      // everyone, because the strict mode case will no longer be relevant
      if ((returnFiber.mode & StrictMode || warnAboutStringRefs) && // We warn in ReactElement.js if owner and self are equal for string refs
      // because these cannot be automatically converted to an arrow function
      // using a codemod. Therefore, we don't have to warn about string refs again.
      !(element._owner && element._self && element._owner.stateNode !== element._self)) {
        var componentName = getComponentName(returnFiber.type) || 'Component';

        if (!didWarnAboutStringRefs[componentName]) {
          {
            error('A string ref, "%s", has been found within a strict mode tree. ' + 'String refs are a source of potential bugs and should be avoided. ' + 'We recommend using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://fb.me/react-strict-mode-string-ref%s', mixedRef, getStackByFiberInDevAndProd(returnFiber));
          }

          didWarnAboutStringRefs[componentName] = true;
        }
      }
    }

    if (element._owner) {
      var owner = element._owner;
      var inst;

      if (owner) {
        var ownerFiber = owner;

        if (!(ownerFiber.tag === ClassComponent)) {
          {
            throw Error( "Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://fb.me/react-strict-mode-string-ref" );
          }
        }

        inst = ownerFiber.stateNode;
      }

      if (!inst) {
        {
          throw Error( "Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue." );
        }
      }

      var stringRef = '' + mixedRef; // Check if previous string ref matches new string ref

      if (current !== null && current.ref !== null && typeof current.ref === 'function' && current.ref._stringRef === stringRef) {
        return current.ref;
      }

      var ref = function (value) {
        var refs = inst.refs;

        if (refs === emptyRefsObject) {
          // This is a lazy pooled frozen object, so we need to initialize.
          refs = inst.refs = {};
        }

        if (value === null) {
          delete refs[stringRef];
        } else {
          refs[stringRef] = value;
        }
      };

      ref._stringRef = stringRef;
      return ref;
    } else {
      if (!(typeof mixedRef === 'string')) {
        {
          throw Error( "Expected ref to be a function, a string, an object returned by React.createRef(), or null." );
        }
      }

      if (!element._owner) {
        {
          throw Error( "Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://fb.me/react-refs-must-have-owner for more information." );
        }
      }
    }
  }

  return mixedRef;
}

function throwOnInvalidObjectType(returnFiber, newChild) {
  if (returnFiber.type !== 'textarea') {
    var addendum = '';

    {
      addendum = ' If you meant to render a collection of children, use an array ' + 'instead.' + getCurrentFiberStackInDev();
    }

    {
      {
        throw Error( "Objects are not valid as a React child (found: " + (Object.prototype.toString.call(newChild) === '[object Object]' ? 'object with keys {' + Object.keys(newChild).join(', ') + '}' : newChild) + ")." + addendum );
      }
    }
  }
}

function warnOnFunctionType() {
  {
    var currentComponentErrorInfo = 'Functions are not valid as a React child. This may happen if ' + 'you return a Component instead of <Component /> from render. ' + 'Or maybe you meant to call this function rather than return it.' + getCurrentFiberStackInDev();

    if (ownerHasFunctionTypeWarning[currentComponentErrorInfo]) {
      return;
    }

    ownerHasFunctionTypeWarning[currentComponentErrorInfo] = true;

    error('Functions are not valid as a React child. This may happen if ' + 'you return a Component instead of <Component /> from render. ' + 'Or maybe you meant to call this function rather than return it.');
  }
} // This wrapper function exists because I expect to clone the code in each path
// to be able to optimize each path individually by branching early. This needs
// a compiler or we can do it manually. Helpers that don't need this branching
// live outside of this function.


function ChildReconciler(shouldTrackSideEffects) {
  function deleteChild(returnFiber, childToDelete) {
    if (!shouldTrackSideEffects) {
      // Noop.
      return;
    } // Deletions are added in reversed order so we add it to the front.
    // At this point, the return fiber's effect list is empty except for
    // deletions, so we can just append the deletion to the list. The remaining
    // effects aren't added until the complete phase. Once we implement
    // resuming, this may not be true.


    var last = returnFiber.lastEffect;

    if (last !== null) {
      last.nextEffect = childToDelete;
      returnFiber.lastEffect = childToDelete;
    } else {
      returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
    }

    childToDelete.nextEffect = null;
    childToDelete.effectTag = Deletion;
  }

  function deleteRemainingChildren(returnFiber, currentFirstChild) {
    if (!shouldTrackSideEffects) {
      // Noop.
      return null;
    } // TODO: For the shouldClone case, this could be micro-optimized a bit by
    // assuming that after the first child we've already added everything.


    var childToDelete = currentFirstChild;

    while (childToDelete !== null) {
      deleteChild(returnFiber, childToDelete);
      childToDelete = childToDelete.sibling;
    }

    return null;
  }

  function mapRemainingChildren(returnFiber, currentFirstChild) {
    // Add the remaining children to a temporary map so that we can find them by
    // keys quickly. Implicit (null) keys get added to this set with their index
    // instead.
    var existingChildren = new Map();
    var existingChild = currentFirstChild;

    while (existingChild !== null) {
      if (existingChild.key !== null) {
        existingChildren.set(existingChild.key, existingChild);
      } else {
        existingChildren.set(existingChild.index, existingChild);
      }

      existingChild = existingChild.sibling;
    }

    return existingChildren;
  }

  function useFiber(fiber, pendingProps) {
    // We currently set sibling to null and index to 0 here because it is easy
    // to forget to do before returning it. E.g. for the single child case.
    var clone = createWorkInProgress(fiber, pendingProps);
    clone.index = 0;
    clone.sibling = null;
    return clone;
  }

  function placeChild(newFiber, lastPlacedIndex, newIndex) {
    newFiber.index = newIndex;

    if (!shouldTrackSideEffects) {
      // Noop.
      return lastPlacedIndex;
    }

    var current = newFiber.alternate;

    if (current !== null) {
      var oldIndex = current.index;

      if (oldIndex < lastPlacedIndex) {
        // This is a move.
        newFiber.effectTag = Placement;
        return lastPlacedIndex;
      } else {
        // This item can stay in place.
        return oldIndex;
      }
    } else {
      // This is an insertion.
      newFiber.effectTag = Placement;
      return lastPlacedIndex;
    }
  }

  function placeSingleChild(newFiber) {
    // This is simpler for the single child case. We only need to do a
    // placement for inserting new children.
    if (shouldTrackSideEffects && newFiber.alternate === null) {
      newFiber.effectTag = Placement;
    }

    return newFiber;
  }

  function updateTextNode(returnFiber, current, textContent, expirationTime) {
    if (current === null || current.tag !== HostText) {
      // Insert
      var created = createFiberFromText(textContent, returnFiber.mode, expirationTime);
      created.return = returnFiber;
      return created;
    } else {
      // Update
      var existing = useFiber(current, textContent);
      existing.return = returnFiber;
      return existing;
    }
  }

  function updateElement(returnFiber, current, element, expirationTime) {
    if (current !== null) {
      if (current.elementType === element.type || ( // Keep this check inline so it only runs on the false path:
       isCompatibleFamilyForHotReloading(current, element) )) {
        // Move based on index
        var existing = useFiber(current, element.props);
        existing.ref = coerceRef(returnFiber, current, element);
        existing.return = returnFiber;

        {
          existing._debugSource = element._source;
          existing._debugOwner = element._owner;
        }

        return existing;
      }
    } // Insert


    var created = createFiberFromElement(element, returnFiber.mode, expirationTime);
    created.ref = coerceRef(returnFiber, current, element);
    created.return = returnFiber;
    return created;
  }

  function updatePortal(returnFiber, current, portal, expirationTime) {
    if (current === null || current.tag !== HostPortal || current.stateNode.containerInfo !== portal.containerInfo || current.stateNode.implementation !== portal.implementation) {
      // Insert
      var created = createFiberFromPortal(portal, returnFiber.mode, expirationTime);
      created.return = returnFiber;
      return created;
    } else {
      // Update
      var existing = useFiber(current, portal.children || []);
      existing.return = returnFiber;
      return existing;
    }
  }

  function updateFragment(returnFiber, current, fragment, expirationTime, key) {
    if (current === null || current.tag !== Fragment) {
      // Insert
      var created = createFiberFromFragment(fragment, returnFiber.mode, expirationTime, key);
      created.return = returnFiber;
      return created;
    } else {
      // Update
      var existing = useFiber(current, fragment);
      existing.return = returnFiber;
      return existing;
    }
  }

  function createChild(returnFiber, newChild, expirationTime) {
    if (typeof newChild === 'string' || typeof newChild === 'number') {
      // Text nodes don't have keys. If the previous node is implicitly keyed
      // we can continue to replace it without aborting even if it is not a text
      // node.
      var created = createFiberFromText('' + newChild, returnFiber.mode, expirationTime);
      created.return = returnFiber;
      return created;
    }

    if (typeof newChild === 'object' && newChild !== null) {
      switch (newChild.$$typeof) {
        case REACT_ELEMENT_TYPE:
          {
            var _created = createFiberFromElement(newChild, returnFiber.mode, expirationTime);

            _created.ref = coerceRef(returnFiber, null, newChild);
            _created.return = returnFiber;
            return _created;
          }

        case REACT_PORTAL_TYPE:
          {
            var _created2 = createFiberFromPortal(newChild, returnFiber.mode, expirationTime);

            _created2.return = returnFiber;
            return _created2;
          }
      }

      if (isArray$1(newChild) || getIteratorFn(newChild)) {
        var _created3 = createFiberFromFragment(newChild, returnFiber.mode, expirationTime, null);

        _created3.return = returnFiber;
        return _created3;
      }

      throwOnInvalidObjectType(returnFiber, newChild);
    }

    {
      if (typeof newChild === 'function') {
        warnOnFunctionType();
      }
    }

    return null;
  }

  function updateSlot(returnFiber, oldFiber, newChild, expirationTime) {
    // Update the fiber if the keys match, otherwise return null.
    var key = oldFiber !== null ? oldFiber.key : null;

    if (typeof newChild === 'string' || typeof newChild === 'number') {
      // Text nodes don't have keys. If the previous node is implicitly keyed
      // we can continue to replace it without aborting even if it is not a text
      // node.
      if (key !== null) {
        return null;
      }

      return updateTextNode(returnFiber, oldFiber, '' + newChild, expirationTime);
    }

    if (typeof newChild === 'object' && newChild !== null) {
      switch (newChild.$$typeof) {
        case REACT_ELEMENT_TYPE:
          {
            if (newChild.key === key) {
              if (newChild.type === REACT_FRAGMENT_TYPE) {
                return updateFragment(returnFiber, oldFiber, newChild.props.children, expirationTime, key);
              }

              return updateElement(returnFiber, oldFiber, newChild, expirationTime);
            } else {
              return null;
            }
          }

        case REACT_PORTAL_TYPE:
          {
            if (newChild.key === key) {
              return updatePortal(returnFiber, oldFiber, newChild, expirationTime);
            } else {
              return null;
            }
          }
      }

      if (isArray$1(newChild) || getIteratorFn(newChild)) {
        if (key !== null) {
          return null;
        }

        return updateFragment(returnFiber, oldFiber, newChild, expirationTime, null);
      }

      throwOnInvalidObjectType(returnFiber, newChild);
    }

    {
      if (typeof newChild === 'function') {
        warnOnFunctionType();
      }
    }

    return null;
  }

  function updateFromMap(existingChildren, returnFiber, newIdx, newChild, expirationTime) {
    if (typeof newChild === 'string' || typeof newChild === 'number') {
      // Text nodes don't have keys, so we neither have to check the old nor
      // new node for the key. If both are text nodes, they match.
      var matchedFiber = existingChildren.get(newIdx) || null;
      return updateTextNode(returnFiber, matchedFiber, '' + newChild, expirationTime);
    }

    if (typeof newChild === 'object' && newChild !== null) {
      switch (newChild.$$typeof) {
        case REACT_ELEMENT_TYPE:
          {
            var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;

            if (newChild.type === REACT_FRAGMENT_TYPE) {
              return updateFragment(returnFiber, _matchedFiber, newChild.props.children, expirationTime, newChild.key);
            }

            return updateElement(returnFiber, _matchedFiber, newChild, expirationTime);
          }

        case REACT_PORTAL_TYPE:
          {
            var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;

            return updatePortal(returnFiber, _matchedFiber2, newChild, expirationTime);
          }
      }

      if (isArray$1(newChild) || getIteratorFn(newChild)) {
        var _matchedFiber3 = existingChildren.get(newIdx) || null;

        return updateFragment(returnFiber, _matchedFiber3, newChild, expirationTime, null);
      }

      throwOnInvalidObjectType(returnFiber, newChild);
    }

    {
      if (typeof newChild === 'function') {
        warnOnFunctionType();
      }
    }

    return null;
  }
  /**
   * Warns if there is a duplicate or missing key
   */


  function warnOnInvalidKey(child, knownKeys) {
    {
      if (typeof child !== 'object' || child === null) {
        return knownKeys;
      }

      switch (child.$$typeof) {
        case REACT_ELEMENT_TYPE:
        case REACT_PORTAL_TYPE:
          warnForMissingKey(child);
          var key = child.key;

          if (typeof key !== 'string') {
            break;
          }

          if (knownKeys === null) {
            knownKeys = new Set();
            knownKeys.add(key);
            break;
          }

          if (!knownKeys.has(key)) {
            knownKeys.add(key);
            break;
          }

          error('Encountered two children with the same key, `%s`. ' + 'Keys should be unique so that components maintain their identity ' + 'across updates. Non-unique keys may cause children to be ' + 'duplicated and/or omitted — the behavior is unsupported and ' + 'could change in a future version.', key);

          break;
      }
    }

    return knownKeys;
  }

  function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, expirationTime) {
    // This algorithm can't optimize by searching from both ends since we
    // don't have backpointers on fibers. I'm trying to see how far we can get
    // with that model. If it ends up not being worth the tradeoffs, we can
    // add it later.
    // Even with a two ended optimization, we'd want to optimize for the case
    // where there are few changes and brute force the comparison instead of
    // going for the Map. It'd like to explore hitting that path first in
    // forward-only mode and only go for the Map once we notice that we need
    // lots of look ahead. This doesn't handle reversal as well as two ended
    // search but that's unusual. Besides, for the two ended optimization to
    // work on Iterables, we'd need to copy the whole set.
    // In this first iteration, we'll just live with hitting the bad case
    // (adding everything to a Map) in for every insert/move.
    // If you change this code, also update reconcileChildrenIterator() which
    // uses the same algorithm.
    {
      // First, validate keys.
      var knownKeys = null;

      for (var i = 0; i < newChildren.length; i++) {
        var child = newChildren[i];
        knownKeys = warnOnInvalidKey(child, knownKeys);
      }
    }

    var resultingFirstChild = null;
    var previousNewFiber = null;
    var oldFiber = currentFirstChild;
    var lastPlacedIndex = 0;
    var newIdx = 0;
    var nextOldFiber = null;

    for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
      if (oldFiber.index > newIdx) {
        nextOldFiber = oldFiber;
        oldFiber = null;
      } else {
        nextOldFiber = oldFiber.sibling;
      }

      var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], expirationTime);

      if (newFiber === null) {
        // TODO: This breaks on empty slots like null children. That's
        // unfortunate because it triggers the slow path all the time. We need
        // a better way to communicate whether this was a miss or null,
        // boolean, undefined, etc.
        if (oldFiber === null) {
          oldFiber = nextOldFiber;
        }

        break;
      }

      if (shouldTrackSideEffects) {
        if (oldFiber && newFiber.alternate === null) {
          // We matched the slot, but we didn't reuse the existing fiber, so we
          // need to delete the existing child.
          deleteChild(returnFiber, oldFiber);
        }
      }

      lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);

      if (previousNewFiber === null) {
        // TODO: Move out of the loop. This only happens for the first run.
        resultingFirstChild = newFiber;
      } else {
        // TODO: Defer siblings if we're not at the right index for this slot.
        // I.e. if we had null values before, then we want to defer this
        // for each null value. However, we also don't want to call updateSlot
        // with the previous one.
        previousNewFiber.sibling = newFiber;
      }

      previousNewFiber = newFiber;
      oldFiber = nextOldFiber;
    }

    if (newIdx === newChildren.length) {
      // We've reached the end of the new children. We can delete the rest.
      deleteRemainingChildren(returnFiber, oldFiber);
      return resultingFirstChild;
    }

    if (oldFiber === null) {
      // If we don't have any more existing children we can choose a fast path
      // since the rest will all be insertions.
      for (; newIdx < newChildren.length; newIdx++) {
        var _newFiber = createChild(returnFiber, newChildren[newIdx], expirationTime);

        if (_newFiber === null) {
          continue;
        }

        lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);

        if (previousNewFiber === null) {
          // TODO: Move out of the loop. This only happens for the first run.
          resultingFirstChild = _newFiber;
        } else {
          previousNewFiber.sibling = _newFiber;
        }

        previousNewFiber = _newFiber;
      }

      return resultingFirstChild;
    } // Add all children to a key map for quick lookups.


    var existingChildren = mapRemainingChildren(returnFiber, oldFiber); // Keep scanning and use the map to restore deleted items as moves.

    for (; newIdx < newChildren.length; newIdx++) {
      var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], expirationTime);

      if (_newFiber2 !== null) {
        if (shouldTrackSideEffects) {
          if (_newFiber2.alternate !== null) {
            // The new fiber is a work in progress, but if there exists a
            // current, that means that we reused the fiber. We need to delete
            // it from the child list so that we don't add it to the deletion
            // list.
            existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
          }
        }

        lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);

        if (previousNewFiber === null) {
          resultingFirstChild = _newFiber2;
        } else {
          previousNewFiber.sibling = _newFiber2;
        }

        previousNewFiber = _newFiber2;
      }
    }

    if (shouldTrackSideEffects) {
      // Any existing children that weren't consumed above were deleted. We need
      // to add them to the deletion list.
      existingChildren.forEach(function (child) {
        return deleteChild(returnFiber, child);
      });
    }

    return resultingFirstChild;
  }

  function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, expirationTime) {
    // This is the same implementation as reconcileChildrenArray(),
    // but using the iterator instead.
    var iteratorFn = getIteratorFn(newChildrenIterable);

    if (!(typeof iteratorFn === 'function')) {
      {
        throw Error( "An object is not an iterable. This error is likely caused by a bug in React. Please file an issue." );
      }
    }

    {
      // We don't support rendering Generators because it's a mutation.
      // See https://github.com/facebook/react/issues/12995
      if (typeof Symbol === 'function' && // $FlowFixMe Flow doesn't know about toStringTag
      newChildrenIterable[Symbol.toStringTag] === 'Generator') {
        if (!didWarnAboutGenerators) {
          error('Using Generators as children is unsupported and will likely yield ' + 'unexpected results because enumerating a generator mutates it. ' + 'You may convert it to an array with `Array.from()` or the ' + '`[...spread]` operator before rendering. Keep in mind ' + 'you might need to polyfill these features for older browsers.');
        }

        didWarnAboutGenerators = true;
      } // Warn about using Maps as children


      if (newChildrenIterable.entries === iteratorFn) {
        if (!didWarnAboutMaps) {
          error('Using Maps as children is unsupported and will likely yield ' + 'unexpected results. Convert it to a sequence/iterable of keyed ' + 'ReactElements instead.');
        }

        didWarnAboutMaps = true;
      } // First, validate keys.
      // We'll get a different iterator later for the main pass.


      var _newChildren = iteratorFn.call(newChildrenIterable);

      if (_newChildren) {
        var knownKeys = null;

        var _step = _newChildren.next();

        for (; !_step.done; _step = _newChildren.next()) {
          var child = _step.value;
          knownKeys = warnOnInvalidKey(child, knownKeys);
        }
      }
    }

    var newChildren = iteratorFn.call(newChildrenIterable);

    if (!(newChildren != null)) {
      {
        throw Error( "An iterable object provided no iterator." );
      }
    }

    var resultingFirstChild = null;
    var previousNewFiber = null;
    var oldFiber = currentFirstChild;
    var lastPlacedIndex = 0;
    var newIdx = 0;
    var nextOldFiber = null;
    var step = newChildren.next();

    for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
      if (oldFiber.index > newIdx) {
        nextOldFiber = oldFiber;
        oldFiber = null;
      } else {
        nextOldFiber = oldFiber.sibling;
      }

      var newFiber = updateSlot(returnFiber, oldFiber, step.value, expirationTime);

      if (newFiber === null) {
        // TODO: This breaks on empty slots like null children. That's
        // unfortunate because it triggers the slow path all the time. We need
        // a better way to communicate whether this was a miss or null,
        // boolean, undefined, etc.
        if (oldFiber === null) {
          oldFiber = nextOldFiber;
        }

        break;
      }

      if (shouldTrackSideEffects) {
        if (oldFiber && newFiber.alternate === null) {
          // We matched the slot, but we didn't reuse the existing fiber, so we
          // need to delete the existing child.
          deleteChild(returnFiber, oldFiber);
        }
      }

      lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);

      if (previousNewFiber === null) {
        // TODO: Move out of the loop. This only happens for the first run.
        resultingFirstChild = newFiber;
      } else {
        // TODO: Defer siblings if we're not at the right index for this slot.
        // I.e. if we had null values before, then we want to defer this
        // for each null value. However, we also don't want to call updateSlot
        // with the previous one.
        previousNewFiber.sibling = newFiber;
      }

      previousNewFiber = newFiber;
      oldFiber = nextOldFiber;
    }

    if (step.done) {
      // We've reached the end of the new children. We can delete the rest.
      deleteRemainingChildren(returnFiber, oldFiber);
      return resultingFirstChild;
    }

    if (oldFiber === null) {
      // If we don't have any more existing children we can choose a fast path
      // since the rest will all be insertions.
      for (; !step.done; newIdx++, step = newChildren.next()) {
        var _newFiber3 = createChild(returnFiber, step.value, expirationTime);

        if (_newFiber3 === null) {
          continue;
        }

        lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);

        if (previousNewFiber === null) {
          // TODO: Move out of the loop. This only happens for the first run.
          resultingFirstChild = _newFiber3;
        } else {
          previousNewFiber.sibling = _newFiber3;
        }

        previousNewFiber = _newFiber3;
      }

      return resultingFirstChild;
    } // Add all children to a key map for quick lookups.


    var existingChildren = mapRemainingChildren(returnFiber, oldFiber); // Keep scanning and use the map to restore deleted items as moves.

    for (; !step.done; newIdx++, step = newChildren.next()) {
      var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, expirationTime);

      if (_newFiber4 !== null) {
        if (shouldTrackSideEffects) {
          if (_newFiber4.alternate !== null) {
            // The new fiber is a work in progress, but if there exists a
            // current, that means that we reused the fiber. We need to delete
            // it from the child list so that we don't add it to the deletion
            // list.
            existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
          }
        }

        lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);

        if (previousNewFiber === null) {
          resultingFirstChild = _newFiber4;
        } else {
          previousNewFiber.sibling = _newFiber4;
        }

        previousNewFiber = _newFiber4;
      }
    }

    if (shouldTrackSideEffects) {
      // Any existing children that weren't consumed above were deleted. We need
      // to add them to the deletion list.
      existingChildren.forEach(function (child) {
        return deleteChild(returnFiber, child);
      });
    }

    return resultingFirstChild;
  }

  function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, expirationTime) {
    // There's no need to check for keys on text nodes since we don't have a
    // way to define them.
    if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
      // We already have an existing node so let's just update it and delete
      // the rest.
      deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
      var existing = useFiber(currentFirstChild, textContent);
      existing.return = returnFiber;
      return existing;
    } // The existing first child is not a text node so we need to create one
    // and delete the existing ones.


    deleteRemainingChildren(returnFiber, currentFirstChild);
    var created = createFiberFromText(textContent, returnFiber.mode, expirationTime);
    created.return = returnFiber;
    return created;
  }

  function reconcileSingleElement(returnFiber, currentFirstChild, element, expirationTime) {
    var key = element.key;
    var child = currentFirstChild;

    while (child !== null) {
      // TODO: If key === null and child.key === null, then this only applies to
      // the first item in the list.
      if (child.key === key) {
        switch (child.tag) {
          case Fragment:
            {
              if (element.type === REACT_FRAGMENT_TYPE) {
                deleteRemainingChildren(returnFiber, child.sibling);
                var existing = useFiber(child, element.props.children);
                existing.return = returnFiber;

                {
                  existing._debugSource = element._source;
                  existing._debugOwner = element._owner;
                }

                return existing;
              }

              break;
            }

          case Block:

          // We intentionally fallthrough here if enableBlocksAPI is not on.
          // eslint-disable-next-lined no-fallthrough

          default:
            {
              if (child.elementType === element.type || ( // Keep this check inline so it only runs on the false path:
               isCompatibleFamilyForHotReloading(child, element) )) {
                deleteRemainingChildren(returnFiber, child.sibling);

                var _existing3 = useFiber(child, element.props);

                _existing3.ref = coerceRef(returnFiber, child, element);
                _existing3.return = returnFiber;

                {
                  _existing3._debugSource = element._source;
                  _existing3._debugOwner = element._owner;
                }

                return _existing3;
              }

              break;
            }
        } // Didn't match.


        deleteRemainingChildren(returnFiber, child);
        break;
      } else {
        deleteChild(returnFiber, child);
      }

      child = child.sibling;
    }

    if (element.type === REACT_FRAGMENT_TYPE) {
      var created = createFiberFromFragment(element.props.children, returnFiber.mode, expirationTime, element.key);
      created.return = returnFiber;
      return created;
    } else {
      var _created4 = createFiberFromElement(element, returnFiber.mode, expirationTime);

      _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
      _created4.return = returnFiber;
      return _created4;
    }
  }

  function reconcileSinglePortal(returnFiber, currentFirstChild, portal, expirationTime) {
    var key = portal.key;
    var child = currentFirstChild;

    while (child !== null) {
      // TODO: If key === null and child.key === null, then this only applies to
      // the first item in the list.
      if (child.key === key) {
        if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
          deleteRemainingChildren(returnFiber, child.sibling);
          var existing = useFiber(child, portal.children || []);
          existing.return = returnFiber;
          return existing;
        } else {
          deleteRemainingChildren(returnFiber, child);
          break;
        }
      } else {
        deleteChild(returnFiber, child);
      }

      child = child.sibling;
    }

    var created = createFiberFromPortal(portal, returnFiber.mode, expirationTime);
    created.return = returnFiber;
    return created;
  } // This API will tag the children with the side-effect of the reconciliation
  // itself. They will be added to the side-effect list as we pass through the
  // children and the parent.


  function reconcileChildFibers(returnFiber, currentFirstChild, newChild, expirationTime) {
    // This function is not recursive.
    // If the top level item is an array, we treat it as a set of children,
    // not as a fragment. Nested arrays on the other hand will be treated as
    // fragment nodes. Recursion happens at the normal flow.
    // Handle top level unkeyed fragments as if they were arrays.
    // This leads to an ambiguity between <>{[...]}</> and <>...</>.
    // We treat the ambiguous cases above the same.
    var isUnkeyedTopLevelFragment = typeof newChild === 'object' && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;

    if (isUnkeyedTopLevelFragment) {
      newChild = newChild.props.children;
    } // Handle object types


    var isObject = typeof newChild === 'object' && newChild !== null;

    if (isObject) {
      switch (newChild.$$typeof) {
        case REACT_ELEMENT_TYPE:
          return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, expirationTime));

        case REACT_PORTAL_TYPE:
          return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, expirationTime));
      }
    }

    if (typeof newChild === 'string' || typeof newChild === 'number') {
      return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, '' + newChild, expirationTime));
    }

    if (isArray$1(newChild)) {
      return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, expirationTime);
    }

    if (getIteratorFn(newChild)) {
      return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, expirationTime);
    }

    if (isObject) {
      throwOnInvalidObjectType(returnFiber, newChild);
    }

    {
      if (typeof newChild === 'function') {
        warnOnFunctionType();
      }
    }

    if (typeof newChild === 'undefined' && !isUnkeyedTopLevelFragment) {
      // If the new child is undefined, and the return fiber is a composite
      // component, throw an error. If Fiber return types are disabled,
      // we already threw above.
      switch (returnFiber.tag) {
        case ClassComponent:
          {
            {
              var instance = returnFiber.stateNode;

              if (instance.render._isMockFunction) {
                // We allow auto-mocks to proceed as if they're returning null.
                break;
              }
            }
          }
        // Intentionally fall through to the next case, which handles both
        // functions and classes
        // eslint-disable-next-lined no-fallthrough

        case FunctionComponent:
          {
            var Component = returnFiber.type;

            {
              {
                throw Error( (Component.displayName || Component.name || 'Component') + "(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null." );
              }
            }
          }
      }
    } // Remaining cases are all treated as empty.


    return deleteRemainingChildren(returnFiber, currentFirstChild);
  }

  return reconcileChildFibers;
}

var reconcileChildFibers = ChildReconciler(true);
var mountChildFibers = ChildReconciler(false);
function cloneChildFibers(current, workInProgress) {
  if (!(current === null || workInProgress.child === current.child)) {
    {
      throw Error( "Resuming work not yet implemented." );
    }
  }

  if (workInProgress.child === null) {
    return;
  }

  var currentChild = workInProgress.child;
  var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
  workInProgress.child = newChild;
  newChild.return = workInProgress;

  while (currentChild.sibling !== null) {
    currentChild = currentChild.sibling;
    newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
    newChild.return = workInProgress;
  }

  newChild.sibling = null;
} // Reset a workInProgress child set to prepare it for a second pass.

function resetChildFibers(workInProgress, renderExpirationTime) {
  var child = workInProgress.child;

  while (child !== null) {
    resetWorkInProgress(child, renderExpirationTime);
    child = child.sibling;
  }
}

var NO_CONTEXT = {};
var contextStackCursor$1 = createCursor(NO_CONTEXT);
var contextFiberStackCursor = createCursor(NO_CONTEXT);
var rootInstanceStackCursor = createCursor(NO_CONTEXT);

function requiredContext(c) {
  if (!(c !== NO_CONTEXT)) {
    {
      throw Error( "Expected host context to exist. This error is likely caused by a bug in React. Please file an issue." );
    }
  }

  return c;
}

function getRootHostContainer() {
  var rootInstance = requiredContext(rootInstanceStackCursor.current);
  return rootInstance;
}

function pushHostContainer(fiber, nextRootInstance) {
  // Push current root instance onto the stack;
  // This allows us to reset root when portals are popped.
  push(rootInstanceStackCursor, nextRootInstance, fiber); // Track the context and the Fiber that provided it.
  // This enables us to pop only Fibers that provide unique contexts.

  push(contextFiberStackCursor, fiber, fiber); // Finally, we need to push the host context to the stack.
  // However, we can't just call getRootHostContext() and push it because
  // we'd have a different number of entries on the stack depending on
  // whether getRootHostContext() throws somewhere in renderer code or not.
  // So we push an empty value first. This lets us safely unwind on errors.

  push(contextStackCursor$1, NO_CONTEXT, fiber);
  var nextRootContext = getRootHostContext(nextRootInstance); // Now that we know this function doesn't throw, replace it.

  pop(contextStackCursor$1, fiber);
  push(contextStackCursor$1, nextRootContext, fiber);
}

function popHostContainer(fiber) {
  pop(contextStackCursor$1, fiber);
  pop(contextFiberStackCursor, fiber);
  pop(rootInstanceStackCursor, fiber);
}

function getHostContext() {
  var context = requiredContext(contextStackCursor$1.current);
  return context;
}

function pushHostContext(fiber) {
  var rootInstance = requiredContext(rootInstanceStackCursor.current);
  var context = requiredContext(contextStackCursor$1.current);
  var nextContext = getChildHostContext(context, fiber.type); // Don't push this Fiber's context unless it's unique.

  if (context === nextContext) {
    return;
  } // Track the context and the Fiber that provided it.
  // This enables us to pop only Fibers that provide unique contexts.


  push(contextFiberStackCursor, fiber, fiber);
  push(contextStackCursor$1, nextContext, fiber);
}

function popHostContext(fiber) {
  // Do not pop unless this Fiber provided the current context.
  // pushHostContext() only pushes Fibers that provide unique contexts.
  if (contextFiberStackCursor.current !== fiber) {
    return;
  }

  pop(contextStackCursor$1, fiber);
  pop(contextFiberStackCursor, fiber);
}

var DefaultSuspenseContext = 0; // The Suspense Context is split into two parts. The lower bits is
// inherited deeply down the subtree. The upper bits only affect
// this immediate suspense boundary and gets reset each new
// boundary or suspense list.

var SubtreeSuspenseContextMask = 1; // Subtree Flags:
// InvisibleParentSuspenseContext indicates that one of our parent Suspense
// boundaries is not currently showing visible main content.
// Either because it is already showing a fallback or is not mounted at all.
// We can use this to determine if it is desirable to trigger a fallback at
// the parent. If not, then we might need to trigger undesirable boundaries
// and/or suspend the commit to avoid hiding the parent content.

var InvisibleParentSuspenseContext = 1; // Shallow Flags:
// ForceSuspenseFallback can be used by SuspenseList to force newly added
// items into their fallback state during one of the render passes.

var ForceSuspenseFallback = 2;
var suspenseStackCursor = createCursor(DefaultSuspenseContext);
function hasSuspenseContext(parentContext, flag) {
  return (parentContext & flag) !== 0;
}
function setDefaultShallowSuspenseContext(parentContext) {
  return parentContext & SubtreeSuspenseContextMask;
}
function setShallowSuspenseContext(parentContext, shallowContext) {
  return parentContext & SubtreeSuspenseContextMask | shallowContext;
}
function addSubtreeSuspenseContext(parentContext, subtreeContext) {
  return parentContext | subtreeContext;
}
function pushSuspenseContext(fiber, newContext) {
  push(suspenseStackCursor, newContext, fiber);
}
function popSuspenseContext(fiber) {
  pop(suspenseStackCursor, fiber);
}

function shouldCaptureSuspense(workInProgress, hasInvisibleParent) {
  // If it was the primary children that just suspended, capture and render the
  // fallback. Otherwise, don't capture and bubble to the next boundary.
  var nextState = workInProgress.memoizedState;

  if (nextState !== null) {
    if (nextState.dehydrated !== null) {
      // A dehydrated boundary always captures.
      return true;
    }

    return false;
  }

  var props = workInProgress.memoizedProps; // In order to capture, the Suspense component must have a fallback prop.

  if (props.fallback === undefined) {
    return false;
  } // Regular boundaries always capture.


  if (props.unstable_avoidThisFallback !== true) {
    return true;
  } // If it's a boundary we should avoid, then we prefer to bubble up to the
  // parent boundary if it is currently invisible.


  if (hasInvisibleParent) {
    return false;
  } // If the parent is not able to handle it, we must handle it.


  return true;
}
function findFirstSuspended(row) {
  var node = row;

  while (node !== null) {
    if (node.tag === SuspenseComponent) {
      var state = node.memoizedState;

      if (state !== null) {
        var dehydrated = state.dehydrated;

        if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {
          return node;
        }
      }
    } else if (node.tag === SuspenseListComponent && // revealOrder undefined can't be trusted because it don't
    // keep track of whether it suspended or not.
    node.memoizedProps.revealOrder !== undefined) {
      var didSuspend = (node.effectTag & DidCapture) !== NoEffect;

      if (didSuspend) {
        return node;
      }
    } else if (node.child !== null) {
      node.child.return = node;
      node = node.child;
      continue;
    }

    if (node === row) {
      return null;
    }

    while (node.sibling === null) {
      if (node.return === null || node.return === row) {
        return null;
      }

      node = node.return;
    }

    node.sibling.return = node.return;
    node = node.sibling;
  }

  return null;
}

function createDeprecatedResponderListener(responder, props) {
  var eventResponderListener = {
    responder: responder,
    props: props
  };

  {
    Object.freeze(eventResponderListener);
  }

  return eventResponderListener;
}

var HasEffect =
/* */
1; // Represents the phase in which the effect (not the clean-up) fires.

var Layout =
/*    */
2;
var Passive$1 =
/*   */
4;

var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher,
    ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
var didWarnAboutMismatchedHooksForComponent;

{
  didWarnAboutMismatchedHooksForComponent = new Set();
}

// These are set right before calling the component.
var renderExpirationTime = NoWork; // The work-in-progress fiber. I've named it differently to distinguish it from
// the work-in-progress hook.

var currentlyRenderingFiber$1 = null; // Hooks are stored as a linked list on the fiber's memoizedState field. The
// current hook list is the list that belongs to the current fiber. The
// work-in-progress hook list is a new list that will be added to the
// work-in-progress fiber.

var currentHook = null;
var workInProgressHook = null; // Whether an update was scheduled at any point during the render phase. This
// does not get reset if we do another render pass; only when we're completely
// finished evaluating this component. This is an optimization so we know
// whether we need to clear render phase updates after a throw.

var didScheduleRenderPhaseUpdate = false;
var RE_RENDER_LIMIT = 25; // In DEV, this is the name of the currently executing primitive hook

var currentHookNameInDev = null; // In DEV, this list ensures that hooks are called in the same order between renders.
// The list stores the order of hooks used during the initial render (mount).
// Subsequent renders (updates) reference this list.

var hookTypesDev = null;
var hookTypesUpdateIndexDev = -1; // In DEV, this tracks whether currently rendering component needs to ignore
// the dependencies for Hooks that need them (e.g. useEffect or useMemo).
// When true, such Hooks will always be "remounted". Only used during hot reload.

var ignorePreviousDependencies = false;

function mountHookTypesDev() {
  {
    var hookName = currentHookNameInDev;

    if (hookTypesDev === null) {
      hookTypesDev = [hookName];
    } else {
      hookTypesDev.push(hookName);
    }
  }
}

function updateHookTypesDev() {
  {
    var hookName = currentHookNameInDev;

    if (hookTypesDev !== null) {
      hookTypesUpdateIndexDev++;

      if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
        warnOnHookMismatchInDev(hookName);
      }
    }
  }
}

function checkDepsAreArrayDev(deps) {
  {
    if (deps !== undefined && deps !== null && !Array.isArray(deps)) {
      // Verify deps, but only on mount to avoid extra checks.
      // It's unlikely their type would change as usually you define them inline.
      error('%s received a final argument that is not an array (instead, received `%s`). When ' + 'specified, the final argument must be an array.', currentHookNameInDev, typeof deps);
    }
  }
}

function warnOnHookMismatchInDev(currentHookName) {
  {
    var componentName = getComponentName(currentlyRenderingFiber$1.type);

    if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
      didWarnAboutMismatchedHooksForComponent.add(componentName);

      if (hookTypesDev !== null) {
        var table = '';
        var secondColumnStart = 30;

        for (var i = 0; i <= hookTypesUpdateIndexDev; i++) {
          var oldHookName = hookTypesDev[i];
          var newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
          var row = i + 1 + ". " + oldHookName; // Extra space so second column lines up
          // lol @ IE not supporting String#repeat

          while (row.length < secondColumnStart) {
            row += ' ';
          }

          row += newHookName + '\n';
          table += row;
        }

        error('React has detected a change in the order of Hooks called by %s. ' + 'This will lead to bugs and errors if not fixed. ' + 'For more information, read the Rules of Hooks: https://fb.me/rules-of-hooks\n\n' + '   Previous render            Next render\n' + '   ------------------------------------------------------\n' + '%s' + '   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n', componentName, table);
      }
    }
  }
}

function throwInvalidHookError() {
  {
    {
      throw Error( "Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://fb.me/react-invalid-hook-call for tips about how to debug and fix this problem." );
    }
  }
}

function areHookInputsEqual(nextDeps, prevDeps) {
  {
    if (ignorePreviousDependencies) {
      // Only true when this component is being hot reloaded.
      return false;
    }
  }

  if (prevDeps === null) {
    {
      error('%s received a final argument during this render, but not during ' + 'the previous render. Even though the final argument is optional, ' + 'its type cannot change between renders.', currentHookNameInDev);
    }

    return false;
  }

  {
    // Don't bother comparing lengths in prod because these arrays should be
    // passed inline.
    if (nextDeps.length !== prevDeps.length) {
      error('The final argument passed to %s changed size between renders. The ' + 'order and size of this array must remain constant.\n\n' + 'Previous: %s\n' + 'Incoming: %s', currentHookNameInDev, "[" + prevDeps.join(', ') + "]", "[" + nextDeps.join(', ') + "]");
    }
  }

  for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {
    if (objectIs(nextDeps[i], prevDeps[i])) {
      continue;
    }

    return false;
  }

  return true;
}

function renderWithHooks(current, workInProgress, Component, props, secondArg, nextRenderExpirationTime) {
  renderExpirationTime = nextRenderExpirationTime;
  currentlyRenderingFiber$1 = workInProgress;

  {
    hookTypesDev = current !== null ? current._debugHookTypes : null;
    hookTypesUpdateIndexDev = -1; // Used for hot reloading:

    ignorePreviousDependencies = current !== null && current.type !== workInProgress.type;
  }

  workInProgress.memoizedState = null;
  workInProgress.updateQueue = null;
  workInProgress.expirationTime = NoWork; // The following should have already been reset
  // currentHook = null;
  // workInProgressHook = null;
  // didScheduleRenderPhaseUpdate = false;
  // TODO Warn if no hooks are used at all during mount, then some are used during update.
  // Currently we will identify the update render as a mount because memoizedState === null.
  // This is tricky because it's valid for certain types of components (e.g. React.lazy)
  // Using memoizedState to differentiate between mount/update only works if at least one stateful hook is used.
  // Non-stateful hooks (e.g. context) don't get added to memoizedState,
  // so memoizedState would be null during updates and mounts.

  {
    if (current !== null && current.memoizedState !== null) {
      ReactCurrentDispatcher.current = HooksDispatcherOnUpdateInDEV;
    } else if (hookTypesDev !== null) {
      // This dispatcher handles an edge case where a component is updating,
      // but no stateful hooks have been used.
      // We want to match the production code behavior (which will use HooksDispatcherOnMount),
      // but with the extra DEV validation to ensure hooks ordering hasn't changed.
      // This dispatcher does that.
      ReactCurrentDispatcher.current = HooksDispatcherOnMountWithHookTypesInDEV;
    } else {
      ReactCurrentDispatcher.current = HooksDispatcherOnMountInDEV;
    }
  }

  var children = Component(props, secondArg); // Check if there was a render phase update

  if (workInProgress.expirationTime === renderExpirationTime) {
    // Keep rendering in a loop for as long as render phase updates continue to
    // be scheduled. Use a counter to prevent infinite loops.
    var numberOfReRenders = 0;

    do {
      workInProgress.expirationTime = NoWork;

      if (!(numberOfReRenders < RE_RENDER_LIMIT)) {
        {
          throw Error( "Too many re-renders. React limits the number of renders to prevent an infinite loop." );
        }
      }

      numberOfReRenders += 1;

      {
        // Even when hot reloading, allow dependencies to stabilize
        // after first render to prevent infinite render phase updates.
        ignorePreviousDependencies = false;
      } // Start over from the beginning of the list


      currentHook = null;
      workInProgressHook = null;
      workInProgress.updateQueue = null;

      {
        // Also validate hook order for cascading updates.
        hookTypesUpdateIndexDev = -1;
      }

      ReactCurrentDispatcher.current =  HooksDispatcherOnRerenderInDEV ;
      children = Component(props, secondArg);
    } while (workInProgress.expirationTime === renderExpirationTime);
  } // We can assume the previous dispatcher is always this one, since we set it
  // at the beginning of the render phase and there's no re-entrancy.


  ReactCurrentDispatcher.current = ContextOnlyDispatcher;

  {
    workInProgress._debugHookTypes = hookTypesDev;
  } // This check uses currentHook so that it works the same in DEV and prod bundles.
  // hookTypesDev could catch more cases (e.g. context) but only in DEV bundles.


  var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
  renderExpirationTime = NoWork;
  currentlyRenderingFiber$1 = null;
  currentHook = null;
  workInProgressHook = null;

  {
    currentHookNameInDev = null;
    hookTypesDev = null;
    hookTypesUpdateIndexDev = -1;
  }

  didScheduleRenderPhaseUpdate = false;

  if (!!didRenderTooFewHooks) {
    {
      throw Error( "Rendered fewer hooks than expected. This may be caused by an accidental early return statement." );
    }
  }

  return children;
}
function bailoutHooks(current, workInProgress, expirationTime) {
  workInProgress.updateQueue = current.updateQueue;
  workInProgress.effectTag &= ~(Passive | Update);

  if (current.expirationTime <= expirationTime) {
    current.expirationTime = NoWork;
  }
}
function resetHooksAfterThrow() {
  // We can assume the previous dispatcher is always this one, since we set it
  // at the beginning of the render phase and there's no re-entrancy.
  ReactCurrentDispatcher.current = ContextOnlyDispatcher;

  if (didScheduleRenderPhaseUpdate) {
    // There were render phase updates. These are only valid for this render
    // phase, which we are now aborting. Remove the updates from the queues so
    // they do not persist to the next render. Do not remove updates from hooks
    // that weren't processed.
    //
    // Only reset the updates from the queue if it has a clone. If it does
    // not have a clone, that means it wasn't processed, and the updates were
    // scheduled before we entered the render phase.
    var hook = currentlyRenderingFiber$1.memoizedState;

    while (hook !== null) {
      var queue = hook.queue;

      if (queue !== null) {
        queue.pending = null;
      }

      hook = hook.next;
    }
  }

  renderExpirationTime = NoWork;
  currentlyRenderingFiber$1 = null;
  currentHook = null;
  workInProgressHook = null;

  {
    hookTypesDev = null;
    hookTypesUpdateIndexDev = -1;
    currentHookNameInDev = null;
  }

  didScheduleRenderPhaseUpdate = false;
}

function mountWorkInProgressHook() {
  var hook = {
    memoizedState: null,
    baseState: null,
    baseQueue: null,
    queue: null,
    next: null
  };

  if (workInProgressHook === null) {
    // This is the first hook in the list
    currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
  } else {
    // Append to the end of the list
    workInProgressHook = workInProgressHook.next = hook;
  }

  return workInProgressHook;
}

function updateWorkInProgressHook() {
  // This function is used both for updates and for re-renders triggered by a
  // render phase update. It assumes there is either a current hook we can
  // clone, or a work-in-progress hook from a previous render pass that we can
  // use as a base. When we reach the end of the base list, we must switch to
  // the dispatcher used for mounts.
  var nextCurrentHook;

  if (currentHook === null) {
    var current = currentlyRenderingFiber$1.alternate;

    if (current !== null) {
      nextCurrentHook = current.memoizedState;
    } else {
      nextCurrentHook = null;
    }
  } else {
    nextCurrentHook = currentHook.next;
  }

  var nextWorkInProgressHook;

  if (workInProgressHook === null) {
    nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
  } else {
    nextWorkInProgressHook = workInProgressHook.next;
  }

  if (nextWorkInProgressHook !== null) {
    // There's already a work-in-progress. Reuse it.
    workInProgressHook = nextWorkInProgressHook;
    nextWorkInProgressHook = workInProgressHook.next;
    currentHook = nextCurrentHook;
  } else {
    // Clone from the current hook.
    if (!(nextCurrentHook !== null)) {
      {
        throw Error( "Rendered more hooks than during the previous render." );
      }
    }

    currentHook = nextCurrentHook;
    var newHook = {
      memoizedState: currentHook.memoizedState,
      baseState: currentHook.baseState,
      baseQueue: currentHook.baseQueue,
      queue: currentHook.queue,
      next: null
    };

    if (workInProgressHook === null) {
      // This is the first hook in the list.
      currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
    } else {
      // Append to the end of the list.
      workInProgressHook = workInProgressHook.next = newHook;
    }
  }

  return workInProgressHook;
}

function createFunctionComponentUpdateQueue() {
  return {
    lastEffect: null
  };
}

function basicStateReducer(state, action) {
  // $FlowFixMe: Flow doesn't like mixed types
  return typeof action === 'function' ? action(state) : action;
}

function mountReducer(reducer, initialArg, init) {
  var hook = mountWorkInProgressHook();
  var initialState;

  if (init !== undefined) {
    initialState = init(initialArg);
  } else {
    initialState = initialArg;
  }

  hook.memoizedState = hook.baseState = initialState;
  var queue = hook.queue = {
    pending: null,
    dispatch: null,
    lastRenderedReducer: reducer,
    lastRenderedState: initialState
  };
  var dispatch = queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue);
  return [hook.memoizedState, dispatch];
}

function updateReducer(reducer, initialArg, init) {
  var hook = updateWorkInProgressHook();
  var queue = hook.queue;

  if (!(queue !== null)) {
    {
      throw Error( "Should have a queue. This is likely a bug in React. Please file an issue." );
    }
  }

  queue.lastRenderedReducer = reducer;
  var current = currentHook; // The last rebase update that is NOT part of the base state.

  var baseQueue = current.baseQueue; // The last pending update that hasn't been processed yet.

  var pendingQueue = queue.pending;

  if (pendingQueue !== null) {
    // We have new updates that haven't been processed yet.
    // We'll add them to the base queue.
    if (baseQueue !== null) {
      // Merge the pending queue and the base queue.
      var baseFirst = baseQueue.next;
      var pendingFirst = pendingQueue.next;
      baseQueue.next = pendingFirst;
      pendingQueue.next = baseFirst;
    }

    current.baseQueue = baseQueue = pendingQueue;
    queue.pending = null;
  }

  if (baseQueue !== null) {
    // We have a queue to process.
    var first = baseQueue.next;
    var newState = current.baseState;
    var newBaseState = null;
    var newBaseQueueFirst = null;
    var newBaseQueueLast = null;
    var update = first;

    do {
      var updateExpirationTime = update.expirationTime;

      if (updateExpirationTime < renderExpirationTime) {
        // Priority is insufficient. Skip this update. If this is the first
        // skipped update, the previous update/state is the new base
        // update/state.
        var clone = {
          expirationTime: update.expirationTime,
          suspenseConfig: update.suspenseConfig,
          action: update.action,
          eagerReducer: update.eagerReducer,
          eagerState: update.eagerState,
          next: null
        };

        if (newBaseQueueLast === null) {
          newBaseQueueFirst = newBaseQueueLast = clone;
          newBaseState = newState;
        } else {
          newBaseQueueLast = newBaseQueueLast.next = clone;
        } // Update the remaining priority in the queue.


        if (updateExpirationTime > currentlyRenderingFiber$1.expirationTime) {
          currentlyRenderingFiber$1.expirationTime = updateExpirationTime;
          markUnprocessedUpdateTime(updateExpirationTime);
        }
      } else {
        // This update does have sufficient priority.
        if (newBaseQueueLast !== null) {
          var _clone = {
            expirationTime: Sync,
            // This update is going to be committed so we never want uncommit it.
            suspenseConfig: update.suspenseConfig,
            action: update.action,
            eagerReducer: update.eagerReducer,
            eagerState: update.eagerState,
            next: null
          };
          newBaseQueueLast = newBaseQueueLast.next = _clone;
        } // Mark the event time of this update as relevant to this render pass.
        // TODO: This should ideally use the true event time of this update rather than
        // its priority which is a derived and not reverseable value.
        // TODO: We should skip this update if it was already committed but currently
        // we have no way of detecting the difference between a committed and suspended
        // update here.


        markRenderEventTimeAndConfig(updateExpirationTime, update.suspenseConfig); // Process this update.

        if (update.eagerReducer === reducer) {
          // If this update was processed eagerly, and its reducer matches the
          // current reducer, we can use the eagerly computed state.
          newState = update.eagerState;
        } else {
          var action = update.action;
          newState = reducer(newState, action);
        }
      }

      update = update.next;
    } while (update !== null && update !== first);

    if (newBaseQueueLast === null) {
      newBaseState = newState;
    } else {
      newBaseQueueLast.next = newBaseQueueFirst;
    } // Mark that the fiber performed work, but only if the new state is
    // different from the current state.


    if (!objectIs(newState, hook.memoizedState)) {
      markWorkInProgressReceivedUpdate();
    }

    hook.memoizedState = newState;
    hook.baseState = newBaseState;
    hook.baseQueue = newBaseQueueLast;
    queue.lastRenderedState = newState;
  }

  var dispatch = queue.dispatch;
  return [hook.memoizedState, dispatch];
}

function rerenderReducer(reducer, initialArg, init) {
  var hook = updateWorkInProgressHook();
  var queue = hook.queue;

  if (!(queue !== null)) {
    {
      throw Error( "Should have a queue. This is likely a bug in React. Please file an issue." );
    }
  }

  queue.lastRenderedReducer = reducer; // This is a re-render. Apply the new render phase updates to the previous
  // work-in-progress hook.

  var dispatch = queue.dispatch;
  var lastRenderPhaseUpdate = queue.pending;
  var newState = hook.memoizedState;

  if (lastRenderPhaseUpdate !== null) {
    // The queue doesn't persist past this render pass.
    queue.pending = null;
    var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
    var update = firstRenderPhaseUpdate;

    do {
      // Process this render phase update. We don't have to check the
      // priority because it will always be the same as the current
      // render's.
      var action = update.action;
      newState = reducer(newState, action);
      update = update.next;
    } while (update !== firstRenderPhaseUpdate); // Mark that the fiber performed work, but only if the new state is
    // different from the current state.


    if (!objectIs(newState, hook.memoizedState)) {
      markWorkInProgressReceivedUpdate();
    }

    hook.memoizedState = newState; // Don't persist the state accumulated from the render phase updates to
    // the base state unless the queue is empty.
    // TODO: Not sure if this is the desired semantics, but it's what we
    // do for gDSFP. I can't remember why.

    if (hook.baseQueue === null) {
      hook.baseState = newState;
    }

    queue.lastRenderedState = newState;
  }

  return [newState, dispatch];
}

function mountState(initialState) {
  var hook = mountWorkInProgressHook();

  if (typeof initialState === 'function') {
    // $FlowFixMe: Flow doesn't like mixed types
    initialState = initialState();
  }

  hook.memoizedState = hook.baseState = initialState;
  var queue = hook.queue = {
    pending: null,
    dispatch: null,
    lastRenderedReducer: basicStateReducer,
    lastRenderedState: initialState
  };
  var dispatch = queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue);
  return [hook.memoizedState, dispatch];
}

function updateState(initialState) {
  return updateReducer(basicStateReducer);
}

function rerenderState(initialState) {
  return rerenderReducer(basicStateReducer);
}

function pushEffect(tag, create, destroy, deps) {
  var effect = {
    tag: tag,
    create: create,
    destroy: destroy,
    deps: deps,
    // Circular
    next: null
  };
  var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;

  if (componentUpdateQueue === null) {
    componentUpdateQueue = createFunctionComponentUpdateQueue();
    currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
    componentUpdateQueue.lastEffect = effect.next = effect;
  } else {
    var lastEffect = componentUpdateQueue.lastEffect;

    if (lastEffect === null) {
      componentUpdateQueue.lastEffect = effect.next = effect;
    } else {
      var firstEffect = lastEffect.next;
      lastEffect.next = effect;
      effect.next = firstEffect;
      componentUpdateQueue.lastEffect = effect;
    }
  }

  return effect;
}

function mountRef(initialValue) {
  var hook = mountWorkInProgressHook();
  var ref = {
    current: initialValue
  };

  {
    Object.seal(ref);
  }

  hook.memoizedState = ref;
  return ref;
}

function updateRef(initialValue) {
  var hook = updateWorkInProgressHook();
  return hook.memoizedState;
}

function mountEffectImpl(fiberEffectTag, hookEffectTag, create, deps) {
  var hook = mountWorkInProgressHook();
  var nextDeps = deps === undefined ? null : deps;
  currentlyRenderingFiber$1.effectTag |= fiberEffectTag;
  hook.memoizedState = pushEffect(HasEffect | hookEffectTag, create, undefined, nextDeps);
}

function updateEffectImpl(fiberEffectTag, hookEffectTag, create, deps) {
  var hook = updateWorkInProgressHook();
  var nextDeps = deps === undefined ? null : deps;
  var destroy = undefined;

  if (currentHook !== null) {
    var prevEffect = currentHook.memoizedState;
    destroy = prevEffect.destroy;

    if (nextDeps !== null) {
      var prevDeps = prevEffect.deps;

      if (areHookInputsEqual(nextDeps, prevDeps)) {
        pushEffect(hookEffectTag, create, destroy, nextDeps);
        return;
      }
    }
  }

  currentlyRenderingFiber$1.effectTag |= fiberEffectTag;
  hook.memoizedState = pushEffect(HasEffect | hookEffectTag, create, destroy, nextDeps);
}

function mountEffect(create, deps) {
  {
    // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
    if ('undefined' !== typeof jest) {
      warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
    }
  }

  return mountEffectImpl(Update | Passive, Passive$1, create, deps);
}

function updateEffect(create, deps) {
  {
    // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
    if ('undefined' !== typeof jest) {
      warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
    }
  }

  return updateEffectImpl(Update | Passive, Passive$1, create, deps);
}

function mountLayoutEffect(create, deps) {
  return mountEffectImpl(Update, Layout, create, deps);
}

function updateLayoutEffect(create, deps) {
  return updateEffectImpl(Update, Layout, create, deps);
}

function imperativeHandleEffect(create, ref) {
  if (typeof ref === 'function') {
    var refCallback = ref;

    var _inst = create();

    refCallback(_inst);
    return function () {
      refCallback(null);
    };
  } else if (ref !== null && ref !== undefined) {
    var refObject = ref;

    {
      if (!refObject.hasOwnProperty('current')) {
        error('Expected useImperativeHandle() first argument to either be a ' + 'ref callback or React.createRef() object. Instead received: %s.', 'an object with keys {' + Object.keys(refObject).join(', ') + '}');
      }
    }

    var _inst2 = create();

    refObject.current = _inst2;
    return function () {
      refObject.current = null;
    };
  }
}

function mountImperativeHandle(ref, create, deps) {
  {
    if (typeof create !== 'function') {
      error('Expected useImperativeHandle() second argument to be a function ' + 'that creates a handle. Instead received: %s.', create !== null ? typeof create : 'null');
    }
  } // TODO: If deps are provided, should we skip comparing the ref itself?


  var effectDeps = deps !== null && deps !== undefined ? deps.concat([ref]) : null;
  return mountEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
}

function updateImperativeHandle(ref, create, deps) {
  {
    if (typeof create !== 'function') {
      error('Expected useImperativeHandle() second argument to be a function ' + 'that creates a handle. Instead received: %s.', create !== null ? typeof create : 'null');
    }
  } // TODO: If deps are provided, should we skip comparing the ref itself?


  var effectDeps = deps !== null && deps !== undefined ? deps.concat([ref]) : null;
  return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
}

function mountDebugValue(value, formatterFn) {// This hook is normally a no-op.
  // The react-debug-hooks package injects its own implementation
  // so that e.g. DevTools can display custom hook values.
}

var updateDebugValue = mountDebugValue;

function mountCallback(callback, deps) {
  var hook = mountWorkInProgressHook();
  var nextDeps = deps === undefined ? null : deps;
  hook.memoizedState = [callback, nextDeps];
  return callback;
}

function updateCallback(callback, deps) {
  var hook = updateWorkInProgressHook();
  var nextDeps = deps === undefined ? null : deps;
  var prevState = hook.memoizedState;

  if (prevState !== null) {
    if (nextDeps !== null) {
      var prevDeps = prevState[1];

      if (areHookInputsEqual(nextDeps, prevDeps)) {
        return prevState[0];
      }
    }
  }

  hook.memoizedState = [callback, nextDeps];
  return callback;
}

function mountMemo(nextCreate, deps) {
  var hook = mountWorkInProgressHook();
  var nextDeps = deps === undefined ? null : deps;
  var nextValue = nextCreate();
  hook.memoizedState = [nextValue, nextDeps];
  return nextValue;
}

function updateMemo(nextCreate, deps) {
  var hook = updateWorkInProgressHook();
  var nextDeps = deps === undefined ? null : deps;
  var prevState = hook.memoizedState;

  if (prevState !== null) {
    // Assume these are defined. If they're not, areHookInputsEqual will warn.
    if (nextDeps !== null) {
      var prevDeps = prevState[1];

      if (areHookInputsEqual(nextDeps, prevDeps)) {
        return prevState[0];
      }
    }
  }

  var nextValue = nextCreate();
  hook.memoizedState = [nextValue, nextDeps];
  return nextValue;
}

function mountDeferredValue(value, config) {
  var _mountState = mountState(value),
      prevValue = _mountState[0],
      setValue = _mountState[1];

  mountEffect(function () {
    var previousConfig = ReactCurrentBatchConfig$1.suspense;
    ReactCurrentBatchConfig$1.suspense = config === undefined ? null : config;

    try {
      setValue(value);
    } finally {
      ReactCurrentBatchConfig$1.suspense = previousConfig;
    }
  }, [value, config]);
  return prevValue;
}

function updateDeferredValue(value, config) {
  var _updateState = updateState(),
      prevValue = _updateState[0],
      setValue = _updateState[1];

  updateEffect(function () {
    var previousConfig = ReactCurrentBatchConfig$1.suspense;
    ReactCurrentBatchConfig$1.suspense = config === undefined ? null : config;

    try {
      setValue(value);
    } finally {
      ReactCurrentBatchConfig$1.suspense = previousConfig;
    }
  }, [value, config]);
  return prevValue;
}

function rerenderDeferredValue(value, config) {
  var _rerenderState = rerenderState(),
      prevValue = _rerenderState[0],
      setValue = _rerenderState[1];

  updateEffect(function () {
    var previousConfig = ReactCurrentBatchConfig$1.suspense;
    ReactCurrentBatchConfig$1.suspense = config === undefined ? null : config;

    try {
      setValue(value);
    } finally {
      ReactCurrentBatchConfig$1.suspense = previousConfig;
    }
  }, [value, config]);
  return prevValue;
}

function startTransition(setPending, config, callback) {
  var priorityLevel = getCurrentPriorityLevel();
  runWithPriority$1(priorityLevel < UserBlockingPriority$1 ? UserBlockingPriority$1 : priorityLevel, function () {
    setPending(true);
  });
  runWithPriority$1(priorityLevel > NormalPriority ? NormalPriority : priorityLevel, function () {
    var previousConfig = ReactCurrentBatchConfig$1.suspense;
    ReactCurrentBatchConfig$1.suspense = config === undefined ? null : config;

    try {
      setPending(false);
      callback();
    } finally {
      ReactCurrentBatchConfig$1.suspense = previousConfig;
    }
  });
}

function mountTransition(config) {
  var _mountState2 = mountState(false),
      isPending = _mountState2[0],
      setPending = _mountState2[1];

  var start = mountCallback(startTransition.bind(null, setPending, config), [setPending, config]);
  return [start, isPending];
}

function updateTransition(config) {
  var _updateState2 = updateState(),
      isPending = _updateState2[0],
      setPending = _updateState2[1];

  var start = updateCallback(startTransition.bind(null, setPending, config), [setPending, config]);
  return [start, isPending];
}

function rerenderTransition(config) {
  var _rerenderState2 = rerenderState(),
      isPending = _rerenderState2[0],
      setPending = _rerenderState2[1];

  var start = updateCallback(startTransition.bind(null, setPending, config), [setPending, config]);
  return [start, isPending];
}

function dispatchAction(fiber, queue, action) {
  {
    if (typeof arguments[3] === 'function') {
      error("State updates from the useState() and useReducer() Hooks don't support the " + 'second callback argument. To execute a side effect after ' + 'rendering, declare it in the component body with useEffect().');
    }
  }

  var currentTime = requestCurrentTimeForUpdate();
  var suspenseConfig = requestCurrentSuspenseConfig();
  var expirationTime = computeExpirationForFiber(currentTime, fiber, suspenseConfig);
  var update = {
    expirationTime: expirationTime,
    suspenseConfig: suspenseConfig,
    action: action,
    eagerReducer: null,
    eagerState: null,
    next: null
  };

  {
    update.priority = getCurrentPriorityLevel();
  } // Append the update to the end of the list.


  var pending = queue.pending;

  if (pending === null) {
    // This is the first update. Create a circular list.
    update.next = update;
  } else {
    update.next = pending.next;
    pending.next = update;
  }

  queue.pending = update;
  var alternate = fiber.alternate;

  if (fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1) {
    // This is a render phase update. Stash it in a lazily-created map of
    // queue -> linked list of updates. After this render pass, we'll restart
    // and apply the stashed updates on top of the work-in-progress hook.
    didScheduleRenderPhaseUpdate = true;
    update.expirationTime = renderExpirationTime;
    currentlyRenderingFiber$1.expirationTime = renderExpirationTime;
  } else {
    if (fiber.expirationTime === NoWork && (alternate === null || alternate.expirationTime === NoWork)) {
      // The queue is currently empty, which means we can eagerly compute the
      // next state before entering the render phase. If the new state is the
      // same as the current state, we may be able to bail out entirely.
      var lastRenderedReducer = queue.lastRenderedReducer;

      if (lastRenderedReducer !== null) {
        var prevDispatcher;

        {
          prevDispatcher = ReactCurrentDispatcher.current;
          ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
        }

        try {
          var currentState = queue.lastRenderedState;
          var eagerState = lastRenderedReducer(currentState, action); // Stash the eagerly computed state, and the reducer used to compute
          // it, on the update object. If the reducer hasn't changed by the
          // time we enter the render phase, then the eager state can be used
          // without calling the reducer again.

          update.eagerReducer = lastRenderedReducer;
          update.eagerState = eagerState;

          if (objectIs(eagerState, currentState)) {
            // Fast path. We can bail out without scheduling React to re-render.
            // It's still possible that we'll need to rebase this update later,
            // if the component re-renders for a different reason and by that
            // time the reducer has changed.
            return;
          }
        } catch (error) {// Suppress the error. It will throw again in the render phase.
        } finally {
          {
            ReactCurrentDispatcher.current = prevDispatcher;
          }
        }
      }
    }

    {
      // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
      if ('undefined' !== typeof jest) {
        warnIfNotScopedWithMatchingAct(fiber);
        warnIfNotCurrentlyActingUpdatesInDev(fiber);
      }
    }

    scheduleWork(fiber, expirationTime);
  }
}

var ContextOnlyDispatcher = {
  readContext: readContext,
  useCallback: throwInvalidHookError,
  useContext: throwInvalidHookError,
  useEffect: throwInvalidHookError,
  useImperativeHandle: throwInvalidHookError,
  useLayoutEffect: throwInvalidHookError,
  useMemo: throwInvalidHookError,
  useReducer: throwInvalidHookError,
  useRef: throwInvalidHookError,
  useState: throwInvalidHookError,
  useDebugValue: throwInvalidHookError,
  useResponder: throwInvalidHookError,
  useDeferredValue: throwInvalidHookError,
  useTransition: throwInvalidHookError
};
var HooksDispatcherOnMountInDEV = null;
var HooksDispatcherOnMountWithHookTypesInDEV = null;
var HooksDispatcherOnUpdateInDEV = null;
var HooksDispatcherOnRerenderInDEV = null;
var InvalidNestedHooksDispatcherOnMountInDEV = null;
var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
var InvalidNestedHooksDispatcherOnRerenderInDEV = null;

{
  var warnInvalidContextAccess = function () {
    error('Context can only be read while React is rendering. ' + 'In classes, you can read it in the render method or getDerivedStateFromProps. ' + 'In function components, you can read it directly in the function body, but not ' + 'inside Hooks like useReducer() or useMemo().');
  };

  var warnInvalidHookAccess = function () {
    error('Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. ' + 'You can only call Hooks at the top level of your React function. ' + 'For more information, see ' + 'https://fb.me/rules-of-hooks');
  };

  HooksDispatcherOnMountInDEV = {
    readContext: function (context, observedBits) {
      return readContext(context, observedBits);
    },
    useCallback: function (callback, deps) {
      currentHookNameInDev = 'useCallback';
      mountHookTypesDev();
      checkDepsAreArrayDev(deps);
      return mountCallback(callback, deps);
    },
    useContext: function (context, observedBits) {
      currentHookNameInDev = 'useContext';
      mountHookTypesDev();
      return readContext(context, observedBits);
    },
    useEffect: function (create, deps) {
      currentHookNameInDev = 'useEffect';
      mountHookTypesDev();
      checkDepsAreArrayDev(deps);
      return mountEffect(create, deps);
    },
    useImperativeHandle: function (ref, create, deps) {
      currentHookNameInDev = 'useImperativeHandle';
      mountHookTypesDev();
      checkDepsAreArrayDev(deps);
      return mountImperativeHandle(ref, create, deps);
    },
    useLayoutEffect: function (create, deps) {
      currentHookNameInDev = 'useLayoutEffect';
      mountHookTypesDev();
      checkDepsAreArrayDev(deps);
      return mountLayoutEffect(create, deps);
    },
    useMemo: function (create, deps) {
      currentHookNameInDev = 'useMemo';
      mountHookTypesDev();
      checkDepsAreArrayDev(deps);
      var prevDispatcher = ReactCurrentDispatcher.current;
      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;

      try {
        return mountMemo(create, deps);
      } finally {
        ReactCurrentDispatcher.current = prevDispatcher;
      }
    },
    useReducer: function (reducer, initialArg, init) {
      currentHookNameInDev = 'useReducer';
      mountHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher.current;
      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;

      try {
        return mountReducer(reducer, initialArg, init);
      } finally {
        ReactCurrentDispatcher.current = prevDispatcher;
      }
    },
    useRef: function (initialValue) {
      currentHookNameInDev = 'useRef';
      mountHookTypesDev();
      return mountRef(initialValue);
    },
    useState: function (initialState) {
      currentHookNameInDev = 'useState';
      mountHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher.current;
      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;

      try {
        return mountState(initialState);
      } finally {
        ReactCurrentDispatcher.current = prevDispatcher;
      }
    },
    useDebugValue: function (value, formatterFn) {
      currentHookNameInDev = 'useDebugValue';
      mountHookTypesDev();
      return mountDebugValue();
    },
    useResponder: function (responder, props) {
      currentHookNameInDev = 'useResponder';
      mountHookTypesDev();
      return createDeprecatedResponderListener(responder, props);
    },
    useDeferredValue: function (value, config) {
      currentHookNameInDev = 'useDeferredValue';
      mountHookTypesDev();
      return mountDeferredValue(value, config);
    },
    useTransition: function (config) {
      currentHookNameInDev = 'useTransition';
      mountHookTypesDev();
      return mountTransition(config);
    }
  };
  HooksDispatcherOnMountWithHookTypesInDEV = {
    readContext: function (context, observedBits) {
      return readContext(context, observedBits);
    },
    useCallback: function (callback, deps) {
      currentHookNameInDev = 'useCallback';
      updateHookTypesDev();
      return mountCallback(callback, deps);
    },
    useContext: function (context, observedBits) {
      currentHookNameInDev = 'useContext';
      updateHookTypesDev();
      return readContext(context, observedBits);
    },
    useEffect: function (create, deps) {
      currentHookNameInDev = 'useEffect';
      updateHookTypesDev();
      return mountEffect(create, deps);
    },
    useImperativeHandle: function (ref, create, deps) {
      currentHookNameInDev = 'useImperativeHandle';
      updateHookTypesDev();
      return mountImperativeHandle(ref, create, deps);
    },
    useLayoutEffect: function (create, deps) {
      currentHookNameInDev = 'useLayoutEffect';
      updateHookTypesDev();
      return mountLayoutEffect(create, deps);
    },
    useMemo: function (create, deps) {
      currentHookNameInDev = 'useMemo';
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher.current;
      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;

      try {
        return mountMemo(create, deps);
      } finally {
        ReactCurrentDispatcher.current = prevDispatcher;
      }
    },
    useReducer: function (reducer, initialArg, init) {
      currentHookNameInDev = 'useReducer';
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher.current;
      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;

      try {
        return mountReducer(reducer, initialArg, init);
      } finally {
        ReactCurrentDispatcher.current = prevDispatcher;
      }
    },
    useRef: function (initialValue) {
      currentHookNameInDev = 'useRef';
      updateHookTypesDev();
      return mountRef(initialValue);
    },
    useState: function (initialState) {
      currentHookNameInDev = 'useState';
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher.current;
      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;

      try {
        return mountState(initialState);
      } finally {
        ReactCurrentDispatcher.current = prevDispatcher;
      }
    },
    useDebugValue: function (value, formatterFn) {
      currentHookNameInDev = 'useDebugValue';
      updateHookTypesDev();
      return mountDebugValue();
    },
    useResponder: function (responder, props) {
      currentHookNameInDev = 'useResponder';
      updateHookTypesDev();
      return createDeprecatedResponderListener(responder, props);
    },
    useDeferredValue: function (value, config) {
      currentHookNameInDev = 'useDeferredValue';
      updateHookTypesDev();
      return mountDeferredValue(value, config);
    },
    useTransition: function (config) {
      currentHookNameInDev = 'useTransition';
      updateHookTypesDev();
      return mountTransition(config);
    }
  };
  HooksDispatcherOnUpdateInDEV = {
    readContext: function (context, observedBits) {
      return readContext(context, observedBits);
    },
    useCallback: function (callback, deps) {
      currentHookNameInDev = 'useCallback';
      updateHookTypesDev();
      return updateCallback(callback, deps);
    },
    useContext: function (context, observedBits) {
      currentHookNameInDev = 'useContext';
      updateHookTypesDev();
      return readContext(context, observedBits);
    },
    useEffect: function (create, deps) {
      currentHookNameInDev = 'useEffect';
      updateHookTypesDev();
      return updateEffect(create, deps);
    },
    useImperativeHandle: function (ref, create, deps) {
      currentHookNameInDev = 'useImperativeHandle';
      updateHookTypesDev();
      return updateImperativeHandle(ref, create, deps);
    },
    useLayoutEffect: function (create, deps) {
      currentHookNameInDev = 'useLayoutEffect';
      updateHookTypesDev();
      return updateLayoutEffect(create, deps);
    },
    useMemo: function (create, deps) {
      currentHookNameInDev = 'useMemo';
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher.current;
      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

      try {
        return updateMemo(create, deps);
      } finally {
        ReactCurrentDispatcher.current = prevDispatcher;
      }
    },
    useReducer: function (reducer, initialArg, init) {
      currentHookNameInDev = 'useReducer';
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher.current;
      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

      try {
        return updateReducer(reducer, initialArg, init);
      } finally {
        ReactCurrentDispatcher.current = prevDispatcher;
      }
    },
    useRef: function (initialValue) {
      currentHookNameInDev = 'useRef';
      updateHookTypesDev();
      return updateRef();
    },
    useState: function (initialState) {
      currentHookNameInDev = 'useState';
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher.current;
      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

      try {
        return updateState(initialState);
      } finally {
        ReactCurrentDispatcher.current = prevDispatcher;
      }
    },
    useDebugValue: function (value, formatterFn) {
      currentHookNameInDev = 'useDebugValue';
      updateHookTypesDev();
      return updateDebugValue();
    },
    useResponder: function (responder, props) {
      currentHookNameInDev = 'useResponder';
      updateHookTypesDev();
      return createDeprecatedResponderListener(responder, props);
    },
    useDeferredValue: function (value, config) {
      currentHookNameInDev = 'useDeferredValue';
      updateHookTypesDev();
      return updateDeferredValue(value, config);
    },
    useTransition: function (config) {
      currentHookNameInDev = 'useTransition';
      updateHookTypesDev();
      return updateTransition(config);
    }
  };
  HooksDispatcherOnRerenderInDEV = {
    readContext: function (context, observedBits) {
      return readContext(context, observedBits);
    },
    useCallback: function (callback, deps) {
      currentHookNameInDev = 'useCallback';
      updateHookTypesDev();
      return updateCallback(callback, deps);
    },
    useContext: function (context, observedBits) {
      currentHookNameInDev = 'useContext';
      updateHookTypesDev();
      return readContext(context, observedBits);
    },
    useEffect: function (create, deps) {
      currentHookNameInDev = 'useEffect';
      updateHookTypesDev();
      return updateEffect(create, deps);
    },
    useImperativeHandle: function (ref, create, deps) {
      currentHookNameInDev = 'useImperativeHandle';
      updateHookTypesDev();
      return updateImperativeHandle(ref, create, deps);
    },
    useLayoutEffect: function (create, deps) {
      currentHookNameInDev = 'useLayoutEffect';
      updateHookTypesDev();
      return updateLayoutEffect(create, deps);
    },
    useMemo: function (create, deps) {
      currentHookNameInDev = 'useMemo';
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher.current;
      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnRerenderInDEV;

      try {
        return updateMemo(create, deps);
      } finally {
        ReactCurrentDispatcher.current = prevDispatcher;
      }
    },
    useReducer: function (reducer, initialArg, init) {
      currentHookNameInDev = 'useReducer';
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher.current;
      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnRerenderInDEV;

      try {
        return rerenderReducer(reducer, initialArg, init);
      } finally {
        ReactCurrentDispatcher.current = prevDispatcher;
      }
    },
    useRef: function (initialValue) {
      currentHookNameInDev = 'useRef';
      updateHookTypesDev();
      return updateRef();
    },
    useState: function (initialState) {
      currentHookNameInDev = 'useState';
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher.current;
      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnRerenderInDEV;

      try {
        return rerenderState(initialState);
      } finally {
        ReactCurrentDispatcher.current = prevDispatcher;
      }
    },
    useDebugValue: function (value, formatterFn) {
      currentHookNameInDev = 'useDebugValue';
      updateHookTypesDev();
      return updateDebugValue();
    },
    useResponder: function (responder, props) {
      currentHookNameInDev = 'useResponder';
      updateHookTypesDev();
      return createDeprecatedResponderListener(responder, props);
    },
    useDeferredValue: function (value, config) {
      currentHookNameInDev = 'useDeferredValue';
      updateHookTypesDev();
      return rerenderDeferredValue(value, config);
    },
    useTransition: function (config) {
      currentHookNameInDev = 'useTransition';
      updateHookTypesDev();
      return rerenderTransition(config);
    }
  };
  InvalidNestedHooksDispatcherOnMountInDEV = {
    readContext: function (context, observedBits) {
      warnInvalidContextAccess();
      return readContext(context, observedBits);
    },
    useCallback: function (callback, deps) {
      currentHookNameInDev = 'useCallback';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return mountCallback(callback, deps);
    },
    useContext: function (context, observedBits) {
      currentHookNameInDev = 'useContext';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return readContext(context, observedBits);
    },
    useEffect: function (create, deps) {
      currentHookNameInDev = 'useEffect';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return mountEffect(create, deps);
    },
    useImperativeHandle: function (ref, create, deps) {
      currentHookNameInDev = 'useImperativeHandle';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return mountImperativeHandle(ref, create, deps);
    },
    useLayoutEffect: function (create, deps) {
      currentHookNameInDev = 'useLayoutEffect';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return mountLayoutEffect(create, deps);
    },
    useMemo: function (create, deps) {
      currentHookNameInDev = 'useMemo';
      warnInvalidHookAccess();
      mountHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher.current;
      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;

      try {
        return mountMemo(create, deps);
      } finally {
        ReactCurrentDispatcher.current = prevDispatcher;
      }
    },
    useReducer: function (reducer, initialArg, init) {
      currentHookNameInDev = 'useReducer';
      warnInvalidHookAccess();
      mountHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher.current;
      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;

      try {
        return mountReducer(reducer, initialArg, init);
      } finally {
        ReactCurrentDispatcher.current = prevDispatcher;
      }
    },
    useRef: function (initialValue) {
      currentHookNameInDev = 'useRef';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return mountRef(initialValue);
    },
    useState: function (initialState) {
      currentHookNameInDev = 'useState';
      warnInvalidHookAccess();
      mountHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher.current;
      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;

      try {
        return mountState(initialState);
      } finally {
        ReactCurrentDispatcher.current = prevDispatcher;
      }
    },
    useDebugValue: function (value, formatterFn) {
      currentHookNameInDev = 'useDebugValue';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return mountDebugValue();
    },
    useResponder: function (responder, props) {
      currentHookNameInDev = 'useResponder';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return createDeprecatedResponderListener(responder, props);
    },
    useDeferredValue: function (value, config) {
      currentHookNameInDev = 'useDeferredValue';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return mountDeferredValue(value, config);
    },
    useTransition: function (config) {
      currentHookNameInDev = 'useTransition';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return mountTransition(config);
    }
  };
  InvalidNestedHooksDispatcherOnUpdateInDEV = {
    readContext: function (context, observedBits) {
      warnInvalidContextAccess();
      return readContext(context, observedBits);
    },
    useCallback: function (callback, deps) {
      currentHookNameInDev = 'useCallback';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateCallback(callback, deps);
    },
    useContext: function (context, observedBits) {
      currentHookNameInDev = 'useContext';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return readContext(context, observedBits);
    },
    useEffect: function (create, deps) {
      currentHookNameInDev = 'useEffect';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateEffect(create, deps);
    },
    useImperativeHandle: function (ref, create, deps) {
      currentHookNameInDev = 'useImperativeHandle';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateImperativeHandle(ref, create, deps);
    },
    useLayoutEffect: function (create, deps) {
      currentHookNameInDev = 'useLayoutEffect';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateLayoutEffect(create, deps);
    },
    useMemo: function (create, deps) {
      currentHookNameInDev = 'useMemo';
      warnInvalidHookAccess();
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher.current;
      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

      try {
        return updateMemo(create, deps);
      } finally {
        ReactCurrentDispatcher.current = prevDispatcher;
      }
    },
    useReducer: function (reducer, initialArg, init) {
      currentHookNameInDev = 'useReducer';
      warnInvalidHookAccess();
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher.current;
      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

      try {
        return updateReducer(reducer, initialArg, init);
      } finally {
        ReactCurrentDispatcher.current = prevDispatcher;
      }
    },
    useRef: function (initialValue) {
      currentHookNameInDev = 'useRef';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateRef();
    },
    useState: function (initialState) {
      currentHookNameInDev = 'useState';
      warnInvalidHookAccess();
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher.current;
      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

      try {
        return updateState(initialState);
      } finally {
        ReactCurrentDispatcher.current = prevDispatcher;
      }
    },
    useDebugValue: function (value, formatterFn) {
      currentHookNameInDev = 'useDebugValue';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateDebugValue();
    },
    useResponder: function (responder, props) {
      currentHookNameInDev = 'useResponder';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return createDeprecatedResponderListener(responder, props);
    },
    useDeferredValue: function (value, config) {
      currentHookNameInDev = 'useDeferredValue';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateDeferredValue(value, config);
    },
    useTransition: function (config) {
      currentHookNameInDev = 'useTransition';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateTransition(config);
    }
  };
  InvalidNestedHooksDispatcherOnRerenderInDEV = {
    readContext: function (context, observedBits) {
      warnInvalidContextAccess();
      return readContext(context, observedBits);
    },
    useCallback: function (callback, deps) {
      currentHookNameInDev = 'useCallback';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateCallback(callback, deps);
    },
    useContext: function (context, observedBits) {
      currentHookNameInDev = 'useContext';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return readContext(context, observedBits);
    },
    useEffect: function (create, deps) {
      currentHookNameInDev = 'useEffect';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateEffect(create, deps);
    },
    useImperativeHandle: function (ref, create, deps) {
      currentHookNameInDev = 'useImperativeHandle';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateImperativeHandle(ref, create, deps);
    },
    useLayoutEffect: function (create, deps) {
      currentHookNameInDev = 'useLayoutEffect';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateLayoutEffect(create, deps);
    },
    useMemo: function (create, deps) {
      currentHookNameInDev = 'useMemo';
      warnInvalidHookAccess();
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher.current;
      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

      try {
        return updateMemo(create, deps);
      } finally {
        ReactCurrentDispatcher.current = prevDispatcher;
      }
    },
    useReducer: function (reducer, initialArg, init) {
      currentHookNameInDev = 'useReducer';
      warnInvalidHookAccess();
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher.current;
      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

      try {
        return rerenderReducer(reducer, initialArg, init);
      } finally {
        ReactCurrentDispatcher.current = prevDispatcher;
      }
    },
    useRef: function (initialValue) {
      currentHookNameInDev = 'useRef';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateRef();
    },
    useState: function (initialState) {
      currentHookNameInDev = 'useState';
      warnInvalidHookAccess();
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher.current;
      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

      try {
        return rerenderState(initialState);
      } finally {
        ReactCurrentDispatcher.current = prevDispatcher;
      }
    },
    useDebugValue: function (value, formatterFn) {
      currentHookNameInDev = 'useDebugValue';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateDebugValue();
    },
    useResponder: function (responder, props) {
      currentHookNameInDev = 'useResponder';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return createDeprecatedResponderListener(responder, props);
    },
    useDeferredValue: function (value, config) {
      currentHookNameInDev = 'useDeferredValue';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return rerenderDeferredValue(value, config);
    },
    useTransition: function (config) {
      currentHookNameInDev = 'useTransition';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return rerenderTransition(config);
    }
  };
}

var now$1 = Scheduler.unstable_now;
var commitTime = 0;
var profilerStartTime = -1;

function getCommitTime() {
  return commitTime;
}

function recordCommitTime() {

  commitTime = now$1();
}

function startProfilerTimer(fiber) {

  profilerStartTime = now$1();

  if (fiber.actualStartTime < 0) {
    fiber.actualStartTime = now$1();
  }
}

function stopProfilerTimerIfRunning(fiber) {

  profilerStartTime = -1;
}

function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {

  if (profilerStartTime >= 0) {
    var elapsedTime = now$1() - profilerStartTime;
    fiber.actualDuration += elapsedTime;

    if (overrideBaseTime) {
      fiber.selfBaseDuration = elapsedTime;
    }

    profilerStartTime = -1;
  }
}

// This may have been an insertion or a hydration.

var hydrationParentFiber = null;
var nextHydratableInstance = null;
var isHydrating = false;

function enterHydrationState(fiber) {

  var parentInstance = fiber.stateNode.containerInfo;
  nextHydratableInstance = getFirstHydratableChild(parentInstance);
  hydrationParentFiber = fiber;
  isHydrating = true;
  return true;
}

function deleteHydratableInstance(returnFiber, instance) {
  {
    switch (returnFiber.tag) {
      case HostRoot:
        didNotHydrateContainerInstance(returnFiber.stateNode.containerInfo, instance);
        break;

      case HostComponent:
        didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance);
        break;
    }
  }

  var childToDelete = createFiberFromHostInstanceForDeletion();
  childToDelete.stateNode = instance;
  childToDelete.return = returnFiber;
  childToDelete.effectTag = Deletion; // This might seem like it belongs on progressedFirstDeletion. However,
  // these children are not part of the reconciliation list of children.
  // Even if we abort and rereconcile the children, that will try to hydrate
  // again and the nodes are still in the host tree so these will be
  // recreated.

  if (returnFiber.lastEffect !== null) {
    returnFiber.lastEffect.nextEffect = childToDelete;
    returnFiber.lastEffect = childToDelete;
  } else {
    returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
  }
}

function insertNonHydratedInstance(returnFiber, fiber) {
  fiber.effectTag = fiber.effectTag & ~Hydrating | Placement;

  {
    switch (returnFiber.tag) {
      case HostRoot:
        {
          var parentContainer = returnFiber.stateNode.containerInfo;

          switch (fiber.tag) {
            case HostComponent:
              var type = fiber.type;
              var props = fiber.pendingProps;
              didNotFindHydratableContainerInstance(parentContainer, type);
              break;

            case HostText:
              var text = fiber.pendingProps;
              didNotFindHydratableContainerTextInstance(parentContainer, text);
              break;
          }

          break;
        }

      case HostComponent:
        {
          var parentType = returnFiber.type;
          var parentProps = returnFiber.memoizedProps;
          var parentInstance = returnFiber.stateNode;

          switch (fiber.tag) {
            case HostComponent:
              var _type = fiber.type;
              var _props = fiber.pendingProps;
              didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type);
              break;

            case HostText:
              var _text = fiber.pendingProps;
              didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text);
              break;

            case SuspenseComponent:
              didNotFindHydratableSuspenseInstance(parentType, parentProps);
              break;
          }

          break;
        }

      default:
        return;
    }
  }
}

function tryHydrate(fiber, nextInstance) {
  switch (fiber.tag) {
    case HostComponent:
      {
        var type = fiber.type;
        var props = fiber.pendingProps;
        var instance = canHydrateInstance(nextInstance, type);

        if (instance !== null) {
          fiber.stateNode = instance;
          return true;
        }

        return false;
      }

    case HostText:
      {
        var text = fiber.pendingProps;
        var textInstance = canHydrateTextInstance(nextInstance, text);

        if (textInstance !== null) {
          fiber.stateNode = textInstance;
          return true;
        }

        return false;
      }

    case SuspenseComponent:
      {

        return false;
      }

    default:
      return false;
  }
}

function tryToClaimNextHydratableInstance(fiber) {
  if (!isHydrating) {
    return;
  }

  var nextInstance = nextHydratableInstance;

  if (!nextInstance) {
    // Nothing to hydrate. Make it an insertion.
    insertNonHydratedInstance(hydrationParentFiber, fiber);
    isHydrating = false;
    hydrationParentFiber = fiber;
    return;
  }

  var firstAttemptedInstance = nextInstance;

  if (!tryHydrate(fiber, nextInstance)) {
    // If we can't hydrate this instance let's try the next one.
    // We use this as a heuristic. It's based on intuition and not data so it
    // might be flawed or unnecessary.
    nextInstance = getNextHydratableSibling(firstAttemptedInstance);

    if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
      // Nothing to hydrate. Make it an insertion.
      insertNonHydratedInstance(hydrationParentFiber, fiber);
      isHydrating = false;
      hydrationParentFiber = fiber;
      return;
    } // We matched the next one, we'll now assume that the first one was
    // superfluous and we'll delete it. Since we can't eagerly delete it
    // we'll have to schedule a deletion. To do that, this node needs a dummy
    // fiber associated with it.


    deleteHydratableInstance(hydrationParentFiber, firstAttemptedInstance);
  }

  hydrationParentFiber = fiber;
  nextHydratableInstance = getFirstHydratableChild(nextInstance);
}

function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {

  var instance = fiber.stateNode;
  var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber); // TODO: Type this specific to this type of component.

  fiber.updateQueue = updatePayload; // If the update payload indicates that there is a change or if there
  // is a new ref we mark this as an update.

  if (updatePayload !== null) {
    return true;
  }

  return false;
}

function prepareToHydrateHostTextInstance(fiber) {

  var textInstance = fiber.stateNode;
  var textContent = fiber.memoizedProps;
  var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);

  {
    if (shouldUpdate) {
      // We assume that prepareToHydrateHostTextInstance is called in a context where the
      // hydration parent is the parent host component of this host text.
      var returnFiber = hydrationParentFiber;

      if (returnFiber !== null) {
        switch (returnFiber.tag) {
          case HostRoot:
            {
              var parentContainer = returnFiber.stateNode.containerInfo;
              didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent);
              break;
            }

          case HostComponent:
            {
              var parentType = returnFiber.type;
              var parentProps = returnFiber.memoizedProps;
              var parentInstance = returnFiber.stateNode;
              didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent);
              break;
            }
        }
      }
    }
  }

  return shouldUpdate;
}

function skipPastDehydratedSuspenseInstance(fiber) {

  var suspenseState = fiber.memoizedState;
  var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;

  if (!suspenseInstance) {
    {
      throw Error( "Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue." );
    }
  }

  return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
}

function popToNextHostParent(fiber) {
  var parent = fiber.return;

  while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent) {
    parent = parent.return;
  }

  hydrationParentFiber = parent;
}

function popHydrationState(fiber) {

  if (fiber !== hydrationParentFiber) {
    // We're deeper than the current hydration context, inside an inserted
    // tree.
    return false;
  }

  if (!isHydrating) {
    // If we're not currently hydrating but we're in a hydration context, then
    // we were an insertion and now need to pop up reenter hydration of our
    // siblings.
    popToNextHostParent(fiber);
    isHydrating = true;
    return false;
  }

  var type = fiber.type; // If we have any remaining hydratable nodes, we need to delete them now.
  // We only do this deeper than head and body since they tend to have random
  // other nodes in them. We also ignore components with pure text content in
  // side of them.
  // TODO: Better heuristic.

  if (fiber.tag !== HostComponent || type !== 'head' && type !== 'body' && !shouldSetTextContent(type, fiber.memoizedProps)) {
    var nextInstance = nextHydratableInstance;

    while (nextInstance) {
      deleteHydratableInstance(fiber, nextInstance);
      nextInstance = getNextHydratableSibling(nextInstance);
    }
  }

  popToNextHostParent(fiber);

  if (fiber.tag === SuspenseComponent) {
    nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
  } else {
    nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
  }

  return true;
}

function resetHydrationState() {

  hydrationParentFiber = null;
  nextHydratableInstance = null;
  isHydrating = false;
}

var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
var didReceiveUpdate = false;
var didWarnAboutBadClass;
var didWarnAboutModulePatternComponent;
var didWarnAboutContextTypeOnFunctionComponent;
var didWarnAboutGetDerivedStateOnFunctionComponent;
var didWarnAboutFunctionRefs;
var didWarnAboutReassigningProps;
var didWarnAboutRevealOrder;
var didWarnAboutTailOptions;

{
  didWarnAboutBadClass = {};
  didWarnAboutModulePatternComponent = {};
  didWarnAboutContextTypeOnFunctionComponent = {};
  didWarnAboutGetDerivedStateOnFunctionComponent = {};
  didWarnAboutFunctionRefs = {};
  didWarnAboutReassigningProps = false;
  didWarnAboutRevealOrder = {};
  didWarnAboutTailOptions = {};
}

function reconcileChildren(current, workInProgress, nextChildren, renderExpirationTime) {
  if (current === null) {
    // If this is a fresh new component that hasn't been rendered yet, we
    // won't update its child set by applying minimal side-effects. Instead,
    // we will add them all to the child before it gets rendered. That means
    // we can optimize this reconciliation pass by not tracking side-effects.
    workInProgress.child = mountChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
  } else {
    // If the current child is the same as the work in progress, it means that
    // we haven't yet started any work on these children. Therefore, we use
    // the clone algorithm to create a copy of all the current children.
    // If we had any progressed work already, that is invalid at this point so
    // let's throw it out.
    workInProgress.child = reconcileChildFibers(workInProgress, current.child, nextChildren, renderExpirationTime);
  }
}

function forceUnmountCurrentAndReconcile(current, workInProgress, nextChildren, renderExpirationTime) {
  // This function is fork of reconcileChildren. It's used in cases where we
  // want to reconcile without matching against the existing set. This has the
  // effect of all current children being unmounted; even if the type and key
  // are the same, the old child is unmounted and a new child is created.
  //
  // To do this, we're going to go through the reconcile algorithm twice. In
  // the first pass, we schedule a deletion for all the current children by
  // passing null.
  workInProgress.child = reconcileChildFibers(workInProgress, current.child, null, renderExpirationTime); // In the second pass, we mount the new children. The trick here is that we
  // pass null in place of where we usually pass the current child set. This has
  // the effect of remounting all children regardless of whether their
  // identities match.

  workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
}

function updateForwardRef(current, workInProgress, Component, nextProps, renderExpirationTime) {
  // TODO: current can be non-null here even if the component
  // hasn't yet mounted. This happens after the first render suspends.
  // We'll need to figure out if this is fine or can cause issues.
  {
    if (workInProgress.type !== workInProgress.elementType) {
      // Lazy component props can't be validated in createElement
      // because they're only guaranteed to be resolved here.
      var innerPropTypes = Component.propTypes;

      if (innerPropTypes) {
        checkPropTypes(innerPropTypes, nextProps, // Resolved props
        'prop', getComponentName(Component), getCurrentFiberStackInDev);
      }
    }
  }

  var render = Component.render;
  var ref = workInProgress.ref; // The rest is a fork of updateFunctionComponent

  var nextChildren;
  prepareToReadContext(workInProgress, renderExpirationTime);

  {
    ReactCurrentOwner$1.current = workInProgress;
    setIsRendering(true);
    nextChildren = renderWithHooks(current, workInProgress, render, nextProps, ref, renderExpirationTime);

    if ( workInProgress.mode & StrictMode) {
      // Only double-render components with Hooks
      if (workInProgress.memoizedState !== null) {
        nextChildren = renderWithHooks(current, workInProgress, render, nextProps, ref, renderExpirationTime);
      }
    }

    setIsRendering(false);
  }

  if (current !== null && !didReceiveUpdate) {
    bailoutHooks(current, workInProgress, renderExpirationTime);
    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderExpirationTime);
  } // React DevTools reads this flag.


  workInProgress.effectTag |= PerformedWork;
  reconcileChildren(current, workInProgress, nextChildren, renderExpirationTime);
  return workInProgress.child;
}

function updateMemoComponent(current, workInProgress, Component, nextProps, updateExpirationTime, renderExpirationTime) {
  if (current === null) {
    var type = Component.type;

    if (isSimpleFunctionComponent(type) && Component.compare === null && // SimpleMemoComponent codepath doesn't resolve outer props either.
    Component.defaultProps === undefined) {
      var resolvedType = type;

      {
        resolvedType = resolveFunctionForHotReloading(type);
      } // If this is a plain function component without default props,
      // and with only the default shallow comparison, we upgrade it
      // to a SimpleMemoComponent to allow fast path updates.


      workInProgress.tag = SimpleMemoComponent;
      workInProgress.type = resolvedType;

      {
        validateFunctionComponentInDev(workInProgress, type);
      }

      return updateSimpleMemoComponent(current, workInProgress, resolvedType, nextProps, updateExpirationTime, renderExpirationTime);
    }

    {
      var innerPropTypes = type.propTypes;

      if (innerPropTypes) {
        // Inner memo component props aren't currently validated in createElement.
        // We could move it there, but we'd still need this for lazy code path.
        checkPropTypes(innerPropTypes, nextProps, // Resolved props
        'prop', getComponentName(type), getCurrentFiberStackInDev);
      }
    }

    var child = createFiberFromTypeAndProps(Component.type, null, nextProps, null, workInProgress.mode, renderExpirationTime);
    child.ref = workInProgress.ref;
    child.return = workInProgress;
    workInProgress.child = child;
    return child;
  }

  {
    var _type = Component.type;
    var _innerPropTypes = _type.propTypes;

    if (_innerPropTypes) {
      // Inner memo component props aren't currently validated in createElement.
      // We could move it there, but we'd still need this for lazy code path.
      checkPropTypes(_innerPropTypes, nextProps, // Resolved props
      'prop', getComponentName(_type), getCurrentFiberStackInDev);
    }
  }

  var currentChild = current.child; // This is always exactly one child

  if (updateExpirationTime < renderExpirationTime) {
    // This will be the props with resolved defaultProps,
    // unlike current.memoizedProps which will be the unresolved ones.
    var prevProps = currentChild.memoizedProps; // Default to shallow comparison

    var compare = Component.compare;
    compare = compare !== null ? compare : shallowEqual;

    if (compare(prevProps, nextProps) && current.ref === workInProgress.ref) {
      return bailoutOnAlreadyFinishedWork(current, workInProgress, renderExpirationTime);
    }
  } // React DevTools reads this flag.


  workInProgress.effectTag |= PerformedWork;
  var newChild = createWorkInProgress(currentChild, nextProps);
  newChild.ref = workInProgress.ref;
  newChild.return = workInProgress;
  workInProgress.child = newChild;
  return newChild;
}

function updateSimpleMemoComponent(current, workInProgress, Component, nextProps, updateExpirationTime, renderExpirationTime) {
  // TODO: current can be non-null here even if the component
  // hasn't yet mounted. This happens when the inner render suspends.
  // We'll need to figure out if this is fine or can cause issues.
  {
    if (workInProgress.type !== workInProgress.elementType) {
      // Lazy component props can't be validated in createElement
      // because they're only guaranteed to be resolved here.
      var outerMemoType = workInProgress.elementType;

      if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
        // We warn when you define propTypes on lazy()
        // so let's just skip over it to find memo() outer wrapper.
        // Inner props for memo are validated later.
        outerMemoType = refineResolvedLazyComponent(outerMemoType);
      }

      var outerPropTypes = outerMemoType && outerMemoType.propTypes;

      if (outerPropTypes) {
        checkPropTypes(outerPropTypes, nextProps, // Resolved (SimpleMemoComponent has no defaultProps)
        'prop', getComponentName(outerMemoType), getCurrentFiberStackInDev);
      } // Inner propTypes will be validated in the function component path.

    }
  }

  if (current !== null) {
    var prevProps = current.memoizedProps;

    if (shallowEqual(prevProps, nextProps) && current.ref === workInProgress.ref && ( // Prevent bailout if the implementation changed due to hot reload.
     workInProgress.type === current.type )) {
      didReceiveUpdate = false;

      if (updateExpirationTime < renderExpirationTime) {
        // The pending update priority was cleared at the beginning of
        // beginWork. We're about to bail out, but there might be additional
        // updates at a lower priority. Usually, the priority level of the
        // remaining updates is accumlated during the evaluation of the
        // component (i.e. when processing the update queue). But since since
        // we're bailing out early *without* evaluating the component, we need
        // to account for it here, too. Reset to the value of the current fiber.
        // NOTE: This only applies to SimpleMemoComponent, not MemoComponent,
        // because a MemoComponent fiber does not have hooks or an update queue;
        // rather, it wraps around an inner component, which may or may not
        // contains hooks.
        // TODO: Move the reset at in beginWork out of the common path so that
        // this is no longer necessary.
        workInProgress.expirationTime = current.expirationTime;
        return bailoutOnAlreadyFinishedWork(current, workInProgress, renderExpirationTime);
      }
    }
  }

  return updateFunctionComponent(current, workInProgress, Component, nextProps, renderExpirationTime);
}

function updateFragment(current, workInProgress, renderExpirationTime) {
  var nextChildren = workInProgress.pendingProps;
  reconcileChildren(current, workInProgress, nextChildren, renderExpirationTime);
  return workInProgress.child;
}

function updateMode(current, workInProgress, renderExpirationTime) {
  var nextChildren = workInProgress.pendingProps.children;
  reconcileChildren(current, workInProgress, nextChildren, renderExpirationTime);
  return workInProgress.child;
}

function updateProfiler(current, workInProgress, renderExpirationTime) {
  {
    workInProgress.effectTag |= Update;
  }

  var nextProps = workInProgress.pendingProps;
  var nextChildren = nextProps.children;
  reconcileChildren(current, workInProgress, nextChildren, renderExpirationTime);
  return workInProgress.child;
}

function markRef(current, workInProgress) {
  var ref = workInProgress.ref;

  if (current === null && ref !== null || current !== null && current.ref !== ref) {
    // Schedule a Ref effect
    workInProgress.effectTag |= Ref;
  }
}

function updateFunctionComponent(current, workInProgress, Component, nextProps, renderExpirationTime) {
  {
    if (workInProgress.type !== workInProgress.elementType) {
      // Lazy component props can't be validated in createElement
      // because they're only guaranteed to be resolved here.
      var innerPropTypes = Component.propTypes;

      if (innerPropTypes) {
        checkPropTypes(innerPropTypes, nextProps, // Resolved props
        'prop', getComponentName(Component), getCurrentFiberStackInDev);
      }
    }
  }

  var context;

  {
    var unmaskedContext = getUnmaskedContext(workInProgress, Component, true);
    context = getMaskedContext(workInProgress, unmaskedContext);
  }

  var nextChildren;
  prepareToReadContext(workInProgress, renderExpirationTime);

  {
    ReactCurrentOwner$1.current = workInProgress;
    setIsRendering(true);
    nextChildren = renderWithHooks(current, workInProgress, Component, nextProps, context, renderExpirationTime);

    if ( workInProgress.mode & StrictMode) {
      // Only double-render components with Hooks
      if (workInProgress.memoizedState !== null) {
        nextChildren = renderWithHooks(current, workInProgress, Component, nextProps, context, renderExpirationTime);
      }
    }

    setIsRendering(false);
  }

  if (current !== null && !didReceiveUpdate) {
    bailoutHooks(current, workInProgress, renderExpirationTime);
    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderExpirationTime);
  } // React DevTools reads this flag.


  workInProgress.effectTag |= PerformedWork;
  reconcileChildren(current, workInProgress, nextChildren, renderExpirationTime);
  return workInProgress.child;
}

function updateClassComponent(current, workInProgress, Component, nextProps, renderExpirationTime) {
  {
    if (workInProgress.type !== workInProgress.elementType) {
      // Lazy component props can't be validated in createElement
      // because they're only guaranteed to be resolved here.
      var innerPropTypes = Component.propTypes;

      if (innerPropTypes) {
        checkPropTypes(innerPropTypes, nextProps, // Resolved props
        'prop', getComponentName(Component), getCurrentFiberStackInDev);
      }
    }
  } // Push context providers early to prevent context stack mismatches.
  // During mounting we don't know the child context yet as the instance doesn't exist.
  // We will invalidate the child context in finishClassComponent() right after rendering.


  var hasContext;

  if (isContextProvider(Component)) {
    hasContext = true;
    pushContextProvider(workInProgress);
  } else {
    hasContext = false;
  }

  prepareToReadContext(workInProgress, renderExpirationTime);
  var instance = workInProgress.stateNode;
  var shouldUpdate;

  if (instance === null) {
    if (current !== null) {
      // A class component without an instance only mounts if it suspended
      // inside a non-concurrent tree, in an inconsistent state. We want to
      // treat it like a new mount, even though an empty version of it already
      // committed. Disconnect the alternate pointers.
      current.alternate = null;
      workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect

      workInProgress.effectTag |= Placement;
    } // In the initial pass we might need to construct the instance.


    constructClassInstance(workInProgress, Component, nextProps);
    mountClassInstance(workInProgress, Component, nextProps, renderExpirationTime);
    shouldUpdate = true;
  } else if (current === null) {
    // In a resume, we'll already have an instance we can reuse.
    shouldUpdate = resumeMountClassInstance(workInProgress, Component, nextProps, renderExpirationTime);
  } else {
    shouldUpdate = updateClassInstance(current, workInProgress, Component, nextProps, renderExpirationTime);
  }

  var nextUnitOfWork = finishClassComponent(current, workInProgress, Component, shouldUpdate, hasContext, renderExpirationTime);

  {
    var inst = workInProgress.stateNode;

    if (inst.props !== nextProps) {
      if (!didWarnAboutReassigningProps) {
        error('It looks like %s is reassigning its own `this.props` while rendering. ' + 'This is not supported and can lead to confusing bugs.', getComponentName(workInProgress.type) || 'a component');
      }

      didWarnAboutReassigningProps = true;
    }
  }

  return nextUnitOfWork;
}

function finishClassComponent(current, workInProgress, Component, shouldUpdate, hasContext, renderExpirationTime) {
  // Refs should update even if shouldComponentUpdate returns false
  markRef(current, workInProgress);
  var didCaptureError = (workInProgress.effectTag & DidCapture) !== NoEffect;

  if (!shouldUpdate && !didCaptureError) {
    // Context providers should defer to sCU for rendering
    if (hasContext) {
      invalidateContextProvider(workInProgress, Component, false);
    }

    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderExpirationTime);
  }

  var instance = workInProgress.stateNode; // Rerender

  ReactCurrentOwner$1.current = workInProgress;
  var nextChildren;

  if (didCaptureError && typeof Component.getDerivedStateFromError !== 'function') {
    // If we captured an error, but getDerivedStateFromError is not defined,
    // unmount all the children. componentDidCatch will schedule an update to
    // re-render a fallback. This is temporary until we migrate everyone to
    // the new API.
    // TODO: Warn in a future release.
    nextChildren = null;

    {
      stopProfilerTimerIfRunning();
    }
  } else {
    {
      setIsRendering(true);
      nextChildren = instance.render();

      if ( workInProgress.mode & StrictMode) {
        instance.render();
      }

      setIsRendering(false);
    }
  } // React DevTools reads this flag.


  workInProgress.effectTag |= PerformedWork;

  if (current !== null && didCaptureError) {
    // If we're recovering from an error, reconcile without reusing any of
    // the existing children. Conceptually, the normal children and the children
    // that are shown on error are two different sets, so we shouldn't reuse
    // normal children even if their identities match.
    forceUnmountCurrentAndReconcile(current, workInProgress, nextChildren, renderExpirationTime);
  } else {
    reconcileChildren(current, workInProgress, nextChildren, renderExpirationTime);
  } // Memoize state using the values we just used to render.
  // TODO: Restructure so we never read values from the instance.


  workInProgress.memoizedState = instance.state; // The context might have changed so we need to recalculate it.

  if (hasContext) {
    invalidateContextProvider(workInProgress, Component, true);
  }

  return workInProgress.child;
}

function pushHostRootContext(workInProgress) {
  var root = workInProgress.stateNode;

  if (root.pendingContext) {
    pushTopLevelContextObject(workInProgress, root.pendingContext, root.pendingContext !== root.context);
  } else if (root.context) {
    // Should always be set
    pushTopLevelContextObject(workInProgress, root.context, false);
  }

  pushHostContainer(workInProgress, root.containerInfo);
}

function updateHostRoot(current, workInProgress, renderExpirationTime) {
  pushHostRootContext(workInProgress);
  var updateQueue = workInProgress.updateQueue;

  if (!(current !== null && updateQueue !== null)) {
    {
      throw Error( "If the root does not have an updateQueue, we should have already bailed out. This error is likely caused by a bug in React. Please file an issue." );
    }
  }

  var nextProps = workInProgress.pendingProps;
  var prevState = workInProgress.memoizedState;
  var prevChildren = prevState !== null ? prevState.element : null;
  cloneUpdateQueue(current, workInProgress);
  processUpdateQueue(workInProgress, nextProps, null, renderExpirationTime);
  var nextState = workInProgress.memoizedState; // Caution: React DevTools currently depends on this property
  // being called "element".

  var nextChildren = nextState.element;

  if (nextChildren === prevChildren) {
    // If the state is the same as before, that's a bailout because we had
    // no work that expires at this time.
    resetHydrationState();
    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderExpirationTime);
  }

  var root = workInProgress.stateNode;

  if (root.hydrate && enterHydrationState(workInProgress)) {
    // If we don't have any current children this might be the first pass.
    // We always try to hydrate. If this isn't a hydration pass there won't
    // be any children to hydrate which is effectively the same thing as
    // not hydrating.
    var child = mountChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
    workInProgress.child = child;
    var node = child;

    while (node) {
      // Mark each child as hydrating. This is a fast path to know whether this
      // tree is part of a hydrating tree. This is used to determine if a child
      // node has fully mounted yet, and for scheduling event replaying.
      // Conceptually this is similar to Placement in that a new subtree is
      // inserted into the React tree here. It just happens to not need DOM
      // mutations because it already exists.
      node.effectTag = node.effectTag & ~Placement | Hydrating;
      node = node.sibling;
    }
  } else {
    // Otherwise reset hydration state in case we aborted and resumed another
    // root.
    reconcileChildren(current, workInProgress, nextChildren, renderExpirationTime);
    resetHydrationState();
  }

  return workInProgress.child;
}

function updateHostComponent(current, workInProgress, renderExpirationTime) {
  pushHostContext(workInProgress);

  if (current === null) {
    tryToClaimNextHydratableInstance(workInProgress);
  }

  var type = workInProgress.type;
  var nextProps = workInProgress.pendingProps;
  var prevProps = current !== null ? current.memoizedProps : null;
  var nextChildren = nextProps.children;
  var isDirectTextChild = shouldSetTextContent(type, nextProps);

  if (isDirectTextChild) {
    // We special case a direct text child of a host node. This is a common
    // case. We won't handle it as a reified child. We will instead handle
    // this in the host environment that also has access to this prop. That
    // avoids allocating another HostText fiber and traversing it.
    nextChildren = null;
  } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
    // If we're switching from a direct text child to a normal child, or to
    // empty, we need to schedule the text content to be reset.
    workInProgress.effectTag |= ContentReset;
  }

  markRef(current, workInProgress); // Check the host config to see if the children are offscreen/hidden.

  if (workInProgress.mode & ConcurrentMode && renderExpirationTime !== Never && shouldDeprioritizeSubtree(type, nextProps)) {
    {
      markSpawnedWork(Never);
    } // Schedule this fiber to re-render at offscreen priority. Then bailout.


    workInProgress.expirationTime = workInProgress.childExpirationTime = Never;
    return null;
  }

  reconcileChildren(current, workInProgress, nextChildren, renderExpirationTime);
  return workInProgress.child;
}

function updateHostText(current, workInProgress) {
  if (current === null) {
    tryToClaimNextHydratableInstance(workInProgress);
  } // Nothing to do here. This is terminal. We'll do the completion step
  // immediately after.


  return null;
}

function mountLazyComponent(_current, workInProgress, elementType, updateExpirationTime, renderExpirationTime) {
  if (_current !== null) {
    // A lazy component only mounts if it suspended inside a non-
    // concurrent tree, in an inconsistent state. We want to treat it like
    // a new mount, even though an empty version of it already committed.
    // Disconnect the alternate pointers.
    _current.alternate = null;
    workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect

    workInProgress.effectTag |= Placement;
  }

  var props = workInProgress.pendingProps; // We can't start a User Timing measurement with correct label yet.
  // Cancel and resume right after we know the tag.

  cancelWorkTimer(workInProgress);
  var Component = readLazyComponentType(elementType); // Store the unwrapped component in the type.

  workInProgress.type = Component;
  var resolvedTag = workInProgress.tag = resolveLazyComponentTag(Component);
  startWorkTimer(workInProgress);
  var resolvedProps = resolveDefaultProps(Component, props);
  var child;

  switch (resolvedTag) {
    case FunctionComponent:
      {
        {
          validateFunctionComponentInDev(workInProgress, Component);
          workInProgress.type = Component = resolveFunctionForHotReloading(Component);
        }

        child = updateFunctionComponent(null, workInProgress, Component, resolvedProps, renderExpirationTime);
        return child;
      }

    case ClassComponent:
      {
        {
          workInProgress.type = Component = resolveClassForHotReloading(Component);
        }

        child = updateClassComponent(null, workInProgress, Component, resolvedProps, renderExpirationTime);
        return child;
      }

    case ForwardRef:
      {
        {
          workInProgress.type = Component = resolveForwardRefForHotReloading(Component);
        }

        child = updateForwardRef(null, workInProgress, Component, resolvedProps, renderExpirationTime);
        return child;
      }

    case MemoComponent:
      {
        {
          if (workInProgress.type !== workInProgress.elementType) {
            var outerPropTypes = Component.propTypes;

            if (outerPropTypes) {
              checkPropTypes(outerPropTypes, resolvedProps, // Resolved for outer only
              'prop', getComponentName(Component), getCurrentFiberStackInDev);
            }
          }
        }

        child = updateMemoComponent(null, workInProgress, Component, resolveDefaultProps(Component.type, resolvedProps), // The inner type can have defaults too
        updateExpirationTime, renderExpirationTime);
        return child;
      }
  }

  var hint = '';

  {
    if (Component !== null && typeof Component === 'object' && Component.$$typeof === REACT_LAZY_TYPE) {
      hint = ' Did you wrap a component in React.lazy() more than once?';
    }
  } // This message intentionally doesn't mention ForwardRef or MemoComponent
  // because the fact that it's a separate type of work is an
  // implementation detail.


  {
    {
      throw Error( "Element type is invalid. Received a promise that resolves to: " + Component + ". Lazy element type must resolve to a class or function." + hint );
    }
  }
}

function mountIncompleteClassComponent(_current, workInProgress, Component, nextProps, renderExpirationTime) {
  if (_current !== null) {
    // An incomplete component only mounts if it suspended inside a non-
    // concurrent tree, in an inconsistent state. We want to treat it like
    // a new mount, even though an empty version of it already committed.
    // Disconnect the alternate pointers.
    _current.alternate = null;
    workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect

    workInProgress.effectTag |= Placement;
  } // Promote the fiber to a class and try rendering again.


  workInProgress.tag = ClassComponent; // The rest of this function is a fork of `updateClassComponent`
  // Push context providers early to prevent context stack mismatches.
  // During mounting we don't know the child context yet as the instance doesn't exist.
  // We will invalidate the child context in finishClassComponent() right after rendering.

  var hasContext;

  if (isContextProvider(Component)) {
    hasContext = true;
    pushContextProvider(workInProgress);
  } else {
    hasContext = false;
  }

  prepareToReadContext(workInProgress, renderExpirationTime);
  constructClassInstance(workInProgress, Component, nextProps);
  mountClassInstance(workInProgress, Component, nextProps, renderExpirationTime);
  return finishClassComponent(null, workInProgress, Component, true, hasContext, renderExpirationTime);
}

function mountIndeterminateComponent(_current, workInProgress, Component, renderExpirationTime) {
  if (_current !== null) {
    // An indeterminate component only mounts if it suspended inside a non-
    // concurrent tree, in an inconsistent state. We want to treat it like
    // a new mount, even though an empty version of it already committed.
    // Disconnect the alternate pointers.
    _current.alternate = null;
    workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect

    workInProgress.effectTag |= Placement;
  }

  var props = workInProgress.pendingProps;
  var context;

  {
    var unmaskedContext = getUnmaskedContext(workInProgress, Component, false);
    context = getMaskedContext(workInProgress, unmaskedContext);
  }

  prepareToReadContext(workInProgress, renderExpirationTime);
  var value;

  {
    if (Component.prototype && typeof Component.prototype.render === 'function') {
      var componentName = getComponentName(Component) || 'Unknown';

      if (!didWarnAboutBadClass[componentName]) {
        error("The <%s /> component appears to have a render method, but doesn't extend React.Component. " + 'This is likely to cause errors. Change %s to extend React.Component instead.', componentName, componentName);

        didWarnAboutBadClass[componentName] = true;
      }
    }

    if (workInProgress.mode & StrictMode) {
      ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, null);
    }

    setIsRendering(true);
    ReactCurrentOwner$1.current = workInProgress;
    value = renderWithHooks(null, workInProgress, Component, props, context, renderExpirationTime);
    setIsRendering(false);
  } // React DevTools reads this flag.


  workInProgress.effectTag |= PerformedWork;

  if (typeof value === 'object' && value !== null && typeof value.render === 'function' && value.$$typeof === undefined) {
    {
      var _componentName = getComponentName(Component) || 'Unknown';

      if (!didWarnAboutModulePatternComponent[_componentName]) {
        error('The <%s /> component appears to be a function component that returns a class instance. ' + 'Change %s to a class that extends React.Component instead. ' + "If you can't use a class try assigning the prototype on the function as a workaround. " + "`%s.prototype = React.Component.prototype`. Don't use an arrow function since it " + 'cannot be called with `new` by React.', _componentName, _componentName, _componentName);

        didWarnAboutModulePatternComponent[_componentName] = true;
      }
    } // Proceed under the assumption that this is a class instance


    workInProgress.tag = ClassComponent; // Throw out any hooks that were used.

    workInProgress.memoizedState = null;
    workInProgress.updateQueue = null; // Push context providers early to prevent context stack mismatches.
    // During mounting we don't know the child context yet as the instance doesn't exist.
    // We will invalidate the child context in finishClassComponent() right after rendering.

    var hasContext = false;

    if (isContextProvider(Component)) {
      hasContext = true;
      pushContextProvider(workInProgress);
    } else {
      hasContext = false;
    }

    workInProgress.memoizedState = value.state !== null && value.state !== undefined ? value.state : null;
    initializeUpdateQueue(workInProgress);
    var getDerivedStateFromProps = Component.getDerivedStateFromProps;

    if (typeof getDerivedStateFromProps === 'function') {
      applyDerivedStateFromProps(workInProgress, Component, getDerivedStateFromProps, props);
    }

    adoptClassInstance(workInProgress, value);
    mountClassInstance(workInProgress, Component, props, renderExpirationTime);
    return finishClassComponent(null, workInProgress, Component, true, hasContext, renderExpirationTime);
  } else {
    // Proceed under the assumption that this is a function component
    workInProgress.tag = FunctionComponent;

    {

      if ( workInProgress.mode & StrictMode) {
        // Only double-render components with Hooks
        if (workInProgress.memoizedState !== null) {
          value = renderWithHooks(null, workInProgress, Component, props, context, renderExpirationTime);
        }
      }
    }

    reconcileChildren(null, workInProgress, value, renderExpirationTime);

    {
      validateFunctionComponentInDev(workInProgress, Component);
    }

    return workInProgress.child;
  }
}

function validateFunctionComponentInDev(workInProgress, Component) {
  {
    if (Component) {
      if (Component.childContextTypes) {
        error('%s(...): childContextTypes cannot be defined on a function component.', Component.displayName || Component.name || 'Component');
      }
    }

    if (workInProgress.ref !== null) {
      var info = '';
      var ownerName = getCurrentFiberOwnerNameInDevOrNull();

      if (ownerName) {
        info += '\n\nCheck the render method of `' + ownerName + '`.';
      }

      var warningKey = ownerName || workInProgress._debugID || '';
      var debugSource = workInProgress._debugSource;

      if (debugSource) {
        warningKey = debugSource.fileName + ':' + debugSource.lineNumber;
      }

      if (!didWarnAboutFunctionRefs[warningKey]) {
        didWarnAboutFunctionRefs[warningKey] = true;

        error('Function components cannot be given refs. ' + 'Attempts to access this ref will fail. ' + 'Did you mean to use React.forwardRef()?%s', info);
      }
    }

    if (typeof Component.getDerivedStateFromProps === 'function') {
      var _componentName2 = getComponentName(Component) || 'Unknown';

      if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName2]) {
        error('%s: Function components do not support getDerivedStateFromProps.', _componentName2);

        didWarnAboutGetDerivedStateOnFunctionComponent[_componentName2] = true;
      }
    }

    if (typeof Component.contextType === 'object' && Component.contextType !== null) {
      var _componentName3 = getComponentName(Component) || 'Unknown';

      if (!didWarnAboutContextTypeOnFunctionComponent[_componentName3]) {
        error('%s: Function components do not support contextType.', _componentName3);

        didWarnAboutContextTypeOnFunctionComponent[_componentName3] = true;
      }
    }
  }
}

var SUSPENDED_MARKER = {
  dehydrated: null,
  retryTime: NoWork
};

function shouldRemainOnFallback(suspenseContext, current, workInProgress) {
  // If the context is telling us that we should show a fallback, and we're not
  // already showing content, then we should show the fallback instead.
  return hasSuspenseContext(suspenseContext, ForceSuspenseFallback) && (current === null || current.memoizedState !== null);
}

function updateSuspenseComponent(current, workInProgress, renderExpirationTime) {
  var mode = workInProgress.mode;
  var nextProps = workInProgress.pendingProps; // This is used by DevTools to force a boundary to suspend.

  {
    if (shouldSuspend(workInProgress)) {
      workInProgress.effectTag |= DidCapture;
    }
  }

  var suspenseContext = suspenseStackCursor.current;
  var nextDidTimeout = false;
  var didSuspend = (workInProgress.effectTag & DidCapture) !== NoEffect;

  if (didSuspend || shouldRemainOnFallback(suspenseContext, current)) {
    // Something in this boundary's subtree already suspended. Switch to
    // rendering the fallback children.
    nextDidTimeout = true;
    workInProgress.effectTag &= ~DidCapture;
  } else {
    // Attempting the main content
    if (current === null || current.memoizedState !== null) {
      // This is a new mount or this boundary is already showing a fallback state.
      // Mark this subtree context as having at least one invisible parent that could
      // handle the fallback state.
      // Boundaries without fallbacks or should be avoided are not considered since
      // they cannot handle preferred fallback states.
      if (nextProps.fallback !== undefined && nextProps.unstable_avoidThisFallback !== true) {
        suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
      }
    }
  }

  suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
  pushSuspenseContext(workInProgress, suspenseContext); // This next part is a bit confusing. If the children timeout, we switch to
  // showing the fallback children in place of the "primary" children.
  // However, we don't want to delete the primary children because then their
  // state will be lost (both the React state and the host state, e.g.
  // uncontrolled form inputs). Instead we keep them mounted and hide them.
  // Both the fallback children AND the primary children are rendered at the
  // same time. Once the primary children are un-suspended, we can delete
  // the fallback children — don't need to preserve their state.
  //
  // The two sets of children are siblings in the host environment, but
  // semantically, for purposes of reconciliation, they are two separate sets.
  // So we store them using two fragment fibers.
  //
  // However, we want to avoid allocating extra fibers for every placeholder.
  // They're only necessary when the children time out, because that's the
  // only time when both sets are mounted.
  //
  // So, the extra fragment fibers are only used if the children time out.
  // Otherwise, we render the primary children directly. This requires some
  // custom reconciliation logic to preserve the state of the primary
  // children. It's essentially a very basic form of re-parenting.

  if (current === null) {
    // If we're currently hydrating, try to hydrate this boundary.
    // But only if this has a fallback.
    if (nextProps.fallback !== undefined) {
      tryToClaimNextHydratableInstance(workInProgress); // This could've been a dehydrated suspense component.
    } // This is the initial mount. This branch is pretty simple because there's
    // no previous state that needs to be preserved.


    if (nextDidTimeout) {
      // Mount separate fragments for primary and fallback children.
      var nextFallbackChildren = nextProps.fallback;
      var primaryChildFragment = createFiberFromFragment(null, mode, NoWork, null);
      primaryChildFragment.return = workInProgress;

      if ((workInProgress.mode & BlockingMode) === NoMode) {
        // Outside of blocking mode, we commit the effects from the
        // partially completed, timed-out tree, too.
        var progressedState = workInProgress.memoizedState;
        var progressedPrimaryChild = progressedState !== null ? workInProgress.child.child : workInProgress.child;
        primaryChildFragment.child = progressedPrimaryChild;
        var progressedChild = progressedPrimaryChild;

        while (progressedChild !== null) {
          progressedChild.return = primaryChildFragment;
          progressedChild = progressedChild.sibling;
        }
      }

      var fallbackChildFragment = createFiberFromFragment(nextFallbackChildren, mode, renderExpirationTime, null);
      fallbackChildFragment.return = workInProgress;
      primaryChildFragment.sibling = fallbackChildFragment; // Skip the primary children, and continue working on the
      // fallback children.

      workInProgress.memoizedState = SUSPENDED_MARKER;
      workInProgress.child = primaryChildFragment;
      return fallbackChildFragment;
    } else {
      // Mount the primary children without an intermediate fragment fiber.
      var nextPrimaryChildren = nextProps.children;
      workInProgress.memoizedState = null;
      return workInProgress.child = mountChildFibers(workInProgress, null, nextPrimaryChildren, renderExpirationTime);
    }
  } else {
    // This is an update. This branch is more complicated because we need to
    // ensure the state of the primary children is preserved.
    var prevState = current.memoizedState;

    if (prevState !== null) {
      // wrapped in a fragment fiber.


      var currentPrimaryChildFragment = current.child;
      var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;

      if (nextDidTimeout) {
        // Still timed out. Reuse the current primary children by cloning
        // its fragment. We're going to skip over these entirely.
        var _nextFallbackChildren2 = nextProps.fallback;

        var _primaryChildFragment2 = createWorkInProgress(currentPrimaryChildFragment, currentPrimaryChildFragment.pendingProps);

        _primaryChildFragment2.return = workInProgress;

        if ((workInProgress.mode & BlockingMode) === NoMode) {
          // Outside of blocking mode, we commit the effects from the
          // partially completed, timed-out tree, too.
          var _progressedState = workInProgress.memoizedState;

          var _progressedPrimaryChild = _progressedState !== null ? workInProgress.child.child : workInProgress.child;

          if (_progressedPrimaryChild !== currentPrimaryChildFragment.child) {
            _primaryChildFragment2.child = _progressedPrimaryChild;
            var _progressedChild2 = _progressedPrimaryChild;

            while (_progressedChild2 !== null) {
              _progressedChild2.return = _primaryChildFragment2;
              _progressedChild2 = _progressedChild2.sibling;
            }
          }
        } // Because primaryChildFragment is a new fiber that we're inserting as the
        // parent of a new tree, we need to set its treeBaseDuration.


        if ( workInProgress.mode & ProfileMode) {
          // treeBaseDuration is the sum of all the child tree base durations.
          var _treeBaseDuration = 0;
          var _hiddenChild = _primaryChildFragment2.child;

          while (_hiddenChild !== null) {
            _treeBaseDuration += _hiddenChild.treeBaseDuration;
            _hiddenChild = _hiddenChild.sibling;
          }

          _primaryChildFragment2.treeBaseDuration = _treeBaseDuration;
        } // Clone the fallback child fragment, too. These we'll continue
        // working on.


        var _fallbackChildFragment2 = createWorkInProgress(currentFallbackChildFragment, _nextFallbackChildren2);

        _fallbackChildFragment2.return = workInProgress;
        _primaryChildFragment2.sibling = _fallbackChildFragment2;
        _primaryChildFragment2.childExpirationTime = NoWork; // Skip the primary children, and continue working on the
        // fallback children.

        workInProgress.memoizedState = SUSPENDED_MARKER;
        workInProgress.child = _primaryChildFragment2;
        return _fallbackChildFragment2;
      } else {
        // No longer suspended. Switch back to showing the primary children,
        // and remove the intermediate fragment fiber.
        var _nextPrimaryChildren = nextProps.children;
        var currentPrimaryChild = currentPrimaryChildFragment.child;
        var primaryChild = reconcileChildFibers(workInProgress, currentPrimaryChild, _nextPrimaryChildren, renderExpirationTime); // If this render doesn't suspend, we need to delete the fallback
        // children. Wait until the complete phase, after we've confirmed the
        // fallback is no longer needed.
        // TODO: Would it be better to store the fallback fragment on
        // the stateNode?
        // Continue rendering the children, like we normally do.

        workInProgress.memoizedState = null;
        return workInProgress.child = primaryChild;
      }
    } else {
      // The current tree has not already timed out. That means the primary
      // children are not wrapped in a fragment fiber.
      var _currentPrimaryChild = current.child;

      if (nextDidTimeout) {
        // Timed out. Wrap the children in a fragment fiber to keep them
        // separate from the fallback children.
        var _nextFallbackChildren3 = nextProps.fallback;

        var _primaryChildFragment3 = createFiberFromFragment( // It shouldn't matter what the pending props are because we aren't
        // going to render this fragment.
        null, mode, NoWork, null);

        _primaryChildFragment3.return = workInProgress;
        _primaryChildFragment3.child = _currentPrimaryChild;

        if (_currentPrimaryChild !== null) {
          _currentPrimaryChild.return = _primaryChildFragment3;
        } // Even though we're creating a new fiber, there are no new children,
        // because we're reusing an already mounted tree. So we don't need to
        // schedule a placement.
        // primaryChildFragment.effectTag |= Placement;


        if ((workInProgress.mode & BlockingMode) === NoMode) {
          // Outside of blocking mode, we commit the effects from the
          // partially completed, timed-out tree, too.
          var _progressedState2 = workInProgress.memoizedState;

          var _progressedPrimaryChild2 = _progressedState2 !== null ? workInProgress.child.child : workInProgress.child;

          _primaryChildFragment3.child = _progressedPrimaryChild2;
          var _progressedChild3 = _progressedPrimaryChild2;

          while (_progressedChild3 !== null) {
            _progressedChild3.return = _primaryChildFragment3;
            _progressedChild3 = _progressedChild3.sibling;
          }
        } // Because primaryChildFragment is a new fiber that we're inserting as the
        // parent of a new tree, we need to set its treeBaseDuration.


        if ( workInProgress.mode & ProfileMode) {
          // treeBaseDuration is the sum of all the child tree base durations.
          var _treeBaseDuration2 = 0;
          var _hiddenChild2 = _primaryChildFragment3.child;

          while (_hiddenChild2 !== null) {
            _treeBaseDuration2 += _hiddenChild2.treeBaseDuration;
            _hiddenChild2 = _hiddenChild2.sibling;
          }

          _primaryChildFragment3.treeBaseDuration = _treeBaseDuration2;
        } // Create a fragment from the fallback children, too.


        var _fallbackChildFragment3 = createFiberFromFragment(_nextFallbackChildren3, mode, renderExpirationTime, null);

        _fallbackChildFragment3.return = workInProgress;
        _primaryChildFragment3.sibling = _fallbackChildFragment3;
        _fallbackChildFragment3.effectTag |= Placement;
        _primaryChildFragment3.childExpirationTime = NoWork; // Skip the primary children, and continue working on the
        // fallback children.

        workInProgress.memoizedState = SUSPENDED_MARKER;
        workInProgress.child = _primaryChildFragment3;
        return _fallbackChildFragment3;
      } else {
        // Still haven't timed out. Continue rendering the children, like we
        // normally do.
        workInProgress.memoizedState = null;
        var _nextPrimaryChildren2 = nextProps.children;
        return workInProgress.child = reconcileChildFibers(workInProgress, _currentPrimaryChild, _nextPrimaryChildren2, renderExpirationTime);
      }
    }
  }
}

function scheduleWorkOnFiber(fiber, renderExpirationTime) {
  if (fiber.expirationTime < renderExpirationTime) {
    fiber.expirationTime = renderExpirationTime;
  }

  var alternate = fiber.alternate;

  if (alternate !== null && alternate.expirationTime < renderExpirationTime) {
    alternate.expirationTime = renderExpirationTime;
  }

  scheduleWorkOnParentPath(fiber.return, renderExpirationTime);
}

function propagateSuspenseContextChange(workInProgress, firstChild, renderExpirationTime) {
  // Mark any Suspense boundaries with fallbacks as having work to do.
  // If they were previously forced into fallbacks, they may now be able
  // to unblock.
  var node = firstChild;

  while (node !== null) {
    if (node.tag === SuspenseComponent) {
      var state = node.memoizedState;

      if (state !== null) {
        scheduleWorkOnFiber(node, renderExpirationTime);
      }
    } else if (node.tag === SuspenseListComponent) {
      // If the tail is hidden there might not be an Suspense boundaries
      // to schedule work on. In this case we have to schedule it on the
      // list itself.
      // We don't have to traverse to the children of the list since
      // the list will propagate the change when it rerenders.
      scheduleWorkOnFiber(node, renderExpirationTime);
    } else if (node.child !== null) {
      node.child.return = node;
      node = node.child;
      continue;
    }

    if (node === workInProgress) {
      return;
    }

    while (node.sibling === null) {
      if (node.return === null || node.return === workInProgress) {
        return;
      }

      node = node.return;
    }

    node.sibling.return = node.return;
    node = node.sibling;
  }
}

function findLastContentRow(firstChild) {
  // This is going to find the last row among these children that is already
  // showing content on the screen, as opposed to being in fallback state or
  // new. If a row has multiple Suspense boundaries, any of them being in the
  // fallback state, counts as the whole row being in a fallback state.
  // Note that the "rows" will be workInProgress, but any nested children
  // will still be current since we haven't rendered them yet. The mounted
  // order may not be the same as the new order. We use the new order.
  var row = firstChild;
  var lastContentRow = null;

  while (row !== null) {
    var currentRow = row.alternate; // New rows can't be content rows.

    if (currentRow !== null && findFirstSuspended(currentRow) === null) {
      lastContentRow = row;
    }

    row = row.sibling;
  }

  return lastContentRow;
}

function validateRevealOrder(revealOrder) {
  {
    if (revealOrder !== undefined && revealOrder !== 'forwards' && revealOrder !== 'backwards' && revealOrder !== 'together' && !didWarnAboutRevealOrder[revealOrder]) {
      didWarnAboutRevealOrder[revealOrder] = true;

      if (typeof revealOrder === 'string') {
        switch (revealOrder.toLowerCase()) {
          case 'together':
          case 'forwards':
          case 'backwards':
            {
              error('"%s" is not a valid value for revealOrder on <SuspenseList />. ' + 'Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());

              break;
            }

          case 'forward':
          case 'backward':
            {
              error('"%s" is not a valid value for revealOrder on <SuspenseList />. ' + 'React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());

              break;
            }

          default:
            error('"%s" is not a supported revealOrder on <SuspenseList />. ' + 'Did you mean "together", "forwards" or "backwards"?', revealOrder);

            break;
        }
      } else {
        error('%s is not a supported value for revealOrder on <SuspenseList />. ' + 'Did you mean "together", "forwards" or "backwards"?', revealOrder);
      }
    }
  }
}

function validateTailOptions(tailMode, revealOrder) {
  {
    if (tailMode !== undefined && !didWarnAboutTailOptions[tailMode]) {
      if (tailMode !== 'collapsed' && tailMode !== 'hidden') {
        didWarnAboutTailOptions[tailMode] = true;

        error('"%s" is not a supported value for tail on <SuspenseList />. ' + 'Did you mean "collapsed" or "hidden"?', tailMode);
      } else if (revealOrder !== 'forwards' && revealOrder !== 'backwards') {
        didWarnAboutTailOptions[tailMode] = true;

        error('<SuspenseList tail="%s" /> is only valid if revealOrder is ' + '"forwards" or "backwards". ' + 'Did you mean to specify revealOrder="forwards"?', tailMode);
      }
    }
  }
}

function validateSuspenseListNestedChild(childSlot, index) {
  {
    var isArray = Array.isArray(childSlot);
    var isIterable = !isArray && typeof getIteratorFn(childSlot) === 'function';

    if (isArray || isIterable) {
      var type = isArray ? 'array' : 'iterable';

      error('A nested %s was passed to row #%s in <SuspenseList />. Wrap it in ' + 'an additional SuspenseList to configure its revealOrder: ' + '<SuspenseList revealOrder=...> ... ' + '<SuspenseList revealOrder=...>{%s}</SuspenseList> ... ' + '</SuspenseList>', type, index, type);

      return false;
    }
  }

  return true;
}

function validateSuspenseListChildren(children, revealOrder) {
  {
    if ((revealOrder === 'forwards' || revealOrder === 'backwards') && children !== undefined && children !== null && children !== false) {
      if (Array.isArray(children)) {
        for (var i = 0; i < children.length; i++) {
          if (!validateSuspenseListNestedChild(children[i], i)) {
            return;
          }
        }
      } else {
        var iteratorFn = getIteratorFn(children);

        if (typeof iteratorFn === 'function') {
          var childrenIterator = iteratorFn.call(children);

          if (childrenIterator) {
            var step = childrenIterator.next();
            var _i = 0;

            for (; !step.done; step = childrenIterator.next()) {
              if (!validateSuspenseListNestedChild(step.value, _i)) {
                return;
              }

              _i++;
            }
          }
        } else {
          error('A single row was passed to a <SuspenseList revealOrder="%s" />. ' + 'This is not useful since it needs multiple rows. ' + 'Did you mean to pass multiple children or an array?', revealOrder);
        }
      }
    }
  }
}

function initSuspenseListRenderState(workInProgress, isBackwards, tail, lastContentRow, tailMode, lastEffectBeforeRendering) {
  var renderState = workInProgress.memoizedState;

  if (renderState === null) {
    workInProgress.memoizedState = {
      isBackwards: isBackwards,
      rendering: null,
      renderingStartTime: 0,
      last: lastContentRow,
      tail: tail,
      tailExpiration: 0,
      tailMode: tailMode,
      lastEffect: lastEffectBeforeRendering
    };
  } else {
    // We can reuse the existing object from previous renders.
    renderState.isBackwards = isBackwards;
    renderState.rendering = null;
    renderState.renderingStartTime = 0;
    renderState.last = lastContentRow;
    renderState.tail = tail;
    renderState.tailExpiration = 0;
    renderState.tailMode = tailMode;
    renderState.lastEffect = lastEffectBeforeRendering;
  }
} // This can end up rendering this component multiple passes.
// The first pass splits the children fibers into two sets. A head and tail.
// We first render the head. If anything is in fallback state, we do another
// pass through beginWork to rerender all children (including the tail) with
// the force suspend context. If the first render didn't have anything in
// in fallback state. Then we render each row in the tail one-by-one.
// That happens in the completeWork phase without going back to beginWork.


function updateSuspenseListComponent(current, workInProgress, renderExpirationTime) {
  var nextProps = workInProgress.pendingProps;
  var revealOrder = nextProps.revealOrder;
  var tailMode = nextProps.tail;
  var newChildren = nextProps.children;
  validateRevealOrder(revealOrder);
  validateTailOptions(tailMode, revealOrder);
  validateSuspenseListChildren(newChildren, revealOrder);
  reconcileChildren(current, workInProgress, newChildren, renderExpirationTime);
  var suspenseContext = suspenseStackCursor.current;
  var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);

  if (shouldForceFallback) {
    suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
    workInProgress.effectTag |= DidCapture;
  } else {
    var didSuspendBefore = current !== null && (current.effectTag & DidCapture) !== NoEffect;

    if (didSuspendBefore) {
      // If we previously forced a fallback, we need to schedule work
      // on any nested boundaries to let them know to try to render
      // again. This is the same as context updating.
      propagateSuspenseContextChange(workInProgress, workInProgress.child, renderExpirationTime);
    }

    suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
  }

  pushSuspenseContext(workInProgress, suspenseContext);

  if ((workInProgress.mode & BlockingMode) === NoMode) {
    // Outside of blocking mode, SuspenseList doesn't work so we just
    // use make it a noop by treating it as the default revealOrder.
    workInProgress.memoizedState = null;
  } else {
    switch (revealOrder) {
      case 'forwards':
        {
          var lastContentRow = findLastContentRow(workInProgress.child);
          var tail;

          if (lastContentRow === null) {
            // The whole list is part of the tail.
            // TODO: We could fast path by just rendering the tail now.
            tail = workInProgress.child;
            workInProgress.child = null;
          } else {
            // Disconnect the tail rows after the content row.
            // We're going to render them separately later.
            tail = lastContentRow.sibling;
            lastContentRow.sibling = null;
          }

          initSuspenseListRenderState(workInProgress, false, // isBackwards
          tail, lastContentRow, tailMode, workInProgress.lastEffect);
          break;
        }

      case 'backwards':
        {
          // We're going to find the first row that has existing content.
          // At the same time we're going to reverse the list of everything
          // we pass in the meantime. That's going to be our tail in reverse
          // order.
          var _tail = null;
          var row = workInProgress.child;
          workInProgress.child = null;

          while (row !== null) {
            var currentRow = row.alternate; // New rows can't be content rows.

            if (currentRow !== null && findFirstSuspended(currentRow) === null) {
              // This is the beginning of the main content.
              workInProgress.child = row;
              break;
            }

            var nextRow = row.sibling;
            row.sibling = _tail;
            _tail = row;
            row = nextRow;
          } // TODO: If workInProgress.child is null, we can continue on the tail immediately.


          initSuspenseListRenderState(workInProgress, true, // isBackwards
          _tail, null, // last
          tailMode, workInProgress.lastEffect);
          break;
        }

      case 'together':
        {
          initSuspenseListRenderState(workInProgress, false, // isBackwards
          null, // tail
          null, // last
          undefined, workInProgress.lastEffect);
          break;
        }

      default:
        {
          // The default reveal order is the same as not having
          // a boundary.
          workInProgress.memoizedState = null;
        }
    }
  }

  return workInProgress.child;
}

function updatePortalComponent(current, workInProgress, renderExpirationTime) {
  pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
  var nextChildren = workInProgress.pendingProps;

  if (current === null) {
    // Portals are special because we don't append the children during mount
    // but at commit. Therefore we need to track insertions which the normal
    // flow doesn't do during mount. This doesn't happen at the root because
    // the root always starts with a "current" with a null child.
    // TODO: Consider unifying this with how the root works.
    workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
  } else {
    reconcileChildren(current, workInProgress, nextChildren, renderExpirationTime);
  }

  return workInProgress.child;
}

function updateContextProvider(current, workInProgress, renderExpirationTime) {
  var providerType = workInProgress.type;
  var context = providerType._context;
  var newProps = workInProgress.pendingProps;
  var oldProps = workInProgress.memoizedProps;
  var newValue = newProps.value;

  {
    var providerPropTypes = workInProgress.type.propTypes;

    if (providerPropTypes) {
      checkPropTypes(providerPropTypes, newProps, 'prop', 'Context.Provider', getCurrentFiberStackInDev);
    }
  }

  pushProvider(workInProgress, newValue);

  if (oldProps !== null) {
    var oldValue = oldProps.value;
    var changedBits = calculateChangedBits(context, newValue, oldValue);

    if (changedBits === 0) {
      // No change. Bailout early if children are the same.
      if (oldProps.children === newProps.children && !hasContextChanged()) {
        return bailoutOnAlreadyFinishedWork(current, workInProgress, renderExpirationTime);
      }
    } else {
      // The context value changed. Search for matching consumers and schedule
      // them to update.
      propagateContextChange(workInProgress, context, changedBits, renderExpirationTime);
    }
  }

  var newChildren = newProps.children;
  reconcileChildren(current, workInProgress, newChildren, renderExpirationTime);
  return workInProgress.child;
}

var hasWarnedAboutUsingContextAsConsumer = false;

function updateContextConsumer(current, workInProgress, renderExpirationTime) {
  var context = workInProgress.type; // The logic below for Context differs depending on PROD or DEV mode. In
  // DEV mode, we create a separate object for Context.Consumer that acts
  // like a proxy to Context. This proxy object adds unnecessary code in PROD
  // so we use the old behaviour (Context.Consumer references Context) to
  // reduce size and overhead. The separate object references context via
  // a property called "_context", which also gives us the ability to check
  // in DEV mode if this property exists or not and warn if it does not.

  {
    if (context._context === undefined) {
      // This may be because it's a Context (rather than a Consumer).
      // Or it may be because it's older React where they're the same thing.
      // We only want to warn if we're sure it's a new React.
      if (context !== context.Consumer) {
        if (!hasWarnedAboutUsingContextAsConsumer) {
          hasWarnedAboutUsingContextAsConsumer = true;

          error('Rendering <Context> directly is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Consumer> instead?');
        }
      }
    } else {
      context = context._context;
    }
  }

  var newProps = workInProgress.pendingProps;
  var render = newProps.children;

  {
    if (typeof render !== 'function') {
      error('A context consumer was rendered with multiple children, or a child ' + "that isn't a function. A context consumer expects a single child " + 'that is a function. If you did pass a function, make sure there ' + 'is no trailing or leading whitespace around it.');
    }
  }

  prepareToReadContext(workInProgress, renderExpirationTime);
  var newValue = readContext(context, newProps.unstable_observedBits);
  var newChildren;

  {
    ReactCurrentOwner$1.current = workInProgress;
    setIsRendering(true);
    newChildren = render(newValue);
    setIsRendering(false);
  } // React DevTools reads this flag.


  workInProgress.effectTag |= PerformedWork;
  reconcileChildren(current, workInProgress, newChildren, renderExpirationTime);
  return workInProgress.child;
}

function markWorkInProgressReceivedUpdate() {
  didReceiveUpdate = true;
}

function bailoutOnAlreadyFinishedWork(current, workInProgress, renderExpirationTime) {
  cancelWorkTimer(workInProgress);

  if (current !== null) {
    // Reuse previous dependencies
    workInProgress.dependencies = current.dependencies;
  }

  {
    // Don't update "base" render times for bailouts.
    stopProfilerTimerIfRunning();
  }

  var updateExpirationTime = workInProgress.expirationTime;

  if (updateExpirationTime !== NoWork) {
    markUnprocessedUpdateTime(updateExpirationTime);
  } // Check if the children have any pending work.


  var childExpirationTime = workInProgress.childExpirationTime;

  if (childExpirationTime < renderExpirationTime) {
    // The children don't have any work either. We can skip them.
    // TODO: Once we add back resuming, we should check if the children are
    // a work-in-progress set. If so, we need to transfer their effects.
    return null;
  } else {
    // This fiber doesn't have work, but its subtree does. Clone the child
    // fibers and continue.
    cloneChildFibers(current, workInProgress);
    return workInProgress.child;
  }
}

function remountFiber(current, oldWorkInProgress, newWorkInProgress) {
  {
    var returnFiber = oldWorkInProgress.return;

    if (returnFiber === null) {
      throw new Error('Cannot swap the root fiber.');
    } // Disconnect from the old current.
    // It will get deleted.


    current.alternate = null;
    oldWorkInProgress.alternate = null; // Connect to the new tree.

    newWorkInProgress.index = oldWorkInProgress.index;
    newWorkInProgress.sibling = oldWorkInProgress.sibling;
    newWorkInProgress.return = oldWorkInProgress.return;
    newWorkInProgress.ref = oldWorkInProgress.ref; // Replace the child/sibling pointers above it.

    if (oldWorkInProgress === returnFiber.child) {
      returnFiber.child = newWorkInProgress;
    } else {
      var prevSibling = returnFiber.child;

      if (prevSibling === null) {
        throw new Error('Expected parent to have a child.');
      }

      while (prevSibling.sibling !== oldWorkInProgress) {
        prevSibling = prevSibling.sibling;

        if (prevSibling === null) {
          throw new Error('Expected to find the previous sibling.');
        }
      }

      prevSibling.sibling = newWorkInProgress;
    } // Delete the old fiber and place the new one.
    // Since the old fiber is disconnected, we have to schedule it manually.


    var last = returnFiber.lastEffect;

    if (last !== null) {
      last.nextEffect = current;
      returnFiber.lastEffect = current;
    } else {
      returnFiber.firstEffect = returnFiber.lastEffect = current;
    }

    current.nextEffect = null;
    current.effectTag = Deletion;
    newWorkInProgress.effectTag |= Placement; // Restart work from the new fiber.

    return newWorkInProgress;
  }
}

function beginWork(current, workInProgress, renderExpirationTime) {
  var updateExpirationTime = workInProgress.expirationTime;

  {
    if (workInProgress._debugNeedsRemount && current !== null) {
      // This will restart the begin phase with a new fiber.
      return remountFiber(current, workInProgress, createFiberFromTypeAndProps(workInProgress.type, workInProgress.key, workInProgress.pendingProps, workInProgress._debugOwner || null, workInProgress.mode, workInProgress.expirationTime));
    }
  }

  if (current !== null) {
    var oldProps = current.memoizedProps;
    var newProps = workInProgress.pendingProps;

    if (oldProps !== newProps || hasContextChanged() || ( // Force a re-render if the implementation changed due to hot reload:
     workInProgress.type !== current.type )) {
      // If props or context changed, mark the fiber as having performed work.
      // This may be unset if the props are determined to be equal later (memo).
      didReceiveUpdate = true;
    } else if (updateExpirationTime < renderExpirationTime) {
      didReceiveUpdate = false; // This fiber does not have any pending work. Bailout without entering
      // the begin phase. There's still some bookkeeping we that needs to be done
      // in this optimized path, mostly pushing stuff onto the stack.

      switch (workInProgress.tag) {
        case HostRoot:
          pushHostRootContext(workInProgress);
          resetHydrationState();
          break;

        case HostComponent:
          pushHostContext(workInProgress);

          if (workInProgress.mode & ConcurrentMode && renderExpirationTime !== Never && shouldDeprioritizeSubtree(workInProgress.type, newProps)) {
            {
              markSpawnedWork(Never);
            } // Schedule this fiber to re-render at offscreen priority. Then bailout.


            workInProgress.expirationTime = workInProgress.childExpirationTime = Never;
            return null;
          }

          break;

        case ClassComponent:
          {
            var Component = workInProgress.type;

            if (isContextProvider(Component)) {
              pushContextProvider(workInProgress);
            }

            break;
          }

        case HostPortal:
          pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
          break;

        case ContextProvider:
          {
            var newValue = workInProgress.memoizedProps.value;
            pushProvider(workInProgress, newValue);
            break;
          }

        case Profiler:
          {
            // Profiler should only call onRender when one of its descendants actually rendered.
            var hasChildWork = workInProgress.childExpirationTime >= renderExpirationTime;

            if (hasChildWork) {
              workInProgress.effectTag |= Update;
            }
          }

          break;

        case SuspenseComponent:
          {
            var state = workInProgress.memoizedState;

            if (state !== null) {
              // whether to retry the primary children, or to skip over it and
              // go straight to the fallback. Check the priority of the primary
              // child fragment.


              var primaryChildFragment = workInProgress.child;
              var primaryChildExpirationTime = primaryChildFragment.childExpirationTime;

              if (primaryChildExpirationTime !== NoWork && primaryChildExpirationTime >= renderExpirationTime) {
                // The primary children have pending work. Use the normal path
                // to attempt to render the primary children again.
                return updateSuspenseComponent(current, workInProgress, renderExpirationTime);
              } else {
                pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current)); // The primary children do not have pending work with sufficient
                // priority. Bailout.

                var child = bailoutOnAlreadyFinishedWork(current, workInProgress, renderExpirationTime);

                if (child !== null) {
                  // The fallback children have pending work. Skip over the
                  // primary children and work on the fallback.
                  return child.sibling;
                } else {
                  return null;
                }
              }
            } else {
              pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
            }

            break;
          }

        case SuspenseListComponent:
          {
            var didSuspendBefore = (current.effectTag & DidCapture) !== NoEffect;

            var _hasChildWork = workInProgress.childExpirationTime >= renderExpirationTime;

            if (didSuspendBefore) {
              if (_hasChildWork) {
                // If something was in fallback state last time, and we have all the
                // same children then we're still in progressive loading state.
                // Something might get unblocked by state updates or retries in the
                // tree which will affect the tail. So we need to use the normal
                // path to compute the correct tail.
                return updateSuspenseListComponent(current, workInProgress, renderExpirationTime);
              } // If none of the children had any work, that means that none of
              // them got retried so they'll still be blocked in the same way
              // as before. We can fast bail out.


              workInProgress.effectTag |= DidCapture;
            } // If nothing suspended before and we're rendering the same children,
            // then the tail doesn't matter. Anything new that suspends will work
            // in the "together" mode, so we can continue from the state we had.


            var renderState = workInProgress.memoizedState;

            if (renderState !== null) {
              // Reset to the "together" mode in case we've started a different
              // update in the past but didn't complete it.
              renderState.rendering = null;
              renderState.tail = null;
            }

            pushSuspenseContext(workInProgress, suspenseStackCursor.current);

            if (_hasChildWork) {
              break;
            } else {
              // If none of the children had any work, that means that none of
              // them got retried so they'll still be blocked in the same way
              // as before. We can fast bail out.
              return null;
            }
          }
      }

      return bailoutOnAlreadyFinishedWork(current, workInProgress, renderExpirationTime);
    } else {
      // An update was scheduled on this fiber, but there are no new props
      // nor legacy context. Set this to false. If an update queue or context
      // consumer produces a changed value, it will set this to true. Otherwise,
      // the component will assume the children have not changed and bail out.
      didReceiveUpdate = false;
    }
  } else {
    didReceiveUpdate = false;
  } // Before entering the begin phase, clear pending update priority.
  // TODO: This assumes that we're about to evaluate the component and process
  // the update queue. However, there's an exception: SimpleMemoComponent
  // sometimes bails out later in the begin phase. This indicates that we should
  // move this assignment out of the common path and into each branch.


  workInProgress.expirationTime = NoWork;

  switch (workInProgress.tag) {
    case IndeterminateComponent:
      {
        return mountIndeterminateComponent(current, workInProgress, workInProgress.type, renderExpirationTime);
      }

    case LazyComponent:
      {
        var elementType = workInProgress.elementType;
        return mountLazyComponent(current, workInProgress, elementType, updateExpirationTime, renderExpirationTime);
      }

    case FunctionComponent:
      {
        var _Component = workInProgress.type;
        var unresolvedProps = workInProgress.pendingProps;
        var resolvedProps = workInProgress.elementType === _Component ? unresolvedProps : resolveDefaultProps(_Component, unresolvedProps);
        return updateFunctionComponent(current, workInProgress, _Component, resolvedProps, renderExpirationTime);
      }

    case ClassComponent:
      {
        var _Component2 = workInProgress.type;
        var _unresolvedProps = workInProgress.pendingProps;

        var _resolvedProps = workInProgress.elementType === _Component2 ? _unresolvedProps : resolveDefaultProps(_Component2, _unresolvedProps);

        return updateClassComponent(current, workInProgress, _Component2, _resolvedProps, renderExpirationTime);
      }

    case HostRoot:
      return updateHostRoot(current, workInProgress, renderExpirationTime);

    case HostComponent:
      return updateHostComponent(current, workInProgress, renderExpirationTime);

    case HostText:
      return updateHostText(current, workInProgress);

    case SuspenseComponent:
      return updateSuspenseComponent(current, workInProgress, renderExpirationTime);

    case HostPortal:
      return updatePortalComponent(current, workInProgress, renderExpirationTime);

    case ForwardRef:
      {
        var type = workInProgress.type;
        var _unresolvedProps2 = workInProgress.pendingProps;

        var _resolvedProps2 = workInProgress.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);

        return updateForwardRef(current, workInProgress, type, _resolvedProps2, renderExpirationTime);
      }

    case Fragment:
      return updateFragment(current, workInProgress, renderExpirationTime);

    case Mode:
      return updateMode(current, workInProgress, renderExpirationTime);

    case Profiler:
      return updateProfiler(current, workInProgress, renderExpirationTime);

    case ContextProvider:
      return updateContextProvider(current, workInProgress, renderExpirationTime);

    case ContextConsumer:
      return updateContextConsumer(current, workInProgress, renderExpirationTime);

    case MemoComponent:
      {
        var _type2 = workInProgress.type;
        var _unresolvedProps3 = workInProgress.pendingProps; // Resolve outer props first, then resolve inner props.

        var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);

        {
          if (workInProgress.type !== workInProgress.elementType) {
            var outerPropTypes = _type2.propTypes;

            if (outerPropTypes) {
              checkPropTypes(outerPropTypes, _resolvedProps3, // Resolved for outer only
              'prop', getComponentName(_type2), getCurrentFiberStackInDev);
            }
          }
        }

        _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
        return updateMemoComponent(current, workInProgress, _type2, _resolvedProps3, updateExpirationTime, renderExpirationTime);
      }

    case SimpleMemoComponent:
      {
        return updateSimpleMemoComponent(current, workInProgress, workInProgress.type, workInProgress.pendingProps, updateExpirationTime, renderExpirationTime);
      }

    case IncompleteClassComponent:
      {
        var _Component3 = workInProgress.type;
        var _unresolvedProps4 = workInProgress.pendingProps;

        var _resolvedProps4 = workInProgress.elementType === _Component3 ? _unresolvedProps4 : resolveDefaultProps(_Component3, _unresolvedProps4);

        return mountIncompleteClassComponent(current, workInProgress, _Component3, _resolvedProps4, renderExpirationTime);
      }

    case SuspenseListComponent:
      {
        return updateSuspenseListComponent(current, workInProgress, renderExpirationTime);
      }
  }

  {
    {
      throw Error( "Unknown unit of work tag (" + workInProgress.tag + "). This error is likely caused by a bug in React. Please file an issue." );
    }
  }
}

function markUpdate(workInProgress) {
  // Tag the fiber with an update effect. This turns a Placement into
  // a PlacementAndUpdate.
  workInProgress.effectTag |= Update;
}

function markRef$1(workInProgress) {
  workInProgress.effectTag |= Ref;
}

var appendAllChildren;
var updateHostContainer;
var updateHostComponent$1;
var updateHostText$1;

{
  // Mutation mode
  appendAllChildren = function (parent, workInProgress, needsVisibilityToggle, isHidden) {
    // We only have the top Fiber that was created but we need recurse down its
    // children to find all the terminal nodes.
    var node = workInProgress.child;

    while (node !== null) {
      if (node.tag === HostComponent || node.tag === HostText) {
        appendInitialChild(parent, node.stateNode);
      } else if (node.tag === HostPortal) ; else if (node.child !== null) {
        node.child.return = node;
        node = node.child;
        continue;
      }

      if (node === workInProgress) {
        return;
      }

      while (node.sibling === null) {
        if (node.return === null || node.return === workInProgress) {
          return;
        }

        node = node.return;
      }

      node.sibling.return = node.return;
      node = node.sibling;
    }
  };

  updateHostContainer = function (workInProgress) {// Noop
  };

  updateHostComponent$1 = function (current, workInProgress, type, newProps, rootContainerInstance) {
    // If we have an alternate, that means this is an update and we need to
    // schedule a side-effect to do the updates.
    var oldProps = current.memoizedProps;

    if (oldProps === newProps) {
      // In mutation mode, this is sufficient for a bailout because
      // we won't touch this node even if children changed.
      return;
    } // If we get updated because one of our children updated, we don't
    // have newProps so we'll have to reuse them.
    // TODO: Split the update API as separate for the props vs. children.
    // Even better would be if children weren't special cased at all tho.


    var instance = workInProgress.stateNode;
    var currentHostContext = getHostContext(); // TODO: Experiencing an error where oldProps is null. Suggests a host
    // component is hitting the resume path. Figure out why. Possibly
    // related to `hidden`.

    var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext); // TODO: Type this specific to this type of component.

    workInProgress.updateQueue = updatePayload; // If the update payload indicates that there is a change or if there
    // is a new ref we mark this as an update. All the work is done in commitWork.

    if (updatePayload) {
      markUpdate(workInProgress);
    }
  };

  updateHostText$1 = function (current, workInProgress, oldText, newText) {
    // If the text differs, mark it as an update. All the work in done in commitWork.
    if (oldText !== newText) {
      markUpdate(workInProgress);
    }
  };
}

function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
  switch (renderState.tailMode) {
    case 'hidden':
      {
        // Any insertions at the end of the tail list after this point
        // should be invisible. If there are already mounted boundaries
        // anything before them are not considered for collapsing.
        // Therefore we need to go through the whole tail to find if
        // there are any.
        var tailNode = renderState.tail;
        var lastTailNode = null;

        while (tailNode !== null) {
          if (tailNode.alternate !== null) {
            lastTailNode = tailNode;
          }

          tailNode = tailNode.sibling;
        } // Next we're simply going to delete all insertions after the
        // last rendered item.


        if (lastTailNode === null) {
          // All remaining items in the tail are insertions.
          renderState.tail = null;
        } else {
          // Detach the insertion after the last node that was already
          // inserted.
          lastTailNode.sibling = null;
        }

        break;
      }

    case 'collapsed':
      {
        // Any insertions at the end of the tail list after this point
        // should be invisible. If there are already mounted boundaries
        // anything before them are not considered for collapsing.
        // Therefore we need to go through the whole tail to find if
        // there are any.
        var _tailNode = renderState.tail;
        var _lastTailNode = null;

        while (_tailNode !== null) {
          if (_tailNode.alternate !== null) {
            _lastTailNode = _tailNode;
          }

          _tailNode = _tailNode.sibling;
        } // Next we're simply going to delete all insertions after the
        // last rendered item.


        if (_lastTailNode === null) {
          // All remaining items in the tail are insertions.
          if (!hasRenderedATailFallback && renderState.tail !== null) {
            // We suspended during the head. We want to show at least one
            // row at the tail. So we'll keep on and cut off the rest.
            renderState.tail.sibling = null;
          } else {
            renderState.tail = null;
          }
        } else {
          // Detach the insertion after the last node that was already
          // inserted.
          _lastTailNode.sibling = null;
        }

        break;
      }
  }
}

function completeWork(current, workInProgress, renderExpirationTime) {
  var newProps = workInProgress.pendingProps;

  switch (workInProgress.tag) {
    case IndeterminateComponent:
    case LazyComponent:
    case SimpleMemoComponent:
    case FunctionComponent:
    case ForwardRef:
    case Fragment:
    case Mode:
    case Profiler:
    case ContextConsumer:
    case MemoComponent:
      return null;

    case ClassComponent:
      {
        var Component = workInProgress.type;

        if (isContextProvider(Component)) {
          popContext(workInProgress);
        }

        return null;
      }

    case HostRoot:
      {
        popHostContainer(workInProgress);
        popTopLevelContextObject(workInProgress);
        var fiberRoot = workInProgress.stateNode;

        if (fiberRoot.pendingContext) {
          fiberRoot.context = fiberRoot.pendingContext;
          fiberRoot.pendingContext = null;
        }

        if (current === null || current.child === null) {
          // If we hydrated, pop so that we can delete any remaining children
          // that weren't hydrated.
          var wasHydrated = popHydrationState(workInProgress);

          if (wasHydrated) {
            // If we hydrated, then we'll need to schedule an update for
            // the commit side-effects on the root.
            markUpdate(workInProgress);
          }
        }

        updateHostContainer(workInProgress);
        return null;
      }

    case HostComponent:
      {
        popHostContext(workInProgress);
        var rootContainerInstance = getRootHostContainer();
        var type = workInProgress.type;

        if (current !== null && workInProgress.stateNode != null) {
          updateHostComponent$1(current, workInProgress, type, newProps, rootContainerInstance);

          if (current.ref !== workInProgress.ref) {
            markRef$1(workInProgress);
          }
        } else {
          if (!newProps) {
            if (!(workInProgress.stateNode !== null)) {
              {
                throw Error( "We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue." );
              }
            } // This can happen when we abort work.


            return null;
          }

          var currentHostContext = getHostContext(); // TODO: Move createInstance to beginWork and keep it on a context
          // "stack" as the parent. Then append children as we go in beginWork
          // or completeWork depending on whether we want to add them top->down or
          // bottom->up. Top->down is faster in IE11.

          var _wasHydrated = popHydrationState(workInProgress);

          if (_wasHydrated) {
            // TODO: Move this and createInstance step into the beginPhase
            // to consolidate.
            if (prepareToHydrateHostInstance(workInProgress, rootContainerInstance, currentHostContext)) {
              // If changes to the hydrated node need to be applied at the
              // commit-phase we mark this as such.
              markUpdate(workInProgress);
            }
          } else {
            var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress);
            appendAllChildren(instance, workInProgress, false, false); // This needs to be set before we mount Flare event listeners

            workInProgress.stateNode = instance;
            // (eg DOM renderer supports auto-focus for certain elements).
            // Make sure such renderers get scheduled for later work.


            if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance)) {
              markUpdate(workInProgress);
            }
          }

          if (workInProgress.ref !== null) {
            // If there is a ref on a host node we need to schedule a callback
            markRef$1(workInProgress);
          }
        }

        return null;
      }

    case HostText:
      {
        var newText = newProps;

        if (current && workInProgress.stateNode != null) {
          var oldText = current.memoizedProps; // If we have an alternate, that means this is an update and we need
          // to schedule a side-effect to do the updates.

          updateHostText$1(current, workInProgress, oldText, newText);
        } else {
          if (typeof newText !== 'string') {
            if (!(workInProgress.stateNode !== null)) {
              {
                throw Error( "We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue." );
              }
            } // This can happen when we abort work.

          }

          var _rootContainerInstance = getRootHostContainer();

          var _currentHostContext = getHostContext();

          var _wasHydrated2 = popHydrationState(workInProgress);

          if (_wasHydrated2) {
            if (prepareToHydrateHostTextInstance(workInProgress)) {
              markUpdate(workInProgress);
            }
          } else {
            workInProgress.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress);
          }
        }

        return null;
      }

    case SuspenseComponent:
      {
        popSuspenseContext(workInProgress);
        var nextState = workInProgress.memoizedState;

        if ((workInProgress.effectTag & DidCapture) !== NoEffect) {
          // Something suspended. Re-render with the fallback children.
          workInProgress.expirationTime = renderExpirationTime; // Do not reset the effect list.

          return workInProgress;
        }

        var nextDidTimeout = nextState !== null;
        var prevDidTimeout = false;

        if (current === null) {
          if (workInProgress.memoizedProps.fallback !== undefined) {
            popHydrationState(workInProgress);
          }
        } else {
          var prevState = current.memoizedState;
          prevDidTimeout = prevState !== null;

          if (!nextDidTimeout && prevState !== null) {
            // We just switched from the fallback to the normal children.
            // Delete the fallback.
            // TODO: Would it be better to store the fallback fragment on
            // the stateNode during the begin phase?
            var currentFallbackChild = current.child.sibling;

            if (currentFallbackChild !== null) {
              // Deletions go at the beginning of the return fiber's effect list
              var first = workInProgress.firstEffect;

              if (first !== null) {
                workInProgress.firstEffect = currentFallbackChild;
                currentFallbackChild.nextEffect = first;
              } else {
                workInProgress.firstEffect = workInProgress.lastEffect = currentFallbackChild;
                currentFallbackChild.nextEffect = null;
              }

              currentFallbackChild.effectTag = Deletion;
            }
          }
        }

        if (nextDidTimeout && !prevDidTimeout) {
          // If this subtreee is running in blocking mode we can suspend,
          // otherwise we won't suspend.
          // TODO: This will still suspend a synchronous tree if anything
          // in the concurrent tree already suspended during this render.
          // This is a known bug.
          if ((workInProgress.mode & BlockingMode) !== NoMode) {
            // TODO: Move this back to throwException because this is too late
            // if this is a large tree which is common for initial loads. We
            // don't know if we should restart a render or not until we get
            // this marker, and this is too late.
            // If this render already had a ping or lower pri updates,
            // and this is the first time we know we're going to suspend we
            // should be able to immediately restart from within throwException.
            var hasInvisibleChildContext = current === null && workInProgress.memoizedProps.unstable_avoidThisFallback !== true;

            if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {
              // If this was in an invisible tree or a new render, then showing
              // this boundary is ok.
              renderDidSuspend();
            } else {
              // Otherwise, we're going to have to hide content so we should
              // suspend for longer if possible.
              renderDidSuspendDelayIfPossible();
            }
          }
        }

        {
          // TODO: Only schedule updates if these values are non equal, i.e. it changed.
          if (nextDidTimeout || prevDidTimeout) {
            // If this boundary just timed out, schedule an effect to attach a
            // retry listener to the promise. This flag is also used to hide the
            // primary children. In mutation mode, we also need the flag to
            // *unhide* children that were previously hidden, so check if this
            // is currently timed out, too.
            workInProgress.effectTag |= Update;
          }
        }

        return null;
      }

    case HostPortal:
      popHostContainer(workInProgress);
      updateHostContainer(workInProgress);
      return null;

    case ContextProvider:
      // Pop provider fiber
      popProvider(workInProgress);
      return null;

    case IncompleteClassComponent:
      {
        // Same as class component case. I put it down here so that the tags are
        // sequential to ensure this switch is compiled to a jump table.
        var _Component = workInProgress.type;

        if (isContextProvider(_Component)) {
          popContext(workInProgress);
        }

        return null;
      }

    case SuspenseListComponent:
      {
        popSuspenseContext(workInProgress);
        var renderState = workInProgress.memoizedState;

        if (renderState === null) {
          // We're running in the default, "independent" mode.
          // We don't do anything in this mode.
          return null;
        }

        var didSuspendAlready = (workInProgress.effectTag & DidCapture) !== NoEffect;
        var renderedTail = renderState.rendering;

        if (renderedTail === null) {
          // We just rendered the head.
          if (!didSuspendAlready) {
            // This is the first pass. We need to figure out if anything is still
            // suspended in the rendered set.
            // If new content unsuspended, but there's still some content that
            // didn't. Then we need to do a second pass that forces everything
            // to keep showing their fallbacks.
            // We might be suspended if something in this render pass suspended, or
            // something in the previous committed pass suspended. Otherwise,
            // there's no chance so we can skip the expensive call to
            // findFirstSuspended.
            var cannotBeSuspended = renderHasNotSuspendedYet() && (current === null || (current.effectTag & DidCapture) === NoEffect);

            if (!cannotBeSuspended) {
              var row = workInProgress.child;

              while (row !== null) {
                var suspended = findFirstSuspended(row);

                if (suspended !== null) {
                  didSuspendAlready = true;
                  workInProgress.effectTag |= DidCapture;
                  cutOffTailIfNeeded(renderState, false); // If this is a newly suspended tree, it might not get committed as
                  // part of the second pass. In that case nothing will subscribe to
                  // its thennables. Instead, we'll transfer its thennables to the
                  // SuspenseList so that it can retry if they resolve.
                  // There might be multiple of these in the list but since we're
                  // going to wait for all of them anyway, it doesn't really matter
                  // which ones gets to ping. In theory we could get clever and keep
                  // track of how many dependencies remain but it gets tricky because
                  // in the meantime, we can add/remove/change items and dependencies.
                  // We might bail out of the loop before finding any but that
                  // doesn't matter since that means that the other boundaries that
                  // we did find already has their listeners attached.

                  var newThennables = suspended.updateQueue;

                  if (newThennables !== null) {
                    workInProgress.updateQueue = newThennables;
                    workInProgress.effectTag |= Update;
                  } // Rerender the whole list, but this time, we'll force fallbacks
                  // to stay in place.
                  // Reset the effect list before doing the second pass since that's now invalid.


                  if (renderState.lastEffect === null) {
                    workInProgress.firstEffect = null;
                  }

                  workInProgress.lastEffect = renderState.lastEffect; // Reset the child fibers to their original state.

                  resetChildFibers(workInProgress, renderExpirationTime); // Set up the Suspense Context to force suspense and immediately
                  // rerender the children.

                  pushSuspenseContext(workInProgress, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
                  return workInProgress.child;
                }

                row = row.sibling;
              }
            }
          } else {
            cutOffTailIfNeeded(renderState, false);
          } // Next we're going to render the tail.

        } else {
          // Append the rendered row to the child list.
          if (!didSuspendAlready) {
            var _suspended = findFirstSuspended(renderedTail);

            if (_suspended !== null) {
              workInProgress.effectTag |= DidCapture;
              didSuspendAlready = true; // Ensure we transfer the update queue to the parent so that it doesn't
              // get lost if this row ends up dropped during a second pass.

              var _newThennables = _suspended.updateQueue;

              if (_newThennables !== null) {
                workInProgress.updateQueue = _newThennables;
                workInProgress.effectTag |= Update;
              }

              cutOffTailIfNeeded(renderState, true); // This might have been modified.

              if (renderState.tail === null && renderState.tailMode === 'hidden' && !renderedTail.alternate) {
                // We need to delete the row we just rendered.
                // Reset the effect list to what it was before we rendered this
                // child. The nested children have already appended themselves.
                var lastEffect = workInProgress.lastEffect = renderState.lastEffect; // Remove any effects that were appended after this point.

                if (lastEffect !== null) {
                  lastEffect.nextEffect = null;
                } // We're done.


                return null;
              }
            } else if ( // The time it took to render last row is greater than time until
            // the expiration.
            now() * 2 - renderState.renderingStartTime > renderState.tailExpiration && renderExpirationTime > Never) {
              // We have now passed our CPU deadline and we'll just give up further
              // attempts to render the main content and only render fallbacks.
              // The assumption is that this is usually faster.
              workInProgress.effectTag |= DidCapture;
              didSuspendAlready = true;
              cutOffTailIfNeeded(renderState, false); // Since nothing actually suspended, there will nothing to ping this
              // to get it started back up to attempt the next item. If we can show
              // them, then they really have the same priority as this render.
              // So we'll pick it back up the very next render pass once we've had
              // an opportunity to yield for paint.

              var nextPriority = renderExpirationTime - 1;
              workInProgress.expirationTime = workInProgress.childExpirationTime = nextPriority;

              {
                markSpawnedWork(nextPriority);
              }
            }
          }

          if (renderState.isBackwards) {
            // The effect list of the backwards tail will have been added
            // to the end. This breaks the guarantee that life-cycles fire in
            // sibling order but that isn't a strong guarantee promised by React.
            // Especially since these might also just pop in during future commits.
            // Append to the beginning of the list.
            renderedTail.sibling = workInProgress.child;
            workInProgress.child = renderedTail;
          } else {
            var previousSibling = renderState.last;

            if (previousSibling !== null) {
              previousSibling.sibling = renderedTail;
            } else {
              workInProgress.child = renderedTail;
            }

            renderState.last = renderedTail;
          }
        }

        if (renderState.tail !== null) {
          // We still have tail rows to render.
          if (renderState.tailExpiration === 0) {
            // Heuristic for how long we're willing to spend rendering rows
            // until we just give up and show what we have so far.
            var TAIL_EXPIRATION_TIMEOUT_MS = 500;
            renderState.tailExpiration = now() + TAIL_EXPIRATION_TIMEOUT_MS; // TODO: This is meant to mimic the train model or JND but this
            // is a per component value. It should really be since the start
            // of the total render or last commit. Consider using something like
            // globalMostRecentFallbackTime. That doesn't account for being
            // suspended for part of the time or when it's a new render.
            // It should probably use a global start time value instead.
          } // Pop a row.


          var next = renderState.tail;
          renderState.rendering = next;
          renderState.tail = next.sibling;
          renderState.lastEffect = workInProgress.lastEffect;
          renderState.renderingStartTime = now();
          next.sibling = null; // Restore the context.
          // TODO: We can probably just avoid popping it instead and only
          // setting it the first time we go from not suspended to suspended.

          var suspenseContext = suspenseStackCursor.current;

          if (didSuspendAlready) {
            suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
          } else {
            suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
          }

          pushSuspenseContext(workInProgress, suspenseContext); // Do a pass over the next row.

          return next;
        }

        return null;
      }
  }

  {
    {
      throw Error( "Unknown unit of work tag (" + workInProgress.tag + "). This error is likely caused by a bug in React. Please file an issue." );
    }
  }
}

function unwindWork(workInProgress, renderExpirationTime) {
  switch (workInProgress.tag) {
    case ClassComponent:
      {
        var Component = workInProgress.type;

        if (isContextProvider(Component)) {
          popContext(workInProgress);
        }

        var effectTag = workInProgress.effectTag;

        if (effectTag & ShouldCapture) {
          workInProgress.effectTag = effectTag & ~ShouldCapture | DidCapture;
          return workInProgress;
        }

        return null;
      }

    case HostRoot:
      {
        popHostContainer(workInProgress);
        popTopLevelContextObject(workInProgress);
        var _effectTag = workInProgress.effectTag;

        if (!((_effectTag & DidCapture) === NoEffect)) {
          {
            throw Error( "The root failed to unmount after an error. This is likely a bug in React. Please file an issue." );
          }
        }

        workInProgress.effectTag = _effectTag & ~ShouldCapture | DidCapture;
        return workInProgress;
      }

    case HostComponent:
      {
        // TODO: popHydrationState
        popHostContext(workInProgress);
        return null;
      }

    case SuspenseComponent:
      {
        popSuspenseContext(workInProgress);

        var _effectTag2 = workInProgress.effectTag;

        if (_effectTag2 & ShouldCapture) {
          workInProgress.effectTag = _effectTag2 & ~ShouldCapture | DidCapture; // Captured a suspense effect. Re-render the boundary.

          return workInProgress;
        }

        return null;
      }

    case SuspenseListComponent:
      {
        popSuspenseContext(workInProgress); // SuspenseList doesn't actually catch anything. It should've been
        // caught by a nested boundary. If not, it should bubble through.

        return null;
      }

    case HostPortal:
      popHostContainer(workInProgress);
      return null;

    case ContextProvider:
      popProvider(workInProgress);
      return null;

    default:
      return null;
  }
}

function unwindInterruptedWork(interruptedWork) {
  switch (interruptedWork.tag) {
    case ClassComponent:
      {
        var childContextTypes = interruptedWork.type.childContextTypes;

        if (childContextTypes !== null && childContextTypes !== undefined) {
          popContext(interruptedWork);
        }

        break;
      }

    case HostRoot:
      {
        popHostContainer(interruptedWork);
        popTopLevelContextObject(interruptedWork);
        break;
      }

    case HostComponent:
      {
        popHostContext(interruptedWork);
        break;
      }

    case HostPortal:
      popHostContainer(interruptedWork);
      break;

    case SuspenseComponent:
      popSuspenseContext(interruptedWork);
      break;

    case SuspenseListComponent:
      popSuspenseContext(interruptedWork);
      break;

    case ContextProvider:
      popProvider(interruptedWork);
      break;
  }
}

function createCapturedValue(value, source) {
  // If the value is an error, call this function immediately after it is thrown
  // so the stack is accurate.
  return {
    value: value,
    source: source,
    stack: getStackByFiberInDevAndProd(source)
  };
}

function logCapturedError(capturedError) {

  var error = capturedError.error;

  {
    var componentName = capturedError.componentName,
        componentStack = capturedError.componentStack,
        errorBoundaryName = capturedError.errorBoundaryName,
        errorBoundaryFound = capturedError.errorBoundaryFound,
        willRetry = capturedError.willRetry; // Browsers support silencing uncaught errors by calling
    // `preventDefault()` in window `error` handler.
    // We record this information as an expando on the error.

    if (error != null && error._suppressLogging) {
      if (errorBoundaryFound && willRetry) {
        // The error is recoverable and was silenced.
        // Ignore it and don't print the stack addendum.
        // This is handy for testing error boundaries without noise.
        return;
      } // The error is fatal. Since the silencing might have
      // been accidental, we'll surface it anyway.
      // However, the browser would have silenced the original error
      // so we'll print it first, and then print the stack addendum.


      console['error'](error); // Don't transform to our wrapper
      // For a more detailed description of this block, see:
      // https://github.com/facebook/react/pull/13384
    }

    var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : 'The above error occurred in one of your React components:';
    var errorBoundaryMessage; // errorBoundaryFound check is sufficient; errorBoundaryName check is to satisfy Flow.

    if (errorBoundaryFound && errorBoundaryName) {
      if (willRetry) {
        errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
      } else {
        errorBoundaryMessage = "This error was initially handled by the error boundary " + errorBoundaryName + ".\n" + "Recreating the tree from scratch failed so React will unmount the tree.";
      }
    } else {
      errorBoundaryMessage = 'Consider adding an error boundary to your tree to customize error handling behavior.\n' + 'Visit https://fb.me/react-error-boundaries to learn more about error boundaries.';
    }

    var combinedMessage = "" + componentNameMessage + componentStack + "\n\n" + ("" + errorBoundaryMessage); // In development, we provide our own message with just the component stack.
    // We don't include the original error message and JS stack because the browser
    // has already printed it. Even if the application swallows the error, it is still
    // displayed by the browser thanks to the DEV-only fake event trick in ReactErrorUtils.

    console['error'](combinedMessage); // Don't transform to our wrapper
  }
}

var didWarnAboutUndefinedSnapshotBeforeUpdate = null;

{
  didWarnAboutUndefinedSnapshotBeforeUpdate = new Set();
}

var PossiblyWeakSet = typeof WeakSet === 'function' ? WeakSet : Set;
function logError(boundary, errorInfo) {
  var source = errorInfo.source;
  var stack = errorInfo.stack;

  if (stack === null && source !== null) {
    stack = getStackByFiberInDevAndProd(source);
  }

  var capturedError = {
    componentName: source !== null ? getComponentName(source.type) : null,
    componentStack: stack !== null ? stack : '',
    error: errorInfo.value,
    errorBoundary: null,
    errorBoundaryName: null,
    errorBoundaryFound: false,
    willRetry: false
  };

  if (boundary !== null && boundary.tag === ClassComponent) {
    capturedError.errorBoundary = boundary.stateNode;
    capturedError.errorBoundaryName = getComponentName(boundary.type);
    capturedError.errorBoundaryFound = true;
    capturedError.willRetry = true;
  }

  try {
    logCapturedError(capturedError);
  } catch (e) {
    // This method must not throw, or React internal state will get messed up.
    // If console.error is overridden, or logCapturedError() shows a dialog that throws,
    // we want to report this error outside of the normal stack as a last resort.
    // https://github.com/facebook/react/issues/13188
    setTimeout(function () {
      throw e;
    });
  }
}

var callComponentWillUnmountWithTimer = function (current, instance) {
  startPhaseTimer(current, 'componentWillUnmount');
  instance.props = current.memoizedProps;
  instance.state = current.memoizedState;
  instance.componentWillUnmount();
  stopPhaseTimer();
}; // Capture errors so they don't interrupt unmounting.


function safelyCallComponentWillUnmount(current, instance) {
  {
    invokeGuardedCallback(null, callComponentWillUnmountWithTimer, null, current, instance);

    if (hasCaughtError()) {
      var unmountError = clearCaughtError();
      captureCommitPhaseError(current, unmountError);
    }
  }
}

function safelyDetachRef(current) {
  var ref = current.ref;

  if (ref !== null) {
    if (typeof ref === 'function') {
      {
        invokeGuardedCallback(null, ref, null, null);

        if (hasCaughtError()) {
          var refError = clearCaughtError();
          captureCommitPhaseError(current, refError);
        }
      }
    } else {
      ref.current = null;
    }
  }
}

function safelyCallDestroy(current, destroy) {
  {
    invokeGuardedCallback(null, destroy, null);

    if (hasCaughtError()) {
      var error = clearCaughtError();
      captureCommitPhaseError(current, error);
    }
  }
}

function commitBeforeMutationLifeCycles(current, finishedWork) {
  switch (finishedWork.tag) {
    case FunctionComponent:
    case ForwardRef:
    case SimpleMemoComponent:
    case Block:
      {
        return;
      }

    case ClassComponent:
      {
        if (finishedWork.effectTag & Snapshot) {
          if (current !== null) {
            var prevProps = current.memoizedProps;
            var prevState = current.memoizedState;
            startPhaseTimer(finishedWork, 'getSnapshotBeforeUpdate');
            var instance = finishedWork.stateNode; // We could update instance props and state here,
            // but instead we rely on them being set during last render.
            // TODO: revisit this when we implement resuming.

            {
              if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                if (instance.props !== finishedWork.memoizedProps) {
                  error('Expected %s props to match memoized props before ' + 'getSnapshotBeforeUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
                }

                if (instance.state !== finishedWork.memoizedState) {
                  error('Expected %s state to match memoized state before ' + 'getSnapshotBeforeUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
                }
              }
            }

            var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);

            {
              var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;

              if (snapshot === undefined && !didWarnSet.has(finishedWork.type)) {
                didWarnSet.add(finishedWork.type);

                error('%s.getSnapshotBeforeUpdate(): A snapshot value (or null) ' + 'must be returned. You have returned undefined.', getComponentName(finishedWork.type));
              }
            }

            instance.__reactInternalSnapshotBeforeUpdate = snapshot;
            stopPhaseTimer();
          }
        }

        return;
      }

    case HostRoot:
    case HostComponent:
    case HostText:
    case HostPortal:
    case IncompleteClassComponent:
      // Nothing to do for these component types
      return;
  }

  {
    {
      throw Error( "This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue." );
    }
  }
}

function commitHookEffectListUnmount(tag, finishedWork) {
  var updateQueue = finishedWork.updateQueue;
  var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;

  if (lastEffect !== null) {
    var firstEffect = lastEffect.next;
    var effect = firstEffect;

    do {
      if ((effect.tag & tag) === tag) {
        // Unmount
        var destroy = effect.destroy;
        effect.destroy = undefined;

        if (destroy !== undefined) {
          destroy();
        }
      }

      effect = effect.next;
    } while (effect !== firstEffect);
  }
}

function commitHookEffectListMount(tag, finishedWork) {
  var updateQueue = finishedWork.updateQueue;
  var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;

  if (lastEffect !== null) {
    var firstEffect = lastEffect.next;
    var effect = firstEffect;

    do {
      if ((effect.tag & tag) === tag) {
        // Mount
        var create = effect.create;
        effect.destroy = create();

        {
          var destroy = effect.destroy;

          if (destroy !== undefined && typeof destroy !== 'function') {
            var addendum = void 0;

            if (destroy === null) {
              addendum = ' You returned null. If your effect does not require clean ' + 'up, return undefined (or nothing).';
            } else if (typeof destroy.then === 'function') {
              addendum = '\n\nIt looks like you wrote useEffect(async () => ...) or returned a Promise. ' + 'Instead, write the async function inside your effect ' + 'and call it immediately:\n\n' + 'useEffect(() => {\n' + '  async function fetchData() {\n' + '    // You can await here\n' + '    const response = await MyAPI.getData(someId);\n' + '    // ...\n' + '  }\n' + '  fetchData();\n' + "}, [someId]); // Or [] if effect doesn't need props or state\n\n" + 'Learn more about data fetching with Hooks: https://fb.me/react-hooks-data-fetching';
            } else {
              addendum = ' You returned: ' + destroy;
            }

            error('An effect function must not return anything besides a function, ' + 'which is used for clean-up.%s%s', addendum, getStackByFiberInDevAndProd(finishedWork));
          }
        }
      }

      effect = effect.next;
    } while (effect !== firstEffect);
  }
}

function commitPassiveHookEffects(finishedWork) {
  if ((finishedWork.effectTag & Passive) !== NoEffect) {
    switch (finishedWork.tag) {
      case FunctionComponent:
      case ForwardRef:
      case SimpleMemoComponent:
      case Block:
        {
          // TODO (#17945) We should call all passive destroy functions (for all fibers)
          // before calling any create functions. The current approach only serializes
          // these for a single fiber.
          commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork);
          commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
          break;
        }
    }
  }
}

function commitLifeCycles(finishedRoot, current, finishedWork, committedExpirationTime) {
  switch (finishedWork.tag) {
    case FunctionComponent:
    case ForwardRef:
    case SimpleMemoComponent:
    case Block:
      {
        // At this point layout effects have already been destroyed (during mutation phase).
        // This is done to prevent sibling component effects from interfering with each other,
        // e.g. a destroy function in one component should never override a ref set
        // by a create function in another component during the same commit.
        commitHookEffectListMount(Layout | HasEffect, finishedWork);

        return;
      }

    case ClassComponent:
      {
        var instance = finishedWork.stateNode;

        if (finishedWork.effectTag & Update) {
          if (current === null) {
            startPhaseTimer(finishedWork, 'componentDidMount'); // We could update instance props and state here,
            // but instead we rely on them being set during last render.
            // TODO: revisit this when we implement resuming.

            {
              if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                if (instance.props !== finishedWork.memoizedProps) {
                  error('Expected %s props to match memoized props before ' + 'componentDidMount. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
                }

                if (instance.state !== finishedWork.memoizedState) {
                  error('Expected %s state to match memoized state before ' + 'componentDidMount. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
                }
              }
            }

            instance.componentDidMount();
            stopPhaseTimer();
          } else {
            var prevProps = finishedWork.elementType === finishedWork.type ? current.memoizedProps : resolveDefaultProps(finishedWork.type, current.memoizedProps);
            var prevState = current.memoizedState;
            startPhaseTimer(finishedWork, 'componentDidUpdate'); // We could update instance props and state here,
            // but instead we rely on them being set during last render.
            // TODO: revisit this when we implement resuming.

            {
              if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                if (instance.props !== finishedWork.memoizedProps) {
                  error('Expected %s props to match memoized props before ' + 'componentDidUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
                }

                if (instance.state !== finishedWork.memoizedState) {
                  error('Expected %s state to match memoized state before ' + 'componentDidUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
                }
              }
            }

            instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
            stopPhaseTimer();
          }
        }

        var updateQueue = finishedWork.updateQueue;

        if (updateQueue !== null) {
          {
            if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
              if (instance.props !== finishedWork.memoizedProps) {
                error('Expected %s props to match memoized props before ' + 'processing the update queue. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
              }

              if (instance.state !== finishedWork.memoizedState) {
                error('Expected %s state to match memoized state before ' + 'processing the update queue. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
              }
            }
          } // We could update instance props and state here,
          // but instead we rely on them being set during last render.
          // TODO: revisit this when we implement resuming.


          commitUpdateQueue(finishedWork, updateQueue, instance);
        }

        return;
      }

    case HostRoot:
      {
        var _updateQueue = finishedWork.updateQueue;

        if (_updateQueue !== null) {
          var _instance = null;

          if (finishedWork.child !== null) {
            switch (finishedWork.child.tag) {
              case HostComponent:
                _instance = getPublicInstance(finishedWork.child.stateNode);
                break;

              case ClassComponent:
                _instance = finishedWork.child.stateNode;
                break;
            }
          }

          commitUpdateQueue(finishedWork, _updateQueue, _instance);
        }

        return;
      }

    case HostComponent:
      {
        var _instance2 = finishedWork.stateNode; // Renderers may schedule work to be done after host components are mounted
        // (eg DOM renderer may schedule auto-focus for inputs and form controls).
        // These effects should only be committed when components are first mounted,
        // aka when there is no current/alternate.

        if (current === null && finishedWork.effectTag & Update) {
          var type = finishedWork.type;
          var props = finishedWork.memoizedProps;
          commitMount(_instance2, type, props);
        }

        return;
      }

    case HostText:
      {
        // We have no life-cycles associated with text.
        return;
      }

    case HostPortal:
      {
        // We have no life-cycles associated with portals.
        return;
      }

    case Profiler:
      {
        {
          var onRender = finishedWork.memoizedProps.onRender;

          if (typeof onRender === 'function') {
            {
              onRender(finishedWork.memoizedProps.id, current === null ? 'mount' : 'update', finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, getCommitTime(), finishedRoot.memoizedInteractions);
            }
          }
        }

        return;
      }

    case SuspenseComponent:
      {
        commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
        return;
      }

    case SuspenseListComponent:
    case IncompleteClassComponent:
    case FundamentalComponent:
    case ScopeComponent:
      return;
  }

  {
    {
      throw Error( "This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue." );
    }
  }
}

function hideOrUnhideAllChildren(finishedWork, isHidden) {
  {
    // We only have the top Fiber that was inserted but we need to recurse down its
    // children to find all the terminal nodes.
    var node = finishedWork;

    while (true) {
      if (node.tag === HostComponent) {
        var instance = node.stateNode;

        if (isHidden) {
          hideInstance(instance);
        } else {
          unhideInstance(node.stateNode, node.memoizedProps);
        }
      } else if (node.tag === HostText) {
        var _instance3 = node.stateNode;

        if (isHidden) {
          hideTextInstance(_instance3);
        } else {
          unhideTextInstance(_instance3, node.memoizedProps);
        }
      } else if (node.tag === SuspenseComponent && node.memoizedState !== null && node.memoizedState.dehydrated === null) {
        // Found a nested Suspense component that timed out. Skip over the
        // primary child fragment, which should remain hidden.
        var fallbackChildFragment = node.child.sibling;
        fallbackChildFragment.return = node;
        node = fallbackChildFragment;
        continue;
      } else if (node.child !== null) {
        node.child.return = node;
        node = node.child;
        continue;
      }

      if (node === finishedWork) {
        return;
      }

      while (node.sibling === null) {
        if (node.return === null || node.return === finishedWork) {
          return;
        }

        node = node.return;
      }

      node.sibling.return = node.return;
      node = node.sibling;
    }
  }
}

function commitAttachRef(finishedWork) {
  var ref = finishedWork.ref;

  if (ref !== null) {
    var instance = finishedWork.stateNode;
    var instanceToUse;

    switch (finishedWork.tag) {
      case HostComponent:
        instanceToUse = getPublicInstance(instance);
        break;

      default:
        instanceToUse = instance;
    } // Moved outside to ensure DCE works with this flag

    if (typeof ref === 'function') {
      ref(instanceToUse);
    } else {
      {
        if (!ref.hasOwnProperty('current')) {
          error('Unexpected ref object provided for %s. ' + 'Use either a ref-setter function or React.createRef().%s', getComponentName(finishedWork.type), getStackByFiberInDevAndProd(finishedWork));
        }
      }

      ref.current = instanceToUse;
    }
  }
}

function commitDetachRef(current) {
  var currentRef = current.ref;

  if (currentRef !== null) {
    if (typeof currentRef === 'function') {
      currentRef(null);
    } else {
      currentRef.current = null;
    }
  }
} // User-originating errors (lifecycles and refs) should not interrupt
// deletion, so don't let them throw. Host-originating errors should
// interrupt deletion, so it's okay


function commitUnmount(finishedRoot, current, renderPriorityLevel) {
  onCommitUnmount(current);

  switch (current.tag) {
    case FunctionComponent:
    case ForwardRef:
    case MemoComponent:
    case SimpleMemoComponent:
    case Block:
      {
        var updateQueue = current.updateQueue;

        if (updateQueue !== null) {
          var lastEffect = updateQueue.lastEffect;

          if (lastEffect !== null) {
            var firstEffect = lastEffect.next;

            {
              // When the owner fiber is deleted, the destroy function of a passive
              // effect hook is called during the synchronous commit phase. This is
              // a concession to implementation complexity. Calling it in the
              // passive effect phase (like they usually are, when dependencies
              // change during an update) would require either traversing the
              // children of the deleted fiber again, or including unmount effects
              // as part of the fiber effect list.
              //
              // Because this is during the sync commit phase, we need to change
              // the priority.
              //
              // TODO: Reconsider this implementation trade off.
              var priorityLevel = renderPriorityLevel > NormalPriority ? NormalPriority : renderPriorityLevel;
              runWithPriority$1(priorityLevel, function () {
                var effect = firstEffect;

                do {
                  var _destroy = effect.destroy;

                  if (_destroy !== undefined) {
                    safelyCallDestroy(current, _destroy);
                  }

                  effect = effect.next;
                } while (effect !== firstEffect);
              });
            }
          }
        }

        return;
      }

    case ClassComponent:
      {
        safelyDetachRef(current);
        var instance = current.stateNode;

        if (typeof instance.componentWillUnmount === 'function') {
          safelyCallComponentWillUnmount(current, instance);
        }

        return;
      }

    case HostComponent:
      {

        safelyDetachRef(current);
        return;
      }

    case HostPortal:
      {
        // TODO: this is recursive.
        // We are also not using this parent because
        // the portal will get pushed immediately.
        {
          unmountHostComponents(finishedRoot, current, renderPriorityLevel);
        }

        return;
      }

    case FundamentalComponent:
      {

        return;
      }

    case DehydratedFragment:
      {

        return;
      }

    case ScopeComponent:
      {

        return;
      }
  }
}

function commitNestedUnmounts(finishedRoot, root, renderPriorityLevel) {
  // While we're inside a removed host node we don't want to call
  // removeChild on the inner nodes because they're removed by the top
  // call anyway. We also want to call componentWillUnmount on all
  // composites before this host node is removed from the tree. Therefore
  // we do an inner loop while we're still inside the host node.
  var node = root;

  while (true) {
    commitUnmount(finishedRoot, node, renderPriorityLevel); // Visit children because they may contain more composite or host nodes.
    // Skip portals because commitUnmount() currently visits them recursively.

    if (node.child !== null && ( // If we use mutation we drill down into portals using commitUnmount above.
    // If we don't use mutation we drill down into portals here instead.
     node.tag !== HostPortal)) {
      node.child.return = node;
      node = node.child;
      continue;
    }

    if (node === root) {
      return;
    }

    while (node.sibling === null) {
      if (node.return === null || node.return === root) {
        return;
      }

      node = node.return;
    }

    node.sibling.return = node.return;
    node = node.sibling;
  }
}

function detachFiber(current) {
  var alternate = current.alternate; // Cut off the return pointers to disconnect it from the tree. Ideally, we
  // should clear the child pointer of the parent alternate to let this
  // get GC:ed but we don't know which for sure which parent is the current
  // one so we'll settle for GC:ing the subtree of this child. This child
  // itself will be GC:ed when the parent updates the next time.

  current.return = null;
  current.child = null;
  current.memoizedState = null;
  current.updateQueue = null;
  current.dependencies = null;
  current.alternate = null;
  current.firstEffect = null;
  current.lastEffect = null;
  current.pendingProps = null;
  current.memoizedProps = null;
  current.stateNode = null;

  if (alternate !== null) {
    detachFiber(alternate);
  }
}

function getHostParentFiber(fiber) {
  var parent = fiber.return;

  while (parent !== null) {
    if (isHostParent(parent)) {
      return parent;
    }

    parent = parent.return;
  }

  {
    {
      throw Error( "Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue." );
    }
  }
}

function isHostParent(fiber) {
  return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
}

function getHostSibling(fiber) {
  // We're going to search forward into the tree until we find a sibling host
  // node. Unfortunately, if multiple insertions are done in a row we have to
  // search past them. This leads to exponential search for the next sibling.
  // TODO: Find a more efficient way to do this.
  var node = fiber;

  siblings: while (true) {
    // If we didn't find anything, let's try the next sibling.
    while (node.sibling === null) {
      if (node.return === null || isHostParent(node.return)) {
        // If we pop out of the root or hit the parent the fiber we are the
        // last sibling.
        return null;
      }

      node = node.return;
    }

    node.sibling.return = node.return;
    node = node.sibling;

    while (node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment) {
      // If it is not host node and, we might have a host node inside it.
      // Try to search down until we find one.
      if (node.effectTag & Placement) {
        // If we don't have a child, try the siblings instead.
        continue siblings;
      } // If we don't have a child, try the siblings instead.
      // We also skip portals because they are not part of this host tree.


      if (node.child === null || node.tag === HostPortal) {
        continue siblings;
      } else {
        node.child.return = node;
        node = node.child;
      }
    } // Check if this host node is stable or about to be placed.


    if (!(node.effectTag & Placement)) {
      // Found it!
      return node.stateNode;
    }
  }
}

function commitPlacement(finishedWork) {


  var parentFiber = getHostParentFiber(finishedWork); // Note: these two variables *must* always be updated together.

  var parent;
  var isContainer;
  var parentStateNode = parentFiber.stateNode;

  switch (parentFiber.tag) {
    case HostComponent:
      parent = parentStateNode;
      isContainer = false;
      break;

    case HostRoot:
      parent = parentStateNode.containerInfo;
      isContainer = true;
      break;

    case HostPortal:
      parent = parentStateNode.containerInfo;
      isContainer = true;
      break;

    case FundamentalComponent:

    // eslint-disable-next-line-no-fallthrough

    default:
      {
        {
          throw Error( "Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue." );
        }
      }

  }

  if (parentFiber.effectTag & ContentReset) {
    // Reset the text content of the parent before doing any insertions
    resetTextContent(parent); // Clear ContentReset from the effect tag

    parentFiber.effectTag &= ~ContentReset;
  }

  var before = getHostSibling(finishedWork); // We only have the top Fiber that was inserted but we need to recurse down its
  // children to find all the terminal nodes.

  if (isContainer) {
    insertOrAppendPlacementNodeIntoContainer(finishedWork, before, parent);
  } else {
    insertOrAppendPlacementNode(finishedWork, before, parent);
  }
}

function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
  var tag = node.tag;
  var isHost = tag === HostComponent || tag === HostText;

  if (isHost || enableFundamentalAPI ) {
    var stateNode = isHost ? node.stateNode : node.stateNode.instance;

    if (before) {
      insertInContainerBefore(parent, stateNode, before);
    } else {
      appendChildToContainer(parent, stateNode);
    }
  } else if (tag === HostPortal) ; else {
    var child = node.child;

    if (child !== null) {
      insertOrAppendPlacementNodeIntoContainer(child, before, parent);
      var sibling = child.sibling;

      while (sibling !== null) {
        insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);
        sibling = sibling.sibling;
      }
    }
  }
}

function insertOrAppendPlacementNode(node, before, parent) {
  var tag = node.tag;
  var isHost = tag === HostComponent || tag === HostText;

  if (isHost || enableFundamentalAPI ) {
    var stateNode = isHost ? node.stateNode : node.stateNode.instance;

    if (before) {
      insertBefore(parent, stateNode, before);
    } else {
      appendChild(parent, stateNode);
    }
  } else if (tag === HostPortal) ; else {
    var child = node.child;

    if (child !== null) {
      insertOrAppendPlacementNode(child, before, parent);
      var sibling = child.sibling;

      while (sibling !== null) {
        insertOrAppendPlacementNode(sibling, before, parent);
        sibling = sibling.sibling;
      }
    }
  }
}

function unmountHostComponents(finishedRoot, current, renderPriorityLevel) {
  // We only have the top Fiber that was deleted but we need to recurse down its
  // children to find all the terminal nodes.
  var node = current; // Each iteration, currentParent is populated with node's host parent if not
  // currentParentIsValid.

  var currentParentIsValid = false; // Note: these two variables *must* always be updated together.

  var currentParent;
  var currentParentIsContainer;

  while (true) {
    if (!currentParentIsValid) {
      var parent = node.return;

      findParent: while (true) {
        if (!(parent !== null)) {
          {
            throw Error( "Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue." );
          }
        }

        var parentStateNode = parent.stateNode;

        switch (parent.tag) {
          case HostComponent:
            currentParent = parentStateNode;
            currentParentIsContainer = false;
            break findParent;

          case HostRoot:
            currentParent = parentStateNode.containerInfo;
            currentParentIsContainer = true;
            break findParent;

          case HostPortal:
            currentParent = parentStateNode.containerInfo;
            currentParentIsContainer = true;
            break findParent;

        }

        parent = parent.return;
      }

      currentParentIsValid = true;
    }

    if (node.tag === HostComponent || node.tag === HostText) {
      commitNestedUnmounts(finishedRoot, node, renderPriorityLevel); // After all the children have unmounted, it is now safe to remove the
      // node from the tree.

      if (currentParentIsContainer) {
        removeChildFromContainer(currentParent, node.stateNode);
      } else {
        removeChild(currentParent, node.stateNode);
      } // Don't visit children because we already visited them.

    } else if (node.tag === HostPortal) {
      if (node.child !== null) {
        // When we go into a portal, it becomes the parent to remove from.
        // We will reassign it back when we pop the portal on the way up.
        currentParent = node.stateNode.containerInfo;
        currentParentIsContainer = true; // Visit children because portals might contain host components.

        node.child.return = node;
        node = node.child;
        continue;
      }
    } else {
      commitUnmount(finishedRoot, node, renderPriorityLevel); // Visit children because we may find more host components below.

      if (node.child !== null) {
        node.child.return = node;
        node = node.child;
        continue;
      }
    }

    if (node === current) {
      return;
    }

    while (node.sibling === null) {
      if (node.return === null || node.return === current) {
        return;
      }

      node = node.return;

      if (node.tag === HostPortal) {
        // When we go out of the portal, we need to restore the parent.
        // Since we don't keep a stack of them, we will search for it.
        currentParentIsValid = false;
      }
    }

    node.sibling.return = node.return;
    node = node.sibling;
  }
}

function commitDeletion(finishedRoot, current, renderPriorityLevel) {
  {
    // Recursively delete all host nodes from the parent.
    // Detach refs and call componentWillUnmount() on the whole subtree.
    unmountHostComponents(finishedRoot, current, renderPriorityLevel);
  }

  detachFiber(current);
}

function commitWork(current, finishedWork) {

  switch (finishedWork.tag) {
    case FunctionComponent:
    case ForwardRef:
    case MemoComponent:
    case SimpleMemoComponent:
    case Block:
      {
        // Layout effects are destroyed during the mutation phase so that all
        // destroy functions for all fibers are called before any create functions.
        // This prevents sibling component effects from interfering with each other,
        // e.g. a destroy function in one component should never override a ref set
        // by a create function in another component during the same commit.
        commitHookEffectListUnmount(Layout | HasEffect, finishedWork);
        return;
      }

    case ClassComponent:
      {
        return;
      }

    case HostComponent:
      {
        var instance = finishedWork.stateNode;

        if (instance != null) {
          // Commit the work prepared earlier.
          var newProps = finishedWork.memoizedProps; // For hydration we reuse the update path but we treat the oldProps
          // as the newProps. The updatePayload will contain the real change in
          // this case.

          var oldProps = current !== null ? current.memoizedProps : newProps;
          var type = finishedWork.type; // TODO: Type the updateQueue to be specific to host components.

          var updatePayload = finishedWork.updateQueue;
          finishedWork.updateQueue = null;

          if (updatePayload !== null) {
            commitUpdate(instance, updatePayload, type, oldProps, newProps);
          }
        }

        return;
      }

    case HostText:
      {
        if (!(finishedWork.stateNode !== null)) {
          {
            throw Error( "This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue." );
          }
        }

        var textInstance = finishedWork.stateNode;
        var newText = finishedWork.memoizedProps; // For hydration we reuse the update path but we treat the oldProps
        // as the newProps. The updatePayload will contain the real change in
        // this case.

        var oldText = current !== null ? current.memoizedProps : newText;
        commitTextUpdate(textInstance, oldText, newText);
        return;
      }

    case HostRoot:
      {
        {
          var _root = finishedWork.stateNode;

          if (_root.hydrate) {
            // We've just hydrated. No need to hydrate again.
            _root.hydrate = false;
            commitHydratedContainer(_root.containerInfo);
          }
        }

        return;
      }

    case Profiler:
      {
        return;
      }

    case SuspenseComponent:
      {
        commitSuspenseComponent(finishedWork);
        attachSuspenseRetryListeners(finishedWork);
        return;
      }

    case SuspenseListComponent:
      {
        attachSuspenseRetryListeners(finishedWork);
        return;
      }

    case IncompleteClassComponent:
      {
        return;
      }
  }

  {
    {
      throw Error( "This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue." );
    }
  }
}

function commitSuspenseComponent(finishedWork) {
  var newState = finishedWork.memoizedState;
  var newDidTimeout;
  var primaryChildParent = finishedWork;

  if (newState === null) {
    newDidTimeout = false;
  } else {
    newDidTimeout = true;
    primaryChildParent = finishedWork.child;
    markCommitTimeOfFallback();
  }

  if ( primaryChildParent !== null) {
    hideOrUnhideAllChildren(primaryChildParent, newDidTimeout);
  }
}

function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {

  var newState = finishedWork.memoizedState;

  if (newState === null) {
    var current = finishedWork.alternate;

    if (current !== null) {
      var prevState = current.memoizedState;

      if (prevState !== null) {
        var suspenseInstance = prevState.dehydrated;

        if (suspenseInstance !== null) {
          commitHydratedSuspenseInstance(suspenseInstance);
        }
      }
    }
  }
}

function attachSuspenseRetryListeners(finishedWork) {
  // If this boundary just timed out, then it will have a set of thenables.
  // For each thenable, attach a listener so that when it resolves, React
  // attempts to re-render the boundary in the primary (pre-timeout) state.
  var thenables = finishedWork.updateQueue;

  if (thenables !== null) {
    finishedWork.updateQueue = null;
    var retryCache = finishedWork.stateNode;

    if (retryCache === null) {
      retryCache = finishedWork.stateNode = new PossiblyWeakSet();
    }

    thenables.forEach(function (thenable) {
      // Memoize using the boundary fiber to prevent redundant listeners.
      var retry = resolveRetryThenable.bind(null, finishedWork, thenable);

      if (!retryCache.has(thenable)) {
        {
          if (thenable.__reactDoNotTraceInteractions !== true) {
            retry = tracing.unstable_wrap(retry);
          }
        }

        retryCache.add(thenable);
        thenable.then(retry, retry);
      }
    });
  }
}

function commitResetTextContent(current) {

  resetTextContent(current.stateNode);
}

var PossiblyWeakMap$1 = typeof WeakMap === 'function' ? WeakMap : Map;

function createRootErrorUpdate(fiber, errorInfo, expirationTime) {
  var update = createUpdate(expirationTime, null); // Unmount the root by rendering null.

  update.tag = CaptureUpdate; // Caution: React DevTools currently depends on this property
  // being called "element".

  update.payload = {
    element: null
  };
  var error = errorInfo.value;

  update.callback = function () {
    onUncaughtError(error);
    logError(fiber, errorInfo);
  };

  return update;
}

function createClassErrorUpdate(fiber, errorInfo, expirationTime) {
  var update = createUpdate(expirationTime, null);
  update.tag = CaptureUpdate;
  var getDerivedStateFromError = fiber.type.getDerivedStateFromError;

  if (typeof getDerivedStateFromError === 'function') {
    var error$1 = errorInfo.value;

    update.payload = function () {
      logError(fiber, errorInfo);
      return getDerivedStateFromError(error$1);
    };
  }

  var inst = fiber.stateNode;

  if (inst !== null && typeof inst.componentDidCatch === 'function') {
    update.callback = function callback() {
      {
        markFailedErrorBoundaryForHotReloading(fiber);
      }

      if (typeof getDerivedStateFromError !== 'function') {
        // To preserve the preexisting retry behavior of error boundaries,
        // we keep track of which ones already failed during this batch.
        // This gets reset before we yield back to the browser.
        // TODO: Warn in strict mode if getDerivedStateFromError is
        // not defined.
        markLegacyErrorBoundaryAsFailed(this); // Only log here if componentDidCatch is the only error boundary method defined

        logError(fiber, errorInfo);
      }

      var error$1 = errorInfo.value;
      var stack = errorInfo.stack;
      this.componentDidCatch(error$1, {
        componentStack: stack !== null ? stack : ''
      });

      {
        if (typeof getDerivedStateFromError !== 'function') {
          // If componentDidCatch is the only error boundary method defined,
          // then it needs to call setState to recover from errors.
          // If no state update is scheduled then the boundary will swallow the error.
          if (fiber.expirationTime !== Sync) {
            error('%s: Error boundaries should implement getDerivedStateFromError(). ' + 'In that method, return a state update to display an error message or fallback UI.', getComponentName(fiber.type) || 'Unknown');
          }
        }
      }
    };
  } else {
    update.callback = function () {
      markFailedErrorBoundaryForHotReloading(fiber);
    };
  }

  return update;
}

function attachPingListener(root, renderExpirationTime, thenable) {
  // Attach a listener to the promise to "ping" the root and retry. But
  // only if one does not already exist for the current render expiration
  // time (which acts like a "thread ID" here).
  var pingCache = root.pingCache;
  var threadIDs;

  if (pingCache === null) {
    pingCache = root.pingCache = new PossiblyWeakMap$1();
    threadIDs = new Set();
    pingCache.set(thenable, threadIDs);
  } else {
    threadIDs = pingCache.get(thenable);

    if (threadIDs === undefined) {
      threadIDs = new Set();
      pingCache.set(thenable, threadIDs);
    }
  }

  if (!threadIDs.has(renderExpirationTime)) {
    // Memoize using the thread ID to prevent redundant listeners.
    threadIDs.add(renderExpirationTime);
    var ping = pingSuspendedRoot.bind(null, root, thenable, renderExpirationTime);
    thenable.then(ping, ping);
  }
}

function throwException(root, returnFiber, sourceFiber, value, renderExpirationTime) {
  // The source fiber did not complete.
  sourceFiber.effectTag |= Incomplete; // Its effect list is no longer valid.

  sourceFiber.firstEffect = sourceFiber.lastEffect = null;

  if (value !== null && typeof value === 'object' && typeof value.then === 'function') {
    // This is a thenable.
    var thenable = value;

    if ((sourceFiber.mode & BlockingMode) === NoMode) {
      // Reset the memoizedState to what it was before we attempted
      // to render it.
      var currentSource = sourceFiber.alternate;

      if (currentSource) {
        sourceFiber.updateQueue = currentSource.updateQueue;
        sourceFiber.memoizedState = currentSource.memoizedState;
        sourceFiber.expirationTime = currentSource.expirationTime;
      } else {
        sourceFiber.updateQueue = null;
        sourceFiber.memoizedState = null;
      }
    }

    var hasInvisibleParentBoundary = hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext); // Schedule the nearest Suspense to re-render the timed out view.

    var _workInProgress = returnFiber;

    do {
      if (_workInProgress.tag === SuspenseComponent && shouldCaptureSuspense(_workInProgress, hasInvisibleParentBoundary)) {
        // Found the nearest boundary.
        // Stash the promise on the boundary fiber. If the boundary times out, we'll
        // attach another listener to flip the boundary back to its normal state.
        var thenables = _workInProgress.updateQueue;

        if (thenables === null) {
          var updateQueue = new Set();
          updateQueue.add(thenable);
          _workInProgress.updateQueue = updateQueue;
        } else {
          thenables.add(thenable);
        } // If the boundary is outside of blocking mode, we should *not*
        // suspend the commit. Pretend as if the suspended component rendered
        // null and keep rendering. In the commit phase, we'll schedule a
        // subsequent synchronous update to re-render the Suspense.
        //
        // Note: It doesn't matter whether the component that suspended was
        // inside a blocking mode tree. If the Suspense is outside of it, we
        // should *not* suspend the commit.


        if ((_workInProgress.mode & BlockingMode) === NoMode) {
          _workInProgress.effectTag |= DidCapture; // We're going to commit this fiber even though it didn't complete.
          // But we shouldn't call any lifecycle methods or callbacks. Remove
          // all lifecycle effect tags.

          sourceFiber.effectTag &= ~(LifecycleEffectMask | Incomplete);

          if (sourceFiber.tag === ClassComponent) {
            var currentSourceFiber = sourceFiber.alternate;

            if (currentSourceFiber === null) {
              // This is a new mount. Change the tag so it's not mistaken for a
              // completed class component. For example, we should not call
              // componentWillUnmount if it is deleted.
              sourceFiber.tag = IncompleteClassComponent;
            } else {
              // When we try rendering again, we should not reuse the current fiber,
              // since it's known to be in an inconsistent state. Use a force update to
              // prevent a bail out.
              var update = createUpdate(Sync, null);
              update.tag = ForceUpdate;
              enqueueUpdate(sourceFiber, update);
            }
          } // The source fiber did not complete. Mark it with Sync priority to
          // indicate that it still has pending work.


          sourceFiber.expirationTime = Sync; // Exit without suspending.

          return;
        } // Confirmed that the boundary is in a concurrent mode tree. Continue
        // with the normal suspend path.
        //
        // After this we'll use a set of heuristics to determine whether this
        // render pass will run to completion or restart or "suspend" the commit.
        // The actual logic for this is spread out in different places.
        //
        // This first principle is that if we're going to suspend when we complete
        // a root, then we should also restart if we get an update or ping that
        // might unsuspend it, and vice versa. The only reason to suspend is
        // because you think you might want to restart before committing. However,
        // it doesn't make sense to restart only while in the period we're suspended.
        //
        // Restarting too aggressively is also not good because it starves out any
        // intermediate loading state. So we use heuristics to determine when.
        // Suspense Heuristics
        //
        // If nothing threw a Promise or all the same fallbacks are already showing,
        // then don't suspend/restart.
        //
        // If this is an initial render of a new tree of Suspense boundaries and
        // those trigger a fallback, then don't suspend/restart. We want to ensure
        // that we can show the initial loading state as quickly as possible.
        //
        // If we hit a "Delayed" case, such as when we'd switch from content back into
        // a fallback, then we should always suspend/restart. SuspenseConfig applies to
        // this case. If none is defined, JND is used instead.
        //
        // If we're already showing a fallback and it gets "retried", allowing us to show
        // another level, but there's still an inner boundary that would show a fallback,
        // then we suspend/restart for 500ms since the last time we showed a fallback
        // anywhere in the tree. This effectively throttles progressive loading into a
        // consistent train of commits. This also gives us an opportunity to restart to
        // get to the completed state slightly earlier.
        //
        // If there's ambiguity due to batching it's resolved in preference of:
        // 1) "delayed", 2) "initial render", 3) "retry".
        //
        // We want to ensure that a "busy" state doesn't get force committed. We want to
        // ensure that new initial loading states can commit as soon as possible.


        attachPingListener(root, renderExpirationTime, thenable);
        _workInProgress.effectTag |= ShouldCapture;
        _workInProgress.expirationTime = renderExpirationTime;
        return;
      } // This boundary already captured during this render. Continue to the next
      // boundary.


      _workInProgress = _workInProgress.return;
    } while (_workInProgress !== null); // No boundary was found. Fallthrough to error mode.
    // TODO: Use invariant so the message is stripped in prod?


    value = new Error((getComponentName(sourceFiber.type) || 'A React component') + ' suspended while rendering, but no fallback UI was specified.\n' + '\n' + 'Add a <Suspense fallback=...> component higher in the tree to ' + 'provide a loading indicator or placeholder to display.' + getStackByFiberInDevAndProd(sourceFiber));
  } // We didn't find a boundary that could handle this type of exception. Start
  // over and traverse parent path again, this time treating the exception
  // as an error.


  renderDidError();
  value = createCapturedValue(value, sourceFiber);
  var workInProgress = returnFiber;

  do {
    switch (workInProgress.tag) {
      case HostRoot:
        {
          var _errorInfo = value;
          workInProgress.effectTag |= ShouldCapture;
          workInProgress.expirationTime = renderExpirationTime;

          var _update = createRootErrorUpdate(workInProgress, _errorInfo, renderExpirationTime);

          enqueueCapturedUpdate(workInProgress, _update);
          return;
        }

      case ClassComponent:
        // Capture and retry
        var errorInfo = value;
        var ctor = workInProgress.type;
        var instance = workInProgress.stateNode;

        if ((workInProgress.effectTag & DidCapture) === NoEffect && (typeof ctor.getDerivedStateFromError === 'function' || instance !== null && typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance))) {
          workInProgress.effectTag |= ShouldCapture;
          workInProgress.expirationTime = renderExpirationTime; // Schedule the error boundary to re-render using updated state

          var _update2 = createClassErrorUpdate(workInProgress, errorInfo, renderExpirationTime);

          enqueueCapturedUpdate(workInProgress, _update2);
          return;
        }

        break;
    }

    workInProgress = workInProgress.return;
  } while (workInProgress !== null);
}

var ceil = Math.ceil;
var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher,
    ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner,
    IsSomeRendererActing = ReactSharedInternals.IsSomeRendererActing;
var NoContext =
/*                    */
0;
var BatchedContext =
/*               */
1;
var EventContext =
/*                 */
2;
var DiscreteEventContext =
/*         */
4;
var LegacyUnbatchedContext =
/*       */
8;
var RenderContext =
/*                */
16;
var CommitContext =
/*                */
32;
var RootIncomplete = 0;
var RootFatalErrored = 1;
var RootErrored = 2;
var RootSuspended = 3;
var RootSuspendedWithDelay = 4;
var RootCompleted = 5;
// Describes where we are in the React execution stack
var executionContext = NoContext; // The root we're working on

var workInProgressRoot = null; // The fiber we're working on

var workInProgress = null; // The expiration time we're rendering

var renderExpirationTime$1 = NoWork; // Whether to root completed, errored, suspended, etc.

var workInProgressRootExitStatus = RootIncomplete; // A fatal error, if one is thrown

var workInProgressRootFatalError = null; // Most recent event time among processed updates during this render.
// This is conceptually a time stamp but expressed in terms of an ExpirationTime
// because we deal mostly with expiration times in the hot path, so this avoids
// the conversion happening in the hot path.

var workInProgressRootLatestProcessedExpirationTime = Sync;
var workInProgressRootLatestSuspenseTimeout = Sync;
var workInProgressRootCanSuspendUsingConfig = null; // The work left over by components that were visited during this render. Only
// includes unprocessed updates, not work in bailed out children.

var workInProgressRootNextUnprocessedUpdateTime = NoWork; // If we're pinged while rendering we don't always restart immediately.
// This flag determines if it might be worthwhile to restart if an opportunity
// happens latere.

var workInProgressRootHasPendingPing = false; // The most recent time we committed a fallback. This lets us ensure a train
// model where we don't commit new loading states in too quick succession.

var globalMostRecentFallbackTime = 0;
var FALLBACK_THROTTLE_MS = 500;
var nextEffect = null;
var hasUncaughtError = false;
var firstUncaughtError = null;
var legacyErrorBoundariesThatAlreadyFailed = null;
var rootDoesHavePassiveEffects = false;
var rootWithPendingPassiveEffects = null;
var pendingPassiveEffectsRenderPriority = NoPriority;
var pendingPassiveEffectsExpirationTime = NoWork;
var rootsWithPendingDiscreteUpdates = null; // Use these to prevent an infinite loop of nested updates

var NESTED_UPDATE_LIMIT = 50;
var nestedUpdateCount = 0;
var rootWithNestedUpdates = null;
var NESTED_PASSIVE_UPDATE_LIMIT = 50;
var nestedPassiveUpdateCount = 0;
var interruptedBy = null; // Marks the need to reschedule pending interactions at these expiration times
// during the commit phase. This enables them to be traced across components
// that spawn new work during render. E.g. hidden boundaries, suspended SSR
// hydration or SuspenseList.

var spawnedWorkDuringRender = null; // Expiration times are computed by adding to the current time (the start
// time). However, if two updates are scheduled within the same event, we
// should treat their start times as simultaneous, even if the actual clock
// time has advanced between the first and second call.
// In other words, because expiration times determine how updates are batched,
// we want all updates of like priority that occur within the same event to
// receive the same expiration time. Otherwise we get tearing.

var currentEventTime = NoWork;
function requestCurrentTimeForUpdate() {
  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
    // We're inside React, so it's fine to read the actual time.
    return msToExpirationTime(now());
  } // We're not inside React, so we may be in the middle of a browser event.


  if (currentEventTime !== NoWork) {
    // Use the same start time for all updates until we enter React again.
    return currentEventTime;
  } // This is the first update since React yielded. Compute a new start time.


  currentEventTime = msToExpirationTime(now());
  return currentEventTime;
}
function getCurrentTime() {
  return msToExpirationTime(now());
}
function computeExpirationForFiber(currentTime, fiber, suspenseConfig) {
  var mode = fiber.mode;

  if ((mode & BlockingMode) === NoMode) {
    return Sync;
  }

  var priorityLevel = getCurrentPriorityLevel();

  if ((mode & ConcurrentMode) === NoMode) {
    return priorityLevel === ImmediatePriority ? Sync : Batched;
  }

  if ((executionContext & RenderContext) !== NoContext) {
    // Use whatever time we're already rendering
    // TODO: Should there be a way to opt out, like with `runWithPriority`?
    return renderExpirationTime$1;
  }

  var expirationTime;

  if (suspenseConfig !== null) {
    // Compute an expiration time based on the Suspense timeout.
    expirationTime = computeSuspenseExpiration(currentTime, suspenseConfig.timeoutMs | 0 || LOW_PRIORITY_EXPIRATION);
  } else {
    // Compute an expiration time based on the Scheduler priority.
    switch (priorityLevel) {
      case ImmediatePriority:
        expirationTime = Sync;
        break;

      case UserBlockingPriority$1:
        // TODO: Rename this to computeUserBlockingExpiration
        expirationTime = computeInteractiveExpiration(currentTime);
        break;

      case NormalPriority:
      case LowPriority:
        // TODO: Handle LowPriority
        // TODO: Rename this to... something better.
        expirationTime = computeAsyncExpiration(currentTime);
        break;

      case IdlePriority:
        expirationTime = Idle;
        break;

      default:
        {
          {
            throw Error( "Expected a valid priority level" );
          }
        }

    }
  } // If we're in the middle of rendering a tree, do not update at the same
  // expiration time that is already rendering.
  // TODO: We shouldn't have to do this if the update is on a different root.
  // Refactor computeExpirationForFiber + scheduleUpdate so we have access to
  // the root when we check for this condition.


  if (workInProgressRoot !== null && expirationTime === renderExpirationTime$1) {
    // This is a trick to move this update into a separate batch
    expirationTime -= 1;
  }

  return expirationTime;
}
function scheduleUpdateOnFiber(fiber, expirationTime) {
  checkForNestedUpdates();
  warnAboutRenderPhaseUpdatesInDEV(fiber);
  var root = markUpdateTimeFromFiberToRoot(fiber, expirationTime);

  if (root === null) {
    warnAboutUpdateOnUnmountedFiberInDEV(fiber);
    return;
  }

  checkForInterruption(fiber, expirationTime);
  recordScheduleUpdate(); // TODO: computeExpirationForFiber also reads the priority. Pass the
  // priority as an argument to that function and this one.

  var priorityLevel = getCurrentPriorityLevel();

  if (expirationTime === Sync) {
    if ( // Check if we're inside unbatchedUpdates
    (executionContext & LegacyUnbatchedContext) !== NoContext && // Check if we're not already rendering
    (executionContext & (RenderContext | CommitContext)) === NoContext) {
      // Register pending interactions on the root to avoid losing traced interaction data.
      schedulePendingInteractions(root, expirationTime); // This is a legacy edge case. The initial mount of a ReactDOM.render-ed
      // root inside of batchedUpdates should be synchronous, but layout updates
      // should be deferred until the end of the batch.

      performSyncWorkOnRoot(root);
    } else {
      ensureRootIsScheduled(root);
      schedulePendingInteractions(root, expirationTime);

      if (executionContext === NoContext) {
        // Flush the synchronous work now, unless we're already working or inside
        // a batch. This is intentionally inside scheduleUpdateOnFiber instead of
        // scheduleCallbackForFiber to preserve the ability to schedule a callback
        // without immediately flushing it. We only do this for user-initiated
        // updates, to preserve historical behavior of legacy mode.
        flushSyncCallbackQueue();
      }
    }
  } else {
    ensureRootIsScheduled(root);
    schedulePendingInteractions(root, expirationTime);
  }

  if ((executionContext & DiscreteEventContext) !== NoContext && ( // Only updates at user-blocking priority or greater are considered
  // discrete, even inside a discrete event.
  priorityLevel === UserBlockingPriority$1 || priorityLevel === ImmediatePriority)) {
    // This is the result of a discrete event. Track the lowest priority
    // discrete update per root so we can flush them early, if needed.
    if (rootsWithPendingDiscreteUpdates === null) {
      rootsWithPendingDiscreteUpdates = new Map([[root, expirationTime]]);
    } else {
      var lastDiscreteTime = rootsWithPendingDiscreteUpdates.get(root);

      if (lastDiscreteTime === undefined || lastDiscreteTime > expirationTime) {
        rootsWithPendingDiscreteUpdates.set(root, expirationTime);
      }
    }
  }
}
var scheduleWork = scheduleUpdateOnFiber; // This is split into a separate function so we can mark a fiber with pending
// work without treating it as a typical update that originates from an event;
// e.g. retrying a Suspense boundary isn't an update, but it does schedule work
// on a fiber.

function markUpdateTimeFromFiberToRoot(fiber, expirationTime) {
  // Update the source fiber's expiration time
  if (fiber.expirationTime < expirationTime) {
    fiber.expirationTime = expirationTime;
  }

  var alternate = fiber.alternate;

  if (alternate !== null && alternate.expirationTime < expirationTime) {
    alternate.expirationTime = expirationTime;
  } // Walk the parent path to the root and update the child expiration time.


  var node = fiber.return;
  var root = null;

  if (node === null && fiber.tag === HostRoot) {
    root = fiber.stateNode;
  } else {
    while (node !== null) {
      alternate = node.alternate;

      if (node.childExpirationTime < expirationTime) {
        node.childExpirationTime = expirationTime;

        if (alternate !== null && alternate.childExpirationTime < expirationTime) {
          alternate.childExpirationTime = expirationTime;
        }
      } else if (alternate !== null && alternate.childExpirationTime < expirationTime) {
        alternate.childExpirationTime = expirationTime;
      }

      if (node.return === null && node.tag === HostRoot) {
        root = node.stateNode;
        break;
      }

      node = node.return;
    }
  }

  if (root !== null) {
    if (workInProgressRoot === root) {
      // Received an update to a tree that's in the middle of rendering. Mark
      // that's unprocessed work on this root.
      markUnprocessedUpdateTime(expirationTime);

      if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
        // The root already suspended with a delay, which means this render
        // definitely won't finish. Since we have a new update, let's mark it as
        // suspended now, right before marking the incoming update. This has the
        // effect of interrupting the current render and switching to the update.
        // TODO: This happens to work when receiving an update during the render
        // phase, because of the trick inside computeExpirationForFiber to
        // subtract 1 from `renderExpirationTime` to move it into a
        // separate bucket. But we should probably model it with an exception,
        // using the same mechanism we use to force hydration of a subtree.
        // TODO: This does not account for low pri updates that were already
        // scheduled before the root started rendering. Need to track the next
        // pending expiration time (perhaps by backtracking the return path) and
        // then trigger a restart in the `renderDidSuspendDelayIfPossible` path.
        markRootSuspendedAtTime(root, renderExpirationTime$1);
      }
    } // Mark that the root has a pending update.


    markRootUpdatedAtTime(root, expirationTime);
  }

  return root;
}

function getNextRootExpirationTimeToWorkOn(root) {
  // Determines the next expiration time that the root should render, taking
  // into account levels that may be suspended, or levels that may have
  // received a ping.
  var lastExpiredTime = root.lastExpiredTime;

  if (lastExpiredTime !== NoWork) {
    return lastExpiredTime;
  } // "Pending" refers to any update that hasn't committed yet, including if it
  // suspended. The "suspended" range is therefore a subset.


  var firstPendingTime = root.firstPendingTime;

  if (!isRootSuspendedAtTime(root, firstPendingTime)) {
    // The highest priority pending time is not suspended. Let's work on that.
    return firstPendingTime;
  } // If the first pending time is suspended, check if there's a lower priority
  // pending level that we know about. Or check if we received a ping. Work
  // on whichever is higher priority.


  var lastPingedTime = root.lastPingedTime;
  var nextKnownPendingLevel = root.nextKnownPendingLevel;
  var nextLevel = lastPingedTime > nextKnownPendingLevel ? lastPingedTime : nextKnownPendingLevel;

  if ( nextLevel <= Idle && firstPendingTime !== nextLevel) {
    // Don't work on Idle/Never priority unless everything else is committed.
    return NoWork;
  }

  return nextLevel;
} // Use this function to schedule a task for a root. There's only one task per
// root; if a task was already scheduled, we'll check to make sure the
// expiration time of the existing task is the same as the expiration time of
// the next level that the root has work on. This function is called on every
// update, and right before exiting a task.


function ensureRootIsScheduled(root) {
  var lastExpiredTime = root.lastExpiredTime;

  if (lastExpiredTime !== NoWork) {
    // Special case: Expired work should flush synchronously.
    root.callbackExpirationTime = Sync;
    root.callbackPriority = ImmediatePriority;
    root.callbackNode = scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root));
    return;
  }

  var expirationTime = getNextRootExpirationTimeToWorkOn(root);
  var existingCallbackNode = root.callbackNode;

  if (expirationTime === NoWork) {
    // There's nothing to work on.
    if (existingCallbackNode !== null) {
      root.callbackNode = null;
      root.callbackExpirationTime = NoWork;
      root.callbackPriority = NoPriority;
    }

    return;
  } // TODO: If this is an update, we already read the current time. Pass the
  // time as an argument.


  var currentTime = requestCurrentTimeForUpdate();
  var priorityLevel = inferPriorityFromExpirationTime(currentTime, expirationTime); // If there's an existing render task, confirm it has the correct priority and
  // expiration time. Otherwise, we'll cancel it and schedule a new one.

  if (existingCallbackNode !== null) {
    var existingCallbackPriority = root.callbackPriority;
    var existingCallbackExpirationTime = root.callbackExpirationTime;

    if ( // Callback must have the exact same expiration time.
    existingCallbackExpirationTime === expirationTime && // Callback must have greater or equal priority.
    existingCallbackPriority >= priorityLevel) {
      // Existing callback is sufficient.
      return;
    } // Need to schedule a new task.
    // TODO: Instead of scheduling a new task, we should be able to change the
    // priority of the existing one.


    cancelCallback(existingCallbackNode);
  }

  root.callbackExpirationTime = expirationTime;
  root.callbackPriority = priorityLevel;
  var callbackNode;

  if (expirationTime === Sync) {
    // Sync React callbacks are scheduled on a special internal queue
    callbackNode = scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root));
  } else {
    callbackNode = scheduleCallback(priorityLevel, performConcurrentWorkOnRoot.bind(null, root), // Compute a task timeout based on the expiration time. This also affects
    // ordering because tasks are processed in timeout order.
    {
      timeout: expirationTimeToMs(expirationTime) - now()
    });
  }

  root.callbackNode = callbackNode;
} // This is the entry point for every concurrent task, i.e. anything that
// goes through Scheduler.


function performConcurrentWorkOnRoot(root, didTimeout) {
  // Since we know we're in a React event, we can clear the current
  // event time. The next update will compute a new event time.
  currentEventTime = NoWork;

  if (didTimeout) {
    // The render task took too long to complete. Mark the current time as
    // expired to synchronously render all expired work in a single batch.
    var currentTime = requestCurrentTimeForUpdate();
    markRootExpiredAtTime(root, currentTime); // This will schedule a synchronous callback.

    ensureRootIsScheduled(root);
    return null;
  } // Determine the next expiration time to work on, using the fields stored
  // on the root.


  var expirationTime = getNextRootExpirationTimeToWorkOn(root);

  if (expirationTime !== NoWork) {
    var originalCallbackNode = root.callbackNode;

    if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
      {
        throw Error( "Should not already be working." );
      }
    }

    flushPassiveEffects(); // If the root or expiration time have changed, throw out the existing stack
    // and prepare a fresh one. Otherwise we'll continue where we left off.

    if (root !== workInProgressRoot || expirationTime !== renderExpirationTime$1) {
      prepareFreshStack(root, expirationTime);
      startWorkOnPendingInteractions(root, expirationTime);
    } // If we have a work-in-progress fiber, it means there's still work to do
    // in this root.


    if (workInProgress !== null) {
      var prevExecutionContext = executionContext;
      executionContext |= RenderContext;
      var prevDispatcher = pushDispatcher();
      var prevInteractions = pushInteractions(root);
      startWorkLoopTimer(workInProgress);

      do {
        try {
          workLoopConcurrent();
          break;
        } catch (thrownValue) {
          handleError(root, thrownValue);
        }
      } while (true);

      resetContextDependencies();
      executionContext = prevExecutionContext;
      popDispatcher(prevDispatcher);

      {
        popInteractions(prevInteractions);
      }

      if (workInProgressRootExitStatus === RootFatalErrored) {
        var fatalError = workInProgressRootFatalError;
        stopInterruptedWorkLoopTimer();
        prepareFreshStack(root, expirationTime);
        markRootSuspendedAtTime(root, expirationTime);
        ensureRootIsScheduled(root);
        throw fatalError;
      }

      if (workInProgress !== null) {
        // There's still work left over. Exit without committing.
        stopInterruptedWorkLoopTimer();
      } else {
        // We now have a consistent tree. The next step is either to commit it,
        // or, if something suspended, wait to commit it after a timeout.
        stopFinishedWorkLoopTimer();
        var finishedWork = root.finishedWork = root.current.alternate;
        root.finishedExpirationTime = expirationTime;
        finishConcurrentRender(root, finishedWork, workInProgressRootExitStatus, expirationTime);
      }

      ensureRootIsScheduled(root);

      if (root.callbackNode === originalCallbackNode) {
        // The task node scheduled for this root is the same one that's
        // currently executed. Need to return a continuation.
        return performConcurrentWorkOnRoot.bind(null, root);
      }
    }
  }

  return null;
}

function finishConcurrentRender(root, finishedWork, exitStatus, expirationTime) {
  // Set this to null to indicate there's no in-progress render.
  workInProgressRoot = null;

  switch (exitStatus) {
    case RootIncomplete:
    case RootFatalErrored:
      {
        {
          {
            throw Error( "Root did not complete. This is a bug in React." );
          }
        }
      }
    // Flow knows about invariant, so it complains if I add a break
    // statement, but eslint doesn't know about invariant, so it complains
    // if I do. eslint-disable-next-line no-fallthrough

    case RootErrored:
      {
        // If this was an async render, the error may have happened due to
        // a mutation in a concurrent event. Try rendering one more time,
        // synchronously, to see if the error goes away. If there are
        // lower priority updates, let's include those, too, in case they
        // fix the inconsistency. Render at Idle to include all updates.
        // If it was Idle or Never or some not-yet-invented time, render
        // at that time.
        markRootExpiredAtTime(root, expirationTime > Idle ? Idle : expirationTime); // We assume that this second render pass will be synchronous
        // and therefore not hit this path again.

        break;
      }

    case RootSuspended:
      {
        markRootSuspendedAtTime(root, expirationTime);
        var lastSuspendedTime = root.lastSuspendedTime;

        if (expirationTime === lastSuspendedTime) {
          root.nextKnownPendingLevel = getRemainingExpirationTime(finishedWork);
        } // We have an acceptable loading state. We need to figure out if we
        // should immediately commit it or wait a bit.
        // If we have processed new updates during this render, we may now
        // have a new loading state ready. We want to ensure that we commit
        // that as soon as possible.


        var hasNotProcessedNewUpdates = workInProgressRootLatestProcessedExpirationTime === Sync;

        if (hasNotProcessedNewUpdates && // do not delay if we're inside an act() scope
        !( IsThisRendererActing.current)) {
          // If we have not processed any new updates during this pass, then
          // this is either a retry of an existing fallback state or a
          // hidden tree. Hidden trees shouldn't be batched with other work
          // and after that's fixed it can only be a retry. We're going to
          // throttle committing retries so that we don't show too many
          // loading states too quickly.
          var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now(); // Don't bother with a very short suspense time.

          if (msUntilTimeout > 10) {
            if (workInProgressRootHasPendingPing) {
              var lastPingedTime = root.lastPingedTime;

              if (lastPingedTime === NoWork || lastPingedTime >= expirationTime) {
                // This render was pinged but we didn't get to restart
                // earlier so try restarting now instead.
                root.lastPingedTime = expirationTime;
                prepareFreshStack(root, expirationTime);
                break;
              }
            }

            var nextTime = getNextRootExpirationTimeToWorkOn(root);

            if (nextTime !== NoWork && nextTime !== expirationTime) {
              // There's additional work on this root.
              break;
            }

            if (lastSuspendedTime !== NoWork && lastSuspendedTime !== expirationTime) {
              // We should prefer to render the fallback of at the last
              // suspended level. Ping the last suspended level to try
              // rendering it again.
              root.lastPingedTime = lastSuspendedTime;
              break;
            } // The render is suspended, it hasn't timed out, and there's no
            // lower priority work to do. Instead of committing the fallback
            // immediately, wait for more data to arrive.


            root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root), msUntilTimeout);
            break;
          }
        } // The work expired. Commit immediately.


        commitRoot(root);
        break;
      }

    case RootSuspendedWithDelay:
      {
        markRootSuspendedAtTime(root, expirationTime);
        var _lastSuspendedTime = root.lastSuspendedTime;

        if (expirationTime === _lastSuspendedTime) {
          root.nextKnownPendingLevel = getRemainingExpirationTime(finishedWork);
        }

        if ( // do not delay if we're inside an act() scope
        !( IsThisRendererActing.current)) {
          // We're suspended in a state that should be avoided. We'll try to
          // avoid committing it for as long as the timeouts let us.
          if (workInProgressRootHasPendingPing) {
            var _lastPingedTime = root.lastPingedTime;

            if (_lastPingedTime === NoWork || _lastPingedTime >= expirationTime) {
              // This render was pinged but we didn't get to restart earlier
              // so try restarting now instead.
              root.lastPingedTime = expirationTime;
              prepareFreshStack(root, expirationTime);
              break;
            }
          }

          var _nextTime = getNextRootExpirationTimeToWorkOn(root);

          if (_nextTime !== NoWork && _nextTime !== expirationTime) {
            // There's additional work on this root.
            break;
          }

          if (_lastSuspendedTime !== NoWork && _lastSuspendedTime !== expirationTime) {
            // We should prefer to render the fallback of at the last
            // suspended level. Ping the last suspended level to try
            // rendering it again.
            root.lastPingedTime = _lastSuspendedTime;
            break;
          }

          var _msUntilTimeout;

          if (workInProgressRootLatestSuspenseTimeout !== Sync) {
            // We have processed a suspense config whose expiration time we
            // can use as the timeout.
            _msUntilTimeout = expirationTimeToMs(workInProgressRootLatestSuspenseTimeout) - now();
          } else if (workInProgressRootLatestProcessedExpirationTime === Sync) {
            // This should never normally happen because only new updates
            // cause delayed states, so we should have processed something.
            // However, this could also happen in an offscreen tree.
            _msUntilTimeout = 0;
          } else {
            // If we don't have a suspense config, we're going to use a
            // heuristic to determine how long we can suspend.
            var eventTimeMs = inferTimeFromExpirationTime(workInProgressRootLatestProcessedExpirationTime);
            var currentTimeMs = now();
            var timeUntilExpirationMs = expirationTimeToMs(expirationTime) - currentTimeMs;
            var timeElapsed = currentTimeMs - eventTimeMs;

            if (timeElapsed < 0) {
              // We get this wrong some time since we estimate the time.
              timeElapsed = 0;
            }

            _msUntilTimeout = jnd(timeElapsed) - timeElapsed; // Clamp the timeout to the expiration time. TODO: Once the
            // event time is exact instead of inferred from expiration time
            // we don't need this.

            if (timeUntilExpirationMs < _msUntilTimeout) {
              _msUntilTimeout = timeUntilExpirationMs;
            }
          } // Don't bother with a very short suspense time.


          if (_msUntilTimeout > 10) {
            // The render is suspended, it hasn't timed out, and there's no
            // lower priority work to do. Instead of committing the fallback
            // immediately, wait for more data to arrive.
            root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root), _msUntilTimeout);
            break;
          }
        } // The work expired. Commit immediately.


        commitRoot(root);
        break;
      }

    case RootCompleted:
      {
        // The work completed. Ready to commit.
        if ( // do not delay if we're inside an act() scope
        !( IsThisRendererActing.current) && workInProgressRootLatestProcessedExpirationTime !== Sync && workInProgressRootCanSuspendUsingConfig !== null) {
          // If we have exceeded the minimum loading delay, which probably
          // means we have shown a spinner already, we might have to suspend
          // a bit longer to ensure that the spinner is shown for
          // enough time.
          var _msUntilTimeout2 = computeMsUntilSuspenseLoadingDelay(workInProgressRootLatestProcessedExpirationTime, expirationTime, workInProgressRootCanSuspendUsingConfig);

          if (_msUntilTimeout2 > 10) {
            markRootSuspendedAtTime(root, expirationTime);
            root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root), _msUntilTimeout2);
            break;
          }
        }

        commitRoot(root);
        break;
      }

    default:
      {
        {
          {
            throw Error( "Unknown root exit status." );
          }
        }
      }
  }
} // This is the entry point for synchronous tasks that don't go
// through Scheduler


function performSyncWorkOnRoot(root) {
  // Check if there's expired work on this root. Otherwise, render at Sync.
  var lastExpiredTime = root.lastExpiredTime;
  var expirationTime = lastExpiredTime !== NoWork ? lastExpiredTime : Sync;

  if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
    {
      throw Error( "Should not already be working." );
    }
  }

  flushPassiveEffects(); // If the root or expiration time have changed, throw out the existing stack
  // and prepare a fresh one. Otherwise we'll continue where we left off.

  if (root !== workInProgressRoot || expirationTime !== renderExpirationTime$1) {
    prepareFreshStack(root, expirationTime);
    startWorkOnPendingInteractions(root, expirationTime);
  } // If we have a work-in-progress fiber, it means there's still work to do
  // in this root.


  if (workInProgress !== null) {
    var prevExecutionContext = executionContext;
    executionContext |= RenderContext;
    var prevDispatcher = pushDispatcher();
    var prevInteractions = pushInteractions(root);
    startWorkLoopTimer(workInProgress);

    do {
      try {
        workLoopSync();
        break;
      } catch (thrownValue) {
        handleError(root, thrownValue);
      }
    } while (true);

    resetContextDependencies();
    executionContext = prevExecutionContext;
    popDispatcher(prevDispatcher);

    {
      popInteractions(prevInteractions);
    }

    if (workInProgressRootExitStatus === RootFatalErrored) {
      var fatalError = workInProgressRootFatalError;
      stopInterruptedWorkLoopTimer();
      prepareFreshStack(root, expirationTime);
      markRootSuspendedAtTime(root, expirationTime);
      ensureRootIsScheduled(root);
      throw fatalError;
    }

    if (workInProgress !== null) {
      // This is a sync render, so we should have finished the whole tree.
      {
        {
          throw Error( "Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue." );
        }
      }
    } else {
      // We now have a consistent tree. Because this is a sync render, we
      // will commit it even if something suspended.
      stopFinishedWorkLoopTimer();
      root.finishedWork = root.current.alternate;
      root.finishedExpirationTime = expirationTime;
      finishSyncRender(root);
    } // Before exiting, make sure there's a callback scheduled for the next
    // pending level.


    ensureRootIsScheduled(root);
  }

  return null;
}

function finishSyncRender(root) {
  // Set this to null to indicate there's no in-progress render.
  workInProgressRoot = null;
  commitRoot(root);
}
function flushDiscreteUpdates() {
  // TODO: Should be able to flush inside batchedUpdates, but not inside `act`.
  // However, `act` uses `batchedUpdates`, so there's no way to distinguish
  // those two cases. Need to fix this before exposing flushDiscreteUpdates
  // as a public API.
  if ((executionContext & (BatchedContext | RenderContext | CommitContext)) !== NoContext) {
    {
      if ((executionContext & RenderContext) !== NoContext) {
        error('unstable_flushDiscreteUpdates: Cannot flush updates when React is ' + 'already rendering.');
      }
    } // We're already rendering, so we can't synchronously flush pending work.
    // This is probably a nested event dispatch triggered by a lifecycle/effect,
    // like `el.focus()`. Exit.


    return;
  }

  flushPendingDiscreteUpdates(); // If the discrete updates scheduled passive effects, flush them now so that
  // they fire before the next serial event.

  flushPassiveEffects();
}
function syncUpdates(fn, a, b, c) {
  return runWithPriority$1(ImmediatePriority, fn.bind(null, a, b, c));
}

function flushPendingDiscreteUpdates() {
  if (rootsWithPendingDiscreteUpdates !== null) {
    // For each root with pending discrete updates, schedule a callback to
    // immediately flush them.
    var roots = rootsWithPendingDiscreteUpdates;
    rootsWithPendingDiscreteUpdates = null;
    roots.forEach(function (expirationTime, root) {
      markRootExpiredAtTime(root, expirationTime);
      ensureRootIsScheduled(root);
    }); // Now flush the immediate queue.

    flushSyncCallbackQueue();
  }
}

function batchedUpdates$1(fn, a) {
  var prevExecutionContext = executionContext;
  executionContext |= BatchedContext;

  try {
    return fn(a);
  } finally {
    executionContext = prevExecutionContext;

    if (executionContext === NoContext) {
      // Flush the immediate callbacks that were scheduled during this batch
      flushSyncCallbackQueue();
    }
  }
}
function batchedEventUpdates$1(fn, a) {
  var prevExecutionContext = executionContext;
  executionContext |= EventContext;

  try {
    return fn(a);
  } finally {
    executionContext = prevExecutionContext;

    if (executionContext === NoContext) {
      // Flush the immediate callbacks that were scheduled during this batch
      flushSyncCallbackQueue();
    }
  }
}
function discreteUpdates$1(fn, a, b, c, d) {
  var prevExecutionContext = executionContext;
  executionContext |= DiscreteEventContext;

  try {
    // Should this
    return runWithPriority$1(UserBlockingPriority$1, fn.bind(null, a, b, c, d));
  } finally {
    executionContext = prevExecutionContext;

    if (executionContext === NoContext) {
      // Flush the immediate callbacks that were scheduled during this batch
      flushSyncCallbackQueue();
    }
  }
}
function unbatchedUpdates(fn, a) {
  var prevExecutionContext = executionContext;
  executionContext &= ~BatchedContext;
  executionContext |= LegacyUnbatchedContext;

  try {
    return fn(a);
  } finally {
    executionContext = prevExecutionContext;

    if (executionContext === NoContext) {
      // Flush the immediate callbacks that were scheduled during this batch
      flushSyncCallbackQueue();
    }
  }
}
function flushSync(fn, a) {
  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
    {
      {
        throw Error( "flushSync was called from inside a lifecycle method. It cannot be called when React is already rendering." );
      }
    }
  }

  var prevExecutionContext = executionContext;
  executionContext |= BatchedContext;

  try {
    return runWithPriority$1(ImmediatePriority, fn.bind(null, a));
  } finally {
    executionContext = prevExecutionContext; // Flush the immediate callbacks that were scheduled during this batch.
    // Note that this will happen even if batchedUpdates is higher up
    // the stack.

    flushSyncCallbackQueue();
  }
}

function prepareFreshStack(root, expirationTime) {
  root.finishedWork = null;
  root.finishedExpirationTime = NoWork;
  var timeoutHandle = root.timeoutHandle;

  if (timeoutHandle !== noTimeout) {
    // The root previous suspended and scheduled a timeout to commit a fallback
    // state. Now that we have additional work, cancel the timeout.
    root.timeoutHandle = noTimeout; // $FlowFixMe Complains noTimeout is not a TimeoutID, despite the check above

    cancelTimeout(timeoutHandle);
  }

  if (workInProgress !== null) {
    var interruptedWork = workInProgress.return;

    while (interruptedWork !== null) {
      unwindInterruptedWork(interruptedWork);
      interruptedWork = interruptedWork.return;
    }
  }

  workInProgressRoot = root;
  workInProgress = createWorkInProgress(root.current, null);
  renderExpirationTime$1 = expirationTime;
  workInProgressRootExitStatus = RootIncomplete;
  workInProgressRootFatalError = null;
  workInProgressRootLatestProcessedExpirationTime = Sync;
  workInProgressRootLatestSuspenseTimeout = Sync;
  workInProgressRootCanSuspendUsingConfig = null;
  workInProgressRootNextUnprocessedUpdateTime = NoWork;
  workInProgressRootHasPendingPing = false;

  {
    spawnedWorkDuringRender = null;
  }

  {
    ReactStrictModeWarnings.discardPendingWarnings();
  }
}

function handleError(root, thrownValue) {
  do {
    try {
      // Reset module-level state that was set during the render phase.
      resetContextDependencies();
      resetHooksAfterThrow();
      resetCurrentFiber();

      if (workInProgress === null || workInProgress.return === null) {
        // Expected to be working on a non-root fiber. This is a fatal error
        // because there's no ancestor that can handle it; the root is
        // supposed to capture all errors that weren't caught by an error
        // boundary.
        workInProgressRootExitStatus = RootFatalErrored;
        workInProgressRootFatalError = thrownValue; // Set `workInProgress` to null. This represents advancing to the next
        // sibling, or the parent if there are no siblings. But since the root
        // has no siblings nor a parent, we set it to null. Usually this is
        // handled by `completeUnitOfWork` or `unwindWork`, but since we're
        // interntionally not calling those, we need set it here.
        // TODO: Consider calling `unwindWork` to pop the contexts.

        workInProgress = null;
        return null;
      }

      if (enableProfilerTimer && workInProgress.mode & ProfileMode) {
        // Record the time spent rendering before an error was thrown. This
        // avoids inaccurate Profiler durations in the case of a
        // suspended render.
        stopProfilerTimerIfRunningAndRecordDelta(workInProgress, true);
      }

      throwException(root, workInProgress.return, workInProgress, thrownValue, renderExpirationTime$1);
      workInProgress = completeUnitOfWork(workInProgress);
    } catch (yetAnotherThrownValue) {
      // Something in the return path also threw.
      thrownValue = yetAnotherThrownValue;
      continue;
    } // Return to the normal work loop.


    return;
  } while (true);
}

function pushDispatcher(root) {
  var prevDispatcher = ReactCurrentDispatcher$1.current;
  ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;

  if (prevDispatcher === null) {
    // The React isomorphic package does not include a default dispatcher.
    // Instead the first renderer will lazily attach one, in order to give
    // nicer error messages.
    return ContextOnlyDispatcher;
  } else {
    return prevDispatcher;
  }
}

function popDispatcher(prevDispatcher) {
  ReactCurrentDispatcher$1.current = prevDispatcher;
}

function pushInteractions(root) {
  {
    var prevInteractions = tracing.__interactionsRef.current;
    tracing.__interactionsRef.current = root.memoizedInteractions;
    return prevInteractions;
  }
}

function popInteractions(prevInteractions) {
  {
    tracing.__interactionsRef.current = prevInteractions;
  }
}

function markCommitTimeOfFallback() {
  globalMostRecentFallbackTime = now();
}
function markRenderEventTimeAndConfig(expirationTime, suspenseConfig) {
  if (expirationTime < workInProgressRootLatestProcessedExpirationTime && expirationTime > Idle) {
    workInProgressRootLatestProcessedExpirationTime = expirationTime;
  }

  if (suspenseConfig !== null) {
    if (expirationTime < workInProgressRootLatestSuspenseTimeout && expirationTime > Idle) {
      workInProgressRootLatestSuspenseTimeout = expirationTime; // Most of the time we only have one config and getting wrong is not bad.

      workInProgressRootCanSuspendUsingConfig = suspenseConfig;
    }
  }
}
function markUnprocessedUpdateTime(expirationTime) {
  if (expirationTime > workInProgressRootNextUnprocessedUpdateTime) {
    workInProgressRootNextUnprocessedUpdateTime = expirationTime;
  }
}
function renderDidSuspend() {
  if (workInProgressRootExitStatus === RootIncomplete) {
    workInProgressRootExitStatus = RootSuspended;
  }
}
function renderDidSuspendDelayIfPossible() {
  if (workInProgressRootExitStatus === RootIncomplete || workInProgressRootExitStatus === RootSuspended) {
    workInProgressRootExitStatus = RootSuspendedWithDelay;
  } // Check if there's a lower priority update somewhere else in the tree.


  if (workInProgressRootNextUnprocessedUpdateTime !== NoWork && workInProgressRoot !== null) {
    // Mark the current render as suspended, and then mark that there's a
    // pending update.
    // TODO: This should immediately interrupt the current render, instead
    // of waiting until the next time we yield.
    markRootSuspendedAtTime(workInProgressRoot, renderExpirationTime$1);
    markRootUpdatedAtTime(workInProgressRoot, workInProgressRootNextUnprocessedUpdateTime);
  }
}
function renderDidError() {
  if (workInProgressRootExitStatus !== RootCompleted) {
    workInProgressRootExitStatus = RootErrored;
  }
} // Called during render to determine if anything has suspended.
// Returns false if we're not sure.

function renderHasNotSuspendedYet() {
  // If something errored or completed, we can't really be sure,
  // so those are false.
  return workInProgressRootExitStatus === RootIncomplete;
}

function inferTimeFromExpirationTime(expirationTime) {
  // We don't know exactly when the update was scheduled, but we can infer an
  // approximate start time from the expiration time.
  var earliestExpirationTimeMs = expirationTimeToMs(expirationTime);
  return earliestExpirationTimeMs - LOW_PRIORITY_EXPIRATION;
}

function inferTimeFromExpirationTimeWithSuspenseConfig(expirationTime, suspenseConfig) {
  // We don't know exactly when the update was scheduled, but we can infer an
  // approximate start time from the expiration time by subtracting the timeout
  // that was added to the event time.
  var earliestExpirationTimeMs = expirationTimeToMs(expirationTime);
  return earliestExpirationTimeMs - (suspenseConfig.timeoutMs | 0 || LOW_PRIORITY_EXPIRATION);
} // The work loop is an extremely hot path. Tell Closure not to inline it.

/** @noinline */


function workLoopSync() {
  // Already timed out, so perform work without checking if we need to yield.
  while (workInProgress !== null) {
    workInProgress = performUnitOfWork(workInProgress);
  }
}
/** @noinline */


function workLoopConcurrent() {
  // Perform work until Scheduler asks us to yield
  while (workInProgress !== null && !shouldYield()) {
    workInProgress = performUnitOfWork(workInProgress);
  }
}

function performUnitOfWork(unitOfWork) {
  // The current, flushed, state of this fiber is the alternate. Ideally
  // nothing should rely on this, but relying on it here means that we don't
  // need an additional field on the work in progress.
  var current = unitOfWork.alternate;
  startWorkTimer(unitOfWork);
  setCurrentFiber(unitOfWork);
  var next;

  if ( (unitOfWork.mode & ProfileMode) !== NoMode) {
    startProfilerTimer(unitOfWork);
    next = beginWork$1(current, unitOfWork, renderExpirationTime$1);
    stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
  } else {
    next = beginWork$1(current, unitOfWork, renderExpirationTime$1);
  }

  resetCurrentFiber();
  unitOfWork.memoizedProps = unitOfWork.pendingProps;

  if (next === null) {
    // If this doesn't spawn new work, complete the current work.
    next = completeUnitOfWork(unitOfWork);
  }

  ReactCurrentOwner$2.current = null;
  return next;
}

function completeUnitOfWork(unitOfWork) {
  // Attempt to complete the current unit of work, then move to the next
  // sibling. If there are no more siblings, return to the parent fiber.
  workInProgress = unitOfWork;

  do {
    // The current, flushed, state of this fiber is the alternate. Ideally
    // nothing should rely on this, but relying on it here means that we don't
    // need an additional field on the work in progress.
    var current = workInProgress.alternate;
    var returnFiber = workInProgress.return; // Check if the work completed or if something threw.

    if ((workInProgress.effectTag & Incomplete) === NoEffect) {
      setCurrentFiber(workInProgress);
      var next = void 0;

      if ( (workInProgress.mode & ProfileMode) === NoMode) {
        next = completeWork(current, workInProgress, renderExpirationTime$1);
      } else {
        startProfilerTimer(workInProgress);
        next = completeWork(current, workInProgress, renderExpirationTime$1); // Update render duration assuming we didn't error.

        stopProfilerTimerIfRunningAndRecordDelta(workInProgress, false);
      }

      stopWorkTimer(workInProgress);
      resetCurrentFiber();
      resetChildExpirationTime(workInProgress);

      if (next !== null) {
        // Completing this fiber spawned new work. Work on that next.
        return next;
      }

      if (returnFiber !== null && // Do not append effects to parents if a sibling failed to complete
      (returnFiber.effectTag & Incomplete) === NoEffect) {
        // Append all the effects of the subtree and this fiber onto the effect
        // list of the parent. The completion order of the children affects the
        // side-effect order.
        if (returnFiber.firstEffect === null) {
          returnFiber.firstEffect = workInProgress.firstEffect;
        }

        if (workInProgress.lastEffect !== null) {
          if (returnFiber.lastEffect !== null) {
            returnFiber.lastEffect.nextEffect = workInProgress.firstEffect;
          }

          returnFiber.lastEffect = workInProgress.lastEffect;
        } // If this fiber had side-effects, we append it AFTER the children's
        // side-effects. We can perform certain side-effects earlier if needed,
        // by doing multiple passes over the effect list. We don't want to
        // schedule our own side-effect on our own list because if end up
        // reusing children we'll schedule this effect onto itself since we're
        // at the end.


        var effectTag = workInProgress.effectTag; // Skip both NoWork and PerformedWork tags when creating the effect
        // list. PerformedWork effect is read by React DevTools but shouldn't be
        // committed.

        if (effectTag > PerformedWork) {
          if (returnFiber.lastEffect !== null) {
            returnFiber.lastEffect.nextEffect = workInProgress;
          } else {
            returnFiber.firstEffect = workInProgress;
          }

          returnFiber.lastEffect = workInProgress;
        }
      }
    } else {
      // This fiber did not complete because something threw. Pop values off
      // the stack without entering the complete phase. If this is a boundary,
      // capture values if possible.
      var _next = unwindWork(workInProgress); // Because this fiber did not complete, don't reset its expiration time.


      if ( (workInProgress.mode & ProfileMode) !== NoMode) {
        // Record the render duration for the fiber that errored.
        stopProfilerTimerIfRunningAndRecordDelta(workInProgress, false); // Include the time spent working on failed children before continuing.

        var actualDuration = workInProgress.actualDuration;
        var child = workInProgress.child;

        while (child !== null) {
          actualDuration += child.actualDuration;
          child = child.sibling;
        }

        workInProgress.actualDuration = actualDuration;
      }

      if (_next !== null) {
        // If completing this work spawned new work, do that next. We'll come
        // back here again.
        // Since we're restarting, remove anything that is not a host effect
        // from the effect tag.
        // TODO: The name stopFailedWorkTimer is misleading because Suspense
        // also captures and restarts.
        stopFailedWorkTimer(workInProgress);
        _next.effectTag &= HostEffectMask;
        return _next;
      }

      stopWorkTimer(workInProgress);

      if (returnFiber !== null) {
        // Mark the parent fiber as incomplete and clear its effect list.
        returnFiber.firstEffect = returnFiber.lastEffect = null;
        returnFiber.effectTag |= Incomplete;
      }
    }

    var siblingFiber = workInProgress.sibling;

    if (siblingFiber !== null) {
      // If there is more work to do in this returnFiber, do that next.
      return siblingFiber;
    } // Otherwise, return to the parent


    workInProgress = returnFiber;
  } while (workInProgress !== null); // We've reached the root.


  if (workInProgressRootExitStatus === RootIncomplete) {
    workInProgressRootExitStatus = RootCompleted;
  }

  return null;
}

function getRemainingExpirationTime(fiber) {
  var updateExpirationTime = fiber.expirationTime;
  var childExpirationTime = fiber.childExpirationTime;
  return updateExpirationTime > childExpirationTime ? updateExpirationTime : childExpirationTime;
}

function resetChildExpirationTime(completedWork) {
  if (renderExpirationTime$1 !== Never && completedWork.childExpirationTime === Never) {
    // The children of this component are hidden. Don't bubble their
    // expiration times.
    return;
  }

  var newChildExpirationTime = NoWork; // Bubble up the earliest expiration time.

  if ( (completedWork.mode & ProfileMode) !== NoMode) {
    // In profiling mode, resetChildExpirationTime is also used to reset
    // profiler durations.
    var actualDuration = completedWork.actualDuration;
    var treeBaseDuration = completedWork.selfBaseDuration; // When a fiber is cloned, its actualDuration is reset to 0. This value will
    // only be updated if work is done on the fiber (i.e. it doesn't bailout).
    // When work is done, it should bubble to the parent's actualDuration. If
    // the fiber has not been cloned though, (meaning no work was done), then
    // this value will reflect the amount of time spent working on a previous
    // render. In that case it should not bubble. We determine whether it was
    // cloned by comparing the child pointer.

    var shouldBubbleActualDurations = completedWork.alternate === null || completedWork.child !== completedWork.alternate.child;
    var child = completedWork.child;

    while (child !== null) {
      var childUpdateExpirationTime = child.expirationTime;
      var childChildExpirationTime = child.childExpirationTime;

      if (childUpdateExpirationTime > newChildExpirationTime) {
        newChildExpirationTime = childUpdateExpirationTime;
      }

      if (childChildExpirationTime > newChildExpirationTime) {
        newChildExpirationTime = childChildExpirationTime;
      }

      if (shouldBubbleActualDurations) {
        actualDuration += child.actualDuration;
      }

      treeBaseDuration += child.treeBaseDuration;
      child = child.sibling;
    }

    completedWork.actualDuration = actualDuration;
    completedWork.treeBaseDuration = treeBaseDuration;
  } else {
    var _child = completedWork.child;

    while (_child !== null) {
      var _childUpdateExpirationTime = _child.expirationTime;
      var _childChildExpirationTime = _child.childExpirationTime;

      if (_childUpdateExpirationTime > newChildExpirationTime) {
        newChildExpirationTime = _childUpdateExpirationTime;
      }

      if (_childChildExpirationTime > newChildExpirationTime) {
        newChildExpirationTime = _childChildExpirationTime;
      }

      _child = _child.sibling;
    }
  }

  completedWork.childExpirationTime = newChildExpirationTime;
}

function commitRoot(root) {
  var renderPriorityLevel = getCurrentPriorityLevel();
  runWithPriority$1(ImmediatePriority, commitRootImpl.bind(null, root, renderPriorityLevel));
  return null;
}

function commitRootImpl(root, renderPriorityLevel) {
  do {
    // `flushPassiveEffects` will call `flushSyncUpdateQueue` at the end, which
    // means `flushPassiveEffects` will sometimes result in additional
    // passive effects. So we need to keep flushing in a loop until there are
    // no more pending effects.
    // TODO: Might be better if `flushPassiveEffects` did not automatically
    // flush synchronous work at the end, to avoid factoring hazards like this.
    flushPassiveEffects();
  } while (rootWithPendingPassiveEffects !== null);

  flushRenderPhaseStrictModeWarningsInDEV();

  if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
    {
      throw Error( "Should not already be working." );
    }
  }

  var finishedWork = root.finishedWork;
  var expirationTime = root.finishedExpirationTime;

  if (finishedWork === null) {
    return null;
  }

  root.finishedWork = null;
  root.finishedExpirationTime = NoWork;

  if (!(finishedWork !== root.current)) {
    {
      throw Error( "Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue." );
    }
  } // commitRoot never returns a continuation; it always finishes synchronously.
  // So we can clear these now to allow a new callback to be scheduled.


  root.callbackNode = null;
  root.callbackExpirationTime = NoWork;
  root.callbackPriority = NoPriority;
  root.nextKnownPendingLevel = NoWork;
  startCommitTimer(); // Update the first and last pending times on this root. The new first
  // pending time is whatever is left on the root fiber.

  var remainingExpirationTimeBeforeCommit = getRemainingExpirationTime(finishedWork);
  markRootFinishedAtTime(root, expirationTime, remainingExpirationTimeBeforeCommit);

  if (root === workInProgressRoot) {
    // We can reset these now that they are finished.
    workInProgressRoot = null;
    workInProgress = null;
    renderExpirationTime$1 = NoWork;
  } // This indicates that the last root we worked on is not the same one that
  // we're committing now. This most commonly happens when a suspended root
  // times out.
  // Get the list of effects.


  var firstEffect;

  if (finishedWork.effectTag > PerformedWork) {
    // A fiber's effect list consists only of its children, not itself. So if
    // the root has an effect, we need to add it to the end of the list. The
    // resulting list is the set that would belong to the root's parent, if it
    // had one; that is, all the effects in the tree including the root.
    if (finishedWork.lastEffect !== null) {
      finishedWork.lastEffect.nextEffect = finishedWork;
      firstEffect = finishedWork.firstEffect;
    } else {
      firstEffect = finishedWork;
    }
  } else {
    // There is no effect on the root.
    firstEffect = finishedWork.firstEffect;
  }

  if (firstEffect !== null) {
    var prevExecutionContext = executionContext;
    executionContext |= CommitContext;
    var prevInteractions = pushInteractions(root); // Reset this to null before calling lifecycles

    ReactCurrentOwner$2.current = null; // The commit phase is broken into several sub-phases. We do a separate pass
    // of the effect list for each phase: all mutation effects come before all
    // layout effects, and so on.
    // The first phase a "before mutation" phase. We use this phase to read the
    // state of the host tree right before we mutate it. This is where
    // getSnapshotBeforeUpdate is called.

    startCommitSnapshotEffectsTimer();
    prepareForCommit(root.containerInfo);
    nextEffect = firstEffect;

    do {
      {
        invokeGuardedCallback(null, commitBeforeMutationEffects, null);

        if (hasCaughtError()) {
          if (!(nextEffect !== null)) {
            {
              throw Error( "Should be working on an effect." );
            }
          }

          var error = clearCaughtError();
          captureCommitPhaseError(nextEffect, error);
          nextEffect = nextEffect.nextEffect;
        }
      }
    } while (nextEffect !== null);

    stopCommitSnapshotEffectsTimer();

    {
      // Mark the current commit time to be shared by all Profilers in this
      // batch. This enables them to be grouped later.
      recordCommitTime();
    } // The next phase is the mutation phase, where we mutate the host tree.


    startCommitHostEffectsTimer();
    nextEffect = firstEffect;

    do {
      {
        invokeGuardedCallback(null, commitMutationEffects, null, root, renderPriorityLevel);

        if (hasCaughtError()) {
          if (!(nextEffect !== null)) {
            {
              throw Error( "Should be working on an effect." );
            }
          }

          var _error = clearCaughtError();

          captureCommitPhaseError(nextEffect, _error);
          nextEffect = nextEffect.nextEffect;
        }
      }
    } while (nextEffect !== null);

    stopCommitHostEffectsTimer();
    resetAfterCommit(root.containerInfo); // The work-in-progress tree is now the current tree. This must come after
    // the mutation phase, so that the previous tree is still current during
    // componentWillUnmount, but before the layout phase, so that the finished
    // work is current during componentDidMount/Update.

    root.current = finishedWork; // The next phase is the layout phase, where we call effects that read
    // the host tree after it's been mutated. The idiomatic use case for this is
    // layout, but class component lifecycles also fire here for legacy reasons.

    startCommitLifeCyclesTimer();
    nextEffect = firstEffect;

    do {
      {
        invokeGuardedCallback(null, commitLayoutEffects, null, root, expirationTime);

        if (hasCaughtError()) {
          if (!(nextEffect !== null)) {
            {
              throw Error( "Should be working on an effect." );
            }
          }

          var _error2 = clearCaughtError();

          captureCommitPhaseError(nextEffect, _error2);
          nextEffect = nextEffect.nextEffect;
        }
      }
    } while (nextEffect !== null);

    stopCommitLifeCyclesTimer();
    nextEffect = null; // Tell Scheduler to yield at the end of the frame, so the browser has an
    // opportunity to paint.

    requestPaint();

    {
      popInteractions(prevInteractions);
    }

    executionContext = prevExecutionContext;
  } else {
    // No effects.
    root.current = finishedWork; // Measure these anyway so the flamegraph explicitly shows that there were
    // no effects.
    // TODO: Maybe there's a better way to report this.

    startCommitSnapshotEffectsTimer();
    stopCommitSnapshotEffectsTimer();

    {
      recordCommitTime();
    }

    startCommitHostEffectsTimer();
    stopCommitHostEffectsTimer();
    startCommitLifeCyclesTimer();
    stopCommitLifeCyclesTimer();
  }

  stopCommitTimer();
  var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;

  if (rootDoesHavePassiveEffects) {
    // This commit has passive effects. Stash a reference to them. But don't
    // schedule a callback until after flushing layout work.
    rootDoesHavePassiveEffects = false;
    rootWithPendingPassiveEffects = root;
    pendingPassiveEffectsExpirationTime = expirationTime;
    pendingPassiveEffectsRenderPriority = renderPriorityLevel;
  } else {
    // We are done with the effect chain at this point so let's clear the
    // nextEffect pointers to assist with GC. If we have passive effects, we'll
    // clear this in flushPassiveEffects.
    nextEffect = firstEffect;

    while (nextEffect !== null) {
      var nextNextEffect = nextEffect.nextEffect;
      nextEffect.nextEffect = null;
      nextEffect = nextNextEffect;
    }
  } // Check if there's remaining work on this root


  var remainingExpirationTime = root.firstPendingTime;

  if (remainingExpirationTime !== NoWork) {
    {
      if (spawnedWorkDuringRender !== null) {
        var expirationTimes = spawnedWorkDuringRender;
        spawnedWorkDuringRender = null;

        for (var i = 0; i < expirationTimes.length; i++) {
          scheduleInteractions(root, expirationTimes[i], root.memoizedInteractions);
        }
      }

      schedulePendingInteractions(root, remainingExpirationTime);
    }
  } else {
    // If there's no remaining work, we can clear the set of already failed
    // error boundaries.
    legacyErrorBoundariesThatAlreadyFailed = null;
  }

  {
    if (!rootDidHavePassiveEffects) {
      // If there are no passive effects, then we can complete the pending interactions.
      // Otherwise, we'll wait until after the passive effects are flushed.
      // Wait to do this until after remaining work has been scheduled,
      // so that we don't prematurely signal complete for interactions when there's e.g. hidden work.
      finishPendingInteractions(root, expirationTime);
    }
  }

  if (remainingExpirationTime === Sync) {
    // Count the number of times the root synchronously re-renders without
    // finishing. If there are too many, it indicates an infinite update loop.
    if (root === rootWithNestedUpdates) {
      nestedUpdateCount++;
    } else {
      nestedUpdateCount = 0;
      rootWithNestedUpdates = root;
    }
  } else {
    nestedUpdateCount = 0;
  }

  onCommitRoot(finishedWork.stateNode, expirationTime); // Always call this before exiting `commitRoot`, to ensure that any
  // additional work on this root is scheduled.

  ensureRootIsScheduled(root);

  if (hasUncaughtError) {
    hasUncaughtError = false;
    var _error3 = firstUncaughtError;
    firstUncaughtError = null;
    throw _error3;
  }

  if ((executionContext & LegacyUnbatchedContext) !== NoContext) {
    // This is a legacy edge case. We just committed the initial mount of
    // a ReactDOM.render-ed root inside of batchedUpdates. The commit fired
    // synchronously, but layout updates should be deferred until the end
    // of the batch.
    return null;
  } // If layout work was scheduled, flush it now.


  flushSyncCallbackQueue();
  return null;
}

function commitBeforeMutationEffects() {
  while (nextEffect !== null) {
    var effectTag = nextEffect.effectTag;

    if ((effectTag & Snapshot) !== NoEffect) {
      setCurrentFiber(nextEffect);
      recordEffect();
      var current = nextEffect.alternate;
      commitBeforeMutationLifeCycles(current, nextEffect);
      resetCurrentFiber();
    }

    if ((effectTag & Passive) !== NoEffect) {
      // If there are passive effects, schedule a callback to flush at
      // the earliest opportunity.
      if (!rootDoesHavePassiveEffects) {
        rootDoesHavePassiveEffects = true;
        scheduleCallback(NormalPriority, function () {
          flushPassiveEffects();
          return null;
        });
      }
    }

    nextEffect = nextEffect.nextEffect;
  }
}

function commitMutationEffects(root, renderPriorityLevel) {
  // TODO: Should probably move the bulk of this function to commitWork.
  while (nextEffect !== null) {
    setCurrentFiber(nextEffect);
    var effectTag = nextEffect.effectTag;

    if (effectTag & ContentReset) {
      commitResetTextContent(nextEffect);
    }

    if (effectTag & Ref) {
      var current = nextEffect.alternate;

      if (current !== null) {
        commitDetachRef(current);
      }
    } // The following switch statement is only concerned about placement,
    // updates, and deletions. To avoid needing to add a case for every possible
    // bitmap value, we remove the secondary effects from the effect tag and
    // switch on that value.


    var primaryEffectTag = effectTag & (Placement | Update | Deletion | Hydrating);

    switch (primaryEffectTag) {
      case Placement:
        {
          commitPlacement(nextEffect); // Clear the "placement" from effect tag so that we know that this is
          // inserted, before any life-cycles like componentDidMount gets called.
          // TODO: findDOMNode doesn't rely on this any more but isMounted does
          // and isMounted is deprecated anyway so we should be able to kill this.

          nextEffect.effectTag &= ~Placement;
          break;
        }

      case PlacementAndUpdate:
        {
          // Placement
          commitPlacement(nextEffect); // Clear the "placement" from effect tag so that we know that this is
          // inserted, before any life-cycles like componentDidMount gets called.

          nextEffect.effectTag &= ~Placement; // Update

          var _current = nextEffect.alternate;
          commitWork(_current, nextEffect);
          break;
        }

      case Hydrating:
        {
          nextEffect.effectTag &= ~Hydrating;
          break;
        }

      case HydratingAndUpdate:
        {
          nextEffect.effectTag &= ~Hydrating; // Update

          var _current2 = nextEffect.alternate;
          commitWork(_current2, nextEffect);
          break;
        }

      case Update:
        {
          var _current3 = nextEffect.alternate;
          commitWork(_current3, nextEffect);
          break;
        }

      case Deletion:
        {
          commitDeletion(root, nextEffect, renderPriorityLevel);
          break;
        }
    } // TODO: Only record a mutation effect if primaryEffectTag is non-zero.


    recordEffect();
    resetCurrentFiber();
    nextEffect = nextEffect.nextEffect;
  }
}

function commitLayoutEffects(root, committedExpirationTime) {
  // TODO: Should probably move the bulk of this function to commitWork.
  while (nextEffect !== null) {
    setCurrentFiber(nextEffect);
    var effectTag = nextEffect.effectTag;

    if (effectTag & (Update | Callback)) {
      recordEffect();
      var current = nextEffect.alternate;
      commitLifeCycles(root, current, nextEffect);
    }

    if (effectTag & Ref) {
      recordEffect();
      commitAttachRef(nextEffect);
    }

    resetCurrentFiber();
    nextEffect = nextEffect.nextEffect;
  }
}

function flushPassiveEffects() {
  if (pendingPassiveEffectsRenderPriority !== NoPriority) {
    var priorityLevel = pendingPassiveEffectsRenderPriority > NormalPriority ? NormalPriority : pendingPassiveEffectsRenderPriority;
    pendingPassiveEffectsRenderPriority = NoPriority;
    return runWithPriority$1(priorityLevel, flushPassiveEffectsImpl);
  }
}

function flushPassiveEffectsImpl() {
  if (rootWithPendingPassiveEffects === null) {
    return false;
  }

  var root = rootWithPendingPassiveEffects;
  var expirationTime = pendingPassiveEffectsExpirationTime;
  rootWithPendingPassiveEffects = null;
  pendingPassiveEffectsExpirationTime = NoWork;

  if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
    {
      throw Error( "Cannot flush passive effects while already rendering." );
    }
  }

  var prevExecutionContext = executionContext;
  executionContext |= CommitContext;
  var prevInteractions = pushInteractions(root);

  {
    // Note: This currently assumes there are no passive effects on the root fiber
    // because the root is not part of its own effect list.
    // This could change in the future.
    var _effect2 = root.current.firstEffect;

    while (_effect2 !== null) {
      {
        setCurrentFiber(_effect2);
        invokeGuardedCallback(null, commitPassiveHookEffects, null, _effect2);

        if (hasCaughtError()) {
          if (!(_effect2 !== null)) {
            {
              throw Error( "Should be working on an effect." );
            }
          }

          var _error5 = clearCaughtError();

          captureCommitPhaseError(_effect2, _error5);
        }

        resetCurrentFiber();
      }

      var nextNextEffect = _effect2.nextEffect; // Remove nextEffect pointer to assist GC

      _effect2.nextEffect = null;
      _effect2 = nextNextEffect;
    }
  }

  {
    popInteractions(prevInteractions);
    finishPendingInteractions(root, expirationTime);
  }

  executionContext = prevExecutionContext;
  flushSyncCallbackQueue(); // If additional passive effects were scheduled, increment a counter. If this
  // exceeds the limit, we'll fire a warning.

  nestedPassiveUpdateCount = rootWithPendingPassiveEffects === null ? 0 : nestedPassiveUpdateCount + 1;
  return true;
}

function isAlreadyFailedLegacyErrorBoundary(instance) {
  return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
}
function markLegacyErrorBoundaryAsFailed(instance) {
  if (legacyErrorBoundariesThatAlreadyFailed === null) {
    legacyErrorBoundariesThatAlreadyFailed = new Set([instance]);
  } else {
    legacyErrorBoundariesThatAlreadyFailed.add(instance);
  }
}

function prepareToThrowUncaughtError(error) {
  if (!hasUncaughtError) {
    hasUncaughtError = true;
    firstUncaughtError = error;
  }
}

var onUncaughtError = prepareToThrowUncaughtError;

function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error) {
  var errorInfo = createCapturedValue(error, sourceFiber);
  var update = createRootErrorUpdate(rootFiber, errorInfo, Sync);
  enqueueUpdate(rootFiber, update);
  var root = markUpdateTimeFromFiberToRoot(rootFiber, Sync);

  if (root !== null) {
    ensureRootIsScheduled(root);
    schedulePendingInteractions(root, Sync);
  }
}

function captureCommitPhaseError(sourceFiber, error) {
  if (sourceFiber.tag === HostRoot) {
    // Error was thrown at the root. There is no parent, so the root
    // itself should capture it.
    captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error);
    return;
  }

  var fiber = sourceFiber.return;

  while (fiber !== null) {
    if (fiber.tag === HostRoot) {
      captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error);
      return;
    } else if (fiber.tag === ClassComponent) {
      var ctor = fiber.type;
      var instance = fiber.stateNode;

      if (typeof ctor.getDerivedStateFromError === 'function' || typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance)) {
        var errorInfo = createCapturedValue(error, sourceFiber);
        var update = createClassErrorUpdate(fiber, errorInfo, // TODO: This is always sync
        Sync);
        enqueueUpdate(fiber, update);
        var root = markUpdateTimeFromFiberToRoot(fiber, Sync);

        if (root !== null) {
          ensureRootIsScheduled(root);
          schedulePendingInteractions(root, Sync);
        }

        return;
      }
    }

    fiber = fiber.return;
  }
}
function pingSuspendedRoot(root, thenable, suspendedTime) {
  var pingCache = root.pingCache;

  if (pingCache !== null) {
    // The thenable resolved, so we no longer need to memoize, because it will
    // never be thrown again.
    pingCache.delete(thenable);
  }

  if (workInProgressRoot === root && renderExpirationTime$1 === suspendedTime) {
    // Received a ping at the same priority level at which we're currently
    // rendering. We might want to restart this render. This should mirror
    // the logic of whether or not a root suspends once it completes.
    // TODO: If we're rendering sync either due to Sync, Batched or expired,
    // we should probably never restart.
    // If we're suspended with delay, we'll always suspend so we can always
    // restart. If we're suspended without any updates, it might be a retry.
    // If it's early in the retry we can restart. We can't know for sure
    // whether we'll eventually process an update during this render pass,
    // but it's somewhat unlikely that we get to a ping before that, since
    // getting to the root most update is usually very fast.
    if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && workInProgressRootLatestProcessedExpirationTime === Sync && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {
      // Restart from the root. Don't need to schedule a ping because
      // we're already working on this tree.
      prepareFreshStack(root, renderExpirationTime$1);
    } else {
      // Even though we can't restart right now, we might get an
      // opportunity later. So we mark this render as having a ping.
      workInProgressRootHasPendingPing = true;
    }

    return;
  }

  if (!isRootSuspendedAtTime(root, suspendedTime)) {
    // The root is no longer suspended at this time.
    return;
  }

  var lastPingedTime = root.lastPingedTime;

  if (lastPingedTime !== NoWork && lastPingedTime < suspendedTime) {
    // There's already a lower priority ping scheduled.
    return;
  } // Mark the time at which this ping was scheduled.


  root.lastPingedTime = suspendedTime;

  ensureRootIsScheduled(root);
  schedulePendingInteractions(root, suspendedTime);
}

function retryTimedOutBoundary(boundaryFiber, retryTime) {
  // The boundary fiber (a Suspense component or SuspenseList component)
  // previously was rendered in its fallback state. One of the promises that
  // suspended it has resolved, which means at least part of the tree was
  // likely unblocked. Try rendering again, at a new expiration time.
  if (retryTime === NoWork) {
    var suspenseConfig = null; // Retries don't carry over the already committed update.

    var currentTime = requestCurrentTimeForUpdate();
    retryTime = computeExpirationForFiber(currentTime, boundaryFiber, suspenseConfig);
  } // TODO: Special case idle priority?


  var root = markUpdateTimeFromFiberToRoot(boundaryFiber, retryTime);

  if (root !== null) {
    ensureRootIsScheduled(root);
    schedulePendingInteractions(root, retryTime);
  }
}
function resolveRetryThenable(boundaryFiber, thenable) {
  var retryTime = NoWork; // Default

  var retryCache;

  {
    retryCache = boundaryFiber.stateNode;
  }

  if (retryCache !== null) {
    // The thenable resolved, so we no longer need to memoize, because it will
    // never be thrown again.
    retryCache.delete(thenable);
  }

  retryTimedOutBoundary(boundaryFiber, retryTime);
} // Computes the next Just Noticeable Difference (JND) boundary.
// The theory is that a person can't tell the difference between small differences in time.
// Therefore, if we wait a bit longer than necessary that won't translate to a noticeable
// difference in the experience. However, waiting for longer might mean that we can avoid
// showing an intermediate loading state. The longer we have already waited, the harder it
// is to tell small differences in time. Therefore, the longer we've already waited,
// the longer we can wait additionally. At some point we have to give up though.
// We pick a train model where the next boundary commits at a consistent schedule.
// These particular numbers are vague estimates. We expect to adjust them based on research.

function jnd(timeElapsed) {
  return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3000 ? 3000 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
}

function computeMsUntilSuspenseLoadingDelay(mostRecentEventTime, committedExpirationTime, suspenseConfig) {
  var busyMinDurationMs = suspenseConfig.busyMinDurationMs | 0;

  if (busyMinDurationMs <= 0) {
    return 0;
  }

  var busyDelayMs = suspenseConfig.busyDelayMs | 0; // Compute the time until this render pass would expire.

  var currentTimeMs = now();
  var eventTimeMs = inferTimeFromExpirationTimeWithSuspenseConfig(mostRecentEventTime, suspenseConfig);
  var timeElapsed = currentTimeMs - eventTimeMs;

  if (timeElapsed <= busyDelayMs) {
    // If we haven't yet waited longer than the initial delay, we don't
    // have to wait any additional time.
    return 0;
  }

  var msUntilTimeout = busyDelayMs + busyMinDurationMs - timeElapsed; // This is the value that is passed to `setTimeout`.

  return msUntilTimeout;
}

function checkForNestedUpdates() {
  if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
    nestedUpdateCount = 0;
    rootWithNestedUpdates = null;

    {
      {
        throw Error( "Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops." );
      }
    }
  }

  {
    if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
      nestedPassiveUpdateCount = 0;

      error('Maximum update depth exceeded. This can happen when a component ' + "calls setState inside useEffect, but useEffect either doesn't " + 'have a dependency array, or one of the dependencies changes on ' + 'every render.');
    }
  }
}

function flushRenderPhaseStrictModeWarningsInDEV() {
  {
    ReactStrictModeWarnings.flushLegacyContextWarning();

    {
      ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
    }
  }
}

function stopFinishedWorkLoopTimer() {
  var didCompleteRoot = true;
  stopWorkLoopTimer(interruptedBy, didCompleteRoot);
  interruptedBy = null;
}

function stopInterruptedWorkLoopTimer() {
  // TODO: Track which fiber caused the interruption.
  var didCompleteRoot = false;
  stopWorkLoopTimer(interruptedBy, didCompleteRoot);
  interruptedBy = null;
}

function checkForInterruption(fiberThatReceivedUpdate, updateExpirationTime) {
  if ( workInProgressRoot !== null && updateExpirationTime > renderExpirationTime$1) {
    interruptedBy = fiberThatReceivedUpdate;
  }
}

var didWarnStateUpdateForUnmountedComponent = null;

function warnAboutUpdateOnUnmountedFiberInDEV(fiber) {
  {
    var tag = fiber.tag;

    if (tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent && tag !== Block) {
      // Only warn for user-defined components, not internal ones like Suspense.
      return;
    }
    // the problematic code almost always lies inside that component.


    var componentName = getComponentName(fiber.type) || 'ReactComponent';

    if (didWarnStateUpdateForUnmountedComponent !== null) {
      if (didWarnStateUpdateForUnmountedComponent.has(componentName)) {
        return;
      }

      didWarnStateUpdateForUnmountedComponent.add(componentName);
    } else {
      didWarnStateUpdateForUnmountedComponent = new Set([componentName]);
    }

    error("Can't perform a React state update on an unmounted component. This " + 'is a no-op, but it indicates a memory leak in your application. To ' + 'fix, cancel all subscriptions and asynchronous tasks in %s.%s', tag === ClassComponent ? 'the componentWillUnmount method' : 'a useEffect cleanup function', getStackByFiberInDevAndProd(fiber));
  }
}

var beginWork$1;

{
  var dummyFiber = null;

  beginWork$1 = function (current, unitOfWork, expirationTime) {
    // If a component throws an error, we replay it again in a synchronously
    // dispatched event, so that the debugger will treat it as an uncaught
    // error See ReactErrorUtils for more information.
    // Before entering the begin phase, copy the work-in-progress onto a dummy
    // fiber. If beginWork throws, we'll use this to reset the state.
    var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);

    try {
      return beginWork(current, unitOfWork, expirationTime);
    } catch (originalError) {
      if (originalError !== null && typeof originalError === 'object' && typeof originalError.then === 'function') {
        // Don't replay promises. Treat everything else like an error.
        throw originalError;
      } // Keep this code in sync with handleError; any changes here must have
      // corresponding changes there.


      resetContextDependencies();
      resetHooksAfterThrow(); // Don't reset current debug fiber, since we're about to work on the
      // same fiber again.
      // Unwind the failed stack frame

      unwindInterruptedWork(unitOfWork); // Restore the original properties of the fiber.

      assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);

      if ( unitOfWork.mode & ProfileMode) {
        // Reset the profiler timer.
        startProfilerTimer(unitOfWork);
      } // Run beginWork again.


      invokeGuardedCallback(null, beginWork, null, current, unitOfWork, expirationTime);

      if (hasCaughtError()) {
        var replayError = clearCaughtError(); // `invokeGuardedCallback` sometimes sets an expando `_suppressLogging`.
        // Rethrow this error instead of the original one.

        throw replayError;
      } else {
        // This branch is reachable if the render phase is impure.
        throw originalError;
      }
    }
  };
}

var didWarnAboutUpdateInRender = false;
var didWarnAboutUpdateInRenderForAnotherComponent;

{
  didWarnAboutUpdateInRenderForAnotherComponent = new Set();
}

function warnAboutRenderPhaseUpdatesInDEV(fiber) {
  {
    if (isRendering && (executionContext & RenderContext) !== NoContext) {
      switch (fiber.tag) {
        case FunctionComponent:
        case ForwardRef:
        case SimpleMemoComponent:
          {
            var renderingComponentName = workInProgress && getComponentName(workInProgress.type) || 'Unknown'; // Dedupe by the rendering component because it's the one that needs to be fixed.

            var dedupeKey = renderingComponentName;

            if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
              didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
              var setStateComponentName = getComponentName(fiber.type) || 'Unknown';

              error('Cannot update a component (`%s`) while rendering a ' + 'different component (`%s`). To locate the bad setState() call inside `%s`, ' + 'follow the stack trace as described in https://fb.me/setstate-in-render', setStateComponentName, renderingComponentName, renderingComponentName);
            }

            break;
          }

        case ClassComponent:
          {
            if (!didWarnAboutUpdateInRender) {
              error('Cannot update during an existing state transition (such as ' + 'within `render`). Render methods should be a pure ' + 'function of props and state.');

              didWarnAboutUpdateInRender = true;
            }

            break;
          }
      }
    }
  }
} // a 'shared' variable that changes when act() opens/closes in tests.


var IsThisRendererActing = {
  current: false
};
function warnIfNotScopedWithMatchingAct(fiber) {
  {
    if ( IsSomeRendererActing.current === true && IsThisRendererActing.current !== true) {
      error("It looks like you're using the wrong act() around your test interactions.\n" + 'Be sure to use the matching version of act() corresponding to your renderer:\n\n' + '// for react-dom:\n' + "import {act} from 'react-dom/test-utils';\n" + '// ...\n' + 'act(() => ...);\n\n' + '// for react-test-renderer:\n' + "import TestRenderer from 'react-test-renderer';\n" + 'const {act} = TestRenderer;\n' + '// ...\n' + 'act(() => ...);' + '%s', getStackByFiberInDevAndProd(fiber));
    }
  }
}
function warnIfNotCurrentlyActingEffectsInDEV(fiber) {
  {
    if ( (fiber.mode & StrictMode) !== NoMode && IsSomeRendererActing.current === false && IsThisRendererActing.current === false) {
      error('An update to %s ran an effect, but was not wrapped in act(...).\n\n' + 'When testing, code that causes React state updates should be ' + 'wrapped into act(...):\n\n' + 'act(() => {\n' + '  /* fire events that update state */\n' + '});\n' + '/* assert on the output */\n\n' + "This ensures that you're testing the behavior the user would see " + 'in the browser.' + ' Learn more at https://fb.me/react-wrap-tests-with-act' + '%s', getComponentName(fiber.type), getStackByFiberInDevAndProd(fiber));
    }
  }
}

function warnIfNotCurrentlyActingUpdatesInDEV(fiber) {
  {
    if ( executionContext === NoContext && IsSomeRendererActing.current === false && IsThisRendererActing.current === false) {
      error('An update to %s inside a test was not wrapped in act(...).\n\n' + 'When testing, code that causes React state updates should be ' + 'wrapped into act(...):\n\n' + 'act(() => {\n' + '  /* fire events that update state */\n' + '});\n' + '/* assert on the output */\n\n' + "This ensures that you're testing the behavior the user would see " + 'in the browser.' + ' Learn more at https://fb.me/react-wrap-tests-with-act' + '%s', getComponentName(fiber.type), getStackByFiberInDevAndProd(fiber));
    }
  }
}

var warnIfNotCurrentlyActingUpdatesInDev = warnIfNotCurrentlyActingUpdatesInDEV; // In tests, we want to enforce a mocked scheduler.

var didWarnAboutUnmockedScheduler = false; // TODO Before we release concurrent mode, revisit this and decide whether a mocked
// scheduler is the actual recommendation. The alternative could be a testing build,
// a new lib, or whatever; we dunno just yet. This message is for early adopters
// to get their tests right.

function warnIfUnmockedScheduler(fiber) {
  {
    if (didWarnAboutUnmockedScheduler === false && Scheduler.unstable_flushAllWithoutAsserting === undefined) {
      if (fiber.mode & BlockingMode || fiber.mode & ConcurrentMode) {
        didWarnAboutUnmockedScheduler = true;

        error('In Concurrent or Sync modes, the "scheduler" module needs to be mocked ' + 'to guarantee consistent behaviour across tests and browsers. ' + 'For example, with jest: \n' + "jest.mock('scheduler', () => require('scheduler/unstable_mock'));\n\n" + 'For more info, visit https://fb.me/react-mock-scheduler');
      }
    }
  }
}

function computeThreadID(root, expirationTime) {
  // Interaction threads are unique per root and expiration time.
  return expirationTime * 1000 + root.interactionThreadID;
}

function markSpawnedWork(expirationTime) {

  if (spawnedWorkDuringRender === null) {
    spawnedWorkDuringRender = [expirationTime];
  } else {
    spawnedWorkDuringRender.push(expirationTime);
  }
}

function scheduleInteractions(root, expirationTime, interactions) {

  if (interactions.size > 0) {
    var pendingInteractionMap = root.pendingInteractionMap;
    var pendingInteractions = pendingInteractionMap.get(expirationTime);

    if (pendingInteractions != null) {
      interactions.forEach(function (interaction) {
        if (!pendingInteractions.has(interaction)) {
          // Update the pending async work count for previously unscheduled interaction.
          interaction.__count++;
        }

        pendingInteractions.add(interaction);
      });
    } else {
      pendingInteractionMap.set(expirationTime, new Set(interactions)); // Update the pending async work count for the current interactions.

      interactions.forEach(function (interaction) {
        interaction.__count++;
      });
    }

    var subscriber = tracing.__subscriberRef.current;

    if (subscriber !== null) {
      var threadID = computeThreadID(root, expirationTime);
      subscriber.onWorkScheduled(interactions, threadID);
    }
  }
}

function schedulePendingInteractions(root, expirationTime) {

  scheduleInteractions(root, expirationTime, tracing.__interactionsRef.current);
}

function startWorkOnPendingInteractions(root, expirationTime) {
  // we can accurately attribute time spent working on it, And so that cascading
  // work triggered during the render phase will be associated with it.


  var interactions = new Set();
  root.pendingInteractionMap.forEach(function (scheduledInteractions, scheduledExpirationTime) {
    if (scheduledExpirationTime >= expirationTime) {
      scheduledInteractions.forEach(function (interaction) {
        return interactions.add(interaction);
      });
    }
  }); // Store the current set of interactions on the FiberRoot for a few reasons:
  // We can re-use it in hot functions like performConcurrentWorkOnRoot()
  // without having to recalculate it. We will also use it in commitWork() to
  // pass to any Profiler onRender() hooks. This also provides DevTools with a
  // way to access it when the onCommitRoot() hook is called.

  root.memoizedInteractions = interactions;

  if (interactions.size > 0) {
    var subscriber = tracing.__subscriberRef.current;

    if (subscriber !== null) {
      var threadID = computeThreadID(root, expirationTime);

      try {
        subscriber.onWorkStarted(interactions, threadID);
      } catch (error) {
        // If the subscriber throws, rethrow it in a separate task
        scheduleCallback(ImmediatePriority, function () {
          throw error;
        });
      }
    }
  }
}

function finishPendingInteractions(root, committedExpirationTime) {

  var earliestRemainingTimeAfterCommit = root.firstPendingTime;
  var subscriber;

  try {
    subscriber = tracing.__subscriberRef.current;

    if (subscriber !== null && root.memoizedInteractions.size > 0) {
      var threadID = computeThreadID(root, committedExpirationTime);
      subscriber.onWorkStopped(root.memoizedInteractions, threadID);
    }
  } catch (error) {
    // If the subscriber throws, rethrow it in a separate task
    scheduleCallback(ImmediatePriority, function () {
      throw error;
    });
  } finally {
    // Clear completed interactions from the pending Map.
    // Unless the render was suspended or cascading work was scheduled,
    // In which case– leave pending interactions until the subsequent render.
    var pendingInteractionMap = root.pendingInteractionMap;
    pendingInteractionMap.forEach(function (scheduledInteractions, scheduledExpirationTime) {
      // Only decrement the pending interaction count if we're done.
      // If there's still work at the current priority,
      // That indicates that we are waiting for suspense data.
      if (scheduledExpirationTime > earliestRemainingTimeAfterCommit) {
        pendingInteractionMap.delete(scheduledExpirationTime);
        scheduledInteractions.forEach(function (interaction) {
          interaction.__count--;

          if (subscriber !== null && interaction.__count === 0) {
            try {
              subscriber.onInteractionScheduledWorkCompleted(interaction);
            } catch (error) {
              // If the subscriber throws, rethrow it in a separate task
              scheduleCallback(ImmediatePriority, function () {
                throw error;
              });
            }
          }
        });
      }
    });
  }
}

var onScheduleFiberRoot = null;
var onCommitFiberRoot = null;
var onCommitFiberUnmount = null;
var hasLoggedError = false;
var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined';
function injectInternals(internals) {
  if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
    // No DevTools
    return false;
  }

  var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;

  if (hook.isDisabled) {
    // This isn't a real property on the hook, but it can be set to opt out
    // of DevTools integration and associated warnings and logs.
    // https://github.com/facebook/react/issues/3877
    return true;
  }

  if (!hook.supportsFiber) {
    {
      error('The installed version of React DevTools is too old and will not work ' + 'with the current version of React. Please update React DevTools. ' + 'https://fb.me/react-devtools');
    } // DevTools exists, even though it doesn't support Fiber.


    return true;
  }

  try {
    var rendererID = hook.inject(internals); // We have successfully injected, so now it is safe to set up hooks.

    if (true) {
      // Only used by Fast Refresh
      if (typeof hook.onScheduleFiberRoot === 'function') {
        onScheduleFiberRoot = function (root, children) {
          try {
            hook.onScheduleFiberRoot(rendererID, root, children);
          } catch (err) {
            if ( true && !hasLoggedError) {
              hasLoggedError = true;

              error('React instrumentation encountered an error: %s', err);
            }
          }
        };
      }
    }

    onCommitFiberRoot = function (root, expirationTime) {
      try {
        var didError = (root.current.effectTag & DidCapture) === DidCapture;

        if (enableProfilerTimer) {
          var currentTime = getCurrentTime();
          var priorityLevel = inferPriorityFromExpirationTime(currentTime, expirationTime);
          hook.onCommitFiberRoot(rendererID, root, priorityLevel, didError);
        } else {
          hook.onCommitFiberRoot(rendererID, root, undefined, didError);
        }
      } catch (err) {
        if (true) {
          if (!hasLoggedError) {
            hasLoggedError = true;

            error('React instrumentation encountered an error: %s', err);
          }
        }
      }
    };

    onCommitFiberUnmount = function (fiber) {
      try {
        hook.onCommitFiberUnmount(rendererID, fiber);
      } catch (err) {
        if (true) {
          if (!hasLoggedError) {
            hasLoggedError = true;

            error('React instrumentation encountered an error: %s', err);
          }
        }
      }
    };
  } catch (err) {
    // Catch all errors because it is unsafe to throw during initialization.
    {
      error('React instrumentation encountered an error: %s.', err);
    }
  } // DevTools exists


  return true;
}
function onScheduleRoot(root, children) {
  if (typeof onScheduleFiberRoot === 'function') {
    onScheduleFiberRoot(root, children);
  }
}
function onCommitRoot(root, expirationTime) {
  if (typeof onCommitFiberRoot === 'function') {
    onCommitFiberRoot(root, expirationTime);
  }
}
function onCommitUnmount(fiber) {
  if (typeof onCommitFiberUnmount === 'function') {
    onCommitFiberUnmount(fiber);
  }
}

var hasBadMapPolyfill;

{
  hasBadMapPolyfill = false;

  try {
    var nonExtensibleObject = Object.preventExtensions({});
    var testMap = new Map([[nonExtensibleObject, null]]);
    var testSet = new Set([nonExtensibleObject]); // This is necessary for Rollup to not consider these unused.
    // https://github.com/rollup/rollup/issues/1771
    // TODO: we can remove these if Rollup fixes the bug.

    testMap.set(0, 0);
    testSet.add(0);
  } catch (e) {
    // TODO: Consider warning about bad polyfills
    hasBadMapPolyfill = true;
  }
}

var debugCounter = 1;

function FiberNode(tag, pendingProps, key, mode) {
  // Instance
  this.tag = tag;
  this.key = key;
  this.elementType = null;
  this.type = null;
  this.stateNode = null; // Fiber

  this.return = null;
  this.child = null;
  this.sibling = null;
  this.index = 0;
  this.ref = null;
  this.pendingProps = pendingProps;
  this.memoizedProps = null;
  this.updateQueue = null;
  this.memoizedState = null;
  this.dependencies = null;
  this.mode = mode; // Effects

  this.effectTag = NoEffect;
  this.nextEffect = null;
  this.firstEffect = null;
  this.lastEffect = null;
  this.expirationTime = NoWork;
  this.childExpirationTime = NoWork;
  this.alternate = null;

  {
    // Note: The following is done to avoid a v8 performance cliff.
    //
    // Initializing the fields below to smis and later updating them with
    // double values will cause Fibers to end up having separate shapes.
    // This behavior/bug has something to do with Object.preventExtension().
    // Fortunately this only impacts DEV builds.
    // Unfortunately it makes React unusably slow for some applications.
    // To work around this, initialize the fields below with doubles.
    //
    // Learn more about this here:
    // https://github.com/facebook/react/issues/14365
    // https://bugs.chromium.org/p/v8/issues/detail?id=8538
    this.actualDuration = Number.NaN;
    this.actualStartTime = Number.NaN;
    this.selfBaseDuration = Number.NaN;
    this.treeBaseDuration = Number.NaN; // It's okay to replace the initial doubles with smis after initialization.
    // This won't trigger the performance cliff mentioned above,
    // and it simplifies other profiler code (including DevTools).

    this.actualDuration = 0;
    this.actualStartTime = -1;
    this.selfBaseDuration = 0;
    this.treeBaseDuration = 0;
  } // This is normally DEV-only except www when it adds listeners.
  // TODO: remove the User Timing integration in favor of Root Events.


  {
    this._debugID = debugCounter++;
    this._debugIsCurrentlyTiming = false;
  }

  {
    this._debugSource = null;
    this._debugOwner = null;
    this._debugNeedsRemount = false;
    this._debugHookTypes = null;

    if (!hasBadMapPolyfill && typeof Object.preventExtensions === 'function') {
      Object.preventExtensions(this);
    }
  }
} // This is a constructor function, rather than a POJO constructor, still
// please ensure we do the following:
// 1) Nobody should add any instance methods on this. Instance methods can be
//    more difficult to predict when they get optimized and they are almost
//    never inlined properly in static compilers.
// 2) Nobody should rely on `instanceof Fiber` for type testing. We should
//    always know when it is a fiber.
// 3) We might want to experiment with using numeric keys since they are easier
//    to optimize in a non-JIT environment.
// 4) We can easily go from a constructor to a createFiber object literal if that
//    is faster.
// 5) It should be easy to port this to a C struct and keep a C implementation
//    compatible.


var createFiber = function (tag, pendingProps, key, mode) {
  // $FlowFixMe: the shapes are exact here but Flow doesn't like constructors
  return new FiberNode(tag, pendingProps, key, mode);
};

function shouldConstruct(Component) {
  var prototype = Component.prototype;
  return !!(prototype && prototype.isReactComponent);
}

function isSimpleFunctionComponent(type) {
  return typeof type === 'function' && !shouldConstruct(type) && type.defaultProps === undefined;
}
function resolveLazyComponentTag(Component) {
  if (typeof Component === 'function') {
    return shouldConstruct(Component) ? ClassComponent : FunctionComponent;
  } else if (Component !== undefined && Component !== null) {
    var $$typeof = Component.$$typeof;

    if ($$typeof === REACT_FORWARD_REF_TYPE) {
      return ForwardRef;
    }

    if ($$typeof === REACT_MEMO_TYPE) {
      return MemoComponent;
    }
  }

  return IndeterminateComponent;
} // This is used to create an alternate fiber to do work on.

function createWorkInProgress(current, pendingProps) {
  var workInProgress = current.alternate;

  if (workInProgress === null) {
    // We use a double buffering pooling technique because we know that we'll
    // only ever need at most two versions of a tree. We pool the "other" unused
    // node that we're free to reuse. This is lazily created to avoid allocating
    // extra objects for things that are never updated. It also allow us to
    // reclaim the extra memory if needed.
    workInProgress = createFiber(current.tag, pendingProps, current.key, current.mode);
    workInProgress.elementType = current.elementType;
    workInProgress.type = current.type;
    workInProgress.stateNode = current.stateNode;

    {
      // DEV-only fields
      {
        workInProgress._debugID = current._debugID;
      }

      workInProgress._debugSource = current._debugSource;
      workInProgress._debugOwner = current._debugOwner;
      workInProgress._debugHookTypes = current._debugHookTypes;
    }

    workInProgress.alternate = current;
    current.alternate = workInProgress;
  } else {
    workInProgress.pendingProps = pendingProps; // We already have an alternate.
    // Reset the effect tag.

    workInProgress.effectTag = NoEffect; // The effect list is no longer valid.

    workInProgress.nextEffect = null;
    workInProgress.firstEffect = null;
    workInProgress.lastEffect = null;

    {
      // We intentionally reset, rather than copy, actualDuration & actualStartTime.
      // This prevents time from endlessly accumulating in new commits.
      // This has the downside of resetting values for different priority renders,
      // But works for yielding (the common case) and should support resuming.
      workInProgress.actualDuration = 0;
      workInProgress.actualStartTime = -1;
    }
  }

  workInProgress.childExpirationTime = current.childExpirationTime;
  workInProgress.expirationTime = current.expirationTime;
  workInProgress.child = current.child;
  workInProgress.memoizedProps = current.memoizedProps;
  workInProgress.memoizedState = current.memoizedState;
  workInProgress.updateQueue = current.updateQueue; // Clone the dependencies object. This is mutated during the render phase, so
  // it cannot be shared with the current fiber.

  var currentDependencies = current.dependencies;
  workInProgress.dependencies = currentDependencies === null ? null : {
    expirationTime: currentDependencies.expirationTime,
    firstContext: currentDependencies.firstContext,
    responders: currentDependencies.responders
  }; // These will be overridden during the parent's reconciliation

  workInProgress.sibling = current.sibling;
  workInProgress.index = current.index;
  workInProgress.ref = current.ref;

  {
    workInProgress.selfBaseDuration = current.selfBaseDuration;
    workInProgress.treeBaseDuration = current.treeBaseDuration;
  }

  {
    workInProgress._debugNeedsRemount = current._debugNeedsRemount;

    switch (workInProgress.tag) {
      case IndeterminateComponent:
      case FunctionComponent:
      case SimpleMemoComponent:
        workInProgress.type = resolveFunctionForHotReloading(current.type);
        break;

      case ClassComponent:
        workInProgress.type = resolveClassForHotReloading(current.type);
        break;

      case ForwardRef:
        workInProgress.type = resolveForwardRefForHotReloading(current.type);
        break;
    }
  }

  return workInProgress;
} // Used to reuse a Fiber for a second pass.

function resetWorkInProgress(workInProgress, renderExpirationTime) {
  // This resets the Fiber to what createFiber or createWorkInProgress would
  // have set the values to before during the first pass. Ideally this wouldn't
  // be necessary but unfortunately many code paths reads from the workInProgress
  // when they should be reading from current and writing to workInProgress.
  // We assume pendingProps, index, key, ref, return are still untouched to
  // avoid doing another reconciliation.
  // Reset the effect tag but keep any Placement tags, since that's something
  // that child fiber is setting, not the reconciliation.
  workInProgress.effectTag &= Placement; // The effect list is no longer valid.

  workInProgress.nextEffect = null;
  workInProgress.firstEffect = null;
  workInProgress.lastEffect = null;
  var current = workInProgress.alternate;

  if (current === null) {
    // Reset to createFiber's initial values.
    workInProgress.childExpirationTime = NoWork;
    workInProgress.expirationTime = renderExpirationTime;
    workInProgress.child = null;
    workInProgress.memoizedProps = null;
    workInProgress.memoizedState = null;
    workInProgress.updateQueue = null;
    workInProgress.dependencies = null;

    {
      // Note: We don't reset the actualTime counts. It's useful to accumulate
      // actual time across multiple render passes.
      workInProgress.selfBaseDuration = 0;
      workInProgress.treeBaseDuration = 0;
    }
  } else {
    // Reset to the cloned values that createWorkInProgress would've.
    workInProgress.childExpirationTime = current.childExpirationTime;
    workInProgress.expirationTime = current.expirationTime;
    workInProgress.child = current.child;
    workInProgress.memoizedProps = current.memoizedProps;
    workInProgress.memoizedState = current.memoizedState;
    workInProgress.updateQueue = current.updateQueue; // Clone the dependencies object. This is mutated during the render phase, so
    // it cannot be shared with the current fiber.

    var currentDependencies = current.dependencies;
    workInProgress.dependencies = currentDependencies === null ? null : {
      expirationTime: currentDependencies.expirationTime,
      firstContext: currentDependencies.firstContext,
      responders: currentDependencies.responders
    };

    {
      // Note: We don't reset the actualTime counts. It's useful to accumulate
      // actual time across multiple render passes.
      workInProgress.selfBaseDuration = current.selfBaseDuration;
      workInProgress.treeBaseDuration = current.treeBaseDuration;
    }
  }

  return workInProgress;
}
function createHostRootFiber(tag) {
  var mode;

  if (tag === ConcurrentRoot) {
    mode = ConcurrentMode | BlockingMode | StrictMode;
  } else if (tag === BlockingRoot) {
    mode = BlockingMode | StrictMode;
  } else {
    mode = NoMode;
  }

  if ( isDevToolsPresent) {
    // Always collect profile timings when DevTools are present.
    // This enables DevTools to start capturing timing at any point–
    // Without some nodes in the tree having empty base times.
    mode |= ProfileMode;
  }

  return createFiber(HostRoot, null, null, mode);
}
function createFiberFromTypeAndProps(type, // React$ElementType
key, pendingProps, owner, mode, expirationTime) {
  var fiber;
  var fiberTag = IndeterminateComponent; // The resolved type is set if we know what the final type will be. I.e. it's not lazy.

  var resolvedType = type;

  if (typeof type === 'function') {
    if (shouldConstruct(type)) {
      fiberTag = ClassComponent;

      {
        resolvedType = resolveClassForHotReloading(resolvedType);
      }
    } else {
      {
        resolvedType = resolveFunctionForHotReloading(resolvedType);
      }
    }
  } else if (typeof type === 'string') {
    fiberTag = HostComponent;
  } else {
    getTag: switch (type) {
      case REACT_FRAGMENT_TYPE:
        return createFiberFromFragment(pendingProps.children, mode, expirationTime, key);

      case REACT_CONCURRENT_MODE_TYPE:
        fiberTag = Mode;
        mode |= ConcurrentMode | BlockingMode | StrictMode;
        break;

      case REACT_STRICT_MODE_TYPE:
        fiberTag = Mode;
        mode |= StrictMode;
        break;

      case REACT_PROFILER_TYPE:
        return createFiberFromProfiler(pendingProps, mode, expirationTime, key);

      case REACT_SUSPENSE_TYPE:
        return createFiberFromSuspense(pendingProps, mode, expirationTime, key);

      case REACT_SUSPENSE_LIST_TYPE:
        return createFiberFromSuspenseList(pendingProps, mode, expirationTime, key);

      default:
        {
          if (typeof type === 'object' && type !== null) {
            switch (type.$$typeof) {
              case REACT_PROVIDER_TYPE:
                fiberTag = ContextProvider;
                break getTag;

              case REACT_CONTEXT_TYPE:
                // This is a consumer
                fiberTag = ContextConsumer;
                break getTag;

              case REACT_FORWARD_REF_TYPE:
                fiberTag = ForwardRef;

                {
                  resolvedType = resolveForwardRefForHotReloading(resolvedType);
                }

                break getTag;

              case REACT_MEMO_TYPE:
                fiberTag = MemoComponent;
                break getTag;

              case REACT_LAZY_TYPE:
                fiberTag = LazyComponent;
                resolvedType = null;
                break getTag;

              case REACT_BLOCK_TYPE:
                fiberTag = Block;
                break getTag;

            }
          }

          var info = '';

          {
            if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
              info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and " + 'named imports.';
            }

            var ownerName = owner ? getComponentName(owner.type) : null;

            if (ownerName) {
              info += '\n\nCheck the render method of `' + ownerName + '`.';
            }
          }

          {
            {
              throw Error( "Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: " + (type == null ? type : typeof type) + "." + info );
            }
          }
        }
    }
  }

  fiber = createFiber(fiberTag, pendingProps, key, mode);
  fiber.elementType = type;
  fiber.type = resolvedType;
  fiber.expirationTime = expirationTime;
  return fiber;
}
function createFiberFromElement(element, mode, expirationTime) {
  var owner = null;

  {
    owner = element._owner;
  }

  var type = element.type;
  var key = element.key;
  var pendingProps = element.props;
  var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, expirationTime);

  {
    fiber._debugSource = element._source;
    fiber._debugOwner = element._owner;
  }

  return fiber;
}
function createFiberFromFragment(elements, mode, expirationTime, key) {
  var fiber = createFiber(Fragment, elements, key, mode);
  fiber.expirationTime = expirationTime;
  return fiber;
}

function createFiberFromProfiler(pendingProps, mode, expirationTime, key) {
  {
    if (typeof pendingProps.id !== 'string' || typeof pendingProps.onRender !== 'function') {
      error('Profiler must specify an "id" string and "onRender" function as props');
    }
  }

  var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode); // TODO: The Profiler fiber shouldn't have a type. It has a tag.

  fiber.elementType = REACT_PROFILER_TYPE;
  fiber.type = REACT_PROFILER_TYPE;
  fiber.expirationTime = expirationTime;
  return fiber;
}

function createFiberFromSuspense(pendingProps, mode, expirationTime, key) {
  var fiber = createFiber(SuspenseComponent, pendingProps, key, mode); // TODO: The SuspenseComponent fiber shouldn't have a type. It has a tag.
  // This needs to be fixed in getComponentName so that it relies on the tag
  // instead.

  fiber.type = REACT_SUSPENSE_TYPE;
  fiber.elementType = REACT_SUSPENSE_TYPE;
  fiber.expirationTime = expirationTime;
  return fiber;
}
function createFiberFromSuspenseList(pendingProps, mode, expirationTime, key) {
  var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);

  {
    // TODO: The SuspenseListComponent fiber shouldn't have a type. It has a tag.
    // This needs to be fixed in getComponentName so that it relies on the tag
    // instead.
    fiber.type = REACT_SUSPENSE_LIST_TYPE;
  }

  fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
  fiber.expirationTime = expirationTime;
  return fiber;
}
function createFiberFromText(content, mode, expirationTime) {
  var fiber = createFiber(HostText, content, null, mode);
  fiber.expirationTime = expirationTime;
  return fiber;
}
function createFiberFromHostInstanceForDeletion() {
  var fiber = createFiber(HostComponent, null, null, NoMode); // TODO: These should not need a type.

  fiber.elementType = 'DELETED';
  fiber.type = 'DELETED';
  return fiber;
}
function createFiberFromPortal(portal, mode, expirationTime) {
  var pendingProps = portal.children !== null ? portal.children : [];
  var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
  fiber.expirationTime = expirationTime;
  fiber.stateNode = {
    containerInfo: portal.containerInfo,
    pendingChildren: null,
    // Used by persistent updates
    implementation: portal.implementation
  };
  return fiber;
} // Used for stashing WIP properties to replay failed work in DEV.

function assignFiberPropertiesInDEV(target, source) {
  if (target === null) {
    // This Fiber's initial properties will always be overwritten.
    // We only use a Fiber to ensure the same hidden class so DEV isn't slow.
    target = createFiber(IndeterminateComponent, null, null, NoMode);
  } // This is intentionally written as a list of all properties.
  // We tried to use Object.assign() instead but this is called in
  // the hottest path, and Object.assign() was too slow:
  // https://github.com/facebook/react/issues/12502
  // This code is DEV-only so size is not a concern.


  target.tag = source.tag;
  target.key = source.key;
  target.elementType = source.elementType;
  target.type = source.type;
  target.stateNode = source.stateNode;
  target.return = source.return;
  target.child = source.child;
  target.sibling = source.sibling;
  target.index = source.index;
  target.ref = source.ref;
  target.pendingProps = source.pendingProps;
  target.memoizedProps = source.memoizedProps;
  target.updateQueue = source.updateQueue;
  target.memoizedState = source.memoizedState;
  target.dependencies = source.dependencies;
  target.mode = source.mode;
  target.effectTag = source.effectTag;
  target.nextEffect = source.nextEffect;
  target.firstEffect = source.firstEffect;
  target.lastEffect = source.lastEffect;
  target.expirationTime = source.expirationTime;
  target.childExpirationTime = source.childExpirationTime;
  target.alternate = source.alternate;

  {
    target.actualDuration = source.actualDuration;
    target.actualStartTime = source.actualStartTime;
    target.selfBaseDuration = source.selfBaseDuration;
    target.treeBaseDuration = source.treeBaseDuration;
  }

  {
    target._debugID = source._debugID;
  }

  target._debugSource = source._debugSource;
  target._debugOwner = source._debugOwner;
  target._debugIsCurrentlyTiming = source._debugIsCurrentlyTiming;
  target._debugNeedsRemount = source._debugNeedsRemount;
  target._debugHookTypes = source._debugHookTypes;
  return target;
}

function FiberRootNode(containerInfo, tag, hydrate) {
  this.tag = tag;
  this.current = null;
  this.containerInfo = containerInfo;
  this.pendingChildren = null;
  this.pingCache = null;
  this.finishedExpirationTime = NoWork;
  this.finishedWork = null;
  this.timeoutHandle = noTimeout;
  this.context = null;
  this.pendingContext = null;
  this.hydrate = hydrate;
  this.callbackNode = null;
  this.callbackPriority = NoPriority;
  this.firstPendingTime = NoWork;
  this.firstSuspendedTime = NoWork;
  this.lastSuspendedTime = NoWork;
  this.nextKnownPendingLevel = NoWork;
  this.lastPingedTime = NoWork;
  this.lastExpiredTime = NoWork;

  {
    this.interactionThreadID = tracing.unstable_getThreadID();
    this.memoizedInteractions = new Set();
    this.pendingInteractionMap = new Map();
  }
}

function createFiberRoot(containerInfo, tag, hydrate, hydrationCallbacks) {
  var root = new FiberRootNode(containerInfo, tag, hydrate);
  // stateNode is any.


  var uninitializedFiber = createHostRootFiber(tag);
  root.current = uninitializedFiber;
  uninitializedFiber.stateNode = root;
  initializeUpdateQueue(uninitializedFiber);
  return root;
}
function isRootSuspendedAtTime(root, expirationTime) {
  var firstSuspendedTime = root.firstSuspendedTime;
  var lastSuspendedTime = root.lastSuspendedTime;
  return firstSuspendedTime !== NoWork && firstSuspendedTime >= expirationTime && lastSuspendedTime <= expirationTime;
}
function markRootSuspendedAtTime(root, expirationTime) {
  var firstSuspendedTime = root.firstSuspendedTime;
  var lastSuspendedTime = root.lastSuspendedTime;

  if (firstSuspendedTime < expirationTime) {
    root.firstSuspendedTime = expirationTime;
  }

  if (lastSuspendedTime > expirationTime || firstSuspendedTime === NoWork) {
    root.lastSuspendedTime = expirationTime;
  }

  if (expirationTime <= root.lastPingedTime) {
    root.lastPingedTime = NoWork;
  }

  if (expirationTime <= root.lastExpiredTime) {
    root.lastExpiredTime = NoWork;
  }
}
function markRootUpdatedAtTime(root, expirationTime) {
  // Update the range of pending times
  var firstPendingTime = root.firstPendingTime;

  if (expirationTime > firstPendingTime) {
    root.firstPendingTime = expirationTime;
  } // Update the range of suspended times. Treat everything lower priority or
  // equal to this update as unsuspended.


  var firstSuspendedTime = root.firstSuspendedTime;

  if (firstSuspendedTime !== NoWork) {
    if (expirationTime >= firstSuspendedTime) {
      // The entire suspended range is now unsuspended.
      root.firstSuspendedTime = root.lastSuspendedTime = root.nextKnownPendingLevel = NoWork;
    } else if (expirationTime >= root.lastSuspendedTime) {
      root.lastSuspendedTime = expirationTime + 1;
    } // This is a pending level. Check if it's higher priority than the next
    // known pending level.


    if (expirationTime > root.nextKnownPendingLevel) {
      root.nextKnownPendingLevel = expirationTime;
    }
  }
}
function markRootFinishedAtTime(root, finishedExpirationTime, remainingExpirationTime) {
  // Update the range of pending times
  root.firstPendingTime = remainingExpirationTime; // Update the range of suspended times. Treat everything higher priority or
  // equal to this update as unsuspended.

  if (finishedExpirationTime <= root.lastSuspendedTime) {
    // The entire suspended range is now unsuspended.
    root.firstSuspendedTime = root.lastSuspendedTime = root.nextKnownPendingLevel = NoWork;
  } else if (finishedExpirationTime <= root.firstSuspendedTime) {
    // Part of the suspended range is now unsuspended. Narrow the range to
    // include everything between the unsuspended time (non-inclusive) and the
    // last suspended time.
    root.firstSuspendedTime = finishedExpirationTime - 1;
  }

  if (finishedExpirationTime <= root.lastPingedTime) {
    // Clear the pinged time
    root.lastPingedTime = NoWork;
  }

  if (finishedExpirationTime <= root.lastExpiredTime) {
    // Clear the expired time
    root.lastExpiredTime = NoWork;
  }
}
function markRootExpiredAtTime(root, expirationTime) {
  var lastExpiredTime = root.lastExpiredTime;

  if (lastExpiredTime === NoWork || lastExpiredTime > expirationTime) {
    root.lastExpiredTime = expirationTime;
  }
}

var didWarnAboutNestedUpdates;
var didWarnAboutFindNodeInStrictMode;

{
  didWarnAboutNestedUpdates = false;
  didWarnAboutFindNodeInStrictMode = {};
}

function getContextForSubtree(parentComponent) {
  if (!parentComponent) {
    return emptyContextObject;
  }

  var fiber = get(parentComponent);
  var parentContext = findCurrentUnmaskedContext(fiber);

  if (fiber.tag === ClassComponent) {
    var Component = fiber.type;

    if (isContextProvider(Component)) {
      return processChildContext(fiber, Component, parentContext);
    }
  }

  return parentContext;
}

function findHostInstanceWithWarning(component, methodName) {
  {
    var fiber = get(component);

    if (fiber === undefined) {
      if (typeof component.render === 'function') {
        {
          {
            throw Error( "Unable to find node on an unmounted component." );
          }
        }
      } else {
        {
          {
            throw Error( "Argument appears to not be a ReactComponent. Keys: " + Object.keys(component) );
          }
        }
      }
    }

    var hostFiber = findCurrentHostFiber(fiber);

    if (hostFiber === null) {
      return null;
    }

    if (hostFiber.mode & StrictMode) {
      var componentName = getComponentName(fiber.type) || 'Component';

      if (!didWarnAboutFindNodeInStrictMode[componentName]) {
        didWarnAboutFindNodeInStrictMode[componentName] = true;

        if (fiber.mode & StrictMode) {
          error('%s is deprecated in StrictMode. ' + '%s was passed an instance of %s which is inside StrictMode. ' + 'Instead, add a ref directly to the element you want to reference. ' + 'Learn more about using refs safely here: ' + 'https://fb.me/react-strict-mode-find-node%s', methodName, methodName, componentName, getStackByFiberInDevAndProd(hostFiber));
        } else {
          error('%s is deprecated in StrictMode. ' + '%s was passed an instance of %s which renders StrictMode children. ' + 'Instead, add a ref directly to the element you want to reference. ' + 'Learn more about using refs safely here: ' + 'https://fb.me/react-strict-mode-find-node%s', methodName, methodName, componentName, getStackByFiberInDevAndProd(hostFiber));
        }
      }
    }

    return hostFiber.stateNode;
  }
}

function createContainer(containerInfo, tag, hydrate, hydrationCallbacks) {
  return createFiberRoot(containerInfo, tag, hydrate);
}
function updateContainer(element, container, parentComponent, callback) {
  {
    onScheduleRoot(container, element);
  }

  var current$1 = container.current;
  var currentTime = requestCurrentTimeForUpdate();

  {
    // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
    if ('undefined' !== typeof jest) {
      warnIfUnmockedScheduler(current$1);
      warnIfNotScopedWithMatchingAct(current$1);
    }
  }

  var suspenseConfig = requestCurrentSuspenseConfig();
  var expirationTime = computeExpirationForFiber(currentTime, current$1, suspenseConfig);
  var context = getContextForSubtree(parentComponent);

  if (container.context === null) {
    container.context = context;
  } else {
    container.pendingContext = context;
  }

  {
    if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
      didWarnAboutNestedUpdates = true;

      error('Render methods should be a pure function of props and state; ' + 'triggering nested component updates from render is not allowed. ' + 'If necessary, trigger nested updates in componentDidUpdate.\n\n' + 'Check the render method of %s.', getComponentName(current.type) || 'Unknown');
    }
  }

  var update = createUpdate(expirationTime, suspenseConfig); // Caution: React DevTools currently depends on this property
  // being called "element".

  update.payload = {
    element: element
  };
  callback = callback === undefined ? null : callback;

  if (callback !== null) {
    {
      if (typeof callback !== 'function') {
        error('render(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callback);
      }
    }

    update.callback = callback;
  }

  enqueueUpdate(current$1, update);
  scheduleWork(current$1, expirationTime);
  return expirationTime;
}
function getPublicRootInstance(container) {
  var containerFiber = container.current;

  if (!containerFiber.child) {
    return null;
  }

  switch (containerFiber.child.tag) {
    case HostComponent:
      return getPublicInstance(containerFiber.child.stateNode);

    default:
      return containerFiber.child.stateNode;
  }
}

function markRetryTimeImpl(fiber, retryTime) {
  var suspenseState = fiber.memoizedState;

  if (suspenseState !== null && suspenseState.dehydrated !== null) {
    if (suspenseState.retryTime < retryTime) {
      suspenseState.retryTime = retryTime;
    }
  }
} // Increases the priority of thennables when they resolve within this boundary.


function markRetryTimeIfNotHydrated(fiber, retryTime) {
  markRetryTimeImpl(fiber, retryTime);
  var alternate = fiber.alternate;

  if (alternate) {
    markRetryTimeImpl(alternate, retryTime);
  }
}

function attemptUserBlockingHydration$1(fiber) {
  if (fiber.tag !== SuspenseComponent) {
    // We ignore HostRoots here because we can't increase
    // their priority and they should not suspend on I/O,
    // since you have to wrap anything that might suspend in
    // Suspense.
    return;
  }

  var expTime = computeInteractiveExpiration(requestCurrentTimeForUpdate());
  scheduleWork(fiber, expTime);
  markRetryTimeIfNotHydrated(fiber, expTime);
}
function attemptContinuousHydration$1(fiber) {
  if (fiber.tag !== SuspenseComponent) {
    // We ignore HostRoots here because we can't increase
    // their priority and they should not suspend on I/O,
    // since you have to wrap anything that might suspend in
    // Suspense.
    return;
  }

  scheduleWork(fiber, ContinuousHydration);
  markRetryTimeIfNotHydrated(fiber, ContinuousHydration);
}
function attemptHydrationAtCurrentPriority$1(fiber) {
  if (fiber.tag !== SuspenseComponent) {
    // We ignore HostRoots here because we can't increase
    // their priority other than synchronously flush it.
    return;
  }

  var currentTime = requestCurrentTimeForUpdate();
  var expTime = computeExpirationForFiber(currentTime, fiber, null);
  scheduleWork(fiber, expTime);
  markRetryTimeIfNotHydrated(fiber, expTime);
}
function findHostInstanceWithNoPortals(fiber) {
  var hostFiber = findCurrentHostFiberWithNoPortals(fiber);

  if (hostFiber === null) {
    return null;
  }

  if (hostFiber.tag === FundamentalComponent) {
    return hostFiber.stateNode.instance;
  }

  return hostFiber.stateNode;
}

var shouldSuspendImpl = function (fiber) {
  return false;
};

function shouldSuspend(fiber) {
  return shouldSuspendImpl(fiber);
}
var overrideHookState = null;
var overrideProps = null;
var scheduleUpdate = null;
var setSuspenseHandler = null;

{
  var copyWithSetImpl = function (obj, path, idx, value) {
    if (idx >= path.length) {
      return value;
    }

    var key = path[idx];
    var updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj); // $FlowFixMe number or string is fine here

    updated[key] = copyWithSetImpl(obj[key], path, idx + 1, value);
    return updated;
  };

  var copyWithSet = function (obj, path, value) {
    return copyWithSetImpl(obj, path, 0, value);
  }; // Support DevTools editable values for useState and useReducer.


  overrideHookState = function (fiber, id, path, value) {
    // For now, the "id" of stateful hooks is just the stateful hook index.
    // This may change in the future with e.g. nested hooks.
    var currentHook = fiber.memoizedState;

    while (currentHook !== null && id > 0) {
      currentHook = currentHook.next;
      id--;
    }

    if (currentHook !== null) {
      var newState = copyWithSet(currentHook.memoizedState, path, value);
      currentHook.memoizedState = newState;
      currentHook.baseState = newState; // We aren't actually adding an update to the queue,
      // because there is no update we can add for useReducer hooks that won't trigger an error.
      // (There's no appropriate action type for DevTools overrides.)
      // As a result though, React will see the scheduled update as a noop and bailout.
      // Shallow cloning props works as a workaround for now to bypass the bailout check.

      fiber.memoizedProps = _assign({}, fiber.memoizedProps);
      scheduleWork(fiber, Sync);
    }
  }; // Support DevTools props for function components, forwardRef, memo, host components, etc.


  overrideProps = function (fiber, path, value) {
    fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);

    if (fiber.alternate) {
      fiber.alternate.pendingProps = fiber.pendingProps;
    }

    scheduleWork(fiber, Sync);
  };

  scheduleUpdate = function (fiber) {
    scheduleWork(fiber, Sync);
  };

  setSuspenseHandler = function (newShouldSuspendImpl) {
    shouldSuspendImpl = newShouldSuspendImpl;
  };
}

function injectIntoDevTools(devToolsConfig) {
  var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
  var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
  return injectInternals(_assign({}, devToolsConfig, {
    overrideHookState: overrideHookState,
    overrideProps: overrideProps,
    setSuspenseHandler: setSuspenseHandler,
    scheduleUpdate: scheduleUpdate,
    currentDispatcherRef: ReactCurrentDispatcher,
    findHostInstanceByFiber: function (fiber) {
      var hostFiber = findCurrentHostFiber(fiber);

      if (hostFiber === null) {
        return null;
      }

      return hostFiber.stateNode;
    },
    findFiberByHostInstance: function (instance) {
      if (!findFiberByHostInstance) {
        // Might not be implemented by the renderer.
        return null;
      }

      return findFiberByHostInstance(instance);
    },
    // React Refresh
    findHostInstancesForRefresh:  findHostInstancesForRefresh ,
    scheduleRefresh:  scheduleRefresh ,
    scheduleRoot:  scheduleRoot ,
    setRefreshHandler:  setRefreshHandler ,
    // Enables DevTools to append owner stacks to error messages in DEV mode.
    getCurrentFiber:  function () {
      return current;
    }
  }));
}
var IsSomeRendererActing$1 = ReactSharedInternals.IsSomeRendererActing;

function ReactDOMRoot(container, options) {
  this._internalRoot = createRootImpl(container, ConcurrentRoot, options);
}

function ReactDOMBlockingRoot(container, tag, options) {
  this._internalRoot = createRootImpl(container, tag, options);
}

ReactDOMRoot.prototype.render = ReactDOMBlockingRoot.prototype.render = function (children) {
  var root = this._internalRoot;

  {
    if (typeof arguments[1] === 'function') {
      error('render(...): does not support the second callback argument. ' + 'To execute a side effect after rendering, declare it in a component body with useEffect().');
    }

    var container = root.containerInfo;

    if (container.nodeType !== COMMENT_NODE) {
      var hostInstance = findHostInstanceWithNoPortals(root.current);

      if (hostInstance) {
        if (hostInstance.parentNode !== container) {
          error('render(...): It looks like the React-rendered content of the ' + 'root container was removed without using React. This is not ' + 'supported and will cause errors. Instead, call ' + "root.unmount() to empty a root's container.");
        }
      }
    }
  }

  updateContainer(children, root, null, null);
};

ReactDOMRoot.prototype.unmount = ReactDOMBlockingRoot.prototype.unmount = function () {
  {
    if (typeof arguments[0] === 'function') {
      error('unmount(...): does not support a callback argument. ' + 'To execute a side effect after rendering, declare it in a component body with useEffect().');
    }
  }

  var root = this._internalRoot;
  var container = root.containerInfo;
  updateContainer(null, root, null, function () {
    unmarkContainerAsRoot(container);
  });
};

function createRootImpl(container, tag, options) {
  // Tag is either LegacyRoot or Concurrent Root
  var hydrate = options != null && options.hydrate === true;
  var hydrationCallbacks = options != null && options.hydrationOptions || null;
  var root = createContainer(container, tag, hydrate);
  markContainerAsRoot(root.current, container);

  if (hydrate && tag !== LegacyRoot) {
    var doc = container.nodeType === DOCUMENT_NODE ? container : container.ownerDocument;
    eagerlyTrapReplayableEvents(container, doc);
  }

  return root;
}
function createLegacyRoot(container, options) {
  return new ReactDOMBlockingRoot(container, LegacyRoot, options);
}
function isValidContainer(node) {
  return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === ' react-mount-point-unstable '));
}

var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
var topLevelUpdateWarnings;
var warnedAboutHydrateAPI = false;

{
  topLevelUpdateWarnings = function (container) {
    if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
      var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer._internalRoot.current);

      if (hostInstance) {
        if (hostInstance.parentNode !== container) {
          error('render(...): It looks like the React-rendered content of this ' + 'container was removed without using React. This is not ' + 'supported and will cause errors. Instead, call ' + 'ReactDOM.unmountComponentAtNode to empty a container.');
        }
      }
    }

    var isRootRenderedBySomeReact = !!container._reactRootContainer;
    var rootEl = getReactRootElementInContainer(container);
    var hasNonRootReactChild = !!(rootEl && getInstanceFromNode$1(rootEl));

    if (hasNonRootReactChild && !isRootRenderedBySomeReact) {
      error('render(...): Replacing React-rendered children with a new root ' + 'component. If you intended to update the children of this node, ' + 'you should instead have the existing children update their state ' + 'and render the new components instead of calling ReactDOM.render.');
    }

    if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === 'BODY') {
      error('render(): Rendering components directly into document.body is ' + 'discouraged, since its children are often manipulated by third-party ' + 'scripts and browser extensions. This may lead to subtle ' + 'reconciliation issues. Try rendering into a container element created ' + 'for your app.');
    }
  };
}

function getReactRootElementInContainer(container) {
  if (!container) {
    return null;
  }

  if (container.nodeType === DOCUMENT_NODE) {
    return container.documentElement;
  } else {
    return container.firstChild;
  }
}

function shouldHydrateDueToLegacyHeuristic(container) {
  var rootElement = getReactRootElementInContainer(container);
  return !!(rootElement && rootElement.nodeType === ELEMENT_NODE && rootElement.hasAttribute(ROOT_ATTRIBUTE_NAME));
}

function legacyCreateRootFromDOMContainer(container, forceHydrate) {
  var shouldHydrate = forceHydrate || shouldHydrateDueToLegacyHeuristic(container); // First clear any existing content.

  if (!shouldHydrate) {
    var warned = false;
    var rootSibling;

    while (rootSibling = container.lastChild) {
      {
        if (!warned && rootSibling.nodeType === ELEMENT_NODE && rootSibling.hasAttribute(ROOT_ATTRIBUTE_NAME)) {
          warned = true;

          error('render(): Target node has markup rendered by React, but there ' + 'are unrelated nodes as well. This is most commonly caused by ' + 'white-space inserted around server-rendered markup.');
        }
      }

      container.removeChild(rootSibling);
    }
  }

  {
    if (shouldHydrate && !forceHydrate && !warnedAboutHydrateAPI) {
      warnedAboutHydrateAPI = true;

      warn('render(): Calling ReactDOM.render() to hydrate server-rendered markup ' + 'will stop working in React v17. Replace the ReactDOM.render() call ' + 'with ReactDOM.hydrate() if you want React to attach to the server HTML.');
    }
  }

  return createLegacyRoot(container, shouldHydrate ? {
    hydrate: true
  } : undefined);
}

function warnOnInvalidCallback$1(callback, callerName) {
  {
    if (callback !== null && typeof callback !== 'function') {
      error('%s(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callerName, callback);
    }
  }
}

function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
  {
    topLevelUpdateWarnings(container);
    warnOnInvalidCallback$1(callback === undefined ? null : callback, 'render');
  } // TODO: Without `any` type, Flow says "Property cannot be accessed on any
  // member of intersection type." Whyyyyyy.


  var root = container._reactRootContainer;
  var fiberRoot;

  if (!root) {
    // Initial mount
    root = container._reactRootContainer = legacyCreateRootFromDOMContainer(container, forceHydrate);
    fiberRoot = root._internalRoot;

    if (typeof callback === 'function') {
      var originalCallback = callback;

      callback = function () {
        var instance = getPublicRootInstance(fiberRoot);
        originalCallback.call(instance);
      };
    } // Initial mount should not be batched.


    unbatchedUpdates(function () {
      updateContainer(children, fiberRoot, parentComponent, callback);
    });
  } else {
    fiberRoot = root._internalRoot;

    if (typeof callback === 'function') {
      var _originalCallback = callback;

      callback = function () {
        var instance = getPublicRootInstance(fiberRoot);

        _originalCallback.call(instance);
      };
    } // Update


    updateContainer(children, fiberRoot, parentComponent, callback);
  }

  return getPublicRootInstance(fiberRoot);
}

function findDOMNode(componentOrElement) {
  {
    var owner = ReactCurrentOwner$3.current;

    if (owner !== null && owner.stateNode !== null) {
      var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;

      if (!warnedAboutRefsInRender) {
        error('%s is accessing findDOMNode inside its render(). ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', getComponentName(owner.type) || 'A component');
      }

      owner.stateNode._warnedAboutRefsInRender = true;
    }
  }

  if (componentOrElement == null) {
    return null;
  }

  if (componentOrElement.nodeType === ELEMENT_NODE) {
    return componentOrElement;
  }

  {
    return findHostInstanceWithWarning(componentOrElement, 'findDOMNode');
  }
}
function hydrate(element, container, callback) {
  if (!isValidContainer(container)) {
    {
      throw Error( "Target container is not a DOM element." );
    }
  }

  {
    var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;

    if (isModernRoot) {
      error('You are calling ReactDOM.hydrate() on a container that was previously ' + 'passed to ReactDOM.createRoot(). This is not supported. ' + 'Did you mean to call createRoot(container, {hydrate: true}).render(element)?');
    }
  } // TODO: throw or warn if we couldn't hydrate?


  return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
}
function render(element, container, callback) {
  if (!isValidContainer(container)) {
    {
      throw Error( "Target container is not a DOM element." );
    }
  }

  {
    var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;

    if (isModernRoot) {
      error('You are calling ReactDOM.render() on a container that was previously ' + 'passed to ReactDOM.createRoot(). This is not supported. ' + 'Did you mean to call root.render(element)?');
    }
  }

  return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
}
function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
  if (!isValidContainer(containerNode)) {
    {
      throw Error( "Target container is not a DOM element." );
    }
  }

  if (!(parentComponent != null && has(parentComponent))) {
    {
      throw Error( "parentComponent must be a valid React Component" );
    }
  }

  return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
}
function unmountComponentAtNode(container) {
  if (!isValidContainer(container)) {
    {
      throw Error( "unmountComponentAtNode(...): Target container is not a DOM element." );
    }
  }

  {
    var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;

    if (isModernRoot) {
      error('You are calling ReactDOM.unmountComponentAtNode() on a container that was previously ' + 'passed to ReactDOM.createRoot(). This is not supported. Did you mean to call root.unmount()?');
    }
  }

  if (container._reactRootContainer) {
    {
      var rootEl = getReactRootElementInContainer(container);
      var renderedByDifferentReact = rootEl && !getInstanceFromNode$1(rootEl);

      if (renderedByDifferentReact) {
        error("unmountComponentAtNode(): The node you're attempting to unmount " + 'was rendered by another copy of React.');
      }
    } // Unmount should not be batched.


    unbatchedUpdates(function () {
      legacyRenderSubtreeIntoContainer(null, null, container, false, function () {
        // $FlowFixMe This should probably use `delete container._reactRootContainer`
        container._reactRootContainer = null;
        unmarkContainerAsRoot(container);
      });
    }); // If you call unmountComponentAtNode twice in quick succession, you'll
    // get `true` twice. That's probably fine?

    return true;
  } else {
    {
      var _rootEl = getReactRootElementInContainer(container);

      var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode$1(_rootEl)); // Check if the container itself is a React root node.

      var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainer(container.parentNode) && !!container.parentNode._reactRootContainer;

      if (hasNonRootReactChild) {
        error("unmountComponentAtNode(): The node you're attempting to unmount " + 'was rendered by React and is not a top-level container. %s', isContainerReactRoot ? 'You may have accidentally passed in a React root node instead ' + 'of its container.' : 'Instead, have the parent component update its state and ' + 'rerender in order to remove this component.');
      }
    }

    return false;
  }
}

function createPortal(children, containerInfo, // TODO: figure out the API for cross-renderer implementation.
implementation) {
  var key = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
  return {
    // This tag allow us to uniquely identify this as a React Portal
    $$typeof: REACT_PORTAL_TYPE,
    key: key == null ? null : '' + key,
    children: children,
    containerInfo: containerInfo,
    implementation: implementation
  };
}

var ReactVersion = '16.14.0';

setAttemptUserBlockingHydration(attemptUserBlockingHydration$1);
setAttemptContinuousHydration(attemptContinuousHydration$1);
setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
var didWarnAboutUnstableCreatePortal = false;

{
  if (typeof Map !== 'function' || // $FlowIssue Flow incorrectly thinks Map has no prototype
  Map.prototype == null || typeof Map.prototype.forEach !== 'function' || typeof Set !== 'function' || // $FlowIssue Flow incorrectly thinks Set has no prototype
  Set.prototype == null || typeof Set.prototype.clear !== 'function' || typeof Set.prototype.forEach !== 'function') {
    error('React depends on Map and Set built-in types. Make sure that you load a ' + 'polyfill in older browsers. https://fb.me/react-polyfills');
  }
}

setRestoreImplementation(restoreControlledState$3);
setBatchingImplementation(batchedUpdates$1, discreteUpdates$1, flushDiscreteUpdates, batchedEventUpdates$1);

function createPortal$1(children, container) {
  var key = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

  if (!isValidContainer(container)) {
    {
      throw Error( "Target container is not a DOM element." );
    }
  } // TODO: pass ReactDOM portal implementation as third argument
  // $FlowFixMe The Flow type is opaque but there's no way to actually create it.


  return createPortal(children, container, null, key);
}

function renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {

  return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback);
}

function unstable_createPortal(children, container) {
  var key = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

  {
    if (!didWarnAboutUnstableCreatePortal) {
      didWarnAboutUnstableCreatePortal = true;

      warn('The ReactDOM.unstable_createPortal() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactDOM.createPortal() instead. It has the exact same API, ' + 'but without the "unstable_" prefix.');
    }
  }

  return createPortal$1(children, container, key);
}

var Internals = {
  // Keep in sync with ReactDOMUnstableNativeDependencies.js
  // ReactTestUtils.js, and ReactTestUtilsAct.js. This is an array for better minification.
  Events: [getInstanceFromNode$1, getNodeFromInstance$1, getFiberCurrentPropsFromNode$1, injectEventPluginsByName, eventNameDispatchConfigs, accumulateTwoPhaseDispatches, accumulateDirectDispatches, enqueueStateRestore, restoreStateIfNeeded, dispatchEvent, runEventsInBatch, flushPassiveEffects, IsThisRendererActing]
};
var foundDevTools = injectIntoDevTools({
  findFiberByHostInstance: getClosestInstanceFromNode,
  bundleType:  1 ,
  version: ReactVersion,
  rendererPackageName: 'react-dom'
});

{
  if (!foundDevTools && canUseDOM && window.top === window.self) {
    // If we're in Chrome or Firefox, provide a download link if not installed.
    if (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1 || navigator.userAgent.indexOf('Firefox') > -1) {
      var protocol = window.location.protocol; // Don't warn in exotic cases like chrome-extension://.

      if (/^(https?|file):$/.test(protocol)) {
        // eslint-disable-next-line react-internal/no-production-logging
        console.info('%cDownload the React DevTools ' + 'for a better development experience: ' + 'https://fb.me/react-devtools' + (protocol === 'file:' ? '\nYou might need to use a local HTTP server (instead of file://): ' + 'https://fb.me/react-devtools-faq' : ''), 'font-weight:bold');
      }
    }
  }
}

exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
exports.createPortal = createPortal$1;
exports.findDOMNode = findDOMNode;
exports.flushSync = flushSync;
exports.hydrate = hydrate;
exports.render = render;
exports.unmountComponentAtNode = unmountComponentAtNode;
exports.unstable_batchedUpdates = batchedUpdates$1;
exports.unstable_createPortal = unstable_createPortal;
exports.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
exports.version = ReactVersion;
  })();
}


/***/ }),

/***/ "./node_modules/react-dom/index.js":
/*!*****************************************!*\
  !*** ./node_modules/react-dom/index.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


function checkDCE() {
  /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */
  if (
    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined' ||
    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== 'function'
  ) {
    return;
  }
  if (true) {
    // This branch is unreachable because this function is only called
    // in production, but the condition is true only in development.
    // Therefore if the branch is still here, dead code elimination wasn't
    // properly applied.
    // Don't change the message. React DevTools relies on it. Also make sure
    // this message doesn't occur elsewhere in this function, or it will cause
    // a false positive.
    throw new Error('^_^');
  }
  // removed by dead control flow
{}
}

if (false) // removed by dead control flow
{} else {
  module.exports = __webpack_require__(/*! ./cjs/react-dom.development.js */ "./node_modules/react-dom/cjs/react-dom.development.js");
}


/***/ }),

/***/ "./node_modules/react/cjs/react.development.js":
/*!*****************************************************!*\
  !*** ./node_modules/react/cjs/react.development.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
/** @license React v16.14.0
 * react.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */





if (true) {
  (function() {
'use strict';

var _assign = __webpack_require__(/*! object-assign */ "./node_modules/object-assign/index.js");
var checkPropTypes = __webpack_require__(/*! prop-types/checkPropTypes */ "./node_modules/prop-types/checkPropTypes.js");

var ReactVersion = '16.14.0';

// The Symbol used to tag the ReactElement-like types. If there is no native Symbol
// nor polyfill, then a plain number is used for performance.
var hasSymbol = typeof Symbol === 'function' && Symbol.for;
var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary
var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 0xead8;
var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;
var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for('react.block') : 0xead9;
var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for('react.fundamental') : 0xead5;
var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for('react.responder') : 0xead6;
var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for('react.scope') : 0xead7;
var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
var FAUX_ITERATOR_SYMBOL = '@@iterator';
function getIteratorFn(maybeIterable) {
  if (maybeIterable === null || typeof maybeIterable !== 'object') {
    return null;
  }

  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];

  if (typeof maybeIterator === 'function') {
    return maybeIterator;
  }

  return null;
}

/**
 * Keeps track of the current dispatcher.
 */
var ReactCurrentDispatcher = {
  /**
   * @internal
   * @type {ReactComponent}
   */
  current: null
};

/**
 * Keeps track of the current batch's configuration such as how long an update
 * should suspend for if it needs to.
 */
var ReactCurrentBatchConfig = {
  suspense: null
};

/**
 * Keeps track of the current owner.
 *
 * The current owner is the component who should own any components that are
 * currently being constructed.
 */
var ReactCurrentOwner = {
  /**
   * @internal
   * @type {ReactComponent}
   */
  current: null
};

var BEFORE_SLASH_RE = /^(.*)[\\\/]/;
function describeComponentFrame (name, source, ownerName) {
  var sourceInfo = '';

  if (source) {
    var path = source.fileName;
    var fileName = path.replace(BEFORE_SLASH_RE, '');

    {
      // In DEV, include code for a common special case:
      // prefer "folder/index.js" instead of just "index.js".
      if (/^index\./.test(fileName)) {
        var match = path.match(BEFORE_SLASH_RE);

        if (match) {
          var pathBeforeSlash = match[1];

          if (pathBeforeSlash) {
            var folderName = pathBeforeSlash.replace(BEFORE_SLASH_RE, '');
            fileName = folderName + '/' + fileName;
          }
        }
      }
    }

    sourceInfo = ' (at ' + fileName + ':' + source.lineNumber + ')';
  } else if (ownerName) {
    sourceInfo = ' (created by ' + ownerName + ')';
  }

  return '\n    in ' + (name || 'Unknown') + sourceInfo;
}

var Resolved = 1;
function refineResolvedLazyComponent(lazyComponent) {
  return lazyComponent._status === Resolved ? lazyComponent._result : null;
}

function getWrappedName(outerType, innerType, wrapperName) {
  var functionName = innerType.displayName || innerType.name || '';
  return outerType.displayName || (functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName);
}

function getComponentName(type) {
  if (type == null) {
    // Host root, text node or just invalid type.
    return null;
  }

  {
    if (typeof type.tag === 'number') {
      error('Received an unexpected object in getComponentName(). ' + 'This is likely a bug in React. Please file an issue.');
    }
  }

  if (typeof type === 'function') {
    return type.displayName || type.name || null;
  }

  if (typeof type === 'string') {
    return type;
  }

  switch (type) {
    case REACT_FRAGMENT_TYPE:
      return 'Fragment';

    case REACT_PORTAL_TYPE:
      return 'Portal';

    case REACT_PROFILER_TYPE:
      return "Profiler";

    case REACT_STRICT_MODE_TYPE:
      return 'StrictMode';

    case REACT_SUSPENSE_TYPE:
      return 'Suspense';

    case REACT_SUSPENSE_LIST_TYPE:
      return 'SuspenseList';
  }

  if (typeof type === 'object') {
    switch (type.$$typeof) {
      case REACT_CONTEXT_TYPE:
        return 'Context.Consumer';

      case REACT_PROVIDER_TYPE:
        return 'Context.Provider';

      case REACT_FORWARD_REF_TYPE:
        return getWrappedName(type, type.render, 'ForwardRef');

      case REACT_MEMO_TYPE:
        return getComponentName(type.type);

      case REACT_BLOCK_TYPE:
        return getComponentName(type.render);

      case REACT_LAZY_TYPE:
        {
          var thenable = type;
          var resolvedThenable = refineResolvedLazyComponent(thenable);

          if (resolvedThenable) {
            return getComponentName(resolvedThenable);
          }

          break;
        }
    }
  }

  return null;
}

var ReactDebugCurrentFrame = {};
var currentlyValidatingElement = null;
function setCurrentlyValidatingElement(element) {
  {
    currentlyValidatingElement = element;
  }
}

{
  // Stack implementation injected by the current renderer.
  ReactDebugCurrentFrame.getCurrentStack = null;

  ReactDebugCurrentFrame.getStackAddendum = function () {
    var stack = ''; // Add an extra top frame while an element is being validated

    if (currentlyValidatingElement) {
      var name = getComponentName(currentlyValidatingElement.type);
      var owner = currentlyValidatingElement._owner;
      stack += describeComponentFrame(name, currentlyValidatingElement._source, owner && getComponentName(owner.type));
    } // Delegate to the injected renderer-specific implementation


    var impl = ReactDebugCurrentFrame.getCurrentStack;

    if (impl) {
      stack += impl() || '';
    }

    return stack;
  };
}

/**
 * Used by act() to track whether you're inside an act() scope.
 */
var IsSomeRendererActing = {
  current: false
};

var ReactSharedInternals = {
  ReactCurrentDispatcher: ReactCurrentDispatcher,
  ReactCurrentBatchConfig: ReactCurrentBatchConfig,
  ReactCurrentOwner: ReactCurrentOwner,
  IsSomeRendererActing: IsSomeRendererActing,
  // Used by renderers to avoid bundling object-assign twice in UMD bundles:
  assign: _assign
};

{
  _assign(ReactSharedInternals, {
    // These should not be included in production.
    ReactDebugCurrentFrame: ReactDebugCurrentFrame,
    // Shim for React DOM 16.0.0 which still destructured (but not used) this.
    // TODO: remove in React 17.0.
    ReactComponentTreeHook: {}
  });
}

// by calls to these methods by a Babel plugin.
//
// In PROD (or in packages without access to React internals),
// they are left as they are instead.

function warn(format) {
  {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    printWarning('warn', format, args);
  }
}
function error(format) {
  {
    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
      args[_key2 - 1] = arguments[_key2];
    }

    printWarning('error', format, args);
  }
}

function printWarning(level, format, args) {
  // When changing this logic, you might want to also
  // update consoleWithStackDev.www.js as well.
  {
    var hasExistingStack = args.length > 0 && typeof args[args.length - 1] === 'string' && args[args.length - 1].indexOf('\n    in') === 0;

    if (!hasExistingStack) {
      var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
      var stack = ReactDebugCurrentFrame.getStackAddendum();

      if (stack !== '') {
        format += '%s';
        args = args.concat([stack]);
      }
    }

    var argsWithFormat = args.map(function (item) {
      return '' + item;
    }); // Careful: RN currently depends on this prefix

    argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it
    // breaks IE9: https://github.com/facebook/react/issues/13610
    // eslint-disable-next-line react-internal/no-production-logging

    Function.prototype.apply.call(console[level], console, argsWithFormat);

    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      var argIndex = 0;
      var message = 'Warning: ' + format.replace(/%s/g, function () {
        return args[argIndex++];
      });
      throw new Error(message);
    } catch (x) {}
  }
}

var didWarnStateUpdateForUnmountedComponent = {};

function warnNoop(publicInstance, callerName) {
  {
    var _constructor = publicInstance.constructor;
    var componentName = _constructor && (_constructor.displayName || _constructor.name) || 'ReactClass';
    var warningKey = componentName + "." + callerName;

    if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
      return;
    }

    error("Can't call %s on a component that is not yet mounted. " + 'This is a no-op, but it might indicate a bug in your application. ' + 'Instead, assign to `this.state` directly or define a `state = {};` ' + 'class property with the desired state in the %s component.', callerName, componentName);

    didWarnStateUpdateForUnmountedComponent[warningKey] = true;
  }
}
/**
 * This is the abstract API for an update queue.
 */


var ReactNoopUpdateQueue = {
  /**
   * Checks whether or not this composite component is mounted.
   * @param {ReactClass} publicInstance The instance we want to test.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */
  isMounted: function (publicInstance) {
    return false;
  },

  /**
   * Forces an update. This should only be invoked when it is known with
   * certainty that we are **not** in a DOM transaction.
   *
   * You may want to call this when you know that some deeper aspect of the
   * component's state has changed but `setState` was not called.
   *
   * This will not invoke `shouldComponentUpdate`, but it will invoke
   * `componentWillUpdate` and `componentDidUpdate`.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {?function} callback Called after component is updated.
   * @param {?string} callerName name of the calling function in the public API.
   * @internal
   */
  enqueueForceUpdate: function (publicInstance, callback, callerName) {
    warnNoop(publicInstance, 'forceUpdate');
  },

  /**
   * Replaces all of the state. Always use this or `setState` to mutate state.
   * You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} completeState Next state.
   * @param {?function} callback Called after component is updated.
   * @param {?string} callerName name of the calling function in the public API.
   * @internal
   */
  enqueueReplaceState: function (publicInstance, completeState, callback, callerName) {
    warnNoop(publicInstance, 'replaceState');
  },

  /**
   * Sets a subset of the state. This only exists because _pendingState is
   * internal. This provides a merging strategy that is not available to deep
   * properties which is confusing. TODO: Expose pendingState or don't use it
   * during the merge.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} partialState Next partial state to be merged with state.
   * @param {?function} callback Called after component is updated.
   * @param {?string} Name of the calling function in the public API.
   * @internal
   */
  enqueueSetState: function (publicInstance, partialState, callback, callerName) {
    warnNoop(publicInstance, 'setState');
  }
};

var emptyObject = {};

{
  Object.freeze(emptyObject);
}
/**
 * Base class helpers for the updating state of a component.
 */


function Component(props, context, updater) {
  this.props = props;
  this.context = context; // If a component has string refs, we will assign a different object later.

  this.refs = emptyObject; // We initialize the default updater but the real one gets injected by the
  // renderer.

  this.updater = updater || ReactNoopUpdateQueue;
}

Component.prototype.isReactComponent = {};
/**
 * Sets a subset of the state. Always use this to mutate
 * state. You should treat `this.state` as immutable.
 *
 * There is no guarantee that `this.state` will be immediately updated, so
 * accessing `this.state` after calling this method may return the old value.
 *
 * There is no guarantee that calls to `setState` will run synchronously,
 * as they may eventually be batched together.  You can provide an optional
 * callback that will be executed when the call to setState is actually
 * completed.
 *
 * When a function is provided to setState, it will be called at some point in
 * the future (not synchronously). It will be called with the up to date
 * component arguments (state, props, context). These values can be different
 * from this.* because your function may be called after receiveProps but before
 * shouldComponentUpdate, and this new state, props, and context will not yet be
 * assigned to this.
 *
 * @param {object|function} partialState Next partial state or function to
 *        produce next partial state to be merged with current state.
 * @param {?function} callback Called after state is updated.
 * @final
 * @protected
 */

Component.prototype.setState = function (partialState, callback) {
  if (!(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null)) {
    {
      throw Error( "setState(...): takes an object of state variables to update or a function which returns an object of state variables." );
    }
  }

  this.updater.enqueueSetState(this, partialState, callback, 'setState');
};
/**
 * Forces an update. This should only be invoked when it is known with
 * certainty that we are **not** in a DOM transaction.
 *
 * You may want to call this when you know that some deeper aspect of the
 * component's state has changed but `setState` was not called.
 *
 * This will not invoke `shouldComponentUpdate`, but it will invoke
 * `componentWillUpdate` and `componentDidUpdate`.
 *
 * @param {?function} callback Called after update is complete.
 * @final
 * @protected
 */


Component.prototype.forceUpdate = function (callback) {
  this.updater.enqueueForceUpdate(this, callback, 'forceUpdate');
};
/**
 * Deprecated APIs. These APIs used to exist on classic React classes but since
 * we would like to deprecate them, we're not going to move them over to this
 * modern base class. Instead, we define a getter that warns if it's accessed.
 */


{
  var deprecatedAPIs = {
    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']
  };

  var defineDeprecationWarning = function (methodName, info) {
    Object.defineProperty(Component.prototype, methodName, {
      get: function () {
        warn('%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]);

        return undefined;
      }
    });
  };

  for (var fnName in deprecatedAPIs) {
    if (deprecatedAPIs.hasOwnProperty(fnName)) {
      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
    }
  }
}

function ComponentDummy() {}

ComponentDummy.prototype = Component.prototype;
/**
 * Convenience component with default shallow equality check for sCU.
 */

function PureComponent(props, context, updater) {
  this.props = props;
  this.context = context; // If a component has string refs, we will assign a different object later.

  this.refs = emptyObject;
  this.updater = updater || ReactNoopUpdateQueue;
}

var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
pureComponentPrototype.constructor = PureComponent; // Avoid an extra prototype jump for these methods.

_assign(pureComponentPrototype, Component.prototype);

pureComponentPrototype.isPureReactComponent = true;

// an immutable object with a single mutable value
function createRef() {
  var refObject = {
    current: null
  };

  {
    Object.seal(refObject);
  }

  return refObject;
}

var hasOwnProperty = Object.prototype.hasOwnProperty;
var RESERVED_PROPS = {
  key: true,
  ref: true,
  __self: true,
  __source: true
};
var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;

{
  didWarnAboutStringRefs = {};
}

function hasValidRef(config) {
  {
    if (hasOwnProperty.call(config, 'ref')) {
      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;

      if (getter && getter.isReactWarning) {
        return false;
      }
    }
  }

  return config.ref !== undefined;
}

function hasValidKey(config) {
  {
    if (hasOwnProperty.call(config, 'key')) {
      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;

      if (getter && getter.isReactWarning) {
        return false;
      }
    }
  }

  return config.key !== undefined;
}

function defineKeyPropWarningGetter(props, displayName) {
  var warnAboutAccessingKey = function () {
    {
      if (!specialPropKeyWarningShown) {
        specialPropKeyWarningShown = true;

        error('%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName);
      }
    }
  };

  warnAboutAccessingKey.isReactWarning = true;
  Object.defineProperty(props, 'key', {
    get: warnAboutAccessingKey,
    configurable: true
  });
}

function defineRefPropWarningGetter(props, displayName) {
  var warnAboutAccessingRef = function () {
    {
      if (!specialPropRefWarningShown) {
        specialPropRefWarningShown = true;

        error('%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName);
      }
    }
  };

  warnAboutAccessingRef.isReactWarning = true;
  Object.defineProperty(props, 'ref', {
    get: warnAboutAccessingRef,
    configurable: true
  });
}

function warnIfStringRefCannotBeAutoConverted(config) {
  {
    if (typeof config.ref === 'string' && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
      var componentName = getComponentName(ReactCurrentOwner.current.type);

      if (!didWarnAboutStringRefs[componentName]) {
        error('Component "%s" contains the string ref "%s". ' + 'Support for string refs will be removed in a future major release. ' + 'This case cannot be automatically converted to an arrow function. ' + 'We ask you to manually fix this case by using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://fb.me/react-strict-mode-string-ref', getComponentName(ReactCurrentOwner.current.type), config.ref);

        didWarnAboutStringRefs[componentName] = true;
      }
    }
  }
}
/**
 * Factory method to create a new React element. This no longer adheres to
 * the class pattern, so do not use new to call it. Also, instanceof check
 * will not work. Instead test $$typeof field against Symbol.for('react.element') to check
 * if something is a React Element.
 *
 * @param {*} type
 * @param {*} props
 * @param {*} key
 * @param {string|object} ref
 * @param {*} owner
 * @param {*} self A *temporary* helper to detect places where `this` is
 * different from the `owner` when React.createElement is called, so that we
 * can warn. We want to get rid of owner and replace string `ref`s with arrow
 * functions, and as long as `this` and owner are the same, there will be no
 * change in behavior.
 * @param {*} source An annotation object (added by a transpiler or otherwise)
 * indicating filename, line number, and/or other information.
 * @internal
 */


var ReactElement = function (type, key, ref, self, source, owner, props) {
  var element = {
    // This tag allows us to uniquely identify this as a React Element
    $$typeof: REACT_ELEMENT_TYPE,
    // Built-in properties that belong on the element
    type: type,
    key: key,
    ref: ref,
    props: props,
    // Record the component responsible for creating this element.
    _owner: owner
  };

  {
    // The validation flag is currently mutative. We put it on
    // an external backing store so that we can freeze the whole object.
    // This can be replaced with a WeakMap once they are implemented in
    // commonly used development environments.
    element._store = {}; // To make comparing ReactElements easier for testing purposes, we make
    // the validation flag non-enumerable (where possible, which should
    // include every environment we run tests in), so the test framework
    // ignores it.

    Object.defineProperty(element._store, 'validated', {
      configurable: false,
      enumerable: false,
      writable: true,
      value: false
    }); // self and source are DEV only properties.

    Object.defineProperty(element, '_self', {
      configurable: false,
      enumerable: false,
      writable: false,
      value: self
    }); // Two elements created in two different places should be considered
    // equal for testing purposes and therefore we hide it from enumeration.

    Object.defineProperty(element, '_source', {
      configurable: false,
      enumerable: false,
      writable: false,
      value: source
    });

    if (Object.freeze) {
      Object.freeze(element.props);
      Object.freeze(element);
    }
  }

  return element;
};
/**
 * Create and return a new ReactElement of the given type.
 * See https://reactjs.org/docs/react-api.html#createelement
 */

function createElement(type, config, children) {
  var propName; // Reserved names are extracted

  var props = {};
  var key = null;
  var ref = null;
  var self = null;
  var source = null;

  if (config != null) {
    if (hasValidRef(config)) {
      ref = config.ref;

      {
        warnIfStringRefCannotBeAutoConverted(config);
      }
    }

    if (hasValidKey(config)) {
      key = '' + config.key;
    }

    self = config.__self === undefined ? null : config.__self;
    source = config.__source === undefined ? null : config.__source; // Remaining properties are added to a new props object

    for (propName in config) {
      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
        props[propName] = config[propName];
      }
    }
  } // Children can be more than one argument, and those are transferred onto
  // the newly allocated props object.


  var childrenLength = arguments.length - 2;

  if (childrenLength === 1) {
    props.children = children;
  } else if (childrenLength > 1) {
    var childArray = Array(childrenLength);

    for (var i = 0; i < childrenLength; i++) {
      childArray[i] = arguments[i + 2];
    }

    {
      if (Object.freeze) {
        Object.freeze(childArray);
      }
    }

    props.children = childArray;
  } // Resolve default props


  if (type && type.defaultProps) {
    var defaultProps = type.defaultProps;

    for (propName in defaultProps) {
      if (props[propName] === undefined) {
        props[propName] = defaultProps[propName];
      }
    }
  }

  {
    if (key || ref) {
      var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;

      if (key) {
        defineKeyPropWarningGetter(props, displayName);
      }

      if (ref) {
        defineRefPropWarningGetter(props, displayName);
      }
    }
  }

  return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
}
function cloneAndReplaceKey(oldElement, newKey) {
  var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
  return newElement;
}
/**
 * Clone and return a new ReactElement using element as the starting point.
 * See https://reactjs.org/docs/react-api.html#cloneelement
 */

function cloneElement(element, config, children) {
  if (!!(element === null || element === undefined)) {
    {
      throw Error( "React.cloneElement(...): The argument must be a React element, but you passed " + element + "." );
    }
  }

  var propName; // Original props are copied

  var props = _assign({}, element.props); // Reserved names are extracted


  var key = element.key;
  var ref = element.ref; // Self is preserved since the owner is preserved.

  var self = element._self; // Source is preserved since cloneElement is unlikely to be targeted by a
  // transpiler, and the original source is probably a better indicator of the
  // true owner.

  var source = element._source; // Owner will be preserved, unless ref is overridden

  var owner = element._owner;

  if (config != null) {
    if (hasValidRef(config)) {
      // Silently steal the ref from the parent.
      ref = config.ref;
      owner = ReactCurrentOwner.current;
    }

    if (hasValidKey(config)) {
      key = '' + config.key;
    } // Remaining properties override existing props


    var defaultProps;

    if (element.type && element.type.defaultProps) {
      defaultProps = element.type.defaultProps;
    }

    for (propName in config) {
      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
        if (config[propName] === undefined && defaultProps !== undefined) {
          // Resolve default props
          props[propName] = defaultProps[propName];
        } else {
          props[propName] = config[propName];
        }
      }
    }
  } // Children can be more than one argument, and those are transferred onto
  // the newly allocated props object.


  var childrenLength = arguments.length - 2;

  if (childrenLength === 1) {
    props.children = children;
  } else if (childrenLength > 1) {
    var childArray = Array(childrenLength);

    for (var i = 0; i < childrenLength; i++) {
      childArray[i] = arguments[i + 2];
    }

    props.children = childArray;
  }

  return ReactElement(element.type, key, ref, self, source, owner, props);
}
/**
 * Verifies the object is a ReactElement.
 * See https://reactjs.org/docs/react-api.html#isvalidelement
 * @param {?object} object
 * @return {boolean} True if `object` is a ReactElement.
 * @final
 */

function isValidElement(object) {
  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
}

var SEPARATOR = '.';
var SUBSEPARATOR = ':';
/**
 * Escape and wrap key so it is safe to use as a reactid
 *
 * @param {string} key to be escaped.
 * @return {string} the escaped key.
 */

function escape(key) {
  var escapeRegex = /[=:]/g;
  var escaperLookup = {
    '=': '=0',
    ':': '=2'
  };
  var escapedString = ('' + key).replace(escapeRegex, function (match) {
    return escaperLookup[match];
  });
  return '$' + escapedString;
}
/**
 * TODO: Test that a single child and an array with one item have the same key
 * pattern.
 */


var didWarnAboutMaps = false;
var userProvidedKeyEscapeRegex = /\/+/g;

function escapeUserProvidedKey(text) {
  return ('' + text).replace(userProvidedKeyEscapeRegex, '$&/');
}

var POOL_SIZE = 10;
var traverseContextPool = [];

function getPooledTraverseContext(mapResult, keyPrefix, mapFunction, mapContext) {
  if (traverseContextPool.length) {
    var traverseContext = traverseContextPool.pop();
    traverseContext.result = mapResult;
    traverseContext.keyPrefix = keyPrefix;
    traverseContext.func = mapFunction;
    traverseContext.context = mapContext;
    traverseContext.count = 0;
    return traverseContext;
  } else {
    return {
      result: mapResult,
      keyPrefix: keyPrefix,
      func: mapFunction,
      context: mapContext,
      count: 0
    };
  }
}

function releaseTraverseContext(traverseContext) {
  traverseContext.result = null;
  traverseContext.keyPrefix = null;
  traverseContext.func = null;
  traverseContext.context = null;
  traverseContext.count = 0;

  if (traverseContextPool.length < POOL_SIZE) {
    traverseContextPool.push(traverseContext);
  }
}
/**
 * @param {?*} children Children tree container.
 * @param {!string} nameSoFar Name of the key path so far.
 * @param {!function} callback Callback to invoke with each child found.
 * @param {?*} traverseContext Used to pass information throughout the traversal
 * process.
 * @return {!number} The number of children in this subtree.
 */


function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
  var type = typeof children;

  if (type === 'undefined' || type === 'boolean') {
    // All of the above are perceived as null.
    children = null;
  }

  var invokeCallback = false;

  if (children === null) {
    invokeCallback = true;
  } else {
    switch (type) {
      case 'string':
      case 'number':
        invokeCallback = true;
        break;

      case 'object':
        switch (children.$$typeof) {
          case REACT_ELEMENT_TYPE:
          case REACT_PORTAL_TYPE:
            invokeCallback = true;
        }

    }
  }

  if (invokeCallback) {
    callback(traverseContext, children, // If it's the only child, treat the name as if it was wrapped in an array
    // so that it's consistent if the number of children grows.
    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
    return 1;
  }

  var child;
  var nextName;
  var subtreeCount = 0; // Count of children found in the current subtree.

  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

  if (Array.isArray(children)) {
    for (var i = 0; i < children.length; i++) {
      child = children[i];
      nextName = nextNamePrefix + getComponentKey(child, i);
      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
    }
  } else {
    var iteratorFn = getIteratorFn(children);

    if (typeof iteratorFn === 'function') {

      {
        // Warn about using Maps as children
        if (iteratorFn === children.entries) {
          if (!didWarnAboutMaps) {
            warn('Using Maps as children is deprecated and will be removed in ' + 'a future major release. Consider converting children to ' + 'an array of keyed ReactElements instead.');
          }

          didWarnAboutMaps = true;
        }
      }

      var iterator = iteratorFn.call(children);
      var step;
      var ii = 0;

      while (!(step = iterator.next()).done) {
        child = step.value;
        nextName = nextNamePrefix + getComponentKey(child, ii++);
        subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
      }
    } else if (type === 'object') {
      var addendum = '';

      {
        addendum = ' If you meant to render a collection of children, use an array ' + 'instead.' + ReactDebugCurrentFrame.getStackAddendum();
      }

      var childrenString = '' + children;

      {
        {
          throw Error( "Objects are not valid as a React child (found: " + (childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString) + ")." + addendum );
        }
      }
    }
  }

  return subtreeCount;
}
/**
 * Traverses children that are typically specified as `props.children`, but
 * might also be specified through attributes:
 *
 * - `traverseAllChildren(this.props.children, ...)`
 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
 *
 * The `traverseContext` is an optional argument that is passed through the
 * entire traversal. It can be used to store accumulations or anything else that
 * the callback might find relevant.
 *
 * @param {?*} children Children tree object.
 * @param {!function} callback To invoke upon traversing each child.
 * @param {?*} traverseContext Context for traversal.
 * @return {!number} The number of children in this subtree.
 */


function traverseAllChildren(children, callback, traverseContext) {
  if (children == null) {
    return 0;
  }

  return traverseAllChildrenImpl(children, '', callback, traverseContext);
}
/**
 * Generate a key string that identifies a component within a set.
 *
 * @param {*} component A component that could contain a manual key.
 * @param {number} index Index that is used if a manual key is not provided.
 * @return {string}
 */


function getComponentKey(component, index) {
  // Do some typechecking here since we call this blindly. We want to ensure
  // that we don't block potential future ES APIs.
  if (typeof component === 'object' && component !== null && component.key != null) {
    // Explicit key
    return escape(component.key);
  } // Implicit key determined by the index in the set


  return index.toString(36);
}

function forEachSingleChild(bookKeeping, child, name) {
  var func = bookKeeping.func,
      context = bookKeeping.context;
  func.call(context, child, bookKeeping.count++);
}
/**
 * Iterates through children that are typically specified as `props.children`.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrenforeach
 *
 * The provided forEachFunc(child, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} forEachFunc
 * @param {*} forEachContext Context for forEachContext.
 */


function forEachChildren(children, forEachFunc, forEachContext) {
  if (children == null) {
    return children;
  }

  var traverseContext = getPooledTraverseContext(null, null, forEachFunc, forEachContext);
  traverseAllChildren(children, forEachSingleChild, traverseContext);
  releaseTraverseContext(traverseContext);
}

function mapSingleChildIntoContext(bookKeeping, child, childKey) {
  var result = bookKeeping.result,
      keyPrefix = bookKeeping.keyPrefix,
      func = bookKeeping.func,
      context = bookKeeping.context;
  var mappedChild = func.call(context, child, bookKeeping.count++);

  if (Array.isArray(mappedChild)) {
    mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, function (c) {
      return c;
    });
  } else if (mappedChild != null) {
    if (isValidElement(mappedChild)) {
      mappedChild = cloneAndReplaceKey(mappedChild, // Keep both the (mapped) and old keys if they differ, just as
      // traverseAllChildren used to do for objects as children
      keyPrefix + (mappedChild.key && (!child || child.key !== mappedChild.key) ? escapeUserProvidedKey(mappedChild.key) + '/' : '') + childKey);
    }

    result.push(mappedChild);
  }
}

function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {
  var escapedPrefix = '';

  if (prefix != null) {
    escapedPrefix = escapeUserProvidedKey(prefix) + '/';
  }

  var traverseContext = getPooledTraverseContext(array, escapedPrefix, func, context);
  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
  releaseTraverseContext(traverseContext);
}
/**
 * Maps children that are typically specified as `props.children`.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrenmap
 *
 * The provided mapFunction(child, key, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} func The map function.
 * @param {*} context Context for mapFunction.
 * @return {object} Object containing the ordered map of results.
 */


function mapChildren(children, func, context) {
  if (children == null) {
    return children;
  }

  var result = [];
  mapIntoWithKeyPrefixInternal(children, result, null, func, context);
  return result;
}
/**
 * Count the number of children that are typically specified as
 * `props.children`.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrencount
 *
 * @param {?*} children Children tree container.
 * @return {number} The number of children.
 */


function countChildren(children) {
  return traverseAllChildren(children, function () {
    return null;
  }, null);
}
/**
 * Flatten a children object (typically specified as `props.children`) and
 * return an array with appropriately re-keyed children.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrentoarray
 */


function toArray(children) {
  var result = [];
  mapIntoWithKeyPrefixInternal(children, result, null, function (child) {
    return child;
  });
  return result;
}
/**
 * Returns the first child in a collection of children and verifies that there
 * is only one child in the collection.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrenonly
 *
 * The current implementation of this function assumes that a single child gets
 * passed without a wrapper, but the purpose of this helper function is to
 * abstract away the particular structure of children.
 *
 * @param {?object} children Child collection structure.
 * @return {ReactElement} The first and only `ReactElement` contained in the
 * structure.
 */


function onlyChild(children) {
  if (!isValidElement(children)) {
    {
      throw Error( "React.Children.only expected to receive a single React element child." );
    }
  }

  return children;
}

function createContext(defaultValue, calculateChangedBits) {
  if (calculateChangedBits === undefined) {
    calculateChangedBits = null;
  } else {
    {
      if (calculateChangedBits !== null && typeof calculateChangedBits !== 'function') {
        error('createContext: Expected the optional second argument to be a ' + 'function. Instead received: %s', calculateChangedBits);
      }
    }
  }

  var context = {
    $$typeof: REACT_CONTEXT_TYPE,
    _calculateChangedBits: calculateChangedBits,
    // As a workaround to support multiple concurrent renderers, we categorize
    // some renderers as primary and others as secondary. We only expect
    // there to be two concurrent renderers at most: React Native (primary) and
    // Fabric (secondary); React DOM (primary) and React ART (secondary).
    // Secondary renderers store their context values on separate fields.
    _currentValue: defaultValue,
    _currentValue2: defaultValue,
    // Used to track how many concurrent renderers this context currently
    // supports within in a single renderer. Such as parallel server rendering.
    _threadCount: 0,
    // These are circular
    Provider: null,
    Consumer: null
  };
  context.Provider = {
    $$typeof: REACT_PROVIDER_TYPE,
    _context: context
  };
  var hasWarnedAboutUsingNestedContextConsumers = false;
  var hasWarnedAboutUsingConsumerProvider = false;

  {
    // A separate object, but proxies back to the original context object for
    // backwards compatibility. It has a different $$typeof, so we can properly
    // warn for the incorrect usage of Context as a Consumer.
    var Consumer = {
      $$typeof: REACT_CONTEXT_TYPE,
      _context: context,
      _calculateChangedBits: context._calculateChangedBits
    }; // $FlowFixMe: Flow complains about not setting a value, which is intentional here

    Object.defineProperties(Consumer, {
      Provider: {
        get: function () {
          if (!hasWarnedAboutUsingConsumerProvider) {
            hasWarnedAboutUsingConsumerProvider = true;

            error('Rendering <Context.Consumer.Provider> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Provider> instead?');
          }

          return context.Provider;
        },
        set: function (_Provider) {
          context.Provider = _Provider;
        }
      },
      _currentValue: {
        get: function () {
          return context._currentValue;
        },
        set: function (_currentValue) {
          context._currentValue = _currentValue;
        }
      },
      _currentValue2: {
        get: function () {
          return context._currentValue2;
        },
        set: function (_currentValue2) {
          context._currentValue2 = _currentValue2;
        }
      },
      _threadCount: {
        get: function () {
          return context._threadCount;
        },
        set: function (_threadCount) {
          context._threadCount = _threadCount;
        }
      },
      Consumer: {
        get: function () {
          if (!hasWarnedAboutUsingNestedContextConsumers) {
            hasWarnedAboutUsingNestedContextConsumers = true;

            error('Rendering <Context.Consumer.Consumer> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Consumer> instead?');
          }

          return context.Consumer;
        }
      }
    }); // $FlowFixMe: Flow complains about missing properties because it doesn't understand defineProperty

    context.Consumer = Consumer;
  }

  {
    context._currentRenderer = null;
    context._currentRenderer2 = null;
  }

  return context;
}

function lazy(ctor) {
  var lazyType = {
    $$typeof: REACT_LAZY_TYPE,
    _ctor: ctor,
    // React uses these fields to store the result.
    _status: -1,
    _result: null
  };

  {
    // In production, this would just set it on the object.
    var defaultProps;
    var propTypes;
    Object.defineProperties(lazyType, {
      defaultProps: {
        configurable: true,
        get: function () {
          return defaultProps;
        },
        set: function (newDefaultProps) {
          error('React.lazy(...): It is not supported to assign `defaultProps` to ' + 'a lazy component import. Either specify them where the component ' + 'is defined, or create a wrapping component around it.');

          defaultProps = newDefaultProps; // Match production behavior more closely:

          Object.defineProperty(lazyType, 'defaultProps', {
            enumerable: true
          });
        }
      },
      propTypes: {
        configurable: true,
        get: function () {
          return propTypes;
        },
        set: function (newPropTypes) {
          error('React.lazy(...): It is not supported to assign `propTypes` to ' + 'a lazy component import. Either specify them where the component ' + 'is defined, or create a wrapping component around it.');

          propTypes = newPropTypes; // Match production behavior more closely:

          Object.defineProperty(lazyType, 'propTypes', {
            enumerable: true
          });
        }
      }
    });
  }

  return lazyType;
}

function forwardRef(render) {
  {
    if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
      error('forwardRef requires a render function but received a `memo` ' + 'component. Instead of forwardRef(memo(...)), use ' + 'memo(forwardRef(...)).');
    } else if (typeof render !== 'function') {
      error('forwardRef requires a render function but was given %s.', render === null ? 'null' : typeof render);
    } else {
      if (render.length !== 0 && render.length !== 2) {
        error('forwardRef render functions accept exactly two parameters: props and ref. %s', render.length === 1 ? 'Did you forget to use the ref parameter?' : 'Any additional parameter will be undefined.');
      }
    }

    if (render != null) {
      if (render.defaultProps != null || render.propTypes != null) {
        error('forwardRef render functions do not support propTypes or defaultProps. ' + 'Did you accidentally pass a React component?');
      }
    }
  }

  return {
    $$typeof: REACT_FORWARD_REF_TYPE,
    render: render
  };
}

function isValidElementType(type) {
  return typeof type === 'string' || typeof type === 'function' || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
  type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
}

function memo(type, compare) {
  {
    if (!isValidElementType(type)) {
      error('memo: The first argument must be a component. Instead ' + 'received: %s', type === null ? 'null' : typeof type);
    }
  }

  return {
    $$typeof: REACT_MEMO_TYPE,
    type: type,
    compare: compare === undefined ? null : compare
  };
}

function resolveDispatcher() {
  var dispatcher = ReactCurrentDispatcher.current;

  if (!(dispatcher !== null)) {
    {
      throw Error( "Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://fb.me/react-invalid-hook-call for tips about how to debug and fix this problem." );
    }
  }

  return dispatcher;
}

function useContext(Context, unstable_observedBits) {
  var dispatcher = resolveDispatcher();

  {
    if (unstable_observedBits !== undefined) {
      error('useContext() second argument is reserved for future ' + 'use in React. Passing it is not supported. ' + 'You passed: %s.%s', unstable_observedBits, typeof unstable_observedBits === 'number' && Array.isArray(arguments[2]) ? '\n\nDid you call array.map(useContext)? ' + 'Calling Hooks inside a loop is not supported. ' + 'Learn more at https://fb.me/rules-of-hooks' : '');
    } // TODO: add a more generic warning for invalid values.


    if (Context._context !== undefined) {
      var realContext = Context._context; // Don't deduplicate because this legitimately causes bugs
      // and nobody should be using this in existing code.

      if (realContext.Consumer === Context) {
        error('Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be ' + 'removed in a future major release. Did you mean to call useContext(Context) instead?');
      } else if (realContext.Provider === Context) {
        error('Calling useContext(Context.Provider) is not supported. ' + 'Did you mean to call useContext(Context) instead?');
      }
    }
  }

  return dispatcher.useContext(Context, unstable_observedBits);
}
function useState(initialState) {
  var dispatcher = resolveDispatcher();
  return dispatcher.useState(initialState);
}
function useReducer(reducer, initialArg, init) {
  var dispatcher = resolveDispatcher();
  return dispatcher.useReducer(reducer, initialArg, init);
}
function useRef(initialValue) {
  var dispatcher = resolveDispatcher();
  return dispatcher.useRef(initialValue);
}
function useEffect(create, deps) {
  var dispatcher = resolveDispatcher();
  return dispatcher.useEffect(create, deps);
}
function useLayoutEffect(create, deps) {
  var dispatcher = resolveDispatcher();
  return dispatcher.useLayoutEffect(create, deps);
}
function useCallback(callback, deps) {
  var dispatcher = resolveDispatcher();
  return dispatcher.useCallback(callback, deps);
}
function useMemo(create, deps) {
  var dispatcher = resolveDispatcher();
  return dispatcher.useMemo(create, deps);
}
function useImperativeHandle(ref, create, deps) {
  var dispatcher = resolveDispatcher();
  return dispatcher.useImperativeHandle(ref, create, deps);
}
function useDebugValue(value, formatterFn) {
  {
    var dispatcher = resolveDispatcher();
    return dispatcher.useDebugValue(value, formatterFn);
  }
}

var propTypesMisspellWarningShown;

{
  propTypesMisspellWarningShown = false;
}

function getDeclarationErrorAddendum() {
  if (ReactCurrentOwner.current) {
    var name = getComponentName(ReactCurrentOwner.current.type);

    if (name) {
      return '\n\nCheck the render method of `' + name + '`.';
    }
  }

  return '';
}

function getSourceInfoErrorAddendum(source) {
  if (source !== undefined) {
    var fileName = source.fileName.replace(/^.*[\\\/]/, '');
    var lineNumber = source.lineNumber;
    return '\n\nCheck your code at ' + fileName + ':' + lineNumber + '.';
  }

  return '';
}

function getSourceInfoErrorAddendumForProps(elementProps) {
  if (elementProps !== null && elementProps !== undefined) {
    return getSourceInfoErrorAddendum(elementProps.__source);
  }

  return '';
}
/**
 * Warn if there's no key explicitly set on dynamic arrays of children or
 * object keys are not valid. This allows us to keep track of children between
 * updates.
 */


var ownerHasKeyUseWarning = {};

function getCurrentComponentErrorInfo(parentType) {
  var info = getDeclarationErrorAddendum();

  if (!info) {
    var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;

    if (parentName) {
      info = "\n\nCheck the top-level render call using <" + parentName + ">.";
    }
  }

  return info;
}
/**
 * Warn if the element doesn't have an explicit key assigned to it.
 * This element is in an array. The array could grow and shrink or be
 * reordered. All children that haven't already been validated are required to
 * have a "key" property assigned to it. Error statuses are cached so a warning
 * will only be shown once.
 *
 * @internal
 * @param {ReactElement} element Element that requires a key.
 * @param {*} parentType element's parent's type.
 */


function validateExplicitKey(element, parentType) {
  if (!element._store || element._store.validated || element.key != null) {
    return;
  }

  element._store.validated = true;
  var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);

  if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
    return;
  }

  ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a
  // property, it may be the creator of the child that's responsible for
  // assigning it a key.

  var childOwner = '';

  if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
    // Give the component that originally created this child.
    childOwner = " It was passed a child from " + getComponentName(element._owner.type) + ".";
  }

  setCurrentlyValidatingElement(element);

  {
    error('Each child in a list should have a unique "key" prop.' + '%s%s See https://fb.me/react-warning-keys for more information.', currentComponentErrorInfo, childOwner);
  }

  setCurrentlyValidatingElement(null);
}
/**
 * Ensure that every element either is passed in a static location, in an
 * array with an explicit keys property defined, or in an object literal
 * with valid key property.
 *
 * @internal
 * @param {ReactNode} node Statically passed child of any type.
 * @param {*} parentType node's parent's type.
 */


function validateChildKeys(node, parentType) {
  if (typeof node !== 'object') {
    return;
  }

  if (Array.isArray(node)) {
    for (var i = 0; i < node.length; i++) {
      var child = node[i];

      if (isValidElement(child)) {
        validateExplicitKey(child, parentType);
      }
    }
  } else if (isValidElement(node)) {
    // This element was passed in a valid location.
    if (node._store) {
      node._store.validated = true;
    }
  } else if (node) {
    var iteratorFn = getIteratorFn(node);

    if (typeof iteratorFn === 'function') {
      // Entry iterators used to provide implicit keys,
      // but now we print a separate warning for them later.
      if (iteratorFn !== node.entries) {
        var iterator = iteratorFn.call(node);
        var step;

        while (!(step = iterator.next()).done) {
          if (isValidElement(step.value)) {
            validateExplicitKey(step.value, parentType);
          }
        }
      }
    }
  }
}
/**
 * Given an element, validate that its props follow the propTypes definition,
 * provided by the type.
 *
 * @param {ReactElement} element
 */


function validatePropTypes(element) {
  {
    var type = element.type;

    if (type === null || type === undefined || typeof type === 'string') {
      return;
    }

    var name = getComponentName(type);
    var propTypes;

    if (typeof type === 'function') {
      propTypes = type.propTypes;
    } else if (typeof type === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
    // Inner props are checked in the reconciler.
    type.$$typeof === REACT_MEMO_TYPE)) {
      propTypes = type.propTypes;
    } else {
      return;
    }

    if (propTypes) {
      setCurrentlyValidatingElement(element);
      checkPropTypes(propTypes, element.props, 'prop', name, ReactDebugCurrentFrame.getStackAddendum);
      setCurrentlyValidatingElement(null);
    } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {
      propTypesMisspellWarningShown = true;

      error('Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', name || 'Unknown');
    }

    if (typeof type.getDefaultProps === 'function' && !type.getDefaultProps.isReactClassApproved) {
      error('getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.');
    }
  }
}
/**
 * Given a fragment, validate that it can only be provided with fragment props
 * @param {ReactElement} fragment
 */


function validateFragmentProps(fragment) {
  {
    setCurrentlyValidatingElement(fragment);
    var keys = Object.keys(fragment.props);

    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];

      if (key !== 'children' && key !== 'key') {
        error('Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.', key);

        break;
      }
    }

    if (fragment.ref !== null) {
      error('Invalid attribute `ref` supplied to `React.Fragment`.');
    }

    setCurrentlyValidatingElement(null);
  }
}
function createElementWithValidation(type, props, children) {
  var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to
  // succeed and there will likely be errors in render.

  if (!validType) {
    var info = '';

    if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
      info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and named imports.";
    }

    var sourceInfo = getSourceInfoErrorAddendumForProps(props);

    if (sourceInfo) {
      info += sourceInfo;
    } else {
      info += getDeclarationErrorAddendum();
    }

    var typeString;

    if (type === null) {
      typeString = 'null';
    } else if (Array.isArray(type)) {
      typeString = 'array';
    } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {
      typeString = "<" + (getComponentName(type.type) || 'Unknown') + " />";
      info = ' Did you accidentally export a JSX literal instead of a component?';
    } else {
      typeString = typeof type;
    }

    {
      error('React.createElement: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);
    }
  }

  var element = createElement.apply(this, arguments); // The result can be nullish if a mock or a custom function is used.
  // TODO: Drop this when these are no longer allowed as the type argument.

  if (element == null) {
    return element;
  } // Skip key warning if the type isn't valid since our key validation logic
  // doesn't expect a non-string/function type and can throw confusing errors.
  // We don't want exception behavior to differ between dev and prod.
  // (Rendering will throw with a helpful message and as soon as the type is
  // fixed, the key warnings will appear.)


  if (validType) {
    for (var i = 2; i < arguments.length; i++) {
      validateChildKeys(arguments[i], type);
    }
  }

  if (type === REACT_FRAGMENT_TYPE) {
    validateFragmentProps(element);
  } else {
    validatePropTypes(element);
  }

  return element;
}
var didWarnAboutDeprecatedCreateFactory = false;
function createFactoryWithValidation(type) {
  var validatedFactory = createElementWithValidation.bind(null, type);
  validatedFactory.type = type;

  {
    if (!didWarnAboutDeprecatedCreateFactory) {
      didWarnAboutDeprecatedCreateFactory = true;

      warn('React.createFactory() is deprecated and will be removed in ' + 'a future major release. Consider using JSX ' + 'or use React.createElement() directly instead.');
    } // Legacy hook: remove it


    Object.defineProperty(validatedFactory, 'type', {
      enumerable: false,
      get: function () {
        warn('Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.');

        Object.defineProperty(this, 'type', {
          value: type
        });
        return type;
      }
    });
  }

  return validatedFactory;
}
function cloneElementWithValidation(element, props, children) {
  var newElement = cloneElement.apply(this, arguments);

  for (var i = 2; i < arguments.length; i++) {
    validateChildKeys(arguments[i], newElement.type);
  }

  validatePropTypes(newElement);
  return newElement;
}

{

  try {
    var frozenObject = Object.freeze({});
    var testMap = new Map([[frozenObject, null]]);
    var testSet = new Set([frozenObject]); // This is necessary for Rollup to not consider these unused.
    // https://github.com/rollup/rollup/issues/1771
    // TODO: we can remove these if Rollup fixes the bug.

    testMap.set(0, 0);
    testSet.add(0);
  } catch (e) {
  }
}

var createElement$1 =  createElementWithValidation ;
var cloneElement$1 =  cloneElementWithValidation ;
var createFactory =  createFactoryWithValidation ;
var Children = {
  map: mapChildren,
  forEach: forEachChildren,
  count: countChildren,
  toArray: toArray,
  only: onlyChild
};

exports.Children = Children;
exports.Component = Component;
exports.Fragment = REACT_FRAGMENT_TYPE;
exports.Profiler = REACT_PROFILER_TYPE;
exports.PureComponent = PureComponent;
exports.StrictMode = REACT_STRICT_MODE_TYPE;
exports.Suspense = REACT_SUSPENSE_TYPE;
exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
exports.cloneElement = cloneElement$1;
exports.createContext = createContext;
exports.createElement = createElement$1;
exports.createFactory = createFactory;
exports.createRef = createRef;
exports.forwardRef = forwardRef;
exports.isValidElement = isValidElement;
exports.lazy = lazy;
exports.memo = memo;
exports.useCallback = useCallback;
exports.useContext = useContext;
exports.useDebugValue = useDebugValue;
exports.useEffect = useEffect;
exports.useImperativeHandle = useImperativeHandle;
exports.useLayoutEffect = useLayoutEffect;
exports.useMemo = useMemo;
exports.useReducer = useReducer;
exports.useRef = useRef;
exports.useState = useState;
exports.version = ReactVersion;
  })();
}


/***/ }),

/***/ "./node_modules/react/index.js":
/*!*************************************!*\
  !*** ./node_modules/react/index.js ***!
  \*************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


if (false) // removed by dead control flow
{} else {
  module.exports = __webpack_require__(/*! ./cjs/react.development.js */ "./node_modules/react/cjs/react.development.js");
}


/***/ }),

/***/ "./node_modules/scheduler/cjs/scheduler-tracing.development.js":
/*!*********************************************************************!*\
  !*** ./node_modules/scheduler/cjs/scheduler-tracing.development.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
/** @license React v0.19.1
 * scheduler-tracing.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */





if (true) {
  (function() {
'use strict';

var DEFAULT_THREAD_ID = 0; // Counters used to generate unique IDs.

var interactionIDCounter = 0;
var threadIDCounter = 0; // Set of currently traced interactions.
// Interactions "stack"–
// Meaning that newly traced interactions are appended to the previously active set.
// When an interaction goes out of scope, the previous set (if any) is restored.

exports.__interactionsRef = null; // Listener(s) to notify when interactions begin and end.

exports.__subscriberRef = null;

{
  exports.__interactionsRef = {
    current: new Set()
  };
  exports.__subscriberRef = {
    current: null
  };
}
function unstable_clear(callback) {

  var prevInteractions = exports.__interactionsRef.current;
  exports.__interactionsRef.current = new Set();

  try {
    return callback();
  } finally {
    exports.__interactionsRef.current = prevInteractions;
  }
}
function unstable_getCurrent() {
  {
    return exports.__interactionsRef.current;
  }
}
function unstable_getThreadID() {
  return ++threadIDCounter;
}
function unstable_trace(name, timestamp, callback) {
  var threadID = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : DEFAULT_THREAD_ID;

  var interaction = {
    __count: 1,
    id: interactionIDCounter++,
    name: name,
    timestamp: timestamp
  };
  var prevInteractions = exports.__interactionsRef.current; // Traced interactions should stack/accumulate.
  // To do that, clone the current interactions.
  // The previous set will be restored upon completion.

  var interactions = new Set(prevInteractions);
  interactions.add(interaction);
  exports.__interactionsRef.current = interactions;
  var subscriber = exports.__subscriberRef.current;
  var returnValue;

  try {
    if (subscriber !== null) {
      subscriber.onInteractionTraced(interaction);
    }
  } finally {
    try {
      if (subscriber !== null) {
        subscriber.onWorkStarted(interactions, threadID);
      }
    } finally {
      try {
        returnValue = callback();
      } finally {
        exports.__interactionsRef.current = prevInteractions;

        try {
          if (subscriber !== null) {
            subscriber.onWorkStopped(interactions, threadID);
          }
        } finally {
          interaction.__count--; // If no async work was scheduled for this interaction,
          // Notify subscribers that it's completed.

          if (subscriber !== null && interaction.__count === 0) {
            subscriber.onInteractionScheduledWorkCompleted(interaction);
          }
        }
      }
    }
  }

  return returnValue;
}
function unstable_wrap(callback) {
  var threadID = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_THREAD_ID;

  var wrappedInteractions = exports.__interactionsRef.current;
  var subscriber = exports.__subscriberRef.current;

  if (subscriber !== null) {
    subscriber.onWorkScheduled(wrappedInteractions, threadID);
  } // Update the pending async work count for the current interactions.
  // Update after calling subscribers in case of error.


  wrappedInteractions.forEach(function (interaction) {
    interaction.__count++;
  });
  var hasRun = false;

  function wrapped() {
    var prevInteractions = exports.__interactionsRef.current;
    exports.__interactionsRef.current = wrappedInteractions;
    subscriber = exports.__subscriberRef.current;

    try {
      var returnValue;

      try {
        if (subscriber !== null) {
          subscriber.onWorkStarted(wrappedInteractions, threadID);
        }
      } finally {
        try {
          returnValue = callback.apply(undefined, arguments);
        } finally {
          exports.__interactionsRef.current = prevInteractions;

          if (subscriber !== null) {
            subscriber.onWorkStopped(wrappedInteractions, threadID);
          }
        }
      }

      return returnValue;
    } finally {
      if (!hasRun) {
        // We only expect a wrapped function to be executed once,
        // But in the event that it's executed more than once–
        // Only decrement the outstanding interaction counts once.
        hasRun = true; // Update pending async counts for all wrapped interactions.
        // If this was the last scheduled async work for any of them,
        // Mark them as completed.

        wrappedInteractions.forEach(function (interaction) {
          interaction.__count--;

          if (subscriber !== null && interaction.__count === 0) {
            subscriber.onInteractionScheduledWorkCompleted(interaction);
          }
        });
      }
    }
  }

  wrapped.cancel = function cancel() {
    subscriber = exports.__subscriberRef.current;

    try {
      if (subscriber !== null) {
        subscriber.onWorkCanceled(wrappedInteractions, threadID);
      }
    } finally {
      // Update pending async counts for all wrapped interactions.
      // If this was the last scheduled async work for any of them,
      // Mark them as completed.
      wrappedInteractions.forEach(function (interaction) {
        interaction.__count--;

        if (subscriber && interaction.__count === 0) {
          subscriber.onInteractionScheduledWorkCompleted(interaction);
        }
      });
    }
  };

  return wrapped;
}

var subscribers = null;

{
  subscribers = new Set();
}

function unstable_subscribe(subscriber) {
  {
    subscribers.add(subscriber);

    if (subscribers.size === 1) {
      exports.__subscriberRef.current = {
        onInteractionScheduledWorkCompleted: onInteractionScheduledWorkCompleted,
        onInteractionTraced: onInteractionTraced,
        onWorkCanceled: onWorkCanceled,
        onWorkScheduled: onWorkScheduled,
        onWorkStarted: onWorkStarted,
        onWorkStopped: onWorkStopped
      };
    }
  }
}
function unstable_unsubscribe(subscriber) {
  {
    subscribers.delete(subscriber);

    if (subscribers.size === 0) {
      exports.__subscriberRef.current = null;
    }
  }
}

function onInteractionTraced(interaction) {
  var didCatchError = false;
  var caughtError = null;
  subscribers.forEach(function (subscriber) {
    try {
      subscriber.onInteractionTraced(interaction);
    } catch (error) {
      if (!didCatchError) {
        didCatchError = true;
        caughtError = error;
      }
    }
  });

  if (didCatchError) {
    throw caughtError;
  }
}

function onInteractionScheduledWorkCompleted(interaction) {
  var didCatchError = false;
  var caughtError = null;
  subscribers.forEach(function (subscriber) {
    try {
      subscriber.onInteractionScheduledWorkCompleted(interaction);
    } catch (error) {
      if (!didCatchError) {
        didCatchError = true;
        caughtError = error;
      }
    }
  });

  if (didCatchError) {
    throw caughtError;
  }
}

function onWorkScheduled(interactions, threadID) {
  var didCatchError = false;
  var caughtError = null;
  subscribers.forEach(function (subscriber) {
    try {
      subscriber.onWorkScheduled(interactions, threadID);
    } catch (error) {
      if (!didCatchError) {
        didCatchError = true;
        caughtError = error;
      }
    }
  });

  if (didCatchError) {
    throw caughtError;
  }
}

function onWorkStarted(interactions, threadID) {
  var didCatchError = false;
  var caughtError = null;
  subscribers.forEach(function (subscriber) {
    try {
      subscriber.onWorkStarted(interactions, threadID);
    } catch (error) {
      if (!didCatchError) {
        didCatchError = true;
        caughtError = error;
      }
    }
  });

  if (didCatchError) {
    throw caughtError;
  }
}

function onWorkStopped(interactions, threadID) {
  var didCatchError = false;
  var caughtError = null;
  subscribers.forEach(function (subscriber) {
    try {
      subscriber.onWorkStopped(interactions, threadID);
    } catch (error) {
      if (!didCatchError) {
        didCatchError = true;
        caughtError = error;
      }
    }
  });

  if (didCatchError) {
    throw caughtError;
  }
}

function onWorkCanceled(interactions, threadID) {
  var didCatchError = false;
  var caughtError = null;
  subscribers.forEach(function (subscriber) {
    try {
      subscriber.onWorkCanceled(interactions, threadID);
    } catch (error) {
      if (!didCatchError) {
        didCatchError = true;
        caughtError = error;
      }
    }
  });

  if (didCatchError) {
    throw caughtError;
  }
}

exports.unstable_clear = unstable_clear;
exports.unstable_getCurrent = unstable_getCurrent;
exports.unstable_getThreadID = unstable_getThreadID;
exports.unstable_subscribe = unstable_subscribe;
exports.unstable_trace = unstable_trace;
exports.unstable_unsubscribe = unstable_unsubscribe;
exports.unstable_wrap = unstable_wrap;
  })();
}


/***/ }),

/***/ "./node_modules/scheduler/cjs/scheduler.development.js":
/*!*************************************************************!*\
  !*** ./node_modules/scheduler/cjs/scheduler.development.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
/** @license React v0.19.1
 * scheduler.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */





if (true) {
  (function() {
'use strict';

var enableSchedulerDebugging = false;
var enableProfiling = true;

var requestHostCallback;
var requestHostTimeout;
var cancelHostTimeout;
var shouldYieldToHost;
var requestPaint;

if ( // If Scheduler runs in a non-DOM environment, it falls back to a naive
// implementation using setTimeout.
typeof window === 'undefined' || // Check if MessageChannel is supported, too.
typeof MessageChannel !== 'function') {
  // If this accidentally gets imported in a non-browser environment, e.g. JavaScriptCore,
  // fallback to a naive implementation.
  var _callback = null;
  var _timeoutID = null;

  var _flushCallback = function () {
    if (_callback !== null) {
      try {
        var currentTime = exports.unstable_now();
        var hasRemainingTime = true;

        _callback(hasRemainingTime, currentTime);

        _callback = null;
      } catch (e) {
        setTimeout(_flushCallback, 0);
        throw e;
      }
    }
  };

  var initialTime = Date.now();

  exports.unstable_now = function () {
    return Date.now() - initialTime;
  };

  requestHostCallback = function (cb) {
    if (_callback !== null) {
      // Protect against re-entrancy.
      setTimeout(requestHostCallback, 0, cb);
    } else {
      _callback = cb;
      setTimeout(_flushCallback, 0);
    }
  };

  requestHostTimeout = function (cb, ms) {
    _timeoutID = setTimeout(cb, ms);
  };

  cancelHostTimeout = function () {
    clearTimeout(_timeoutID);
  };

  shouldYieldToHost = function () {
    return false;
  };

  requestPaint = exports.unstable_forceFrameRate = function () {};
} else {
  // Capture local references to native APIs, in case a polyfill overrides them.
  var performance = window.performance;
  var _Date = window.Date;
  var _setTimeout = window.setTimeout;
  var _clearTimeout = window.clearTimeout;

  if (typeof console !== 'undefined') {
    // TODO: Scheduler no longer requires these methods to be polyfilled. But
    // maybe we want to continue warning if they don't exist, to preserve the
    // option to rely on it in the future?
    var requestAnimationFrame = window.requestAnimationFrame;
    var cancelAnimationFrame = window.cancelAnimationFrame; // TODO: Remove fb.me link

    if (typeof requestAnimationFrame !== 'function') {
      // Using console['error'] to evade Babel and ESLint
      console['error']("This browser doesn't support requestAnimationFrame. " + 'Make sure that you load a ' + 'polyfill in older browsers. https://fb.me/react-polyfills');
    }

    if (typeof cancelAnimationFrame !== 'function') {
      // Using console['error'] to evade Babel and ESLint
      console['error']("This browser doesn't support cancelAnimationFrame. " + 'Make sure that you load a ' + 'polyfill in older browsers. https://fb.me/react-polyfills');
    }
  }

  if (typeof performance === 'object' && typeof performance.now === 'function') {
    exports.unstable_now = function () {
      return performance.now();
    };
  } else {
    var _initialTime = _Date.now();

    exports.unstable_now = function () {
      return _Date.now() - _initialTime;
    };
  }

  var isMessageLoopRunning = false;
  var scheduledHostCallback = null;
  var taskTimeoutID = -1; // Scheduler periodically yields in case there is other work on the main
  // thread, like user events. By default, it yields multiple times per frame.
  // It does not attempt to align with frame boundaries, since most tasks don't
  // need to be frame aligned; for those that do, use requestAnimationFrame.

  var yieldInterval = 5;
  var deadline = 0; // TODO: Make this configurable

  {
    // `isInputPending` is not available. Since we have no way of knowing if
    // there's pending input, always yield at the end of the frame.
    shouldYieldToHost = function () {
      return exports.unstable_now() >= deadline;
    }; // Since we yield every frame regardless, `requestPaint` has no effect.


    requestPaint = function () {};
  }

  exports.unstable_forceFrameRate = function (fps) {
    if (fps < 0 || fps > 125) {
      // Using console['error'] to evade Babel and ESLint
      console['error']('forceFrameRate takes a positive int between 0 and 125, ' + 'forcing framerates higher than 125 fps is not unsupported');
      return;
    }

    if (fps > 0) {
      yieldInterval = Math.floor(1000 / fps);
    } else {
      // reset the framerate
      yieldInterval = 5;
    }
  };

  var performWorkUntilDeadline = function () {
    if (scheduledHostCallback !== null) {
      var currentTime = exports.unstable_now(); // Yield after `yieldInterval` ms, regardless of where we are in the vsync
      // cycle. This means there's always time remaining at the beginning of
      // the message event.

      deadline = currentTime + yieldInterval;
      var hasTimeRemaining = true;

      try {
        var hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);

        if (!hasMoreWork) {
          isMessageLoopRunning = false;
          scheduledHostCallback = null;
        } else {
          // If there's more work, schedule the next message event at the end
          // of the preceding one.
          port.postMessage(null);
        }
      } catch (error) {
        // If a scheduler task throws, exit the current browser task so the
        // error can be observed.
        port.postMessage(null);
        throw error;
      }
    } else {
      isMessageLoopRunning = false;
    } // Yielding to the browser will give it a chance to paint, so we can
  };

  var channel = new MessageChannel();
  var port = channel.port2;
  channel.port1.onmessage = performWorkUntilDeadline;

  requestHostCallback = function (callback) {
    scheduledHostCallback = callback;

    if (!isMessageLoopRunning) {
      isMessageLoopRunning = true;
      port.postMessage(null);
    }
  };

  requestHostTimeout = function (callback, ms) {
    taskTimeoutID = _setTimeout(function () {
      callback(exports.unstable_now());
    }, ms);
  };

  cancelHostTimeout = function () {
    _clearTimeout(taskTimeoutID);

    taskTimeoutID = -1;
  };
}

function push(heap, node) {
  var index = heap.length;
  heap.push(node);
  siftUp(heap, node, index);
}
function peek(heap) {
  var first = heap[0];
  return first === undefined ? null : first;
}
function pop(heap) {
  var first = heap[0];

  if (first !== undefined) {
    var last = heap.pop();

    if (last !== first) {
      heap[0] = last;
      siftDown(heap, last, 0);
    }

    return first;
  } else {
    return null;
  }
}

function siftUp(heap, node, i) {
  var index = i;

  while (true) {
    var parentIndex = index - 1 >>> 1;
    var parent = heap[parentIndex];

    if (parent !== undefined && compare(parent, node) > 0) {
      // The parent is larger. Swap positions.
      heap[parentIndex] = node;
      heap[index] = parent;
      index = parentIndex;
    } else {
      // The parent is smaller. Exit.
      return;
    }
  }
}

function siftDown(heap, node, i) {
  var index = i;
  var length = heap.length;

  while (index < length) {
    var leftIndex = (index + 1) * 2 - 1;
    var left = heap[leftIndex];
    var rightIndex = leftIndex + 1;
    var right = heap[rightIndex]; // If the left or right node is smaller, swap with the smaller of those.

    if (left !== undefined && compare(left, node) < 0) {
      if (right !== undefined && compare(right, left) < 0) {
        heap[index] = right;
        heap[rightIndex] = node;
        index = rightIndex;
      } else {
        heap[index] = left;
        heap[leftIndex] = node;
        index = leftIndex;
      }
    } else if (right !== undefined && compare(right, node) < 0) {
      heap[index] = right;
      heap[rightIndex] = node;
      index = rightIndex;
    } else {
      // Neither child is smaller. Exit.
      return;
    }
  }
}

function compare(a, b) {
  // Compare sort index first, then task id.
  var diff = a.sortIndex - b.sortIndex;
  return diff !== 0 ? diff : a.id - b.id;
}

// TODO: Use symbols?
var NoPriority = 0;
var ImmediatePriority = 1;
var UserBlockingPriority = 2;
var NormalPriority = 3;
var LowPriority = 4;
var IdlePriority = 5;

var runIdCounter = 0;
var mainThreadIdCounter = 0;
var profilingStateSize = 4;
var sharedProfilingBuffer =  // $FlowFixMe Flow doesn't know about SharedArrayBuffer
typeof SharedArrayBuffer === 'function' ? new SharedArrayBuffer(profilingStateSize * Int32Array.BYTES_PER_ELEMENT) : // $FlowFixMe Flow doesn't know about ArrayBuffer
typeof ArrayBuffer === 'function' ? new ArrayBuffer(profilingStateSize * Int32Array.BYTES_PER_ELEMENT) : null // Don't crash the init path on IE9
;
var profilingState =  sharedProfilingBuffer !== null ? new Int32Array(sharedProfilingBuffer) : []; // We can't read this but it helps save bytes for null checks

var PRIORITY = 0;
var CURRENT_TASK_ID = 1;
var CURRENT_RUN_ID = 2;
var QUEUE_SIZE = 3;

{
  profilingState[PRIORITY] = NoPriority; // This is maintained with a counter, because the size of the priority queue
  // array might include canceled tasks.

  profilingState[QUEUE_SIZE] = 0;
  profilingState[CURRENT_TASK_ID] = 0;
} // Bytes per element is 4


var INITIAL_EVENT_LOG_SIZE = 131072;
var MAX_EVENT_LOG_SIZE = 524288; // Equivalent to 2 megabytes

var eventLogSize = 0;
var eventLogBuffer = null;
var eventLog = null;
var eventLogIndex = 0;
var TaskStartEvent = 1;
var TaskCompleteEvent = 2;
var TaskErrorEvent = 3;
var TaskCancelEvent = 4;
var TaskRunEvent = 5;
var TaskYieldEvent = 6;
var SchedulerSuspendEvent = 7;
var SchedulerResumeEvent = 8;

function logEvent(entries) {
  if (eventLog !== null) {
    var offset = eventLogIndex;
    eventLogIndex += entries.length;

    if (eventLogIndex + 1 > eventLogSize) {
      eventLogSize *= 2;

      if (eventLogSize > MAX_EVENT_LOG_SIZE) {
        // Using console['error'] to evade Babel and ESLint
        console['error']("Scheduler Profiling: Event log exceeded maximum size. Don't " + 'forget to call `stopLoggingProfilingEvents()`.');
        stopLoggingProfilingEvents();
        return;
      }

      var newEventLog = new Int32Array(eventLogSize * 4);
      newEventLog.set(eventLog);
      eventLogBuffer = newEventLog.buffer;
      eventLog = newEventLog;
    }

    eventLog.set(entries, offset);
  }
}

function startLoggingProfilingEvents() {
  eventLogSize = INITIAL_EVENT_LOG_SIZE;
  eventLogBuffer = new ArrayBuffer(eventLogSize * 4);
  eventLog = new Int32Array(eventLogBuffer);
  eventLogIndex = 0;
}
function stopLoggingProfilingEvents() {
  var buffer = eventLogBuffer;
  eventLogSize = 0;
  eventLogBuffer = null;
  eventLog = null;
  eventLogIndex = 0;
  return buffer;
}
function markTaskStart(task, ms) {
  {
    profilingState[QUEUE_SIZE]++;

    if (eventLog !== null) {
      // performance.now returns a float, representing milliseconds. When the
      // event is logged, it's coerced to an int. Convert to microseconds to
      // maintain extra degrees of precision.
      logEvent([TaskStartEvent, ms * 1000, task.id, task.priorityLevel]);
    }
  }
}
function markTaskCompleted(task, ms) {
  {
    profilingState[PRIORITY] = NoPriority;
    profilingState[CURRENT_TASK_ID] = 0;
    profilingState[QUEUE_SIZE]--;

    if (eventLog !== null) {
      logEvent([TaskCompleteEvent, ms * 1000, task.id]);
    }
  }
}
function markTaskCanceled(task, ms) {
  {
    profilingState[QUEUE_SIZE]--;

    if (eventLog !== null) {
      logEvent([TaskCancelEvent, ms * 1000, task.id]);
    }
  }
}
function markTaskErrored(task, ms) {
  {
    profilingState[PRIORITY] = NoPriority;
    profilingState[CURRENT_TASK_ID] = 0;
    profilingState[QUEUE_SIZE]--;

    if (eventLog !== null) {
      logEvent([TaskErrorEvent, ms * 1000, task.id]);
    }
  }
}
function markTaskRun(task, ms) {
  {
    runIdCounter++;
    profilingState[PRIORITY] = task.priorityLevel;
    profilingState[CURRENT_TASK_ID] = task.id;
    profilingState[CURRENT_RUN_ID] = runIdCounter;

    if (eventLog !== null) {
      logEvent([TaskRunEvent, ms * 1000, task.id, runIdCounter]);
    }
  }
}
function markTaskYield(task, ms) {
  {
    profilingState[PRIORITY] = NoPriority;
    profilingState[CURRENT_TASK_ID] = 0;
    profilingState[CURRENT_RUN_ID] = 0;

    if (eventLog !== null) {
      logEvent([TaskYieldEvent, ms * 1000, task.id, runIdCounter]);
    }
  }
}
function markSchedulerSuspended(ms) {
  {
    mainThreadIdCounter++;

    if (eventLog !== null) {
      logEvent([SchedulerSuspendEvent, ms * 1000, mainThreadIdCounter]);
    }
  }
}
function markSchedulerUnsuspended(ms) {
  {
    if (eventLog !== null) {
      logEvent([SchedulerResumeEvent, ms * 1000, mainThreadIdCounter]);
    }
  }
}

/* eslint-disable no-var */
// Math.pow(2, 30) - 1
// 0b111111111111111111111111111111

var maxSigned31BitInt = 1073741823; // Times out immediately

var IMMEDIATE_PRIORITY_TIMEOUT = -1; // Eventually times out

var USER_BLOCKING_PRIORITY = 250;
var NORMAL_PRIORITY_TIMEOUT = 5000;
var LOW_PRIORITY_TIMEOUT = 10000; // Never times out

var IDLE_PRIORITY = maxSigned31BitInt; // Tasks are stored on a min heap

var taskQueue = [];
var timerQueue = []; // Incrementing id counter. Used to maintain insertion order.

var taskIdCounter = 1; // Pausing the scheduler is useful for debugging.
var currentTask = null;
var currentPriorityLevel = NormalPriority; // This is set while performing work, to prevent re-entrancy.

var isPerformingWork = false;
var isHostCallbackScheduled = false;
var isHostTimeoutScheduled = false;

function advanceTimers(currentTime) {
  // Check for tasks that are no longer delayed and add them to the queue.
  var timer = peek(timerQueue);

  while (timer !== null) {
    if (timer.callback === null) {
      // Timer was cancelled.
      pop(timerQueue);
    } else if (timer.startTime <= currentTime) {
      // Timer fired. Transfer to the task queue.
      pop(timerQueue);
      timer.sortIndex = timer.expirationTime;
      push(taskQueue, timer);

      {
        markTaskStart(timer, currentTime);
        timer.isQueued = true;
      }
    } else {
      // Remaining timers are pending.
      return;
    }

    timer = peek(timerQueue);
  }
}

function handleTimeout(currentTime) {
  isHostTimeoutScheduled = false;
  advanceTimers(currentTime);

  if (!isHostCallbackScheduled) {
    if (peek(taskQueue) !== null) {
      isHostCallbackScheduled = true;
      requestHostCallback(flushWork);
    } else {
      var firstTimer = peek(timerQueue);

      if (firstTimer !== null) {
        requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
      }
    }
  }
}

function flushWork(hasTimeRemaining, initialTime) {
  {
    markSchedulerUnsuspended(initialTime);
  } // We'll need a host callback the next time work is scheduled.


  isHostCallbackScheduled = false;

  if (isHostTimeoutScheduled) {
    // We scheduled a timeout but it's no longer needed. Cancel it.
    isHostTimeoutScheduled = false;
    cancelHostTimeout();
  }

  isPerformingWork = true;
  var previousPriorityLevel = currentPriorityLevel;

  try {
    if (enableProfiling) {
      try {
        return workLoop(hasTimeRemaining, initialTime);
      } catch (error) {
        if (currentTask !== null) {
          var currentTime = exports.unstable_now();
          markTaskErrored(currentTask, currentTime);
          currentTask.isQueued = false;
        }

        throw error;
      }
    } else {
      // No catch in prod codepath.
      return workLoop(hasTimeRemaining, initialTime);
    }
  } finally {
    currentTask = null;
    currentPriorityLevel = previousPriorityLevel;
    isPerformingWork = false;

    {
      var _currentTime = exports.unstable_now();

      markSchedulerSuspended(_currentTime);
    }
  }
}

function workLoop(hasTimeRemaining, initialTime) {
  var currentTime = initialTime;
  advanceTimers(currentTime);
  currentTask = peek(taskQueue);

  while (currentTask !== null && !(enableSchedulerDebugging )) {
    if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {
      // This currentTask hasn't expired, and we've reached the deadline.
      break;
    }

    var callback = currentTask.callback;

    if (callback !== null) {
      currentTask.callback = null;
      currentPriorityLevel = currentTask.priorityLevel;
      var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
      markTaskRun(currentTask, currentTime);
      var continuationCallback = callback(didUserCallbackTimeout);
      currentTime = exports.unstable_now();

      if (typeof continuationCallback === 'function') {
        currentTask.callback = continuationCallback;
        markTaskYield(currentTask, currentTime);
      } else {
        {
          markTaskCompleted(currentTask, currentTime);
          currentTask.isQueued = false;
        }

        if (currentTask === peek(taskQueue)) {
          pop(taskQueue);
        }
      }

      advanceTimers(currentTime);
    } else {
      pop(taskQueue);
    }

    currentTask = peek(taskQueue);
  } // Return whether there's additional work


  if (currentTask !== null) {
    return true;
  } else {
    var firstTimer = peek(timerQueue);

    if (firstTimer !== null) {
      requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
    }

    return false;
  }
}

function unstable_runWithPriority(priorityLevel, eventHandler) {
  switch (priorityLevel) {
    case ImmediatePriority:
    case UserBlockingPriority:
    case NormalPriority:
    case LowPriority:
    case IdlePriority:
      break;

    default:
      priorityLevel = NormalPriority;
  }

  var previousPriorityLevel = currentPriorityLevel;
  currentPriorityLevel = priorityLevel;

  try {
    return eventHandler();
  } finally {
    currentPriorityLevel = previousPriorityLevel;
  }
}

function unstable_next(eventHandler) {
  var priorityLevel;

  switch (currentPriorityLevel) {
    case ImmediatePriority:
    case UserBlockingPriority:
    case NormalPriority:
      // Shift down to normal priority
      priorityLevel = NormalPriority;
      break;

    default:
      // Anything lower than normal priority should remain at the current level.
      priorityLevel = currentPriorityLevel;
      break;
  }

  var previousPriorityLevel = currentPriorityLevel;
  currentPriorityLevel = priorityLevel;

  try {
    return eventHandler();
  } finally {
    currentPriorityLevel = previousPriorityLevel;
  }
}

function unstable_wrapCallback(callback) {
  var parentPriorityLevel = currentPriorityLevel;
  return function () {
    // This is a fork of runWithPriority, inlined for performance.
    var previousPriorityLevel = currentPriorityLevel;
    currentPriorityLevel = parentPriorityLevel;

    try {
      return callback.apply(this, arguments);
    } finally {
      currentPriorityLevel = previousPriorityLevel;
    }
  };
}

function timeoutForPriorityLevel(priorityLevel) {
  switch (priorityLevel) {
    case ImmediatePriority:
      return IMMEDIATE_PRIORITY_TIMEOUT;

    case UserBlockingPriority:
      return USER_BLOCKING_PRIORITY;

    case IdlePriority:
      return IDLE_PRIORITY;

    case LowPriority:
      return LOW_PRIORITY_TIMEOUT;

    case NormalPriority:
    default:
      return NORMAL_PRIORITY_TIMEOUT;
  }
}

function unstable_scheduleCallback(priorityLevel, callback, options) {
  var currentTime = exports.unstable_now();
  var startTime;
  var timeout;

  if (typeof options === 'object' && options !== null) {
    var delay = options.delay;

    if (typeof delay === 'number' && delay > 0) {
      startTime = currentTime + delay;
    } else {
      startTime = currentTime;
    }

    timeout = typeof options.timeout === 'number' ? options.timeout : timeoutForPriorityLevel(priorityLevel);
  } else {
    timeout = timeoutForPriorityLevel(priorityLevel);
    startTime = currentTime;
  }

  var expirationTime = startTime + timeout;
  var newTask = {
    id: taskIdCounter++,
    callback: callback,
    priorityLevel: priorityLevel,
    startTime: startTime,
    expirationTime: expirationTime,
    sortIndex: -1
  };

  {
    newTask.isQueued = false;
  }

  if (startTime > currentTime) {
    // This is a delayed task.
    newTask.sortIndex = startTime;
    push(timerQueue, newTask);

    if (peek(taskQueue) === null && newTask === peek(timerQueue)) {
      // All tasks are delayed, and this is the task with the earliest delay.
      if (isHostTimeoutScheduled) {
        // Cancel an existing timeout.
        cancelHostTimeout();
      } else {
        isHostTimeoutScheduled = true;
      } // Schedule a timeout.


      requestHostTimeout(handleTimeout, startTime - currentTime);
    }
  } else {
    newTask.sortIndex = expirationTime;
    push(taskQueue, newTask);

    {
      markTaskStart(newTask, currentTime);
      newTask.isQueued = true;
    } // Schedule a host callback, if needed. If we're already performing work,
    // wait until the next time we yield.


    if (!isHostCallbackScheduled && !isPerformingWork) {
      isHostCallbackScheduled = true;
      requestHostCallback(flushWork);
    }
  }

  return newTask;
}

function unstable_pauseExecution() {
}

function unstable_continueExecution() {

  if (!isHostCallbackScheduled && !isPerformingWork) {
    isHostCallbackScheduled = true;
    requestHostCallback(flushWork);
  }
}

function unstable_getFirstCallbackNode() {
  return peek(taskQueue);
}

function unstable_cancelCallback(task) {
  {
    if (task.isQueued) {
      var currentTime = exports.unstable_now();
      markTaskCanceled(task, currentTime);
      task.isQueued = false;
    }
  } // Null out the callback to indicate the task has been canceled. (Can't
  // remove from the queue because you can't remove arbitrary nodes from an
  // array based heap, only the first one.)


  task.callback = null;
}

function unstable_getCurrentPriorityLevel() {
  return currentPriorityLevel;
}

function unstable_shouldYield() {
  var currentTime = exports.unstable_now();
  advanceTimers(currentTime);
  var firstTask = peek(taskQueue);
  return firstTask !== currentTask && currentTask !== null && firstTask !== null && firstTask.callback !== null && firstTask.startTime <= currentTime && firstTask.expirationTime < currentTask.expirationTime || shouldYieldToHost();
}

var unstable_requestPaint = requestPaint;
var unstable_Profiling =  {
  startLoggingProfilingEvents: startLoggingProfilingEvents,
  stopLoggingProfilingEvents: stopLoggingProfilingEvents,
  sharedProfilingBuffer: sharedProfilingBuffer
} ;

exports.unstable_IdlePriority = IdlePriority;
exports.unstable_ImmediatePriority = ImmediatePriority;
exports.unstable_LowPriority = LowPriority;
exports.unstable_NormalPriority = NormalPriority;
exports.unstable_Profiling = unstable_Profiling;
exports.unstable_UserBlockingPriority = UserBlockingPriority;
exports.unstable_cancelCallback = unstable_cancelCallback;
exports.unstable_continueExecution = unstable_continueExecution;
exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
exports.unstable_next = unstable_next;
exports.unstable_pauseExecution = unstable_pauseExecution;
exports.unstable_requestPaint = unstable_requestPaint;
exports.unstable_runWithPriority = unstable_runWithPriority;
exports.unstable_scheduleCallback = unstable_scheduleCallback;
exports.unstable_shouldYield = unstable_shouldYield;
exports.unstable_wrapCallback = unstable_wrapCallback;
  })();
}


/***/ }),

/***/ "./node_modules/scheduler/index.js":
/*!*****************************************!*\
  !*** ./node_modules/scheduler/index.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


if (false) // removed by dead control flow
{} else {
  module.exports = __webpack_require__(/*! ./cjs/scheduler.development.js */ "./node_modules/scheduler/cjs/scheduler.development.js");
}


/***/ }),

/***/ "./node_modules/scheduler/tracing.js":
/*!*******************************************!*\
  !*** ./node_modules/scheduler/tracing.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


if (false) // removed by dead control flow
{} else {
  module.exports = __webpack_require__(/*! ./cjs/scheduler-tracing.development.js */ "./node_modules/scheduler/cjs/scheduler-tracing.development.js");
}


/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js":
/*!****************************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js ***!
  \****************************************************************************/
/***/ ((module) => {

"use strict";


var stylesInDOM = [];
function getIndexByIdentifier(identifier) {
  var result = -1;
  for (var i = 0; i < stylesInDOM.length; i++) {
    if (stylesInDOM[i].identifier === identifier) {
      result = i;
      break;
    }
  }
  return result;
}
function modulesToDom(list, options) {
  var idCountMap = {};
  var identifiers = [];
  for (var i = 0; i < list.length; i++) {
    var item = list[i];
    var id = options.base ? item[0] + options.base : item[0];
    var count = idCountMap[id] || 0;
    var identifier = "".concat(id, " ").concat(count);
    idCountMap[id] = count + 1;
    var indexByIdentifier = getIndexByIdentifier(identifier);
    var obj = {
      css: item[1],
      media: item[2],
      sourceMap: item[3],
      supports: item[4],
      layer: item[5]
    };
    if (indexByIdentifier !== -1) {
      stylesInDOM[indexByIdentifier].references++;
      stylesInDOM[indexByIdentifier].updater(obj);
    } else {
      var updater = addElementStyle(obj, options);
      options.byIndex = i;
      stylesInDOM.splice(i, 0, {
        identifier: identifier,
        updater: updater,
        references: 1
      });
    }
    identifiers.push(identifier);
  }
  return identifiers;
}
function addElementStyle(obj, options) {
  var api = options.domAPI(options);
  api.update(obj);
  var updater = function updater(newObj) {
    if (newObj) {
      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap && newObj.supports === obj.supports && newObj.layer === obj.layer) {
        return;
      }
      api.update(obj = newObj);
    } else {
      api.remove();
    }
  };
  return updater;
}
module.exports = function (list, options) {
  options = options || {};
  list = list || [];
  var lastIdentifiers = modulesToDom(list, options);
  return function update(newList) {
    newList = newList || [];
    for (var i = 0; i < lastIdentifiers.length; i++) {
      var identifier = lastIdentifiers[i];
      var index = getIndexByIdentifier(identifier);
      stylesInDOM[index].references--;
    }
    var newLastIdentifiers = modulesToDom(newList, options);
    for (var _i = 0; _i < lastIdentifiers.length; _i++) {
      var _identifier = lastIdentifiers[_i];
      var _index = getIndexByIdentifier(_identifier);
      if (stylesInDOM[_index].references === 0) {
        stylesInDOM[_index].updater();
        stylesInDOM.splice(_index, 1);
      }
    }
    lastIdentifiers = newLastIdentifiers;
  };
};

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/insertBySelector.js":
/*!********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/insertBySelector.js ***!
  \********************************************************************/
/***/ ((module) => {

"use strict";


var memo = {};

/* istanbul ignore next  */
function getTarget(target) {
  if (typeof memo[target] === "undefined") {
    var styleTarget = document.querySelector(target);

    // Special case to return head of iframe instead of iframe itself
    if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {
      try {
        // This will throw an exception if access to iframe is blocked
        // due to cross-origin restrictions
        styleTarget = styleTarget.contentDocument.head;
      } catch (e) {
        // istanbul ignore next
        styleTarget = null;
      }
    }
    memo[target] = styleTarget;
  }
  return memo[target];
}

/* istanbul ignore next  */
function insertBySelector(insert, style) {
  var target = getTarget(insert);
  if (!target) {
    throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");
  }
  target.appendChild(style);
}
module.exports = insertBySelector;

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/insertStyleElement.js":
/*!**********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/insertStyleElement.js ***!
  \**********************************************************************/
/***/ ((module) => {

"use strict";


/* istanbul ignore next  */
function insertStyleElement(options) {
  var element = document.createElement("style");
  options.setAttributes(element, options.attributes);
  options.insert(element, options.options);
  return element;
}
module.exports = insertStyleElement;

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js ***!
  \**********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


/* istanbul ignore next  */
function setAttributesWithoutAttributes(styleElement) {
  var nonce =  true ? __webpack_require__.nc : 0;
  if (nonce) {
    styleElement.setAttribute("nonce", nonce);
  }
}
module.exports = setAttributesWithoutAttributes;

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/styleDomAPI.js":
/*!***************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/styleDomAPI.js ***!
  \***************************************************************/
/***/ ((module) => {

"use strict";


/* istanbul ignore next  */
function apply(styleElement, options, obj) {
  var css = "";
  if (obj.supports) {
    css += "@supports (".concat(obj.supports, ") {");
  }
  if (obj.media) {
    css += "@media ".concat(obj.media, " {");
  }
  var needLayer = typeof obj.layer !== "undefined";
  if (needLayer) {
    css += "@layer".concat(obj.layer.length > 0 ? " ".concat(obj.layer) : "", " {");
  }
  css += obj.css;
  if (needLayer) {
    css += "}";
  }
  if (obj.media) {
    css += "}";
  }
  if (obj.supports) {
    css += "}";
  }
  var sourceMap = obj.sourceMap;
  if (sourceMap && typeof btoa !== "undefined") {
    css += "\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), " */");
  }

  // For old IE
  /* istanbul ignore if  */
  options.styleTagTransform(css, styleElement, options.options);
}
function removeStyleElement(styleElement) {
  // istanbul ignore if
  if (styleElement.parentNode === null) {
    return false;
  }
  styleElement.parentNode.removeChild(styleElement);
}

/* istanbul ignore next  */
function domAPI(options) {
  if (typeof document === "undefined") {
    return {
      update: function update() {},
      remove: function remove() {}
    };
  }
  var styleElement = options.insertStyleElement(options);
  return {
    update: function update(obj) {
      apply(styleElement, options, obj);
    },
    remove: function remove() {
      removeStyleElement(styleElement);
    }
  };
}
module.exports = domAPI;

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/styleTagTransform.js":
/*!*********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/styleTagTransform.js ***!
  \*********************************************************************/
/***/ ((module) => {

"use strict";


/* istanbul ignore next  */
function styleTagTransform(css, styleElement) {
  if (styleElement.styleSheet) {
    styleElement.styleSheet.cssText = css;
  } else {
    while (styleElement.firstChild) {
      styleElement.removeChild(styleElement.firstChild);
    }
    styleElement.appendChild(document.createTextNode(css));
  }
}
module.exports = styleTagTransform;

/***/ }),

/***/ "./node_modules/tslib/tslib.es6.mjs":
/*!******************************************!*\
  !*** ./node_modules/tslib/tslib.es6.mjs ***!
  \******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   __addDisposableResource: () => (/* binding */ __addDisposableResource),
/* harmony export */   __assign: () => (/* binding */ __assign),
/* harmony export */   __asyncDelegator: () => (/* binding */ __asyncDelegator),
/* harmony export */   __asyncGenerator: () => (/* binding */ __asyncGenerator),
/* harmony export */   __asyncValues: () => (/* binding */ __asyncValues),
/* harmony export */   __await: () => (/* binding */ __await),
/* harmony export */   __awaiter: () => (/* binding */ __awaiter),
/* harmony export */   __classPrivateFieldGet: () => (/* binding */ __classPrivateFieldGet),
/* harmony export */   __classPrivateFieldIn: () => (/* binding */ __classPrivateFieldIn),
/* harmony export */   __classPrivateFieldSet: () => (/* binding */ __classPrivateFieldSet),
/* harmony export */   __createBinding: () => (/* binding */ __createBinding),
/* harmony export */   __decorate: () => (/* binding */ __decorate),
/* harmony export */   __disposeResources: () => (/* binding */ __disposeResources),
/* harmony export */   __esDecorate: () => (/* binding */ __esDecorate),
/* harmony export */   __exportStar: () => (/* binding */ __exportStar),
/* harmony export */   __extends: () => (/* binding */ __extends),
/* harmony export */   __generator: () => (/* binding */ __generator),
/* harmony export */   __importDefault: () => (/* binding */ __importDefault),
/* harmony export */   __importStar: () => (/* binding */ __importStar),
/* harmony export */   __makeTemplateObject: () => (/* binding */ __makeTemplateObject),
/* harmony export */   __metadata: () => (/* binding */ __metadata),
/* harmony export */   __param: () => (/* binding */ __param),
/* harmony export */   __propKey: () => (/* binding */ __propKey),
/* harmony export */   __read: () => (/* binding */ __read),
/* harmony export */   __rest: () => (/* binding */ __rest),
/* harmony export */   __runInitializers: () => (/* binding */ __runInitializers),
/* harmony export */   __setFunctionName: () => (/* binding */ __setFunctionName),
/* harmony export */   __spread: () => (/* binding */ __spread),
/* harmony export */   __spreadArray: () => (/* binding */ __spreadArray),
/* harmony export */   __spreadArrays: () => (/* binding */ __spreadArrays),
/* harmony export */   __values: () => (/* binding */ __values),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise, SuppressedError, Symbol */

var extendStatics = function(d, b) {
  extendStatics = Object.setPrototypeOf ||
      ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
      function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
  return extendStatics(d, b);
};

function __extends(d, b) {
  if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
  extendStatics(d, b);
  function __() { this.constructor = d; }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function() {
  __assign = Object.assign || function __assign(t) {
      for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }
      return t;
  }
  return __assign.apply(this, arguments);
}

function __rest(s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
              t[p[i]] = s[p[i]];
      }
  return t;
}

function __decorate(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
}

function __param(paramIndex, decorator) {
  return function (target, key) { decorator(target, key, paramIndex); }
}

function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
  function accept(f) { if (f !== void 0 && typeof f !== "function") throw new TypeError("Function expected"); return f; }
  var kind = contextIn.kind, key = kind === "getter" ? "get" : kind === "setter" ? "set" : "value";
  var target = !descriptorIn && ctor ? contextIn["static"] ? ctor : ctor.prototype : null;
  var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});
  var _, done = false;
  for (var i = decorators.length - 1; i >= 0; i--) {
      var context = {};
      for (var p in contextIn) context[p] = p === "access" ? {} : contextIn[p];
      for (var p in contextIn.access) context.access[p] = contextIn.access[p];
      context.addInitializer = function (f) { if (done) throw new TypeError("Cannot add initializers after decoration has completed"); extraInitializers.push(accept(f || null)); };
      var result = (0, decorators[i])(kind === "accessor" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);
      if (kind === "accessor") {
          if (result === void 0) continue;
          if (result === null || typeof result !== "object") throw new TypeError("Object expected");
          if (_ = accept(result.get)) descriptor.get = _;
          if (_ = accept(result.set)) descriptor.set = _;
          if (_ = accept(result.init)) initializers.unshift(_);
      }
      else if (_ = accept(result)) {
          if (kind === "field") initializers.unshift(_);
          else descriptor[key] = _;
      }
  }
  if (target) Object.defineProperty(target, contextIn.name, descriptor);
  done = true;
};

function __runInitializers(thisArg, initializers, value) {
  var useValue = arguments.length > 2;
  for (var i = 0; i < initializers.length; i++) {
      value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);
  }
  return useValue ? value : void 0;
};

function __propKey(x) {
  return typeof x === "symbol" ? x : "".concat(x);
};

function __setFunctionName(f, name, prefix) {
  if (typeof name === "symbol") name = name.description ? "[".concat(name.description, "]") : "";
  return Object.defineProperty(f, "name", { configurable: true, value: prefix ? "".concat(prefix, " ", name) : name });
};

function __metadata(metadataKey, metadataValue) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}

function __awaiter(thisArg, _arguments, P, generator) {
  function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
  return new (P || (P = Promise))(function (resolve, reject) {
      function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
      function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
      function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}

function __generator(thisArg, body) {
  var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
  function verb(n) { return function (v) { return step([n, v]); }; }
  function step(op) {
      if (f) throw new TypeError("Generator is already executing.");
      while (g && (g = 0, op[0] && (_ = 0)), _) try {
          if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
          if (y = 0, t) op = [op[0] & 2, t.value];
          switch (op[0]) {
              case 0: case 1: t = op; break;
              case 4: _.label++; return { value: op[1], done: false };
              case 5: _.label++; y = op[1]; op = [0]; continue;
              case 7: op = _.ops.pop(); _.trys.pop(); continue;
              default:
                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                  if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                  if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                  if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                  if (t[2]) _.ops.pop();
                  _.trys.pop(); continue;
          }
          op = body.call(thisArg, _);
      } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
      if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
  }
}

var __createBinding = Object.create ? (function(o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  var desc = Object.getOwnPropertyDescriptor(m, k);
  if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
  }
  Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  o[k2] = m[k];
});

function __exportStar(m, o) {
  for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);
}

function __values(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m) return m.call(o);
  if (o && typeof o.length === "number") return {
      next: function () {
          if (o && i >= o.length) o = void 0;
          return { value: o && o[i++], done: !o };
      }
  };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}

function __read(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m) return o;
  var i = m.call(o), r, ar = [], e;
  try {
      while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
  }
  catch (error) { e = { error: error }; }
  finally {
      try {
          if (r && !r.done && (m = i["return"])) m.call(i);
      }
      finally { if (e) throw e.error; }
  }
  return ar;
}

/** @deprecated */
function __spread() {
  for (var ar = [], i = 0; i < arguments.length; i++)
      ar = ar.concat(__read(arguments[i]));
  return ar;
}

/** @deprecated */
function __spreadArrays() {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
  for (var r = Array(s), k = 0, i = 0; i < il; i++)
      for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
          r[k] = a[j];
  return r;
}

function __spreadArray(to, from, pack) {
  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
      if (ar || !(i in from)) {
          if (!ar) ar = Array.prototype.slice.call(from, 0, i);
          ar[i] = from[i];
      }
  }
  return to.concat(ar || Array.prototype.slice.call(from));
}

function __await(v) {
  return this instanceof __await ? (this.v = v, this) : new __await(v);
}

function __asyncGenerator(thisArg, _arguments, generator) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var g = generator.apply(thisArg, _arguments || []), i, q = [];
  return i = {}, verb("next"), verb("throw"), verb("return", awaitReturn), i[Symbol.asyncIterator] = function () { return this; }, i;
  function awaitReturn(f) { return function (v) { return Promise.resolve(v).then(f, reject); }; }
  function verb(n, f) { if (g[n]) { i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; if (f) i[n] = f(i[n]); } }
  function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
  function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
  function fulfill(value) { resume("next", value); }
  function reject(value) { resume("throw", value); }
  function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
}

function __asyncDelegator(o) {
  var i, p;
  return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
  function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }
}

function __asyncValues(o) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var m = o[Symbol.asyncIterator], i;
  return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
  function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
  function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
}

function __makeTemplateObject(cooked, raw) {
  if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
  return cooked;
};

var __setModuleDefault = Object.create ? (function(o, v) {
  Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
  o["default"] = v;
};

function __importStar(mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
  __setModuleDefault(result, mod);
  return result;
}

function __importDefault(mod) {
  return (mod && mod.__esModule) ? mod : { default: mod };
}

function __classPrivateFieldGet(receiver, state, kind, f) {
  if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
}

function __classPrivateFieldSet(receiver, state, value, kind, f) {
  if (kind === "m") throw new TypeError("Private method is not writable");
  if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
}

function __classPrivateFieldIn(state, receiver) {
  if (receiver === null || (typeof receiver !== "object" && typeof receiver !== "function")) throw new TypeError("Cannot use 'in' operator on non-object");
  return typeof state === "function" ? receiver === state : state.has(receiver);
}

function __addDisposableResource(env, value, async) {
  if (value !== null && value !== void 0) {
    if (typeof value !== "object" && typeof value !== "function") throw new TypeError("Object expected.");
    var dispose, inner;
    if (async) {
      if (!Symbol.asyncDispose) throw new TypeError("Symbol.asyncDispose is not defined.");
      dispose = value[Symbol.asyncDispose];
    }
    if (dispose === void 0) {
      if (!Symbol.dispose) throw new TypeError("Symbol.dispose is not defined.");
      dispose = value[Symbol.dispose];
      if (async) inner = dispose;
    }
    if (typeof dispose !== "function") throw new TypeError("Object not disposable.");
    if (inner) dispose = function() { try { inner.call(this); } catch (e) { return Promise.reject(e); } };
    env.stack.push({ value: value, dispose: dispose, async: async });
  }
  else if (async) {
    env.stack.push({ async: true });
  }
  return value;
}

var _SuppressedError = typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
  var e = new Error(message);
  return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
};

function __disposeResources(env) {
  function fail(e) {
    env.error = env.hasError ? new _SuppressedError(e, env.error, "An error was suppressed during disposal.") : e;
    env.hasError = true;
  }
  function next() {
    while (env.stack.length) {
      var rec = env.stack.pop();
      try {
        var result = rec.dispose && rec.dispose.call(rec.value);
        if (rec.async) return Promise.resolve(result).then(next, function(e) { fail(e); return next(); });
      }
      catch (e) {
          fail(e);
      }
    }
    if (env.hasError) throw env.error;
  }
  return next();
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  __extends,
  __assign,
  __rest,
  __decorate,
  __param,
  __metadata,
  __awaiter,
  __generator,
  __createBinding,
  __exportStar,
  __values,
  __read,
  __spread,
  __spreadArrays,
  __spreadArray,
  __await,
  __asyncGenerator,
  __asyncDelegator,
  __asyncValues,
  __makeTemplateObject,
  __importStar,
  __importDefault,
  __classPrivateFieldGet,
  __classPrivateFieldSet,
  __classPrivateFieldIn,
  __addDisposableResource,
  __disposeResources,
});


/***/ }),

/***/ "./node_modules/whatwg-fetch/fetch.js":
/*!********************************************!*\
  !*** ./node_modules/whatwg-fetch/fetch.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DOMException: () => (/* binding */ DOMException),
/* harmony export */   Headers: () => (/* binding */ Headers),
/* harmony export */   Request: () => (/* binding */ Request),
/* harmony export */   Response: () => (/* binding */ Response),
/* harmony export */   fetch: () => (/* binding */ fetch)
/* harmony export */ });
var support = {
  searchParams: 'URLSearchParams' in self,
  iterable: 'Symbol' in self && 'iterator' in Symbol,
  blob:
    'FileReader' in self &&
    'Blob' in self &&
    (function() {
      try {
        new Blob()
        return true
      } catch (e) {
        return false
      }
    })(),
  formData: 'FormData' in self,
  arrayBuffer: 'ArrayBuffer' in self
}

function isDataView(obj) {
  return obj && DataView.prototype.isPrototypeOf(obj)
}

if (support.arrayBuffer) {
  var viewClasses = [
    '[object Int8Array]',
    '[object Uint8Array]',
    '[object Uint8ClampedArray]',
    '[object Int16Array]',
    '[object Uint16Array]',
    '[object Int32Array]',
    '[object Uint32Array]',
    '[object Float32Array]',
    '[object Float64Array]'
  ]

  var isArrayBufferView =
    ArrayBuffer.isView ||
    function(obj) {
      return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1
    }
}

function normalizeName(name) {
  if (typeof name !== 'string') {
    name = String(name)
  }
  if (/[^a-z0-9\-#$%&'*+.^_`|~!]/i.test(name) || name === '') {
    throw new TypeError('Invalid character in header field name')
  }
  return name.toLowerCase()
}

function normalizeValue(value) {
  if (typeof value !== 'string') {
    value = String(value)
  }
  return value
}

// Build a destructive iterator for the value list
function iteratorFor(items) {
  var iterator = {
    next: function() {
      var value = items.shift()
      return {done: value === undefined, value: value}
    }
  }

  if (support.iterable) {
    iterator[Symbol.iterator] = function() {
      return iterator
    }
  }

  return iterator
}

function Headers(headers) {
  this.map = {}

  if (headers instanceof Headers) {
    headers.forEach(function(value, name) {
      this.append(name, value)
    }, this)
  } else if (Array.isArray(headers)) {
    headers.forEach(function(header) {
      this.append(header[0], header[1])
    }, this)
  } else if (headers) {
    Object.getOwnPropertyNames(headers).forEach(function(name) {
      this.append(name, headers[name])
    }, this)
  }
}

Headers.prototype.append = function(name, value) {
  name = normalizeName(name)
  value = normalizeValue(value)
  var oldValue = this.map[name]
  this.map[name] = oldValue ? oldValue + ', ' + value : value
}

Headers.prototype['delete'] = function(name) {
  delete this.map[normalizeName(name)]
}

Headers.prototype.get = function(name) {
  name = normalizeName(name)
  return this.has(name) ? this.map[name] : null
}

Headers.prototype.has = function(name) {
  return this.map.hasOwnProperty(normalizeName(name))
}

Headers.prototype.set = function(name, value) {
  this.map[normalizeName(name)] = normalizeValue(value)
}

Headers.prototype.forEach = function(callback, thisArg) {
  for (var name in this.map) {
    if (this.map.hasOwnProperty(name)) {
      callback.call(thisArg, this.map[name], name, this)
    }
  }
}

Headers.prototype.keys = function() {
  var items = []
  this.forEach(function(value, name) {
    items.push(name)
  })
  return iteratorFor(items)
}

Headers.prototype.values = function() {
  var items = []
  this.forEach(function(value) {
    items.push(value)
  })
  return iteratorFor(items)
}

Headers.prototype.entries = function() {
  var items = []
  this.forEach(function(value, name) {
    items.push([name, value])
  })
  return iteratorFor(items)
}

if (support.iterable) {
  Headers.prototype[Symbol.iterator] = Headers.prototype.entries
}

function consumed(body) {
  if (body.bodyUsed) {
    return Promise.reject(new TypeError('Already read'))
  }
  body.bodyUsed = true
}

function fileReaderReady(reader) {
  return new Promise(function(resolve, reject) {
    reader.onload = function() {
      resolve(reader.result)
    }
    reader.onerror = function() {
      reject(reader.error)
    }
  })
}

function readBlobAsArrayBuffer(blob) {
  var reader = new FileReader()
  var promise = fileReaderReady(reader)
  reader.readAsArrayBuffer(blob)
  return promise
}

function readBlobAsText(blob) {
  var reader = new FileReader()
  var promise = fileReaderReady(reader)
  reader.readAsText(blob)
  return promise
}

function readArrayBufferAsText(buf) {
  var view = new Uint8Array(buf)
  var chars = new Array(view.length)

  for (var i = 0; i < view.length; i++) {
    chars[i] = String.fromCharCode(view[i])
  }
  return chars.join('')
}

function bufferClone(buf) {
  if (buf.slice) {
    return buf.slice(0)
  } else {
    var view = new Uint8Array(buf.byteLength)
    view.set(new Uint8Array(buf))
    return view.buffer
  }
}

function Body() {
  this.bodyUsed = false

  this._initBody = function(body) {
    /*
      fetch-mock wraps the Response object in an ES6 Proxy to
      provide useful test harness features such as flush. However, on
      ES5 browsers without fetch or Proxy support pollyfills must be used;
      the proxy-pollyfill is unable to proxy an attribute unless it exists
      on the object before the Proxy is created. This change ensures
      Response.bodyUsed exists on the instance, while maintaining the
      semantic of setting Request.bodyUsed in the constructor before
      _initBody is called.
    */
    this.bodyUsed = this.bodyUsed
    this._bodyInit = body
    if (!body) {
      this._bodyText = ''
    } else if (typeof body === 'string') {
      this._bodyText = body
    } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
      this._bodyBlob = body
    } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
      this._bodyFormData = body
    } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
      this._bodyText = body.toString()
    } else if (support.arrayBuffer && support.blob && isDataView(body)) {
      this._bodyArrayBuffer = bufferClone(body.buffer)
      // IE 10-11 can't handle a DataView body.
      this._bodyInit = new Blob([this._bodyArrayBuffer])
    } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
      this._bodyArrayBuffer = bufferClone(body)
    } else {
      this._bodyText = body = Object.prototype.toString.call(body)
    }

    if (!this.headers.get('content-type')) {
      if (typeof body === 'string') {
        this.headers.set('content-type', 'text/plain;charset=UTF-8')
      } else if (this._bodyBlob && this._bodyBlob.type) {
        this.headers.set('content-type', this._bodyBlob.type)
      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
        this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8')
      }
    }
  }

  if (support.blob) {
    this.blob = function() {
      var rejected = consumed(this)
      if (rejected) {
        return rejected
      }

      if (this._bodyBlob) {
        return Promise.resolve(this._bodyBlob)
      } else if (this._bodyArrayBuffer) {
        return Promise.resolve(new Blob([this._bodyArrayBuffer]))
      } else if (this._bodyFormData) {
        throw new Error('could not read FormData body as blob')
      } else {
        return Promise.resolve(new Blob([this._bodyText]))
      }
    }

    this.arrayBuffer = function() {
      if (this._bodyArrayBuffer) {
        return consumed(this) || Promise.resolve(this._bodyArrayBuffer)
      } else {
        return this.blob().then(readBlobAsArrayBuffer)
      }
    }
  }

  this.text = function() {
    var rejected = consumed(this)
    if (rejected) {
      return rejected
    }

    if (this._bodyBlob) {
      return readBlobAsText(this._bodyBlob)
    } else if (this._bodyArrayBuffer) {
      return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))
    } else if (this._bodyFormData) {
      throw new Error('could not read FormData body as text')
    } else {
      return Promise.resolve(this._bodyText)
    }
  }

  if (support.formData) {
    this.formData = function() {
      return this.text().then(decode)
    }
  }

  this.json = function() {
    return this.text().then(JSON.parse)
  }

  return this
}

// HTTP methods whose capitalization should be normalized
var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT']

function normalizeMethod(method) {
  var upcased = method.toUpperCase()
  return methods.indexOf(upcased) > -1 ? upcased : method
}

function Request(input, options) {
  options = options || {}
  var body = options.body

  if (input instanceof Request) {
    if (input.bodyUsed) {
      throw new TypeError('Already read')
    }
    this.url = input.url
    this.credentials = input.credentials
    if (!options.headers) {
      this.headers = new Headers(input.headers)
    }
    this.method = input.method
    this.mode = input.mode
    this.signal = input.signal
    if (!body && input._bodyInit != null) {
      body = input._bodyInit
      input.bodyUsed = true
    }
  } else {
    this.url = String(input)
  }

  this.credentials = options.credentials || this.credentials || 'same-origin'
  if (options.headers || !this.headers) {
    this.headers = new Headers(options.headers)
  }
  this.method = normalizeMethod(options.method || this.method || 'GET')
  this.mode = options.mode || this.mode || null
  this.signal = options.signal || this.signal
  this.referrer = null

  if ((this.method === 'GET' || this.method === 'HEAD') && body) {
    throw new TypeError('Body not allowed for GET or HEAD requests')
  }
  this._initBody(body)
}

Request.prototype.clone = function() {
  return new Request(this, {body: this._bodyInit})
}

function decode(body) {
  var form = new FormData()
  body
    .trim()
    .split('&')
    .forEach(function(bytes) {
      if (bytes) {
        var split = bytes.split('=')
        var name = split.shift().replace(/\+/g, ' ')
        var value = split.join('=').replace(/\+/g, ' ')
        form.append(decodeURIComponent(name), decodeURIComponent(value))
      }
    })
  return form
}

function parseHeaders(rawHeaders) {
  var headers = new Headers()
  // Replace instances of \r\n and \n followed by at least one space or horizontal tab with a space
  // https://tools.ietf.org/html/rfc7230#section-3.2
  var preProcessedHeaders = rawHeaders.replace(/\r?\n[\t ]+/g, ' ')
  preProcessedHeaders.split(/\r?\n/).forEach(function(line) {
    var parts = line.split(':')
    var key = parts.shift().trim()
    if (key) {
      var value = parts.join(':').trim()
      headers.append(key, value)
    }
  })
  return headers
}

Body.call(Request.prototype)

function Response(bodyInit, options) {
  if (!options) {
    options = {}
  }

  this.type = 'default'
  this.status = options.status === undefined ? 200 : options.status
  this.ok = this.status >= 200 && this.status < 300
  this.statusText = 'statusText' in options ? options.statusText : ''
  this.headers = new Headers(options.headers)
  this.url = options.url || ''
  this._initBody(bodyInit)
}

Body.call(Response.prototype)

Response.prototype.clone = function() {
  return new Response(this._bodyInit, {
    status: this.status,
    statusText: this.statusText,
    headers: new Headers(this.headers),
    url: this.url
  })
}

Response.error = function() {
  var response = new Response(null, {status: 0, statusText: ''})
  response.type = 'error'
  return response
}

var redirectStatuses = [301, 302, 303, 307, 308]

Response.redirect = function(url, status) {
  if (redirectStatuses.indexOf(status) === -1) {
    throw new RangeError('Invalid status code')
  }

  return new Response(null, {status: status, headers: {location: url}})
}

var DOMException = self.DOMException
try {
  new DOMException()
} catch (err) {
  DOMException = function(message, name) {
    this.message = message
    this.name = name
    var error = Error(message)
    this.stack = error.stack
  }
  DOMException.prototype = Object.create(Error.prototype)
  DOMException.prototype.constructor = DOMException
}

function fetch(input, init) {
  return new Promise(function(resolve, reject) {
    var request = new Request(input, init)

    if (request.signal && request.signal.aborted) {
      return reject(new DOMException('Aborted', 'AbortError'))
    }

    var xhr = new XMLHttpRequest()

    function abortXhr() {
      xhr.abort()
    }

    xhr.onload = function() {
      var options = {
        status: xhr.status,
        statusText: xhr.statusText,
        headers: parseHeaders(xhr.getAllResponseHeaders() || '')
      }
      options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL')
      var body = 'response' in xhr ? xhr.response : xhr.responseText
      setTimeout(function() {
        resolve(new Response(body, options))
      }, 0)
    }

    xhr.onerror = function() {
      setTimeout(function() {
        reject(new TypeError('Network request failed'))
      }, 0)
    }

    xhr.ontimeout = function() {
      setTimeout(function() {
        reject(new TypeError('Network request failed'))
      }, 0)
    }

    xhr.onabort = function() {
      setTimeout(function() {
        reject(new DOMException('Aborted', 'AbortError'))
      }, 0)
    }

    function fixUrl(url) {
      try {
        return url === '' && self.location.href ? self.location.href : url
      } catch (e) {
        return url
      }
    }

    xhr.open(request.method, fixUrl(request.url), true)

    if (request.credentials === 'include') {
      xhr.withCredentials = true
    } else if (request.credentials === 'omit') {
      xhr.withCredentials = false
    }

    if ('responseType' in xhr) {
      if (support.blob) {
        xhr.responseType = 'blob'
      } else if (
        support.arrayBuffer &&
        request.headers.get('Content-Type') &&
        request.headers.get('Content-Type').indexOf('application/octet-stream') !== -1
      ) {
        xhr.responseType = 'arraybuffer'
      }
    }

    request.headers.forEach(function(value, name) {
      xhr.setRequestHeader(name, value)
    })

    if (request.signal) {
      request.signal.addEventListener('abort', abortXhr)

      xhr.onreadystatechange = function() {
        // DONE (success or failure)
        if (xhr.readyState === 4) {
          request.signal.removeEventListener('abort', abortXhr)
        }
      }
    }

    xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit)
  })
}

fetch.polyfill = true

if (!self.fetch) {
  self.fetch = fetch
  self.Headers = Headers
  self.Request = Request
  self.Response = Response
}


/***/ }),

/***/ "./src/BicepReportExtension.tsx":
/*!**************************************!*\
  !*** ./src/BicepReportExtension.tsx ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var azure_devops_extension_sdk__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! azure-devops-extension-sdk */ "./node_modules/azure-devops-extension-sdk/esm/SDK.min.js");
/* harmony import */ var azure_devops_extension_api_Build__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! azure-devops-extension-api/Build */ "./node_modules/azure-devops-extension-api/Build/index.js");
/* harmony import */ var azure_devops_extension_api_Build__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(azure_devops_extension_api_Build__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var azure_devops_ui_Header__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! azure-devops-ui/Header */ "./node_modules/azure-devops-ui/Header.js");
/* harmony import */ var azure_devops_ui_Spinner__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! azure-devops-ui/Spinner */ "./node_modules/azure-devops-ui/Spinner.js");
/* harmony import */ var azure_devops_ui_MessageBar__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! azure-devops-ui/MessageBar */ "./node_modules/azure-devops-ui/MessageBar.js");
/* harmony import */ var azure_devops_ui_Card__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! azure-devops-ui/Card */ "./node_modules/azure-devops-ui/Card.js");
/* harmony import */ var azure_devops_ui_ZeroData__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! azure-devops-ui/ZeroData */ "./node_modules/azure-devops-ui/ZeroData.js");
/* harmony import */ var azure_devops_ui_Core_platformCommon_scss__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! azure-devops-ui/Core/_platformCommon.scss */ "./node_modules/azure-devops-ui/Core/_platformCommon.scss");



// Azure DevOps UI Components





// Azure DevOps UI Core and utilities
//import 'azure-devops-ui/Core/override.css';

// Constants for service names
//const PAGE_DATA_SERVICE = 'ms.vss-tfs-web.tfs-page-data-service';
const WEB_BUILD_SERVICE = 'ms.vss-build-web.build-service';
const BicepReportExtension = () => {
    const [loading, setLoading] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(true);
    const [error, setError] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);
    const [reports, setReports] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);
    const [noReports, setNoReports] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);
    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
        initializeExtension();
    }, []);
    const initializeExtension = async () => {
        try {
            // Modern SDK initialization
            await azure_devops_extension_sdk__WEBPACK_IMPORTED_MODULE_1__.init({ loaded: false, applyTheme: true });
            // Load and display reports
            await loadReports();
            // Notify successful load
            await azure_devops_extension_sdk__WEBPACK_IMPORTED_MODULE_1__.notifyLoadSucceeded();
        }
        catch (error) {
            // Handle missing Build ID context gracefully - this is an expected scenario
            // when the extension is accessed outside of a build pipeline context
            if (error instanceof Error && error.message.includes('Required context not available')) {
                setError(error.message);
                // Still notify successful load since the extension loaded correctly,
                // it just can't display reports due to missing context
                await azure_devops_extension_sdk__WEBPACK_IMPORTED_MODULE_1__.notifyLoadSucceeded();
                return;
            }
            // Log unexpected errors to console for debugging
            console.error('Extension initialization failed:', error);
            // Handle other initialization errors that indicate real failures
            let errorMessage = 'Failed to initialize the extension.';
            if (error instanceof Error) {
                if (error.message.includes('SDK')) {
                    errorMessage =
                        'Failed to initialize Azure DevOps SDK. Please ensure this extension is running within Azure DevOps.';
                }
                else {
                    errorMessage = `Extension error: ${error.message}`;
                }
            }
            setError(errorMessage);
            await azure_devops_extension_sdk__WEBPACK_IMPORTED_MODULE_1__.notifyLoadFailed(error instanceof Error ? error : new Error(String(error)));
        }
        finally {
            setLoading(false);
        }
    };
    const loadReports = async () => {
        const webContext = azure_devops_extension_sdk__WEBPACK_IMPORTED_MODULE_1__.getWebContext();
        const config = azure_devops_extension_sdk__WEBPACK_IMPORTED_MODULE_1__.getConfiguration();
        // Enhanced context validation with detailed error messages
        const errors = [];
        if (!webContext) {
            errors.push('Azure DevOps web context is not available');
        }
        else {
            if (!webContext.project) {
                errors.push('Project context is missing from web context');
            }
        }
        // Try multiple approaches to get the Build ID
        let buildId;
        let buildIdSource = '';
        // Method 1: From BuildPageDataService (primary method for build summary pages)
        try {
            const buildPageService = await azure_devops_extension_sdk__WEBPACK_IMPORTED_MODULE_1__.getService(azure_devops_extension_api_Build__WEBPACK_IMPORTED_MODULE_2__.BuildServiceIds.BuildPageDataService);
            const buildPageData = await buildPageService.getBuildPageData();
            if (buildPageData) {
                if (buildPageData.build) {
                    buildId = buildPageData.build.id;
                    buildIdSource = 'build page data service';
                    console.log('Build ID obtained from BuildPageDataService:', buildPageData.build.id);
                }
                else {
                    // Send a log with all the build page data written out to the console
                    console.log('Build ID is not available in BuildPageDataService.');
                    console.log(`Build Page Data:\n${JSON.stringify(buildPageData, null, 2)}`);
                    errors.push('Build ID is not available in BuildPageDataService.');
                }
            }
            else {
                console.log('Build page data is not available.');
                errors.push('Build page data is not available.');
            }
        }
        catch (error) {
            console.log('Failed to get build page data service:', error);
            errors.push('Failed to get build page data service.');
        }
        // Method 2: From page context navigation
        if (buildId === undefined) {
            try {
                const pageContext = azure_devops_extension_sdk__WEBPACK_IMPORTED_MODULE_1__.getPageContext();
                if (pageContext && pageContext.navigation && pageContext.navigation.currentBuild) {
                    buildId = pageContext.navigation.currentBuild.id;
                    buildIdSource = 'page context navigation';
                }
                else {
                    console.log('Build ID is not available from page context navigation');
                    errors.push('Build ID is not available from page context navigation.');
                }
            }
            catch (error) {
                console.log('Failed to get build ID from page context navigation:', error);
                errors.push('Failed to get build ID from page context navigation.');
            }
        }
        // Method 3: From configuration (standard approach)
        if (buildId === undefined) {
            if (config && config.buildId) {
                if (config.buildId !== undefined) {
                    buildId = parseInt(config.buildId);
                    buildIdSource = 'configuration';
                }
                else {
                    console.log('Build ID is not available from configuration');
                    errors.push('Build ID is not available from configuration.');
                }
            }
            else {
                console.log('Build ID is not available from configuration');
                errors.push('Build ID is not available from configuration.');
            }
        }
        // Method 4: From URL parameters (fallback for build result tabs)
        if (buildId === undefined) {
            try {
                const urlParams = new URLSearchParams(window.location.search);
                const buildIdFromUrl = urlParams.get('buildId');
                if (buildIdFromUrl) {
                    console.log('Extracting build ID from URL parameters:', buildIdFromUrl);
                    buildId = parseInt(buildIdFromUrl);
                    buildIdSource = 'URL parameters';
                }
                else {
                    console.log('Build ID is not available from URL parameters');
                    errors.push('Build ID is not available from URL parameters.');
                }
            }
            catch (error) {
                console.log('Failed to extract build ID from URL:', error);
                errors.push('Failed to extract build ID from URL parameters.');
            }
        }
        if (buildId === undefined) {
            errors.push('Build ID is not available from any source (configuration, URL, or page context)');
        }
        if (errors.length > 0) {
            const detailedError = `Required context not available. Missing:\n\t${errors.join('\n\t')}\n` +
                `This extension must be used within an Azure DevOps build pipeline tab.\n` +
                `Debug info: Current URL: ${window.location.href}\n` +
                `Configuration: ${JSON.stringify(config)}\n` +
                `Web context project: ${webContext?.project?.id || 'undefined'}`;
            throw new Error(detailedError);
        }
        else {
            console.log(`Build ID obtained from ${buildIdSource}: ${buildId}`);
        }
        if (buildId !== undefined) {
            try {
                const buildService = (await azure_devops_extension_sdk__WEBPACK_IMPORTED_MODULE_1__.getService(WEB_BUILD_SERVICE));
                // Add proper null checking for the build service
                if (!buildService) {
                    throw new Error(`Build service is not available. The service '${WEB_BUILD_SERVICE}' could not be loaded. ` +
                        `This may occur when:\n` +
                        `- The extension is not running in a proper Azure DevOps build context\n` +
                        `- The required permissions are missing\n` +
                        `- The Azure DevOps SDK version is incompatible\n` +
                        `Please ensure this extension is accessed from a build pipeline results page.`);
                }
                // Verify the buildService has the required methods
                if (typeof buildService.getBuildAttachments !== 'function') {
                    throw new Error(`Build service is missing required method 'getBuildAttachments'. ` +
                        `Service object: ${JSON.stringify(Object.keys(buildService || {}))}`);
                }
                const attachments = await buildService.getBuildAttachments(webContext.project.id, buildId, 'bicepwhatifreport');
                const reportAttachments = attachments.filter(att => att.name.startsWith('md/'));
                if (reportAttachments.length === 0) {
                    setNoReports(true);
                    return;
                }
                await displayReports(reportAttachments, webContext.project.id, buildId, buildService);
            }
            catch (error) {
                throw new Error(`Failed to load Bicep What-If reports: ${error instanceof Error ? error.message : String(error)}`);
            }
        }
    };
    const displayReports = async (attachments, projectId, buildId, buildService) => {
        const reportPromises = attachments.map(async (attachment) => {
            try {
                const content = await buildService.getAttachment(projectId, buildId, 'bicepwhatifreport', attachment.name);
                return {
                    name: attachment.name,
                    content: content,
                };
            }
            catch (error) {
                console.error('Error loading report:', attachment.name, error);
                return {
                    name: attachment.name,
                    content: '',
                    error: error instanceof Error ? error.message : String(error),
                };
            }
        });
        const loadedReports = await Promise.all(reportPromises);
        setReports(loadedReports);
        // Auto-resize to fit content
        azure_devops_extension_sdk__WEBPACK_IMPORTED_MODULE_1__.resize();
    };
    const sanitizeHtml = (html) => {
        // List of allowed HTML tags and attributes for markdown content
        const allowedTags = [
            'h1',
            'h2',
            'h3',
            'h4',
            'h5',
            'h6',
            'p',
            'br',
            'hr',
            'strong',
            'b',
            'em',
            'i',
            'u',
            's',
            'del',
            'ins',
            'ul',
            'ol',
            'li',
            'blockquote',
            'pre',
            'code',
            'table',
            'thead',
            'tbody',
            'tr',
            'th',
            'td',
            'a',
            'img',
        ];
        const allowedAttributes = {
            a: ['href', 'title'],
            img: ['src', 'alt', 'title', 'width', 'height'],
            th: ['align'],
            td: ['align'],
            table: ['align'],
        };
        // Dangerous URL protocols to block
        const dangerousProtocols = [
            'javascript:',
            'data:',
            'vbscript:',
            'file:',
            'about:',
            'chrome:',
            'chrome-extension:',
            'shell:',
            'ftp:',
            'jar:',
        ];
        // Create a temporary div to parse the HTML
        const tempDiv = document.createElement('div');
        tempDiv.innerHTML = html;
        // Recursively clean the elements
        const cleanElement = (element) => {
            const children = Array.from(element.children);
            for (const child of children) {
                const tagName = child.tagName.toLowerCase();
                if (!allowedTags.includes(tagName)) {
                    // Remove disallowed tags but keep their text content
                    const textNode = document.createTextNode(child.textContent || '');
                    child.parentNode?.replaceChild(textNode, child);
                    continue;
                }
                // Clean attributes
                const attributes = Array.from(child.attributes);
                const allowedAttrs = allowedAttributes[tagName] || [];
                for (const attr of attributes) {
                    const attrName = attr.name.toLowerCase();
                    // Remove any event handler attributes (onclick, onload, onerror, etc.)
                    if (attrName.startsWith('on')) {
                        child.removeAttribute(attr.name);
                        continue;
                    }
                    // Remove any style attributes that could contain expressions
                    if (attrName === 'style') {
                        child.removeAttribute(attr.name);
                        continue;
                    }
                    if (!allowedAttrs.includes(attrName)) {
                        child.removeAttribute(attr.name);
                    }
                    else if (attrName === 'href' || attrName === 'src') {
                        // Enhanced security check for URLs
                        const value = attr.value.toLowerCase().trim();
                        const isDangerous = dangerousProtocols.some(protocol => value.startsWith(protocol) ||
                            value.includes('\t' + protocol) ||
                            value.includes('\n' + protocol) ||
                            value.includes('\r' + protocol) ||
                            value.includes(' ' + protocol));
                        if (isDangerous) {
                            child.removeAttribute(attr.name);
                        }
                    }
                }
                // Recursively clean child elements
                cleanElement(child);
            }
        };
        cleanElement(tempDiv);
        return tempDiv.innerHTML;
    };
    const parseMarkdown = (content) => {
        // Check if marked library is available
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        if (typeof window.marked !== 'undefined') {
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            const parsedHtml = window.marked.parse(content);
            return sanitizeHtml(parsedHtml);
        }
        else {
            // Fallback to plain text
            return content;
        }
    };
    const getDisplayName = (name) => {
        return name.replace('md/', '').replace(/^[0-9]+/g, '');
    };
    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
        // Auto-resize when content changes
        azure_devops_extension_sdk__WEBPACK_IMPORTED_MODULE_1__.resize();
    }, [reports, error, noReports]);
    if (loading) {
        return (react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "flex-grow" },
            react__WEBPACK_IMPORTED_MODULE_0__.createElement(azure_devops_ui_Header__WEBPACK_IMPORTED_MODULE_3__.Header, { title: "Bicep What-If Report", titleSize: azure_devops_ui_Header__WEBPACK_IMPORTED_MODULE_3__.TitleSize.Large }),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "page-content page-content-top" },
                react__WEBPACK_IMPORTED_MODULE_0__.createElement(azure_devops_ui_Spinner__WEBPACK_IMPORTED_MODULE_4__.Spinner, { size: azure_devops_ui_Spinner__WEBPACK_IMPORTED_MODULE_4__.SpinnerSize.large, label: "Loading Bicep What-If reports...", ariaLabel: "Loading Bicep What-If reports" }))));
    }
    if (error) {
        return (react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "flex-grow" },
            react__WEBPACK_IMPORTED_MODULE_0__.createElement(azure_devops_ui_Header__WEBPACK_IMPORTED_MODULE_3__.Header, { title: "Bicep What-If Report", titleSize: azure_devops_ui_Header__WEBPACK_IMPORTED_MODULE_3__.TitleSize.Large }),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "page-content page-content-top" },
                react__WEBPACK_IMPORTED_MODULE_0__.createElement(azure_devops_ui_MessageBar__WEBPACK_IMPORTED_MODULE_5__.MessageBar, { severity: azure_devops_ui_MessageBar__WEBPACK_IMPORTED_MODULE_5__.MessageBarSeverity.Error, messageClassName: "font-family-monospace" }, error))));
    }
    if (noReports) {
        return (react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "flex-grow" },
            react__WEBPACK_IMPORTED_MODULE_0__.createElement(azure_devops_ui_Header__WEBPACK_IMPORTED_MODULE_3__.Header, { title: "Bicep What-If Report", titleSize: azure_devops_ui_Header__WEBPACK_IMPORTED_MODULE_3__.TitleSize.Large }),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "page-content page-content-top" },
                react__WEBPACK_IMPORTED_MODULE_0__.createElement(azure_devops_ui_ZeroData__WEBPACK_IMPORTED_MODULE_7__.ZeroData, { primaryText: "No Bicep What-If reports found", secondaryText: "No Bicep What-If reports found for this build.", imageAltText: "No reports found" }))));
    }
    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "flex-grow" },
        react__WEBPACK_IMPORTED_MODULE_0__.createElement(azure_devops_ui_Header__WEBPACK_IMPORTED_MODULE_3__.Header, { title: "Bicep What-If Report", titleSize: azure_devops_ui_Header__WEBPACK_IMPORTED_MODULE_3__.TitleSize.Large }),
        react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "page-content page-content-top" },
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "flex-column rhythm-vertical-16" }, reports.map((report, index) => (react__WEBPACK_IMPORTED_MODULE_0__.createElement(azure_devops_ui_Card__WEBPACK_IMPORTED_MODULE_6__.Card, { key: index, collapsible: true, collapsed: false, titleProps: {
                    text: getDisplayName(report.name),
                    size: azure_devops_ui_Header__WEBPACK_IMPORTED_MODULE_3__.TitleSize.Medium,
                }, contentProps: {
                    contentPadding: true,
                } }, report.error ? (react__WEBPACK_IMPORTED_MODULE_0__.createElement(azure_devops_ui_MessageBar__WEBPACK_IMPORTED_MODULE_5__.MessageBar, { severity: azure_devops_ui_MessageBar__WEBPACK_IMPORTED_MODULE_5__.MessageBarSeverity.Error, messageClassName: "font-family-monospace" },
                "Error loading report: ",
                report.error)) : (react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "markdown-content", dangerouslySetInnerHTML: {
                    __html: parseMarkdown(report.content),
                } })))))))));
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (BicepReportExtension);


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scriptUrl;
/******/ 		if (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + "";
/******/ 		var document = __webpack_require__.g.document;
/******/ 		if (!scriptUrl && document) {
/******/ 			if (document.currentScript && document.currentScript.tagName.toUpperCase() === 'SCRIPT')
/******/ 				scriptUrl = document.currentScript.src;
/******/ 			if (!scriptUrl) {
/******/ 				var scripts = document.getElementsByTagName("script");
/******/ 				if(scripts.length) {
/******/ 					var i = scripts.length - 1;
/******/ 					while (i > -1 && (!scriptUrl || !/^http(s?):/.test(scriptUrl))) scriptUrl = scripts[i--].src;
/******/ 				}
/******/ 			}
/******/ 		}
/******/ 		// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration
/******/ 		// or pass an empty string ("") and set the __webpack_public_path__ variable from your code to use your own logic.
/******/ 		if (!scriptUrl) throw new Error("Automatic publicPath is not supported in this browser");
/******/ 		scriptUrl = scriptUrl.replace(/^blob:/, "").replace(/#.*$/, "").replace(/\?.*$/, "").replace(/\/[^\/]+$/, "/");
/******/ 		__webpack_require__.p = scriptUrl;
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/jsonp chunk loading */
/******/ 	(() => {
/******/ 		__webpack_require__.b = document.baseURI || self.location.href;
/******/ 		
/******/ 		// object to store loaded and loading chunks
/******/ 		// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 		// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded
/******/ 		var installedChunks = {
/******/ 			"main": 0
/******/ 		};
/******/ 		
/******/ 		// no chunk on demand loading
/******/ 		
/******/ 		// no prefetching
/******/ 		
/******/ 		// no preloaded
/******/ 		
/******/ 		// no HMR
/******/ 		
/******/ 		// no HMR manifest
/******/ 		
/******/ 		// no on chunks loaded
/******/ 		
/******/ 		// no jsonp function
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/nonce */
/******/ 	(() => {
/******/ 		__webpack_require__.nc = undefined;
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry needs to be wrapped in an IIFE because it needs to be in strict mode.
(() => {
"use strict";
/*!********************************!*\
  !*** ./src/BicepReportApp.tsx ***!
  \********************************/
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-dom */ "./node_modules/react-dom/index.js");
/* harmony import */ var _BicepReportExtension__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./BicepReportExtension */ "./src/BicepReportExtension.tsx");



// Initialize React app
document.addEventListener('DOMContentLoaded', () => {
    const container = document.getElementById('react-root');
    if (container) {
        react_dom__WEBPACK_IMPORTED_MODULE_1__.render(react__WEBPACK_IMPORTED_MODULE_0__.createElement(_BicepReportExtension__WEBPACK_IMPORTED_MODULE_2__["default"], null), container);
    }
});

})();

/******/ })()
;