name: Auto-Close Done Issues in Project

on:
  schedule:
    - cron: '0 2 * * *'
  workflow_dispatch:

jobs:
  close_done_issues:
    runs-on: ubuntu-latest
    steps:
      - name: Debug Token Permissions
        run: |
          echo "Testing token permissions..."
          curl -H "Authorization: Bearer ${{ secrets.PROJECTS_TOKEN }}" \
            https://api.github.com/weekendclimber
    steps:
      - name: Close "Done" issues after 1 week in project
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PROJECTS_TOKEN }}
          script: |
            const projectNumber = 3; // CHANGE to your Project number
            const owner = 'weekendclimber'; // Or repo owner
            const repo = 'BicepWhatIfReport';

            // 1. Get the project ID
            const projectQuery = `
              query($owner: String!, $repo: String!, $number: Int!) {
                repository(owner: $owner, name: $repo) {
                  projectV2(number: $number) {
                    id
                    fields(first: 20) {
                      nodes {
                        ... on ProjectV2Field {
                          id
                          name
                        }
                        ... on ProjectV2SingleSelectField {
                          id
                          name
                          options {
                            id
                            name
                          }
                        }
                      }
                    }
                  }
                }
              }
            `;

            const projectData = await github.graphql(projectQuery, {
              owner,
              repo,
              number: projectNumber,
            });
            const project = projectData.organization.projectV2;
            const statusField = project.fields.nodes.find(
              f => f.name.toLowerCase() === 'status'
            );

            const doneOption = statusField.options.find(
              o => o.name === 'Done'
            );
            const closedOption = statusField.options.find(
              o => o.name === 'Closed'
            );

            // 2. Get items in "Done"
            // (For large projects, you may need to paginate)
            const itemsQuery = `
              query($projectId: ID!, $statusFieldId: ID!, $doneOptionId: String!) {
                node(id: $projectId) {
                  ... on ProjectV2 {
                    items(first: 50) {
                      nodes {
                        id
                        content {
                          ... on Issue {
                            number
                            title
                            updatedAt
                          }
                        }
                        fieldValues(first: 20) {
                          nodes {
                            ... on ProjectV2ItemFieldSingleSelectValue {
                              field {
                                ... on ProjectV2FieldCommon {
                                  id
                                  name
                                }
                              }
                              optionId
                              updatedAt
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            `;
            const itemsData = await github.graphql(itemsQuery, {
              projectId: project.id,
              statusFieldId: statusField.id,
              doneOptionId: doneOption.id,
            });

            const now = new Date();
            const oneWeekAgo = new Date(now.getTime() - 7*24*60*60*1000);

            for (const item of itemsData.node.items.nodes) {
              const statusValue = item.fieldValues.nodes.find(
                v => v.field.id === statusField.id && v.optionId === doneOption.id
              );
              if (!statusValue) continue;
              const doneDate = new Date(statusValue.updatedAt);
              if (doneDate < oneWeekAgo) {
                // 3. Update status to Closed
                const mutation = `
                  mutation($itemId: ID!, $fieldId: ID!, $optionId: String!) {
                    updateProjectV2ItemFieldValue(
                      input: {
                        projectId: "${project.id}"
                        itemId: $itemId
                        fieldId: $fieldId
                        value: { singleSelectOptionId: $optionId }
                      }
                    ) {
                      projectV2Item {
                        id
                      }
                    }
                  }
                `;
                await github.graphql(mutation, {
                  itemId: item.id,
                  fieldId: statusField.id,
                  optionId: closedOption.id,
                });
                console.log(
                  `Closed issue #${item.content.number} - "${item.content.title}"`
                );
              }
            }
