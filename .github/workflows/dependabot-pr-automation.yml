name: Handle Dependabot PRs

on:
  pull_request:
    types: [opened]
    branches:
      - main  # Change if your default branch is different

permissions:
  contents: read
  pull-requests: write

jobs:
  handle_dependabot_pr:
    if: github.actor == 'dependabot[bot]'
    runs-on: ubuntu-latest
    steps:
      - name: Add PR to project and set priority
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PROJECT_URL: ${{ variables.PROJECT_URL }}
          PR_NODE_ID: ${{ github.event.pull_request.node_id }}
        shell: bash
        run: |
          set -e  # Exit immediately if any command exits with a non-zero status
          set -o pipefail  # Ensure pipelines fail if any command in the pipeline fails
          
          # Extract project number from PROJECT_URL
          PROJECT_NUMBER=$(echo "$PROJECT_URL" | grep -o '/projects/[0-9]\+' | grep -o '[0-9]\+')
          if [[ -z "$PROJECT_NUMBER" ]]; then
            echo "Error: Could not extract project number from PROJECT_URL: $PROJECT_URL"
            exit 1
          fi
          
          # Get repository owner and name
          REPO_OWNER="${{ github.repository_owner }}"
          REPO_NAME="${{ github.event.repository.name }}"
          
          echo "Adding PR to project $PROJECT_NUMBER for $REPO_OWNER/$REPO_NAME"
          
          # First, get the project ID using GraphQL API
          PROJECT_QUERY='{
            "query": "query($owner: String!, $repo: String!, $number: Int!) { repository(owner: $owner, name: $repo) { projectV2(number: $number) { id fields(first: 20) { nodes { ... on ProjectV2Field { id name } ... on ProjectV2SingleSelectField { id name options { id name } } } } } } }",
            "variables": {
              "owner": "'$REPO_OWNER'",
              "repo": "'$REPO_NAME'",
              "number": '$PROJECT_NUMBER'
            }
          }'
          
          # Make API call to get project information
          PROJECT_RESPONSE=$(curl -s -w "\n%{http_code}" -X POST \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "Content-Type: application/json" \
            -d "$PROJECT_QUERY" \
            https://api.github.com/graphql)
          
          # Extract HTTP status code and response body
          HTTP_STATUS=$(echo "$PROJECT_RESPONSE" | tail -n1)
          PROJECT_DATA=$(echo "$PROJECT_RESPONSE" | sed '$d')
          
          # Check HTTP response code
          if [[ "$HTTP_STATUS" != "200" ]]; then
            echo "Error: GitHub API request failed with status $HTTP_STATUS"
            echo "Response: $PROJECT_DATA"
            exit 1
          fi
          
          # Parse project ID and Priority field info from response
          PROJECT_ID=$(echo "$PROJECT_DATA" | jq -r '.data.repository.projectV2.id // empty')
          if [[ -z "$PROJECT_ID" || "$PROJECT_ID" == "null" ]]; then
            echo "Error: Could not extract project ID from API response"
            echo "Response: $PROJECT_DATA"
            exit 1
          fi
          
          # Find Priority field and High option
          PRIORITY_FIELD=$(echo "$PROJECT_DATA" | jq -r '.data.repository.projectV2.fields.nodes[] | select(.name == "Priority") | .id // empty')
          HIGH_OPTION_ID=$(echo "$PROJECT_DATA" | jq -r '.data.repository.projectV2.fields.nodes[] | select(.name == "Priority") | .options[]? | select(.name == "High") | .id // empty')
          
          if [[ -z "$PRIORITY_FIELD" ]]; then
            echo "Warning: Priority field not found in project. Adding PR without setting priority."
          fi
          
          # Add PR to project
          ADD_TO_PROJECT_MUTATION='{
            "query": "mutation($projectId: ID!, $contentId: ID!) { addProjectV2ItemByContentId(input: { projectId: $projectId, contentId: $contentId }) { item { id } } }",
            "variables": {
              "projectId": "'$PROJECT_ID'",
              "contentId": "'$PR_NODE_ID'"
            }
          }'
          
          # Make API call to add PR to project
          ADD_RESPONSE=$(curl -s -w "\n%{http_code}" -X POST \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "Content-Type: application/json" \
            -d "$ADD_TO_PROJECT_MUTATION" \
            https://api.github.com/graphql)
          
          # Extract HTTP status code and response body
          ADD_HTTP_STATUS=$(echo "$ADD_RESPONSE" | tail -n1)
          ADD_DATA=$(echo "$ADD_RESPONSE" | sed '$d')
          
          # Check HTTP response code
          if [[ "$ADD_HTTP_STATUS" != "200" ]]; then
            echo "Error: Failed to add PR to project. HTTP status: $ADD_HTTP_STATUS"
            echo "Response: $ADD_DATA"
            exit 1
          fi
          
          # Parse item ID from response
          ITEM_ID=$(echo "$ADD_DATA" | jq -r '.data.addProjectV2ItemByContentId.item.id // empty')
          if [[ -z "$ITEM_ID" || "$ITEM_ID" == "null" ]]; then
            echo "Error: Could not extract item ID from add-to-project response"
            echo "Response: $ADD_DATA"
            exit 1
          fi
          
          echo "Successfully added PR to project. Item ID: $ITEM_ID"
          
          # Set Priority to High if priority field exists
          if [[ -n "$PRIORITY_FIELD" && -n "$HIGH_OPTION_ID" ]]; then
            SET_PRIORITY_MUTATION='{
              "query": "mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $optionId: String!) { updateProjectV2ItemFieldValue(input: { projectId: $projectId, itemId: $itemId, fieldId: $fieldId, value: { singleSelectOptionId: $optionId } }) { projectV2Item { id } } }",
              "variables": {
                "projectId": "'$PROJECT_ID'",
                "itemId": "'$ITEM_ID'",
                "fieldId": "'$PRIORITY_FIELD'",
                "optionId": "'$HIGH_OPTION_ID'"
              }
            }'
            
            # Make API call to set priority
            PRIORITY_RESPONSE=$(curl -s -w "\n%{http_code}" -X POST \
              -H "Authorization: Bearer $GITHUB_TOKEN" \
              -H "Content-Type: application/json" \
              -d "$SET_PRIORITY_MUTATION" \
              https://api.github.com/graphql)
            
            # Extract HTTP status code and response body
            PRIORITY_HTTP_STATUS=$(echo "$PRIORITY_RESPONSE" | tail -n1)
            PRIORITY_DATA=$(echo "$PRIORITY_RESPONSE" | sed '$d')
            
            # Check HTTP response code
            if [[ "$PRIORITY_HTTP_STATUS" != "200" ]]; then
              echo "Warning: Failed to set priority. HTTP status: $PRIORITY_HTTP_STATUS"
              echo "Response: $PRIORITY_DATA"
              # Don't exit here as the main functionality (adding to project) succeeded
            else
              echo "Successfully set priority to High"
            fi
          else
            echo "Warning: Priority field or High option not found. Skipping priority setting."
          fi
          
          echo "Dependabot PR automation completed successfully"
